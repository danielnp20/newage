using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using NewAge.DTO.Negocio;
using NewAge.ADO;
using NewAge.DTO.Reportes;
using NewAge.DTO.Resultados;
using NewAge.DTO.UDT;
using NewAge.Librerias.Project;
using System.Threading;
using NewAge.Librerias.ExceptionHandler;
using SentenceTransformer;
using System.Data;
using System.Globalization;
using System.IO;

namespace NewAge.Negocio
{
    public class ModuloCartera : ModuloBase
    {
        #region Variables

        #region DALs

        private DAL_Cartera _dal_Cartera = null;
        private DAL_ccCarteraMvto _dal_ccCarteraMvto = null;
        private DAL_ccCierreDia _dal_ccCierreDia = null;
        private DAL_ccCierreMes _dal_ccCierreMes = null;
        private DAL_ccCJHistorico _dal_ccCJHistorico = null;
        private DAL_ccCJHistoricoAbonos _dal_ccCJHistoricoAbonos = null;
        private DAL_ccComisionDeta _dal_ccComisionDeta = null;
        private DAL_ccComisionDocu _dal_ccComisionDocu = null;
        private DAL_ccComponenteEdad _dal_ccComponenteEdad = null;
        private DAL_ccCompraDocu _dal_ccCompraDocu = null;
        private DAL_ccCompradorFinalDeta _dal_ccCompradorFinalDeta = null;
        private DAL_ccCompradorFinalDocu _dal_ccCompradorFinalDocu = null;
        private DAL_ccCreditoComponentes _dal_ccCreditoComponentes = null;
        private DAL_ccCreditoCompraCartera _dal_ccCreditoCompraCartera = null;
        private DAL_ccCreditoDocu _dal_ccCreditoDocu = null;
        private DAL_ccCreditoPlanPagos _dal_ccCreditoPlanPagos = null;
        private DAL_ccCreditoPagos _dal_ccCreditoPagos = null;
        private DAL_ccEstadoCuentaComponentes _dal_ccEstadoCuentaComponentes = null;
        private DAL_ccEstadoCuentaHistoria _dal_ccEstadoCuentaHistoria = null;
        private DAL_ccEstadoCuentaCuotas _dal_ccEstadoCuentaCuotas = null;
        private DAL_ccFlujoCesionDeta _dal_ccFlujoCesionDeta = null;
        private DAL_ccFlujoCesionDocu _dal_ccFlujoCesionDocu = null;
        private DAL_ccIncorporacionDeta _dal_ccIncorporacionDeta = null;
        private DAL_ccNominaDeta _dal_ccNominaDeta = null;
        private DAL_ccNominaPreliminar _dal_ccNominaPreliminar = null;
        private DAL_ccLineaComponenteMonto _dal_ccLineaComponenteMonto = null;
        private DAL_ccLineaComponentePlazo _dal_ccLineaComponentePlazo = null;
        private DAL_ccPolizaEstado _dal_ccPolizaEstado = null;
        private DAL_ccRecompraDeta _dal_ccRecompraDeta = null;
        private DAL_ccRecompraDocu _dal_ccRecompraDocu = null;
        private DAL_ccReincorporacionDeta _dal_ccReincorporacionDeta = null;
        private DAL_ccReintegroClienteDeta _dal_ccReintegroClienteDeta = null;
        private DAL_ccSolicitudDocu _dal_ccSolicitudDocu = null;
        private DAL_ccSolicitudAnexo _dal_ccSolicitudAnexo = null;
        private DAL_ccSolicitudComponentes _dal_ccSolicitudComponentes = null;
        private DAL_ccSolicitudCompraCartera _dal_ccSolicitudCompraCartera = null;
        private DAL_ccSolicitudCtasExtra _dal_ccSolicitudCtasExtra = null;
        private DAL_ccSolicitudDetallePago _dal_ccSolicitudDetallePago = null;
        private DAL_ccSolicitudDevolucion _dal_ccSolicitudDevolucion = null;
        private DAL_ccSolicitudPlanPagos _dal_ccSolicitudPlanPagos = null;
        private DAL_ccTareaChequeoLista _dal_ccTareaChequeoLista = null;
        private DAL_ccValorAutorizado _dal_ccValorAutorizado = null;
        private DAL_ccVentaDeta _dal_ccVentaDeta = null;
        private DAL_ccVentaDocu _dal_ccVentaDocu = null;
        private DAL_Comprobante _dal_Comprobante = null;
        private DAL_MasterSimple _dal_MasterSimple = null;
        private DAL_MasterComplex _dal_MasterComplex = null;
        private DAL_ReportesCartera _dal_ReportesCartera = null;
        private DAL_glActividadEstado _dal_TareaNumeroDoc = null;
        private DAL_ccSolicitudDevolucionDeta _dal_ccSolicitudDevDeta = null;
        private DAL_drSolicitudDatosChequeados _dal_DatosChequeados = null;
        private DAL_ccHistoricoGestionCobranza _dal_ccHistoricoGestionCob = null;
        private DAL_ccSolicitudDataCreditoDatos _dal_ccDatacreditoDatos = null;
        private DAL_ccSolicitudDataCreditoScore _dal_ccDatacreditoScore = null;
        private DAL_ccSolicitudDataCreditoUbica _dal_ccDatacreditoUbica = null;
        private DAL_ccSolicitudDataCreditoQuanto _dal_ccDatacreditoQuanto = null;
        private DAL_drSolicitudDatosPersonales _dal_drSolicitudDatosPerson = null;
        private DAL_glDocumentoChequeoLista _dal_glDocChequeoLista = null;
        private DAL_Perfil _dal_Perfil = null;
        private DAL_drSolicitudDatosPersonales _dal_SolicitaDatosPersonales = null;
        private DAL_drSolicitudDatosVehiculo _dal_SolicitaDatosVehiculo = null;
        private DAL_drSolicitudDatosOtros _dal_SolicitaDatosOtros = null;

        #endregion

        #region Modulos

        private ModuloAplicacion _moduloAplicacion = null;
        private ModuloGlobal _moduloGlobal = null;
        private ModuloCarteraFin _moduloCarteraFin = null;
        private ModuloContabilidad _moduloContabilidad = null;
        private ModuloCuentasXPagar _moduloCxP = null;
        private ModuloTesoreria _moduloTesoreria = null;
        private ModuloFacturacion _moduloFacturacion = null;
        private ModuloDecisorRiesgo _moduloDecisor = null;
        private DAL_ccSolicitudDocu _dalsolDocu = null;
        #endregion

        #endregion

        /// <summary>
        /// Constructor Modulo Cartera
        /// </summary>
        /// <param name="conn"></param>
        public ModuloCartera(SqlConnection conn, SqlTransaction tx, DTO_glEmpresa emp, int userID, string loggerConn) : base(conn, tx, emp, userID, loggerConn) { }

        #region Cierres

        #region Funciones privadas

        /// <summary>
        /// Asigna al cierre la información de acuerdo a los componentes y movimientos
        /// </summary>
        /// <param name="TipoDato">Tipo de dato para el filtro</param>
        /// <param name="mvto">Registro con la información de los movimientos</param>
        /// <param name="tipos">Información con los tipos de componentes y las posiciones del movimiento</param>
        /// <returns>Retorna el valor que se debe poner</returns>
        private decimal AsignarValorMovimiento_Dia(int TipoDato, DTO_ccCierreDia mvto, Dictionary<int, List<int>> tipos)
        {
            try
            {
                decimal result = 0;
                List<int> filter = new List<int>();
                #region Carga el filtro
                switch (TipoDato)
                {
                    //Nominal
                    case 2:
                        List<int> posCapital = tipos[(int)TipoComponente.CapitalSolicitado];
                        List<int> posCuota = tipos[(int)TipoComponente.ComponenteCuota];
                        filter = posCapital.Union(posCuota).Distinct().ToList();

                        break;

                    //Capital
                    case 3:
                        filter = tipos[(int)TipoComponente.CapitalSolicitado].Distinct().ToList();

                        break;

                    ////Giro
                    //case 4:
                    //    foreach (KeyValuePair<int, List<int>> entry in tipos)
                    //        filter = filter.Union(entry.Value).Distinct().ToList();

                    //    break;

                }
                #endregion

                foreach (int pos in filter)
                {
                    #region Carga el resultado con el valor de la posicion
                    switch (pos)
                    {
                        case 1:
                            if (mvto.ValorDia01.Value.HasValue)
                                result += mvto.ValorDia01.Value.Value;
                            break;
                        case 2:
                            if (mvto.ValorDia02.Value.HasValue)
                                result += mvto.ValorDia02.Value.Value;
                            break;
                        case 3:
                            if (mvto.ValorDia03.Value.HasValue)
                                result += mvto.ValorDia03.Value.Value;
                            break;
                        case 4:
                            if (mvto.ValorDia04.Value.HasValue)
                                result += mvto.ValorDia04.Value.Value;
                            break;
                        case 5:
                            if (mvto.ValorDia05.Value.HasValue)
                                result += mvto.ValorDia05.Value.Value;
                            break;
                        case 6:
                            if (mvto.ValorDia06.Value.HasValue)
                                result += mvto.ValorDia06.Value.Value;
                            break;
                        case 7:
                            if (mvto.ValorDia07.Value.HasValue)
                                result += mvto.ValorDia07.Value.Value;
                            break;
                        case 8:
                            if (mvto.ValorDia08.Value.HasValue)
                                result += mvto.ValorDia08.Value.Value;
                            break;
                        case 9:
                            if (mvto.ValorDia09.Value.HasValue)
                                result += mvto.ValorDia09.Value.Value;
                            break;
                        case 10:
                            if (mvto.ValorDia10.Value.HasValue)
                                result += mvto.ValorDia10.Value.Value;
                            break;
                        case 11:
                            if (mvto.ValorDia11.Value.HasValue)
                                result += mvto.ValorDia11.Value.Value;
                            break;
                        case 12:
                            if (mvto.ValorDia12.Value.HasValue)
                                result += mvto.ValorDia12.Value.Value;
                            break;
                        case 13:
                            if (mvto.ValorDia13.Value.HasValue)
                                result += mvto.ValorDia13.Value.Value;
                            break;
                        case 14:
                            if (mvto.ValorDia14.Value.HasValue)
                                result += mvto.ValorDia14.Value.Value;
                            break;
                        case 15:
                            if (mvto.ValorDia15.Value.HasValue)
                                result += mvto.ValorDia15.Value.Value;
                            break;
                        case 16:
                            if (mvto.ValorDia16.Value.HasValue)
                                result += mvto.ValorDia16.Value.Value;
                            break;
                        case 17:
                            if (mvto.ValorDia17.Value.HasValue)
                                result += mvto.ValorDia17.Value.Value;
                            break;
                        case 18:
                            if (mvto.ValorDia18.Value.HasValue)
                                result += mvto.ValorDia18.Value.Value;
                            break;
                        case 19:
                            if (mvto.ValorDia19.Value.HasValue)
                                result += mvto.ValorDia19.Value.Value;
                            break;
                        case 20:
                            if (mvto.ValorDia20.Value.HasValue)
                                result += mvto.ValorDia20.Value.Value;
                            break;
                    }
                    #endregion
                }

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "AsignarValorMovimiento_Dia");
                throw ex;
            }
        }

        /// <summary>
        /// Realiza el proceso de cierre diario
        /// </summary>
        private DTO_TxResult CerrarDia(SectorCartera sector, DateTime periodo, DateTime fechaCierre, string balanceFunc, Dictionary<int, List<int>> tipos, string keyControl)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;

            base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();
            this._moduloGlobal._mySqlConnectionTx = base._mySqlConnectionTx;
            this._dal_ccCierreDia.MySqlConnectionTx = base._mySqlConnectionTx;

            try
            {
                #region Validacion de Dia Festivo
                Dictionary<string, string> pks = new Dictionary<string, string>();
                bool diaFestivoInd = false;
                pks.Add("Fecha", fechaCierre.ToShortDateString());
                pks.Add("DiasFestivoID", fechaCierre.ToShortDateString());
                DTO_glDiasFestivos festivo = (DTO_glDiasFestivos)this.GetMasterComplexDTO(AppMasters.glDiasFestivos, pks, true);
                diaFestivoInd = festivo != null ? true : false;

                if (!diaFestivoInd)
                    diaFestivoInd = fechaCierre.DayOfWeek == DayOfWeek.Sunday || fechaCierre.DayOfWeek == DayOfWeek.Saturday ? true : false; 
                #endregion

                if (!diaFestivoInd) //Procesa si no es dia festivo
                {
                     #region Carga la info de los movimientos

                    int day = fechaCierre.Day;
                    List<DTO_ccCierreDia> cierresDia = new List<DTO_ccCierreDia>();
                    List<DTO_ccCierreDia> movimientos = _dal_ccCierreDia.DAL_ccCierreDia_GetMovimientos(balanceFunc, fechaCierre);
                    foreach (DTO_ccCierreDia mvto in movimientos)
                    {
                        #region Variables
                        bool isNew = true;
                        DTO_ccCierreDia itemCant = new DTO_ccCierreDia();
                        DTO_ccCierreDia itemVlrNominal = new DTO_ccCierreDia();
                        DTO_ccCierreDia itemVlrCapital = new DTO_ccCierreDia();
                        DTO_ccCierreDia itemVlrGiro = new DTO_ccCierreDia();
                        #endregion
                        #region Revisa si la llave existe
                        List<DTO_ccCierreDia> temp = cierresDia.Where(x =>
                            x.DocumentoID.Value == mvto.DocumentoID.Value &&
                            x.LineaCreditoID.Value == mvto.LineaCreditoID.Value &&
                            x.AsesorID.Value == mvto.AsesorID.Value &&
                            x.CentroPagoID.Value == mvto.CentroPagoID.Value &&
                            x.ZonaID.Value == mvto.ZonaID.Value &&
                            x.Plazo.Value == mvto.Plazo.Value).ToList();
                        #endregion
                        #region Carga / trae el registro

                        if (temp.Count == 0)
                        {
                            #region Nuevas llaves

                            // Cantidad
                            itemCant.Periodo.Value = periodo;
                            itemCant.DocumentoID.Value = mvto.DocumentoID.Value;
                            itemCant.LineaCreditoID.Value = mvto.LineaCreditoID.Value;
                            itemCant.AsesorID.Value = mvto.AsesorID.Value;
                            itemCant.CentroPagoID.Value = mvto.CentroPagoID.Value;
                            itemCant.ZonaID.Value = mvto.ZonaID.Value;
                            itemCant.Plazo.Value = mvto.Plazo.Value;
                            itemCant.TipoDato.Value = 1;
                            // Vlr Nominal
                            itemVlrNominal = ObjectCopier.Clone(itemCant);
                            itemVlrNominal.TipoDato.Value = 2;
                            // Vlr Capital
                            itemVlrCapital = ObjectCopier.Clone(itemCant);
                            itemVlrCapital.TipoDato.Value = 3;
                            // Vlr Giro
                            itemVlrGiro = ObjectCopier.Clone(itemCant);
                            itemVlrGiro.TipoDato.Value = 4;

                            #endregion
                        }
                        else
                        {
                            isNew = false;
                            #region Actualizacion de llave
                            // Cantidad
                            itemCant = temp.Where(x => x.TipoDato.Value.Value == 1).First();
                            // Vlr Nominal
                            itemVlrNominal = temp.Where(x => x.TipoDato.Value.Value == 2).First();
                            // Vlr Capital
                            itemVlrCapital = temp.Where(x => x.TipoDato.Value.Value == 3).First();
                            // Vlr Giro
                            itemVlrGiro = temp.Where(x => x.TipoDato.Value.Value == 4).First();
                            #endregion
                        }
                        #endregion
                        #region Asigna la información al registro
                        decimal sumNominal = this.AsignarValorMovimiento_Dia(2, mvto, tipos);
                        decimal sumCapital = this.AsignarValorMovimiento_Dia(3, mvto, tipos);

                        decimal sumGiro = 0;
                        if (mvto.DocumentoID.Value == AppDocuments.LiquidacionCredito)
                        {
                            DTO_ccCreditoDocu cred = this.GetCreditoByNumeroDoc(mvto.IdentificadorTR.Value.Value);
                            sumGiro = cred.VlrGiro.Value.Value;
                        }

                        #region Carga la info segun el dia
                        switch (day)
                        {
                            case 1:
                                itemCant.ValorDia01.Value = isNew ? 1 : itemCant.ValorDia01.Value.Value + 1;
                                itemVlrNominal.ValorDia01.Value = isNew ? sumNominal : itemVlrNominal.ValorDia01.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia01.Value = isNew ? sumCapital : itemVlrCapital.ValorDia01.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia01.Value = isNew ? sumGiro : itemVlrGiro.ValorDia01.Value.Value + sumGiro;
                                break;
                            case 2:
                                itemCant.ValorDia02.Value = isNew ? 1 : itemCant.ValorDia02.Value.Value + 1;
                                itemVlrNominal.ValorDia02.Value = isNew ? sumNominal : itemVlrNominal.ValorDia02.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia02.Value = isNew ? sumCapital : itemVlrCapital.ValorDia02.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia02.Value = isNew ? sumGiro : itemVlrGiro.ValorDia02.Value.Value + sumGiro;
                                break;
                            case 3:
                                itemCant.ValorDia03.Value = isNew ? 1 : itemCant.ValorDia03.Value.Value + 1;
                                itemVlrNominal.ValorDia03.Value = isNew ? sumNominal : itemVlrNominal.ValorDia03.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia03.Value = isNew ? sumCapital : itemVlrCapital.ValorDia03.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia03.Value = isNew ? sumGiro : itemVlrGiro.ValorDia03.Value.Value + sumGiro;
                                break;
                            case 4:
                                itemCant.ValorDia04.Value = isNew ? 1 : itemCant.ValorDia04.Value.Value + 1;
                                itemVlrNominal.ValorDia04.Value = isNew ? sumNominal : itemVlrNominal.ValorDia04.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia04.Value = isNew ? sumCapital : itemCant.ValorDia04.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia04.Value = isNew ? sumGiro : itemVlrGiro.ValorDia04.Value.Value + sumGiro;
                                break;
                            case 5:
                                itemCant.ValorDia05.Value = isNew ? 1 : itemCant.ValorDia05.Value.Value + 1;
                                itemVlrNominal.ValorDia05.Value = isNew ? sumNominal : itemVlrNominal.ValorDia05.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia05.Value = isNew ? sumCapital : itemVlrCapital.ValorDia05.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia05.Value = isNew ? sumGiro : itemVlrGiro.ValorDia05.Value.Value + sumGiro;
                                break;
                            case 6:
                                itemCant.ValorDia06.Value = isNew ? 1 : itemCant.ValorDia06.Value.Value + 1;
                                itemVlrNominal.ValorDia06.Value = isNew ? sumNominal : itemVlrNominal.ValorDia06.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia06.Value = isNew ? sumCapital : itemVlrCapital.ValorDia06.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia06.Value = isNew ? sumGiro : itemVlrGiro.ValorDia06.Value.Value + sumGiro;
                                break;
                            case 7:
                                itemCant.ValorDia07.Value = isNew ? 1 : itemCant.ValorDia07.Value.Value + 1;
                                itemVlrNominal.ValorDia07.Value = isNew ? sumNominal : itemVlrNominal.ValorDia07.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia07.Value = isNew ? sumCapital : itemVlrCapital.ValorDia07.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia07.Value = isNew ? sumGiro : itemVlrGiro.ValorDia07.Value.Value + sumGiro;
                                break;
                            case 8:
                                itemCant.ValorDia08.Value = isNew ? 1 : itemCant.ValorDia08.Value.Value + 1;
                                itemVlrNominal.ValorDia08.Value = isNew ? sumNominal : itemVlrNominal.ValorDia08.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia08.Value = isNew ? sumCapital : itemVlrCapital.ValorDia08.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia08.Value = isNew ? sumGiro : itemVlrGiro.ValorDia08.Value.Value + sumGiro;
                                break;
                            case 9:
                                itemCant.ValorDia09.Value = isNew ? 1 : itemCant.ValorDia09.Value.Value + 1;
                                itemVlrNominal.ValorDia09.Value = isNew ? sumNominal : itemVlrNominal.ValorDia09.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia09.Value = isNew ? sumCapital : itemVlrCapital.ValorDia09.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia09.Value = isNew ? sumGiro : itemVlrGiro.ValorDia09.Value.Value + sumGiro;
                                break;
                            case 10:
                                itemCant.ValorDia10.Value = isNew ? 1 : itemCant.ValorDia10.Value.Value + 1;
                                itemVlrNominal.ValorDia10.Value = isNew ? sumNominal : itemVlrNominal.ValorDia10.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia10.Value = isNew ? sumCapital : itemVlrCapital.ValorDia10.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia10.Value = isNew ? sumGiro : itemVlrGiro.ValorDia10.Value.Value + sumGiro;
                                break;
                            case 11:
                                itemCant.ValorDia11.Value = isNew ? 1 : itemCant.ValorDia11.Value.Value + 1;
                                itemVlrNominal.ValorDia11.Value = isNew ? sumNominal : itemVlrNominal.ValorDia11.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia11.Value = isNew ? sumCapital : itemVlrCapital.ValorDia11.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia11.Value = isNew ? sumGiro : itemVlrGiro.ValorDia11.Value.Value + sumGiro;
                                break;
                            case 12:
                                itemCant.ValorDia12.Value = isNew ? 1 : itemCant.ValorDia12.Value.Value + 1;
                                itemVlrNominal.ValorDia12.Value = isNew ? sumNominal : itemVlrNominal.ValorDia12.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia12.Value = isNew ? sumCapital : itemVlrCapital.ValorDia12.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia12.Value = isNew ? sumGiro : itemVlrGiro.ValorDia12.Value.Value + sumGiro;
                                break;
                            case 13:
                                itemCant.ValorDia13.Value = isNew ? 1 : itemCant.ValorDia13.Value.Value + 1;
                                itemVlrNominal.ValorDia13.Value = isNew ? sumNominal : itemVlrNominal.ValorDia13.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia13.Value = isNew ? sumCapital : itemVlrCapital.ValorDia13.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia13.Value = isNew ? sumGiro : itemVlrGiro.ValorDia13.Value.Value + sumGiro;
                                break;
                            case 14:
                                itemCant.ValorDia14.Value = isNew ? 1 : itemCant.ValorDia14.Value.Value + 1;
                                itemVlrNominal.ValorDia14.Value = isNew ? sumNominal : itemVlrNominal.ValorDia14.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia14.Value = isNew ? sumCapital : itemVlrCapital.ValorDia14.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia14.Value = isNew ? sumGiro : itemVlrGiro.ValorDia14.Value.Value + sumGiro;
                                break;
                            case 15:
                                itemCant.ValorDia15.Value = isNew ? 1 : itemCant.ValorDia15.Value.Value + 1;
                                itemVlrNominal.ValorDia15.Value = isNew ? sumNominal : itemVlrNominal.ValorDia15.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia15.Value = isNew ? sumCapital : itemCant.ValorDia15.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia15.Value = isNew ? sumGiro : itemVlrGiro.ValorDia15.Value.Value + sumGiro;
                                break;
                            case 16:
                                itemCant.ValorDia16.Value = isNew ? 1 : itemCant.ValorDia16.Value.Value + 1;
                                itemVlrNominal.ValorDia16.Value = isNew ? sumNominal : itemVlrNominal.ValorDia16.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia16.Value = isNew ? sumCapital : itemVlrCapital.ValorDia16.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia16.Value = isNew ? sumGiro : itemVlrGiro.ValorDia16.Value.Value + sumGiro;
                                break;
                            case 17:
                                itemCant.ValorDia17.Value = isNew ? 1 : itemCant.ValorDia17.Value.Value + 1;
                                itemVlrNominal.ValorDia17.Value = isNew ? sumNominal : itemVlrNominal.ValorDia17.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia17.Value = isNew ? sumCapital : itemVlrCapital.ValorDia17.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia17.Value = isNew ? sumGiro : itemVlrGiro.ValorDia17.Value.Value + sumGiro;
                                break;
                            case 18:
                                itemCant.ValorDia18.Value = isNew ? 1 : itemCant.ValorDia18.Value.Value + 1;
                                itemVlrNominal.ValorDia18.Value = isNew ? sumNominal : itemVlrNominal.ValorDia18.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia18.Value = isNew ? sumCapital : itemVlrCapital.ValorDia18.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia18.Value = isNew ? sumGiro : itemVlrGiro.ValorDia18.Value.Value + sumGiro;
                                break;
                            case 19:
                                itemCant.ValorDia19.Value = isNew ? 1 : itemCant.ValorDia19.Value.Value + 1;
                                itemVlrNominal.ValorDia19.Value = isNew ? sumNominal : itemVlrNominal.ValorDia19.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia19.Value = isNew ? sumCapital : itemVlrCapital.ValorDia19.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia19.Value = isNew ? sumGiro : itemVlrGiro.ValorDia19.Value.Value + sumGiro;
                                break;
                            case 20:
                                itemCant.ValorDia20.Value = isNew ? 1 : itemCant.ValorDia20.Value.Value + 1;
                                itemVlrNominal.ValorDia20.Value = isNew ? sumNominal : itemVlrNominal.ValorDia20.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia20.Value = isNew ? sumCapital : itemVlrCapital.ValorDia20.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia20.Value = isNew ? sumGiro : itemVlrGiro.ValorDia20.Value.Value + sumGiro;
                                break;
                            case 21:
                                itemCant.ValorDia21.Value = isNew ? 1 : itemCant.ValorDia21.Value.Value + 1;
                                itemVlrNominal.ValorDia21.Value = isNew ? sumNominal : itemVlrNominal.ValorDia21.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia21.Value = isNew ? sumCapital : itemVlrCapital.ValorDia21.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia21.Value = isNew ? sumGiro : itemVlrGiro.ValorDia21.Value.Value + sumGiro;
                                break;
                            case 22:
                                itemCant.ValorDia22.Value = isNew ? 1 : itemCant.ValorDia22.Value.Value + 1;
                                itemVlrNominal.ValorDia22.Value = isNew ? sumNominal : itemVlrNominal.ValorDia22.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia22.Value = isNew ? sumCapital : itemVlrCapital.ValorDia22.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia22.Value = isNew ? sumGiro : itemVlrGiro.ValorDia22.Value.Value + sumGiro;
                                break;
                            case 23:
                                itemCant.ValorDia23.Value = isNew ? 1 : itemCant.ValorDia23.Value.Value + 1;
                                itemVlrNominal.ValorDia23.Value = isNew ? sumNominal : itemVlrNominal.ValorDia23.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia23.Value = isNew ? sumCapital : itemVlrCapital.ValorDia23.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia23.Value = isNew ? sumGiro : itemVlrGiro.ValorDia23.Value.Value + sumGiro;
                                break;
                            case 24:
                                itemCant.ValorDia24.Value = isNew ? 1 : itemCant.ValorDia24.Value.Value + 1;
                                itemVlrNominal.ValorDia24.Value = isNew ? sumNominal : itemVlrNominal.ValorDia24.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia24.Value = isNew ? sumCapital : itemCant.ValorDia24.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia24.Value = isNew ? sumGiro : itemVlrGiro.ValorDia24.Value.Value + sumGiro;
                                break;
                            case 25:
                                itemCant.ValorDia25.Value = isNew ? 1 : itemCant.ValorDia25.Value.Value + 1;
                                itemVlrNominal.ValorDia25.Value = isNew ? sumNominal : itemVlrNominal.ValorDia25.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia25.Value = isNew ? sumCapital : itemCant.ValorDia25.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia25.Value = isNew ? sumGiro : itemVlrGiro.ValorDia25.Value.Value + sumGiro;
                                break;
                            case 26:
                                itemCant.ValorDia26.Value = isNew ? 1 : itemCant.ValorDia26.Value.Value + 1;
                                itemVlrNominal.ValorDia26.Value = isNew ? sumNominal : itemVlrNominal.ValorDia26.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia26.Value = isNew ? sumCapital : itemVlrCapital.ValorDia26.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia26.Value = isNew ? sumGiro : itemVlrGiro.ValorDia26.Value.Value + sumGiro;
                                break;
                            case 27:
                                itemCant.ValorDia27.Value = isNew ? 1 : itemCant.ValorDia27.Value.Value + 1;
                                itemVlrNominal.ValorDia27.Value = isNew ? sumNominal : itemVlrNominal.ValorDia27.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia27.Value = isNew ? sumCapital : itemVlrCapital.ValorDia27.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia27.Value = isNew ? sumGiro : itemVlrGiro.ValorDia27.Value.Value + sumGiro;
                                break;
                            case 28:
                                itemCant.ValorDia28.Value = isNew ? 1 : itemCant.ValorDia28.Value.Value + 1;
                                itemVlrNominal.ValorDia28.Value = isNew ? sumNominal : itemVlrNominal.ValorDia28.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia28.Value = isNew ? sumCapital : itemVlrCapital.ValorDia28.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia28.Value = isNew ? sumGiro : itemVlrGiro.ValorDia28.Value.Value + sumGiro;
                                break;
                            case 29:
                                itemCant.ValorDia29.Value = isNew ? 1 : itemCant.ValorDia29.Value.Value + 1;
                                itemVlrNominal.ValorDia29.Value = isNew ? sumNominal : itemVlrNominal.ValorDia29.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia29.Value = isNew ? sumCapital : itemVlrCapital.ValorDia29.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia29.Value = isNew ? sumGiro : itemVlrGiro.ValorDia29.Value.Value + sumGiro;
                                break;
                            case 30:
                                itemCant.ValorDia30.Value = isNew ? 1 : itemCant.ValorDia30.Value.Value + 1;
                                itemVlrNominal.ValorDia30.Value = isNew ? sumNominal : itemVlrNominal.ValorDia30.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia30.Value = isNew ? sumCapital : itemVlrCapital.ValorDia30.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia30.Value = isNew ? sumGiro : itemVlrGiro.ValorDia30.Value.Value + sumGiro;
                                break;
                            case 31:
                                itemCant.ValorDia31.Value = isNew ? 1 : itemCant.ValorDia31.Value.Value + 1;
                                itemVlrNominal.ValorDia31.Value = isNew ? sumNominal : itemVlrNominal.ValorDia31.Value.Value + sumNominal;
                                itemVlrCapital.ValorDia31.Value = isNew ? sumCapital : itemVlrCapital.ValorDia31.Value.Value + sumCapital;
                                itemVlrGiro.ValorDia31.Value = isNew ? sumGiro : itemVlrGiro.ValorDia31.Value.Value + sumGiro;
                                break;
                        }
                        #endregion

                        if (isNew)
                        {
                            cierresDia.Add(itemCant);
                            cierresDia.Add(itemVlrNominal);
                            cierresDia.Add(itemVlrCapital);
                            cierresDia.Add(itemVlrGiro);
                        }
                        #endregion
                    }

                    foreach (DTO_ccCierreDia cierre in cierresDia)
                        this._dal_ccCierreDia.DAL_ccCierreDia_Add(cierre, day);

                    #endregion
               
                    if (sector == SectorCartera.Solidario)
                    {
                        //result = this._dal_ccCierreDia.DAL_ccCierreDia_Procesar(periodo, fechaCierre);
                    }
                    else if (sector == SectorCartera.Financiero)
                        result = this._dal_ccCierreDia.DAL_ccCierreDia_ProcesarFin(periodo, fechaCierre);
                }

                if (result.Result == ResultValue.OK)
                {
                    // Actualiza el dia de cierre en glControl
                    DTO_glControl diaCierreControl = this._moduloGlobal.GetControlByID(Convert.ToInt32(keyControl));
                    diaCierreControl.Data.Value = fechaCierre.Day.ToString();
                    this._moduloGlobal.glControl_Update(diaCierreControl);                    
                }
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Planeacion_CerrarDia");

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                    base._mySqlConnectionTx.Commit();
                else
                    base._mySqlConnectionTx.Rollback();

                this._dal_ccCierreDia.MySqlConnectionTx = null;
                this._moduloGlobal._mySqlConnectionTx = null;
            }

        }

        #endregion

        #region Funciones públicas

        /// <summary>
        /// Realiza el proceso de cierre diario
        /// </summary>
        /// <param name="fechaCierre">Día de cierre</param>
        public DTO_TxResult Cartera_CerrarDia(DateTime? fechaCierre)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;

            try
            {
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCierreDia = (DAL_ccCierreDia)base.GetInstance(typeof(DAL_ccCierreDia), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                #region Variables y validaciones

                //Revisa si tiene que hacer el cierre
                string cierreInd = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CierreDiarioInd);
                if (cierreInd != "1" && fechaCierre != null && !fechaCierre.Value.Day.Equals(DateTime.DaysInMonth(fechaCierre.Value.Year, fechaCierre.Value.Month)))
                    return result;

                //Tipo de cartera
                string sectorStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);
                SectorCartera sector = (SectorCartera)Enum.Parse(typeof(SectorCartera), sectorStr);

                //Variables por empresa
                string balanceFunc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TipoBalanceFuncional);
                string periodoStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoStr);

                //Fecha final 
                int maxDay = DateTime.Now.Day;
                DateTime maxDate = DateTime.Now;
                if (fechaCierre.HasValue)
                {
                    maxDay = fechaCierre.Value.Day;
                }
                else if (periodo.Year != maxDate.Year || periodo.Month != maxDate.Month)
                    maxDay = DateTime.DaysInMonth(periodo.Year, periodo.Month);

                //Fecha inicial
                string diaIniStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DiaUltimoCierre);
                int diaIni = string.IsNullOrWhiteSpace(diaIniStr) ? 1 : Convert.ToInt16(diaIniStr) + 1;

                //Tipos de componentes y ubicacion en movimientos
                Dictionary<int, List<int>> tipos = this._dal_ccCierreDia.DAL_ccCierreDia_GetComponentes();

                #endregion

                if (diaIni <= maxDay)
                {
                    #region Realiza el proceso de cierre por día
                    //Carga las variables
                    DateTime fecha = new DateTime(periodo.Year, periodo.Month, maxDay);
                    string EmpNro = this.Empresa.NumeroControl.Value;
                    string _modId = ((int)ModulesPrefix.cc).ToString();
                    string keyControl = EmpNro + _modId + AppControl.cc_DiaUltimoCierre;

                    result = this.CerrarDia(sector, periodo, fecha, balanceFunc, tipos, keyControl);
                    if (result.Result == ResultValue.NOK)
                    {
                        result.ResultMessage = "No se pudo procesar el cierre del día " + fecha.Day.ToString();
                        return result;
                    }
                    #endregion                        
                }

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Cartera_Proceso_CierreDia");

                return result;
            }
        }

        /// <summary>
        /// Carga la información para hacer un cierre diario
        /// </summary>
        /// <param name="fecha">Fecha de cierre</param>
        /// <param name="balanceFunc">Balance funcional</param>
        /// <returns></returns>
        public List<DTO_ccCierreDia> ccCierreDia_GetAll(DateTime periodo)
        {
            this._dal_ccCierreDia = (DAL_ccCierreDia)base.GetInstance(typeof(DAL_ccCierreDia), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccCierreDia.DAL_ccCierreDia_GetAll(periodo);
        }

        /// <summary>
        /// Realiza el proceso de cierre mensual
        /// </summary>
        public DTO_TxResult Proceso_CierreMesCartera(int documentID, DateTime periodo, Dictionary<Tuple<int, int>, int> batchProgress, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            #region Documentos control y coComprobantes

            //Comprobante general
            DTO_coComprobante coComp = null;
            //Documentos extras
            DTO_glDocumentoControl ctrlCredConsumo = null; // 6.1
            DTO_glDocumentoControl ctrlIntAnt = null; // 6.2
            DTO_glDocumentoControl ctrlPatrimonio = null; // 6.3
            DTO_glDocumentoControl ctrlCuotasPagadas = null; // 6.4
            DTO_glDocumentoControl ctrlIntVencPropia = null; // 6.5
            DTO_glDocumentoControl ctrlProvIntVenc = null; // 6.6
            DTO_glDocumentoControl ctrlCarteraCedida = null; // 6.7
            //Provisiones
            DTO_glDocumentoControl ctrlProv = null; // 6.8
            DTO_coComprobante coCompProv = null;
            //Reversiones
            List<DTO_glDocumentoControl> ctrlsReversion = new List<DTO_glDocumentoControl>();
            List<DTO_coComprobante> coCompsReversion = new List<DTO_coComprobante>();
            #endregion
            try
            {
                #region 1. Variables

                #region Variables generales

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                this._dal_MasterSimple = (DAL_MasterSimple)base.GetInstance(typeof(DAL_MasterSimple), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_MasterComplex = (DAL_MasterComplex)base.GetInstance(typeof(DAL_MasterComplex), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCierreDia = (DAL_ccCierreDia)base.GetInstance(typeof(DAL_ccCierreDia), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCierreMes = (DAL_ccCierreMes)base.GetInstance(typeof(DAL_ccCierreMes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_Cartera = (DAL_Cartera)base.GetInstance(typeof(DAL_Cartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                #endregion
                #region Variables por defecto

                string prefijoDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string proyDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string lugGeoDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string linPresDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string terceroDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TerceroXDefecto);
                string ctoCostoDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string concCargoDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string concSaldoDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoSaldoXDefecto);

                #endregion
                #region Variables de clasificación de crédito
                DTO_glConsulta filtro = new DTO_glConsulta();

                //Componente
                DTO_glConsultaFiltro filtroComponente = new DTO_glConsultaFiltro()
                {
                    CampoFisico = "ProvisionaInd",
                    OperadorFiltro = OperadorFiltro.Igual,
                    ValorFiltro = "1",
                    OperadorSentencia = OperadorSentencia.And
                };
                filtro.Filtros.Add(filtroComponente);

                this._dal_MasterSimple.DocumentID = AppMasters.ccClasificacionCredito;
                long count = this._dal_MasterSimple.DAL_MasterSimple_Count(filtro, null, true);
                List<DTO_MasterBasic> clasificacionesBasic = this._dal_MasterSimple.DAL_MasterSimple_GetPaged(count, 1, filtro, null, true).ToList();
                List<DTO_ccClasificacionCredito> clasificaciones = clasificacionesBasic.Cast<DTO_ccClasificacionCredito>().ToList();

                #endregion
                #region Variables de crédito consumo

                string cuentaCreditoConsumoID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdCredConsumo); // 055
                string cuentaContraCreditoConsumoID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaContraCredConsumo); // 056

                string compCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);

                Dictionary<string, string> pksCapital = new Dictionary<string, string>();
                pksCapital.Add("ComponenteCarteraID", compCapital);
                pksCapital.Add("TipoEstado", ((int)TipoEstadoCartera.Propia).ToString());

                List<string> compsCtaCapital = new List<string>();
                foreach (DTO_ccClasificacionCredito clasif in clasificaciones)
                {
                    pksCapital.Add("ClaseCredito", clasif.ID.Value);
                    DTO_ccComponenteCuenta compCtaCapital = (DTO_ccComponenteCuenta)this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pksCapital, true);

                    if(!string.IsNullOrWhiteSpace(compCtaCapital.CuentaID.Value))
                        compsCtaCapital.Add(compCtaCapital.CuentaID.Value);
                }

                #endregion
                #region Variables de patrimonio Autonomo

                //Variables de patrimonio autonomo
                string indPatrimonioAutonomo = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_IndFiducia); //048
                string terceroFiducia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_TerceroFiduciaria); //049
                string ctaPatrimonioAutonomo = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenPatriAuto); //511
                string ctaPatrimonioAutonomoContra = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenPatriAutoContra); //512
                string ctaPropia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterPropia); //500
                string ctaCedida = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterCedida); //501

                #endregion
                #region Variables de interes anticipado

                string compInteresAnt = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresAnticipado);
                string ctaReintegroIntAnt = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaxPagarReinteIntAnticipado); //536
                List<DTO_ccComponenteCuenta> compsCtaIntAnt = new List<DTO_ccComponenteCuenta>();
                if (!string.IsNullOrWhiteSpace(compInteresAnt))
                {
                    Dictionary<string, string> pksIntAnt = new Dictionary<string, string>();
                    pksIntAnt.Add("ComponenteCarteraID", compInteresAnt);
                    pksIntAnt.Add("TipoEstado", ((int)TipoEstadoCartera.Propia).ToString());

                    foreach (DTO_ccClasificacionCredito clasif in clasificaciones)
                    {
                        pksIntAnt.Add("ClaseCredito", clasif.ID.Value);
                        DTO_ccComponenteCuenta compCtaIntAnt = (DTO_ccComponenteCuenta)this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pksIntAnt, true);

                        compsCtaIntAnt.Add(compCtaIntAnt);
                    }
                }

                #endregion
                #region Variables de cuotas pagadas

                string ctaIngresosRecCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaIngresosXRecuperacionCarteraInt); //543

                #endregion
                #region Variables de provisión interes vencido

                string ctaProvIntVencido = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaGastoProvisionInteresCartera); //542

                #endregion
                #region Variables de provisión

                string codCarteraPropia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);
                string compProv = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComprobanteProviMens);

                //Reclasificación Cartera vencida
                string ctaReclasVencContra_CR = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaProvRevCarteraPropia); // 534
                //Provision cartera vencida
                string ctaProvVencContra_DB = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaGastosProvisionCapital); // 526
                //Prov intereses alto riesgo
                string ctaProvVencOrdenContra_CR = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaOrdenInteresVencidoContrapartida); // 549
                //Gastos de cartera
                string ctaProvGeneral = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaProvGeneralCartera); //539
                string porcProvGeneralStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ProvisionGeneralCartera); //540
                string ctaGastoProvGeneral = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaGastoProvGeneralCartera); //541

                decimal porcProvGeneral = 0;

                #endregion
                #region Variables de saldos cartera cedida

                //Clase de crédito por defecto
                string claseXDef = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ClaseCreditoDefecto); // 043

                //Clase de crédito por defecto
                string coDocPagoFlujosID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocumentoContablePagoFlujos); // 067
                string ctaPagoFlujosID;

                //Cuenta recursos terceros capital
                this._dal_MasterComplex.DocumentID = AppMasters.ccComponenteCuenta;
                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks["ComponenteCarteraID"] = compCapital;
                pks["ClaseCredito"] = claseXDef;
                pks["TipoEstado"] = ((byte)TipoEstadoCartera.Cedida).ToString();

                DTO_MasterComplex complexDTO = this._dal_MasterComplex.DAL_MasterComplex_GetByID(pks, true);
                DTO_ccComponenteCuenta compCta = (DTO_ccComponenteCuenta)complexDTO;
                string ctaRecTercerosID = compCta.CtaRecursosTerceros.Value;

                DTO_coPlanCuenta ctaPagoFlujos;
                DTO_coPlanCuenta ctaRecTerceros;

                #endregion
                #region Variables de interes

                string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);

                Dictionary<string, string> pksInteres = new Dictionary<string, string>();
                pksInteres.Add("ComponenteCarteraID", compInteres);
                pksInteres.Add("TipoEstado", ((int)TipoEstadoCartera.Propia).ToString());

                List<DTO_ccComponenteCuenta> compsCtaInteres = new List<DTO_ccComponenteCuenta>();
                foreach (DTO_ccClasificacionCredito clasif in clasificaciones)
                {
                    pksInteres.Add("ClaseCredito", clasif.ID.Value);
                    DTO_ccComponenteCuenta compCtaInteres = (DTO_ccComponenteCuenta)this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pksInteres, true);

                    compsCtaInteres.Add(compCtaInteres);
                }

                #endregion
                #region Variables de operacion

                string af = this.GetAreaFuncionalByUser();
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                string libroFunc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TipoBalanceFuncional);
                string coDocID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocuCierreMensual);
                DTO_coDocumento coDoc = new DTO_coDocumento();

                // Periodo documento
                DateTime fechaDoc = DateTime.Now;
                if (fechaDoc.Year != periodo.Year || fechaDoc.Month != periodo.Month)
                    fechaDoc = new DateTime(periodo.Year, periodo.Month, DateTime.DaysInMonth(periodo.Year, periodo.Month));

                // Variable para anticipos de cuotas (8)
                string autoCuotasStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_IndAnticipoAutoCuotas);
                bool autoCuota = autoCuotasStr == "1" ? true : false;

                //Variables de cache
                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                DTO_ccClasificacionxRiesgo riesgo;
                DTO_glDocumentoControl ctrlCredito = null;
                Dictionary<string, DTO_glConceptoSaldo> cacheCtas = new Dictionary<string, DTO_glConceptoSaldo>();
                Dictionary<int, DTO_ccClasificacionxRiesgo> cacheRiesgo = new Dictionary<int, DTO_ccClasificacionxRiesgo>();
                Dictionary<int, DTO_glDocumentoControl> cacheCtrls = new Dictionary<int, DTO_glDocumentoControl>();
                Dictionary<int, DTO_ccCreditoDocu> cacheCreditos = new Dictionary<int, DTO_ccCreditoDocu>();
                Dictionary<string, string> cacheClases = new Dictionary<string, string>();

                //Primer Documento del sistema
                string numDoc1Str = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_NumeroDocPrimerDocumento);
                List<int> listExclude = new List<int>();
                #endregion

                #endregion
                #region 2. Validaciones

                #region Valida glControl

                #region General

                //Valida el coDocumento
                if (string.IsNullOrWhiteSpace(coDocID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocuCierreMensual + "&&" + string.Empty;

                    return result;
                }
                else
                    coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocID, true, false);

                //Valida que tenga comprobante
                if (string.IsNullOrWhiteSpace(coDoc.ComprobanteID.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;

                    return result;
                }

                //Codigo cartera propia
                if (string.IsNullOrWhiteSpace(codCarteraPropia))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CodigoCarteraPropia + "&&" + string.Empty;

                    return result;
                }

                //Primer documento
                if (string.IsNullOrWhiteSpace(numDoc1Str))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_NumeroDocPrimerDocumento + "&&" + string.Empty;

                    return result;
                }

                int numDoc1 = Convert.ToInt32(numDoc1Str);
                DTO_glDocumentoControl ctrl1 = this._moduloGlobal.glDocumentoControl_GetByID(numDoc1);
                if (ctrl1 == null)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_NotFoundNumDoc;

                    return result;
                }


                listExclude.Add(numDoc1);

                #endregion
                #region 6.1 Credito Consumo

                //Valida que tenga cuenta
                if (string.IsNullOrWhiteSpace(cuentaCreditoConsumoID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdCredConsumo + "&&" + string.Empty;

                    return result;
                }

                //Valida que tenga cuenta de contra partida
                if (string.IsNullOrWhiteSpace(cuentaContraCreditoConsumoID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CtaContraCredConsumo + "&&" + string.Empty;

                    return result;
                }

                #endregion
                #region 6.3 Patrimonio Autónomo

                //Info de patrimonio
                if (indPatrimonioAutonomo == "1" &&
                    (string.IsNullOrWhiteSpace(terceroFiducia) || string.IsNullOrWhiteSpace(ctaPatrimonioAutonomo) || string.IsNullOrWhiteSpace(ctaPatrimonioAutonomoContra) ||
                    string.IsNullOrWhiteSpace(ctaPropia) || string.IsNullOrWhiteSpace(ctaCedida))
                )
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_NoInfoPatrimonio;

                    return result;
                }

                #endregion
                #region 6.4 Cuotas pagadas

                if (string.IsNullOrWhiteSpace(ctaIngresosRecCartera))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CtaIngresosXRecuperacionCarteraInt + "&&" + string.Empty;

                    return result;
                }

                #endregion
                #region 6.6 Provision interes vencido

                if (string.IsNullOrWhiteSpace(ctaProvIntVencido))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CtaGastoProvisionInteresCartera + "&&" + string.Empty;

                    return result;
                }

                #endregion
                #region 6.7 Saldos Cartera Cedida

                //Clase por defecto
                if (string.IsNullOrWhiteSpace(claseXDef))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ClaseCreditoDefecto + "&&" + string.Empty;

                    return result;
                }

                //Cuenta pago flujos
                if (string.IsNullOrWhiteSpace(coDocPagoFlujosID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocumentoContablePagoFlujos + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta
                DTO_coDocumento coDocPagoFlujos = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocPagoFlujosID, true, false);
                if (string.IsNullOrWhiteSpace(coDocPagoFlujos.CuentaLOC.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocPagoFlujosID;

                    return result;
                }

                ctaPagoFlujosID = coDocPagoFlujos.CuentaLOC.Value;

                #endregion
                #region 6.8 Provisiones

                //Comprobante de provisiones
                if (string.IsNullOrWhiteSpace(compProv))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ComprobanteProviMens + "&&" + string.Empty;

                    return result;
                }

                //Contrapartida reclasificación cartera vencida
                if (string.IsNullOrWhiteSpace(ctaReclasVencContra_CR))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CtaProvRevCarteraPropia + "&&" + string.Empty;

                    return result;
                }

                //Contrapartida provisión cartera vencida
                if (string.IsNullOrWhiteSpace(ctaProvVencContra_DB))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CtaGastosProvisionCapital + "&&" + string.Empty;

                    return result;
                }

                //Contrapartida provisión cartera vencida - orden
                if (string.IsNullOrWhiteSpace(ctaProvVencOrdenContra_CR))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CtaOrdenInteresVencidoContrapartida + "&&" + string.Empty;

                    return result;
                }

                //Cuenta provisión general de cartera
                if (string.IsNullOrWhiteSpace(ctaProvGeneral))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CtaProvGeneralCartera + "&&" + string.Empty;

                    return result;
                }

                //Contrapartida provisión general de cartera
                if (string.IsNullOrWhiteSpace(ctaGastoProvGeneral))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CtaGastoProvGeneralCartera + "&&" + string.Empty;

                    return result;
                }

                #endregion

                porcProvGeneral = string.IsNullOrWhiteSpace(porcProvGeneralStr) ? 0 : Convert.ToDecimal(porcProvGeneralStr);
                #endregion
                #region Valida que haya cerrado todo el mes

                coComp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, coDoc.ComprobanteID.Value, true, false);
                coCompProv = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, compProv, true, false);

                EstadoAjuste estadoCtrl = this._moduloContabilidad.HasDocument(documentID, periodo, coComp.BalanceTipoID.Value);
                if (estadoCtrl == EstadoAjuste.Aprobado)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_DocumentoAprobado;
                    return result;
                }

                string diaCierre = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DiaUltimoCierre);
                int maxDia = DateTime.DaysInMonth(periodo.Year, periodo.Month);

                if (diaCierre != maxDia.ToString())
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_CerrarDias + "&&" + diaCierre;

                    return result;
                }

                #endregion
                #region Valida la info de los Componentes

                //Interes anticipado
                if (!string.IsNullOrWhiteSpace(compInteresAnt))
                {
                    if (compsCtaIntAnt.Count == 0)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasIntAntNoInfo;
                        return result;
                    }

                    if (string.IsNullOrWhiteSpace(ctaReintegroIntAnt))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CtaxPagarReinteIntAnticipado + "&&" + string.Empty;
                        return result;
                    }

                    foreach (DTO_ccComponenteCuenta compCtaIntAnt in compsCtaIntAnt)
                    {
                        if (string.IsNullOrWhiteSpace(compCtaIntAnt.CuentaIngreso.Value) || string.IsNullOrWhiteSpace(compCtaIntAnt.CtaRecursosTerceros.Value))
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasIntAnt + "&&" + compCtaIntAnt.ClaseCredito.Value;
                            return result;
                        }
                    }
                }

                //Interes corriente
                if (!string.IsNullOrWhiteSpace(compInteres))
                {
                    if (compsCtaInteres.Count == 0)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasInteresNoInfo;
                        return result;
                    }

                    foreach (DTO_ccComponenteCuenta compCtaInteres in compsCtaInteres)
                    {
                        if (string.IsNullOrWhiteSpace(compCtaInteres.CuentaIngreso.Value) || string.IsNullOrWhiteSpace(compCtaInteres.CtaRecursosTerceros.Value))
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasInteres + "&&" + compCtaInteres.ClaseCredito.Value;
                            return result;
                        }
                    }
                }

                #endregion

                batchProgress[tupProgress] = 5;
                #endregion
                #region 3. Carga los diccionarios de cuentas y conceptos de saldo

                #region 6.1 Credito Consumo

                //055
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, cuentaCreditoConsumoID, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cSaldo;

                //056
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, cuentaContraCreditoConsumoID, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cSaldo;


                #endregion
                #region 6.2 Interes Anticipado

                if (!string.IsNullOrWhiteSpace(compInteresAnt))
                {
                    // 536
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaReintegroIntAnt, true, false);
                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    cacheCtas[cta.ID.Value] = cSaldo;

                    foreach (DTO_ccComponenteCuenta compCtaIntAnt in compsCtaIntAnt)
                    {
                        // Cta Ingresos
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, compCtaIntAnt.CuentaIngreso.Value, true, false);
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheCtas[cta.ID.Value] = cSaldo;

                        // Cta Recursos terceros
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, compCtaIntAnt.CtaRecursosTerceros.Value, true, false);
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheCtas[cta.ID.Value] = cSaldo;
                    }
                }

                #endregion
                #region 6.3 Patrimonio Autónomo

                if (indPatrimonioAutonomo == "1")
                {
                    // 500
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaPropia, true, false);
                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    cacheCtas[cta.ID.Value] = cSaldo;
                    // 501
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaCedida, true, false);
                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    cacheCtas[cta.ID.Value] = cSaldo;
                    // 511
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaPatrimonioAutonomo, true, false);
                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    cacheCtas[cta.ID.Value] = cSaldo;
                    // 512
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaPatrimonioAutonomoContra, true, false);
                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    cacheCtas[cta.ID.Value] = cSaldo;
                }
                #endregion
                #region 6.4 Cuotas Pagadas

                // Cta Contra ProPag
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaIngresosRecCartera, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cSaldo;

                foreach (DTO_ccComponenteCuenta compCtaInteres in compsCtaInteres)
                {
                    // Cta Ingresos
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, compCtaInteres.CuentaIngreso.Value, true, false);
                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    cacheCtas[cta.ID.Value] = cSaldo;

                    // Cta Recursos terceros
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, compCtaInteres.CtaRecursosTerceros.Value, true, false);
                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    cacheCtas[cta.ID.Value] = cSaldo;
                }

                #endregion
                #region 6.6 Provisión interes vencido

                // Cta DB Prov interes vencido
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaProvIntVencido, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cSaldo;

                #endregion
                #region 6.7 Saldos cartera cedida

                // 067
                ctaPagoFlujos = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, ctaPagoFlujosID, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, ctaPagoFlujos.ConceptoSaldoID.Value, true, false);
                cacheCtas[ctaPagoFlujos.ID.Value] = cSaldo;

                ctaRecTerceros = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, ctaRecTercerosID, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, ctaRecTerceros.ConceptoSaldoID.Value, true, false);
                cacheCtas[ctaRecTerceros.ID.Value] = cSaldo;

                #endregion
                #region 6.8 Provisiones

                //Reclasificación Cartera vencida
                // 534
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, ctaReclasVencContra_CR, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cSaldo;

                //Provision cartera vencida
                // 526
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaProvVencContra_DB, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cSaldo;

                //Gastos de cartera
                // 539
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaProvGeneral, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cSaldo;

                // 540 // es un porcentaje
                //cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, porcProvGeneralStr, true, false);
                //cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                //cacheCtas[cta.ID.Value] = cSaldo;

                // 541
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaGastoProvGeneral, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cSaldo;

                // 549
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaProvVencOrdenContra_CR, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cSaldo;

                #endregion

                batchProgress[tupProgress] = 7;

                #endregion
                #region 4. Actualiza la info de la tabla cierre Mes

                #region Cierra el mes

                List<DTO_ccCierreDia> cierres = this._dal_ccCierreDia.DAL_ccCierreDia_GetForCierreMes(periodo);
                foreach (DTO_ccCierreDia dia in cierres)
                    _dal_ccCierreMes.DAL_ccCierreMes_Add(dia);

                #endregion
                #region Actualiza el dia de cierre en glControl
                string EmpNro = this.Empresa.NumeroControl.Value;
                string _modId = ((int)ModulesPrefix.cc).ToString();

                if (_modId.Length == 1)
                    _modId = "0" + _modId;

                string keyControl = EmpNro + _modId + AppControl.cc_DiaUltimoCierre;
                DTO_glControl diaCierreControl = this._moduloGlobal.GetControlByID(Convert.ToInt32(keyControl));
                diaCierreControl.Data.Value = "0";
                this._moduloGlobal.glControl_Update(diaCierreControl);
                #endregion

                batchProgress[tupProgress] = 10;

                #endregion
                #region 5. Procesa el resumen de todos los movimientos de los creditos

                object r = this._dal_ccCierreMes.DAL_ccCierreMesCartera_Procesar(periodo);
                if (r.GetType() == typeof(DTO_TxResult))
                {
                    result = (DTO_TxResult)r;
                    return result;
                }

                List<DTO_ccCierreMesCartera> cierresCartera = (List<DTO_ccCierreMesCartera>)r;
                batchProgress[tupProgress] = 25;

                #endregion
                #region 6. Carga la info de los créditos

                List<DTO_ccCierreMesCartera> credCarteraPropia = new List<DTO_ccCierreMesCartera>();
                List<DTO_ccCierreMesCartera> credCarteraCedida = new List<DTO_ccCierreMesCartera>();
                foreach (DTO_ccCierreMesCartera cr in cierresCartera)
                {
                    //Carga la lista de creditos
                    ctrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(cr.NumeroDoc.Value.Value);
                    cacheCtrls[cr.NumeroDoc.Value.Value] = ctrlCredito;

                    if (string.IsNullOrWhiteSpace(cr.CompradorCarteraID.Value) || cr.CompradorCarteraID.Value == codCarteraPropia)
                    {
                        #region Trae los creditos de cartera propia

                        credCarteraPropia.Add(cr);

                        //Carga la informacino de las reclasificaciones
                        riesgo = this._moduloGlobal.ccClasificacionxRiesgo_GetByID(cr.ClaseCredito.Value, cr.DiasMora.Value.Value);
                        if (riesgo == null)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Cc_NoClasificacionRiesgo + "&&" + ctrlCredito.DocumentoTercero.Value.Trim() +
                                "&&" + cr.ClaseCredito.Value.Trim() +
                                "&&" + cr.DiasMora.Value.Value.ToString();

                            return result;
                        }

                        cacheRiesgo[cr.NumeroDoc.Value.Value] = riesgo;

                        #endregion
                    }
                    else
                    {
                        #region Trae los creditos de cartera cedida
                        credCarteraCedida.Add(cr);
                        #endregion
                    }
                }

                #endregion
                #region 7. Comprobantes

                #region 7.1 Créditos de consumo

                DTO_TxResultDetail resultGLDC = new DTO_TxResultDetail();
                DTO_Comprobante comprobanteCredConsumo = new DTO_Comprobante();

                #region Crea el documento del cierre (glDocumentoControl)

                ctrlCredConsumo = new DTO_glDocumentoControl();
                ctrlCredConsumo.DocumentoNro.Value = 0;
                ctrlCredConsumo.DocumentoID.Value = documentID;
                ctrlCredConsumo.DocumentoTipo.Value = (int)DocumentoTipo.DocInterno;
                ctrlCredConsumo.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                ctrlCredConsumo.Fecha.Value = DateTime.Now;
                ctrlCredConsumo.FechaDoc.Value = fechaDoc;
                ctrlCredConsumo.PeriodoDoc.Value = periodo;
                ctrlCredConsumo.PeriodoUltMov.Value = periodo;
                ctrlCredConsumo.CuentaID.Value = cuentaContraCreditoConsumoID;
                ctrlCredConsumo.AreaFuncionalID.Value = af;
                ctrlCredConsumo.PrefijoID.Value = prefijoDef;
                ctrlCredConsumo.ProyectoID.Value = proyDef;
                ctrlCredConsumo.CentroCostoID.Value = ctoCostoDef;
                ctrlCredConsumo.LugarGeograficoID.Value = lugGeoDef;
                ctrlCredConsumo.LineaPresupuestoID.Value = linPresDef;
                ctrlCredConsumo.TerceroID.Value = terceroDef;
                ctrlCredConsumo.MonedaID.Value = mdaLoc;
                ctrlCredConsumo.TasaCambioCONT.Value = 0;
                ctrlCredConsumo.TasaCambioDOCU.Value = 0;
                ctrlCredConsumo.Descripcion.Value = "PROVISIÓN CRÉDITO CONSUMO";
                ctrlCredConsumo.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrlCredConsumo.seUsuarioID.Value = this.UserId;
                ctrlCredConsumo.Valor.Value = 0;
                ctrlCredConsumo.Iva.Value = 0;

                #endregion
                #region Carga la informacion del comprobante

                #region Header

                comprobanteCredConsumo.Header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                comprobanteCredConsumo.Header.PeriodoID.Value = periodo;
                comprobanteCredConsumo.Header.EmpresaID.Value = this.Empresa.ID.Value;
                comprobanteCredConsumo.Header.TasaCambioBase.Value = 0;
                comprobanteCredConsumo.Header.TasaCambioOtr.Value = 0;
                comprobanteCredConsumo.Header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                comprobanteCredConsumo.Header.MdaTransacc.Value = mdaLoc;
                comprobanteCredConsumo.Header.ComprobanteNro.Value = 0;
                comprobanteCredConsumo.Header.Fecha.Value = fechaDoc;

                #endregion
                #region Footer

                decimal valML = 0;
                decimal valME = 0;
                List<DTO_ComprobanteFooter> footerConsumo = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> detailsConsumo = compsCtaCapital.Count > 0 ? this._dal_Cartera.DAL_Cartera_GetInfoCreditoConsumo(periodo, compsCtaCapital, listExclude) : new List<DTO_ComprobanteFooter>();
                foreach (DTO_ComprobanteFooter plDeta in detailsConsumo)
                {
                    if (plDeta.vlrMdaLoc.Value.Value != 0 || plDeta.vlrMdaExt.Value.Value != 0)
                    {
                        DTO_ComprobanteFooter det = new DTO_ComprobanteFooter();
                        det.TerceroID.Value = plDeta.TerceroID.Value;
                        det.DocumentoCOM.Value = plDeta.DocumentoCOM.Value;
                        det.vlrMdaLoc.Value = Math.Round(plDeta.vlrMdaLoc.Value.Value, 0);
                        det.vlrMdaExt.Value = Math.Round(plDeta.vlrMdaExt.Value.Value, 0);
                        det.vlrMdaOtr.Value = Math.Round(plDeta.vlrMdaOtr.Value.Value, 0);

                        det.ProyectoID.Value = proyDef;
                        det.CentroCostoID.Value = ctoCostoDef;
                        det.LineaPresupuestoID.Value = linPresDef;
                        det.ConceptoCargoID.Value = concCargoDef;
                        det.LugarGeograficoID.Value = lugGeoDef;
                        det.PrefijoCOM.Value = prefijoDef;

                        det.vlrBaseML.Value = 0;
                        det.vlrBaseME.Value = 0;
                        det.TasaCambio.Value = ctrlCredConsumo.TasaCambioDOCU.Value;

                        det.CuentaID.Value = cuentaCreditoConsumoID;
                        det.ConceptoSaldoID.Value = cacheCtas[det.CuentaID.Value].ID.Value;
                        //det.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredConsumo, cacheCtas[det.CuentaID.Value]);
                        det.Descriptivo.Value = "PROVISIÓN CRÉDITOS CONSUMO";

                        valML += det.vlrMdaLoc.Value.Value;
                        valME += det.vlrMdaExt.Value.Value;

                        footerConsumo.Add(det);
                    }
                }

                comprobanteCredConsumo.Footer = footerConsumo;

                #endregion

                #endregion

                if (comprobanteCredConsumo.Footer.Count > 0)
                {
                    #region Guarda el documento
                    resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlCredConsumo, true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);
                        return result;
                    }

                    ctrlCredConsumo.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);
                    comprobanteCredConsumo.Header.NumeroDoc.Value = ctrlCredConsumo.NumeroDoc.Value;
                    comprobanteCredConsumo.Header.ComprobanteNro.Value = 0;
                    #endregion
                    #region Genera los identificadores

                    foreach (DTO_ComprobanteFooter d in comprobanteCredConsumo.Footer)
                        d.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredConsumo, cacheCtas[d.CuentaID.Value]);

                    #endregion
                    #region Contrapartida
                    if (valML != 0)
                    {
                        valML *= -1;
                        valME *= -1;
                        DTO_ComprobanteFooter contra = this.CrearComprobanteFooter(ctrlCredConsumo, ctrlCredConsumo.TasaCambioCONT.Value,
                            concCargoDef, lugGeoDef, linPresDef, valML, valME, true);
                        contra.Descriptivo.Value = "CONTRA CRÉDITOS CONSUMO";
                        footerConsumo.Add(contra);
                    }
                    #endregion
                    #region Contabiliza el comprobante
                    result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobanteCredConsumo, periodo, ModulesPrefix.cc, 0, true);

                    if (result.Result == ResultValue.NOK)
                        return result;

                    #endregion
                }

                batchProgress[tupProgress] = 33;

                #endregion
                #region 7.2 Interes anticipado

                if (!string.IsNullOrWhiteSpace(compInteresAnt))
                {
                    List<Tuple<int, decimal, decimal, DateTime, DateTime?>> creditosIntAnt = this._dal_ccCierreMes.DAL_ccCierreMes_GetSaldoIntAnt(compInteresAnt, periodo);
                    if (creditosIntAnt.Count > 0)
                    {
                        DTO_Comprobante comprobanteIntAnt = new DTO_Comprobante();
                        List<DTO_ComprobanteFooter> footerIntAnt = new List<DTO_ComprobanteFooter>();
                        #region Footer

                        foreach (Tuple<int, decimal, decimal, DateTime, DateTime?> tup in creditosIntAnt)
                        {
                            #region Variables del crédito
                            int numDoc = tup.Item1;
                            decimal totalValor = tup.Item2;
                            decimal abonoValor = tup.Item3;
                            DateTime fechaCuota1 = tup.Item4;
                            DateTime? fechaPagoNull = tup.Item5;
                            #endregion
                            #region Carga el crédito, la clase y el componente de interes

                            //Control del crédito
                            if (cacheCtrls.ContainsKey(numDoc))
                                ctrlCredito = cacheCtrls[numDoc];
                            else
                            {
                                ctrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(numDoc);
                                cacheCtrls.Add(numDoc, ctrlCredito);
                            }

                            //Carga el crédito
                            DTO_ccCreditoDocu credito;
                            if (cacheCreditos.ContainsKey(numDoc))
                                credito = cacheCreditos[numDoc];
                            else
                            {
                                credito = this.GetCreditoByNumeroDoc(numDoc);
                                cacheCreditos.Add(numDoc, credito);
                            }

                            //Carga la clase
                            string clase = string.Empty;
                            if (cacheClases.ContainsKey(credito.LineaCreditoID.Value))
                            {
                                clase = cacheClases[credito.LineaCreditoID.Value];
                            }
                            else
                            {
                                DTO_ccLineaCredito lineaCre = (DTO_ccLineaCredito)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccLineaCredito, credito.LineaCreditoID.Value, true, false);
                                clase = lineaCre.ClaseCredito.Value;
                                cacheClases.Add(credito.LineaCreditoID.Value, clase);
                            }

                            //Componente de interes 
                            DTO_ccComponenteCuenta compCtaIntAnt = compsCtaIntAnt.Where(c => c.ClaseCredito.Value == clase).FirstOrDefault();
                            if (compCtaIntAnt == null)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + compInteresAnt +
                                    "&&" + ((int)TipoEstadoCartera.Propia).ToString() + "&&" + clase;
                                return result;
                            }

                            #endregion
                            #region Valores

                            //Valor diario
                            DateTime fechaLiquida = ctrlCredito.FechaDoc.Value.Value;
                            DateTime fechaFinal = fechaCuota1.AddMonths(-1);

                            if (autoCuota)
                                fechaFinal = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetFechaCuota1ForCierre(ctrlCredito.NumeroDoc.Value.Value);

                            DateTime fechaCalculoAnticipo = new DateTime(fechaFinal.Year, fechaFinal.Month, DateTime.DaysInMonth(fechaFinal.Year, fechaFinal.Month));
                            int diasIntAnt = fechaCalculoAnticipo.Subtract(fechaLiquida).Days;
                            decimal vlrInteresDia = diasIntAnt > 0 ? totalValor / diasIntAnt : 0;

                            //Saldo del interes
                            decimal saldoIntereses = totalValor - abonoValor;
                            decimal vlrIntereses = 0;
                            decimal vlrDevolucion = 0;

                            #endregion
                            #region Calculo de intereses
                            if (fechaPagoNull.HasValue)
                            {
                                DateTime fechaPago = fechaPagoNull.Value;
                                int diasDescuento = fechaFinal <= fechaPago ? 0 : fechaFinal.Subtract(fechaPago).Days;

                                vlrDevolucion = Math.Round(diasDescuento * vlrInteresDia, 0);
                                vlrIntereses = totalValor - abonoValor - vlrDevolucion;
                            }
                            else
                            {
                                int diasDescuentoTotales = fechaDoc.Subtract(fechaLiquida).Days;
                                decimal vlrInteresTotal = diasDescuentoTotales * vlrInteresDia;

                                vlrIntereses = vlrInteresTotal < 0 || vlrInteresTotal - abonoValor > saldoIntereses ? saldoIntereses : vlrInteresTotal - abonoValor;
                            }

                            vlrDevolucion = Math.Round(vlrDevolucion, 0);
                            vlrIntereses = Math.Round(vlrIntereses, 0);

                            #endregion
                            #region Registros footer
                            DTO_ComprobanteFooter detCRDevolucion = new DTO_ComprobanteFooter();
                            DTO_ComprobanteFooter detCRInteres = new DTO_ComprobanteFooter();
                            DTO_ComprobanteFooter detDBContra = new DTO_ComprobanteFooter();
                            #region CR Devolución
                            detCRDevolucion.CuentaID.Value = ctaReintegroIntAnt;
                            detCRDevolucion.ConceptoSaldoID.Value = cacheCtas[detCRDevolucion.CuentaID.Value].ID.Value;
                            detCRDevolucion.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detCRDevolucion.CuentaID.Value]);

                            detCRDevolucion.vlrMdaLoc.Value = Math.Abs(vlrDevolucion) * -1;
                            detCRDevolucion.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detCRDevolucion.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detCRDevolucion.vlrMdaOtr.Value = detCRDevolucion.vlrMdaLoc.Value;

                            detCRDevolucion.TerceroID.Value = ctrlCredito.TerceroID.Value;
                            detCRDevolucion.ProyectoID.Value = ctrlCredito.ProyectoID.Value;
                            detCRDevolucion.CentroCostoID.Value = ctrlCredito.CentroCostoID.Value;
                            detCRDevolucion.LineaPresupuestoID.Value = ctrlCredito.LineaPresupuestoID.Value;
                            detCRDevolucion.LugarGeograficoID.Value = ctrlCredito.LugarGeograficoID.Value;
                            detCRDevolucion.PrefijoCOM.Value = ctrlCredito.PrefijoID.Value;
                            detCRDevolucion.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                            detCRDevolucion.vlrBaseML.Value = 0;
                            detCRDevolucion.vlrBaseME.Value = 0;
                            detCRDevolucion.ConceptoCargoID.Value = concCargoDef;
                            detCRDevolucion.TasaCambio.Value = ctrlCredConsumo.TasaCambioDOCU.Value;

                            detCRDevolucion.Descriptivo.Value = "CONT. INTERESES ANTICIPADOS";
                            #endregion
                            #region CR Saldo
                            detCRInteres = ObjectCopier.Clone(detCRDevolucion);

                            detCRInteres.CuentaID.Value = compCtaIntAnt.CuentaIngreso.Value;
                            detCRInteres.ConceptoSaldoID.Value = cacheCtas[detCRInteres.CuentaID.Value].ID.Value;
                            detCRInteres.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detCRInteres.CuentaID.Value]);

                            detCRInteres.vlrMdaLoc.Value = Math.Abs(vlrIntereses) * -1;
                            detCRInteres.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detCRInteres.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detCRInteres.vlrMdaOtr.Value = detCRInteres.vlrMdaLoc.Value;
                            detCRInteres.IdentificadorTR.Value = 0;
                            #endregion
                            #region DB
                            detDBContra = ObjectCopier.Clone(detCRDevolucion);

                            detDBContra.CuentaID.Value = compCtaIntAnt.CtaRecursosTerceros.Value;
                            detDBContra.ConceptoSaldoID.Value = cacheCtas[detDBContra.CuentaID.Value].ID.Value;
                            detDBContra.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detDBContra.CuentaID.Value]);

                            detDBContra.vlrMdaLoc.Value = Math.Abs(vlrDevolucion + vlrIntereses);
                            detDBContra.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detDBContra.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detDBContra.vlrMdaOtr.Value = detDBContra.vlrMdaLoc.Value;
                            #endregion

                            if (vlrDevolucion != 0)
                                footerIntAnt.Add(detCRDevolucion);
                            if (vlrIntereses != 0)
                                footerIntAnt.Add(detCRInteres);
                            if (vlrIntereses != 0 || vlrDevolucion != 0)
                                footerIntAnt.Add(detDBContra);

                            #endregion
                            #region Actualiza el abono de componentes de interes
                            if (vlrIntereses != 0)
                            {
                                DTO_ccCreditoComponentes credComp = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByComponenteCartera(numDoc, compInteresAnt);
                                credComp.AbonoValor.Value += vlrIntereses + vlrDevolucion;
                                this._dal_ccCreditoComponentes.DAL_ccCarteraComponentes_Update(credComp);
                            }
                            #endregion
                        }
                        #endregion

                        if (footerIntAnt.Count > 0)
                        {
                            #region Crea el documento del cierre (glDocumentoControl)

                            ctrlIntAnt = ObjectCopier.Clone(ctrlCredConsumo);
                            ctrlIntAnt.Descripcion.Value = "Contabilización interes anticipado";

                            resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlIntAnt, true);
                            if (resultGLDC.Message != ResultValue.OK.ToString())
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = "NOK";
                                result.Details.Add(resultGLDC);
                                return result;
                            }

                            ctrlIntAnt.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);
                            comprobanteIntAnt.Header.NumeroDoc.Value = ctrlIntAnt.NumeroDoc.Value;
                            comprobanteIntAnt.Header.ComprobanteNro.Value = 0;

                            #endregion
                            #region Header del comprobante

                            comprobanteIntAnt.Header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                            comprobanteIntAnt.Header.PeriodoID.Value = periodo;
                            comprobanteIntAnt.Header.EmpresaID.Value = this.Empresa.ID.Value;
                            comprobanteIntAnt.Header.TasaCambioBase.Value = 0;
                            comprobanteIntAnt.Header.TasaCambioOtr.Value = 0;
                            comprobanteIntAnt.Header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                            comprobanteIntAnt.Header.MdaTransacc.Value = mdaLoc;
                            comprobanteIntAnt.Header.ComprobanteNro.Value = 0;
                            comprobanteIntAnt.Header.Fecha.Value = fechaDoc;

                            #endregion
                            #region Contabiliza el comprobante

                            comprobanteIntAnt.Footer = footerIntAnt;
                            result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobanteIntAnt, periodo, ModulesPrefix.cc, 0, true);

                            if (result.Result == ResultValue.NOK)
                                return result;

                            #endregion
                        }
                    }
                }
                batchProgress[tupProgress] = 45;

                #endregion
                #region 7.3 Patrimonio autónomo

                if (indPatrimonioAutonomo == "1")
                {
                    DTO_ComprobanteFooter detPatrimonio = new DTO_ComprobanteFooter();
                    DTO_ComprobanteFooter detPatrimonioContra = new DTO_ComprobanteFooter();

                    decimal saldoPropia = this._moduloContabilidad.Saldo_GetByPeriodoCuenta(true, periodo, ctaPropia, libroFunc);
                    decimal saldoCedida = this._moduloContabilidad.Saldo_GetByPeriodoCuenta(true, periodo, ctaCedida, libroFunc);

                    decimal saldoCapital = 0;
                    foreach (string ctaCapital in compsCtaCapital)
                    {
                        decimal saldoCta = this._moduloContabilidad.Saldo_GetByPeriodoCuenta(true, periodo, ctaCapital, libroFunc, listExclude);
                        saldoCapital += saldoCta;
                    }

                    decimal saldoTotal = (saldoPropia + saldoCedida) * -1 + saldoCapital;
                    decimal saldoPatrominio = this._moduloContabilidad.Saldo_GetByPeriodoCuenta(true, periodo, ctaPatrimonioAutonomo, libroFunc);

                    if (saldoPatrominio != 0 || saldoTotal != 0)
                    {
                        DTO_Comprobante comprobantePatrimonio = new DTO_Comprobante();

                        #region Crea el documento del cierre (glDocumentoControl)

                        ctrlPatrimonio = ObjectCopier.Clone(ctrlCredConsumo);
                        ctrlPatrimonio.Descripcion.Value = "Contabilización patrimonio autónomo";
                        ctrlPatrimonio.TerceroID.Value = terceroFiducia;

                        resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlPatrimonio, true);
                        if (resultGLDC.Message != ResultValue.OK.ToString())
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = "NOK";
                            result.Details.Add(resultGLDC);
                            return result;
                        }

                        ctrlPatrimonio.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);
                        comprobantePatrimonio.Header.NumeroDoc.Value = ctrlPatrimonio.NumeroDoc.Value;
                        comprobantePatrimonio.Header.ComprobanteNro.Value = 0;

                        #endregion
                        #region Header del comprobante

                        comprobantePatrimonio.Header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                        comprobantePatrimonio.Header.PeriodoID.Value = periodo;
                        comprobantePatrimonio.Header.EmpresaID.Value = this.Empresa.ID.Value;
                        comprobantePatrimonio.Header.TasaCambioBase.Value = 0;
                        comprobantePatrimonio.Header.TasaCambioOtr.Value = 0;
                        comprobantePatrimonio.Header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                        comprobantePatrimonio.Header.MdaTransacc.Value = mdaLoc;
                        comprobantePatrimonio.Header.ComprobanteNro.Value = 0;
                        comprobantePatrimonio.Header.Fecha.Value = fechaDoc;

                        #endregion
                        #region Footer comprobante
                        #region Partida patrimonio
                        detPatrimonio.CuentaID.Value = ctaPatrimonioAutonomo;
                        detPatrimonio.ConceptoSaldoID.Value = cacheCtas[detPatrimonio.CuentaID.Value].ID.Value;
                        detPatrimonio.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlPatrimonio, cacheCtas[detPatrimonio.CuentaID.Value]);

                        detPatrimonio.vlrMdaLoc.Value = saldoTotal - saldoPatrominio;
                        detPatrimonio.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detPatrimonio.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                        detPatrimonio.vlrMdaOtr.Value = detPatrimonio.vlrMdaLoc.Value;

                        detPatrimonio.TerceroID.Value = ctrlPatrimonio.TerceroID.Value;
                        detPatrimonio.ProyectoID.Value = ctrlPatrimonio.ProyectoID.Value;
                        detPatrimonio.CentroCostoID.Value = ctrlPatrimonio.CentroCostoID.Value;
                        detPatrimonio.LineaPresupuestoID.Value = ctrlPatrimonio.LineaPresupuestoID.Value;
                        detPatrimonio.LugarGeograficoID.Value = ctrlPatrimonio.LugarGeograficoID.Value;
                        detPatrimonio.PrefijoCOM.Value = ctrlPatrimonio.PrefijoID.Value;
                        detPatrimonio.DocumentoCOM.Value = ctrlPatrimonio.DocumentoTercero.Value;

                        detPatrimonio.vlrBaseML.Value = 0;
                        detPatrimonio.vlrBaseME.Value = 0;
                        detPatrimonio.ConceptoCargoID.Value = concCargoDef;
                        detPatrimonio.TasaCambio.Value = ctrlCredConsumo.TasaCambioDOCU.Value;

                        detPatrimonio.Descriptivo.Value = "CONT. PATRIMONIO AUTÓNOMO";

                        comprobantePatrimonio.Footer.Add(detPatrimonio);
                        #endregion
                        #region Contrapartida patrimonio
                        detPatrimonioContra = ObjectCopier.Clone(detPatrimonio);

                        detPatrimonioContra.CuentaID.Value = ctaPatrimonioAutonomoContra;
                        detPatrimonioContra.ConceptoSaldoID.Value = cacheCtas[detPatrimonioContra.CuentaID.Value].ID.Value;
                        detPatrimonioContra.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlPatrimonio, cacheCtas[detPatrimonioContra.CuentaID.Value]);

                        detPatrimonioContra.vlrMdaLoc.Value = detPatrimonio.vlrMdaLoc.Value * -1;
                        detPatrimonioContra.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detPatrimonioContra.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                        detPatrimonioContra.vlrMdaOtr.Value = detPatrimonioContra.vlrMdaLoc.Value;

                        comprobantePatrimonio.Footer.Add(detPatrimonioContra);
                        #endregion
                        #endregion
                        #region Contabiliza el comprobante

                        result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobantePatrimonio, periodo, ModulesPrefix.cc, 0, true);

                        if (result.Result == ResultValue.NOK)
                            return result;

                        #endregion

                    }
                }

                batchProgress[tupProgress] = 53;

                #endregion
                #region 7.4, 7.5 y 7.6 - Comprobantes de cartera propia (Cuotas Pagadas, Interes Vencido cartera propia y Provisión interes vencido)
                if (credCarteraPropia.Count > 0)
                {
                    // Cuotas Pagadas
                    DTO_Comprobante comprobanteCuotasPagadas = new DTO_Comprobante();
                    List<DTO_ComprobanteFooter> footerCuotasPagadas = new List<DTO_ComprobanteFooter>();

                    // Interes Vencido cartera propia
                    DTO_Comprobante comprobanteIntVencPropia = new DTO_Comprobante();
                    List<DTO_ComprobanteFooter> footerIntVencPropia = new List<DTO_ComprobanteFooter>();

                    // Provisión interes vencido
                    DTO_Comprobante comprobanteProvIntVenc = new DTO_Comprobante();
                    List<DTO_ComprobanteFooter> footerProvIntVenc = new List<DTO_ComprobanteFooter>();

                    #region Carga la info del footer

                    foreach (DTO_ccCierreMesCartera cierre in credCarteraPropia)
                    {
                        #region Carga el crédito, la clase y el componente de interes
                        
                        //Carga el crédito
                        DTO_ccCreditoDocu credito;
                        if (cacheCreditos.ContainsKey(cierre.NumeroDoc.Value.Value))
                            credito = cacheCreditos[cierre.NumeroDoc.Value.Value];
                        else
                        {
                            credito = this.GetCreditoByNumeroDoc(cierre.NumeroDoc.Value.Value);
                            cacheCreditos.Add(cierre.NumeroDoc.Value.Value, credito);
                        }

                        //Carga la clase
                        string clase = string.Empty;
                        if (cacheClases.ContainsKey(credito.LineaCreditoID.Value))
                        {
                            clase = cacheClases[credito.LineaCreditoID.Value];
                        }
                        else
                        {
                            DTO_ccLineaCredito lineaCre = (DTO_ccLineaCredito)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccLineaCredito, credito.LineaCreditoID.Value, true, false);
                            clase = lineaCre.ClaseCredito.Value;
                            cacheClases.Add(credito.LineaCreditoID.Value, clase);
                        }

                        //Componente de interes 
                        DTO_ccComponenteCuenta compCtaInteres = compsCtaInteres.Where(c => c.ClaseCredito.Value == clase).FirstOrDefault();
                        if (compCtaInteres == null)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + compInteres +
                                "&&" + ((int)TipoEstadoCartera.Propia).ToString() + "&&" + clase;
                            return result;
                        }

                        #endregion

                        #region 7.4 Cuotas Pagadas

                        if (cierre.InteresANTPag.Value != 0 || cierre.InteresPROPag.Value != 0 || cierre.InteresORDPag.Value != 0)
                        {
                            DTO_ComprobanteFooter detDB = new DTO_ComprobanteFooter();
                            DTO_ComprobanteFooter detCR_AntPag = new DTO_ComprobanteFooter();
                            DTO_ComprobanteFooter detCR_ProPag = new DTO_ComprobanteFooter();
                            DTO_ComprobanteFooter detCR_OrdPag = new DTO_ComprobanteFooter();

                            ctrlCredito = cacheCtrls[cierre.NumeroDoc.Value.Value];

                            #region DB

                            detDB.CuentaID.Value = compCtaInteres.CtaRecursosTerceros.Value;
                            detDB.ConceptoSaldoID.Value = cacheCtas[detDB.CuentaID.Value].ID.Value;
                            detDB.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detDB.CuentaID.Value]);

                            detDB.vlrMdaLoc.Value = Math.Round(Math.Abs(cierre.InteresANTPag.Value.Value) +
                                Math.Abs(cierre.InteresPROPag.Value.Value) + Math.Abs(cierre.InteresORDPag.Value.Value), 0);
                            detDB.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detDB.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detDB.vlrMdaOtr.Value = detDB.vlrMdaLoc.Value;

                            detDB.TerceroID.Value = ctrlCredito.TerceroID.Value;
                            detDB.ProyectoID.Value = ctrlCredito.ProyectoID.Value;
                            detDB.CentroCostoID.Value = ctrlCredito.CentroCostoID.Value;
                            detDB.LineaPresupuestoID.Value = ctrlCredito.LineaPresupuestoID.Value;
                            detDB.LugarGeograficoID.Value = ctrlCredito.LugarGeograficoID.Value;
                            detDB.PrefijoCOM.Value = ctrlCredito.PrefijoID.Value;
                            detDB.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                            detDB.vlrBaseML.Value = 0;
                            detDB.vlrBaseME.Value = 0;
                            detDB.ConceptoCargoID.Value = concCargoDef;
                            detDB.TasaCambio.Value = ctrlCredConsumo.TasaCambioDOCU.Value;

                            detDB.Descriptivo.Value = "CAUSACIÓN CUOTAS PAGADAS";

                            footerCuotasPagadas.Add(detDB);
                            #endregion
                            #region CR_AntPag
                            detCR_AntPag = ObjectCopier.Clone(detDB);

                            detCR_AntPag.CuentaID.Value = compCtaInteres.CuentaIngreso.Value;
                            detCR_AntPag.ConceptoSaldoID.Value = cacheCtas[detCR_AntPag.CuentaID.Value].ID.Value;
                            detCR_AntPag.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detCR_AntPag.CuentaID.Value]);
                            detCR_AntPag.vlrMdaLoc.Value = Math.Round(Math.Abs(cierre.InteresANTPag.Value.Value) * -1, 0);
                            detCR_AntPag.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detCR_AntPag.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detCR_AntPag.vlrMdaOtr.Value = detCR_AntPag.vlrMdaLoc.Value;
                            detCR_AntPag.Descriptivo.Value = "CAUSA CUOTAS PAGADAS NO CUASADAS";

                            if (cierre.InteresANTPag.Value.Value != 0)
                                footerCuotasPagadas.Add(detCR_AntPag);
                            #endregion
                            #region CR_ProPag
                            detCR_ProPag = ObjectCopier.Clone(detDB);

                            detCR_ProPag.CuentaID.Value = ctaIngresosRecCartera;
                            detCR_ProPag.ConceptoSaldoID.Value = cacheCtas[ctaIngresosRecCartera].ID.Value;
                            detCR_ProPag.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detCR_ProPag.CuentaID.Value]);
                            detCR_ProPag.vlrMdaLoc.Value = Math.Round(Math.Abs(cierre.InteresPROPag.Value.Value) * -1, 0);
                            detCR_ProPag.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detCR_ProPag.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detCR_ProPag.vlrMdaOtr.Value = detCR_ProPag.vlrMdaLoc.Value;
                            detCR_ProPag.Descriptivo.Value = "CAUSACIÓN CUOTAS PAGADAS PROVISIONES";

                            if (cierre.InteresPROPag.Value != 0)
                                footerCuotasPagadas.Add(detCR_ProPag);
                            #endregion
                            #region CR_OrdPag
                            detCR_OrdPag = ObjectCopier.Clone(detDB);

                            detCR_OrdPag.CuentaID.Value = compCtaInteres.CuentaIngreso.Value;
                            detCR_OrdPag.ConceptoSaldoID.Value = cacheCtas[detCR_OrdPag.CuentaID.Value].ID.Value;
                            detCR_OrdPag.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detCR_OrdPag.CuentaID.Value]);
                            detCR_OrdPag.vlrMdaLoc.Value = Math.Round(Math.Abs(cierre.InteresORDPag.Value.Value) * -1, 0);
                            detCR_OrdPag.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detCR_OrdPag.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detCR_OrdPag.vlrMdaOtr.Value = detCR_OrdPag.vlrMdaLoc.Value;
                            detCR_OrdPag.Descriptivo.Value = "CAUSACIÓN CUOTAS PAGADAS DE RIESGO MAYOR";

                            if (cierre.InteresORDPag.Value != 0)
                                footerCuotasPagadas.Add(detCR_OrdPag);
                            #endregion
                        }

                        #endregion
                        #region 7.5 Interes Vencido cartera propia

                        if (cierre.InteresCAUMes.Value != 0)
                        {
                            DTO_ComprobanteFooter detDB = new DTO_ComprobanteFooter();
                            DTO_ComprobanteFooter detCR = new DTO_ComprobanteFooter();

                            ctrlCredito = cacheCtrls[cierre.NumeroDoc.Value.Value];

                            #region DB

                            detDB.CuentaID.Value = compCtaInteres.CtaRecursosTerceros.Value;
                            detDB.ConceptoSaldoID.Value = cacheCtas[detDB.CuentaID.Value].ID.Value;
                            detDB.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detDB.CuentaID.Value]);

                            detDB.vlrMdaLoc.Value = Math.Round(Math.Abs(cierre.InteresCAUMes.Value.Value), 0);
                            detDB.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detDB.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detDB.vlrMdaOtr.Value = detDB.vlrMdaLoc.Value;

                            detDB.TerceroID.Value = ctrlCredito.TerceroID.Value;
                            detDB.ProyectoID.Value = ctrlCredito.ProyectoID.Value;
                            detDB.CentroCostoID.Value = ctrlCredito.CentroCostoID.Value;
                            detDB.LineaPresupuestoID.Value = ctrlCredito.LineaPresupuestoID.Value;
                            detDB.LugarGeograficoID.Value = ctrlCredito.LugarGeograficoID.Value;
                            detDB.PrefijoCOM.Value = ctrlCredito.PrefijoID.Value;
                            detDB.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                            detDB.vlrBaseML.Value = 0;
                            detDB.vlrBaseME.Value = 0;
                            detDB.ConceptoCargoID.Value = concCargoDef;
                            detDB.TasaCambio.Value = ctrlCredConsumo.TasaCambioDOCU.Value;

                            detDB.Descriptivo.Value = "CAUSA INTERES CUOTAS VENCIDAS";

                            footerIntVencPropia.Add(detDB);
                            #endregion
                            #region CR
                            detCR = ObjectCopier.Clone(detDB);

                            detCR.CuentaID.Value = compCtaInteres.CuentaIngreso.Value;
                            detCR.ConceptoSaldoID.Value = cacheCtas[detCR.CuentaID.Value].ID.Value;
                            detCR.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detCR.CuentaID.Value]);
                            detCR.vlrMdaLoc.Value = detDB.vlrMdaLoc.Value * -1;
                            detCR.vlrMdaExt.Value = detDB.vlrMdaExt.Value * -1;
                            detCR.vlrMdaOtr.Value = detCR.vlrMdaLoc.Value;

                            footerIntVencPropia.Add(detCR);
                            #endregion
                        }

                        #endregion
                        #region 7.6 Provisión interes vencido

                        if (cierre.InteresPROMes.Value != 0)
                        {
                            DTO_ComprobanteFooter detDB = new DTO_ComprobanteFooter();
                            DTO_ComprobanteFooter detCR = new DTO_ComprobanteFooter();

                            ctrlCredito = cacheCtrls[cierre.NumeroDoc.Value.Value];

                            #region DB

                            detDB.CuentaID.Value = ctaProvIntVencido;
                            detDB.ConceptoSaldoID.Value = cacheCtas[detDB.CuentaID.Value].ID.Value;
                            detDB.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detDB.CuentaID.Value]);

                            detDB.vlrMdaLoc.Value = Math.Round(Math.Abs(cierre.InteresPROMes.Value.Value), 0);
                            detDB.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detDB.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detDB.vlrMdaOtr.Value = detDB.vlrMdaLoc.Value;

                            detDB.TerceroID.Value = ctrlCredito.TerceroID.Value;
                            detDB.ProyectoID.Value = ctrlCredito.ProyectoID.Value;
                            detDB.CentroCostoID.Value = ctrlCredito.CentroCostoID.Value;
                            detDB.LineaPresupuestoID.Value = ctrlCredito.LineaPresupuestoID.Value;
                            detDB.LugarGeograficoID.Value = ctrlCredito.LugarGeograficoID.Value;
                            detDB.PrefijoCOM.Value = ctrlCredito.PrefijoID.Value;
                            detDB.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                            detDB.vlrBaseML.Value = 0;
                            detDB.vlrBaseME.Value = 0;
                            detDB.ConceptoCargoID.Value = concCargoDef;
                            detDB.TasaCambio.Value = ctrlCredConsumo.TasaCambioDOCU.Value;

                            detDB.Descriptivo.Value = "PROVISIÓN INTERES CUOTAS VENCIDAS";

                            footerProvIntVenc.Add(detDB);
                            #endregion
                            #region CR
                            detCR = ObjectCopier.Clone(detDB);

                            detCR.CuentaID.Value = compCtaInteres.CtaRecursosTerceros.Value;
                            detCR.ConceptoSaldoID.Value = cacheCtas[detCR.CuentaID.Value].ID.Value;
                            detCR.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detCR.CuentaID.Value]);
                            detCR.vlrMdaLoc.Value = detDB.vlrMdaLoc.Value * -1;
                            detCR.vlrMdaExt.Value = detDB.vlrMdaExt.Value * -1;
                            detCR.vlrMdaOtr.Value = detCR.vlrMdaLoc.Value;

                            footerProvIntVenc.Add(detCR);
                            #endregion
                        }

                        #endregion
                    }

                    #endregion
                    #region Contabiliza los comprobantes de cartera propia

                    #region 7.4 Cuotas Pagadas

                    if (footerCuotasPagadas.Count > 0)
                    {
                        #region Crea el documento del cierre (glDocumentoControl)

                        ctrlCuotasPagadas = ObjectCopier.Clone(ctrlCredConsumo);
                        ctrlCuotasPagadas.Descripcion.Value = "Contabilización cuotas pagadas";

                        resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlCuotasPagadas, true);
                        if (resultGLDC.Message != ResultValue.OK.ToString())
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = "NOK";
                            result.Details.Add(resultGLDC);
                            return result;
                        }

                        ctrlCuotasPagadas.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);
                        comprobanteCuotasPagadas.Header.NumeroDoc.Value = ctrlCuotasPagadas.NumeroDoc.Value;
                        comprobanteCuotasPagadas.Header.ComprobanteNro.Value = 0;

                        #endregion
                        #region Header del comprobante

                        comprobanteCuotasPagadas.Header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                        comprobanteCuotasPagadas.Header.PeriodoID.Value = periodo;
                        comprobanteCuotasPagadas.Header.EmpresaID.Value = this.Empresa.ID.Value;
                        comprobanteCuotasPagadas.Header.TasaCambioBase.Value = 0;
                        comprobanteCuotasPagadas.Header.TasaCambioOtr.Value = 0;
                        comprobanteCuotasPagadas.Header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                        comprobanteCuotasPagadas.Header.MdaTransacc.Value = mdaLoc;
                        comprobanteCuotasPagadas.Header.ComprobanteNro.Value = 0;
                        comprobanteCuotasPagadas.Header.Fecha.Value = fechaDoc;

                        #endregion
                        #region Contabiliza el comprobante

                        comprobanteCuotasPagadas.Footer = footerCuotasPagadas;
                        result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobanteCuotasPagadas, periodo, ModulesPrefix.cc, 0, true);

                        if (result.Result == ResultValue.NOK)
                            return result;

                        #endregion
                    }

                    #endregion

                    batchProgress[tupProgress] = 60;

                    #region 7.5 Interes Vencido cartera propia

                    if (footerIntVencPropia.Count > 0)
                    {
                        #region Crea el documento del cierre (glDocumentoControl)

                        ctrlIntVencPropia = ObjectCopier.Clone(ctrlCredConsumo);
                        ctrlIntVencPropia.Descripcion.Value = "Contabilización interes vencido cartera propia";

                        resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlIntVencPropia, true);
                        if (resultGLDC.Message != ResultValue.OK.ToString())
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = "NOK";
                            result.Details.Add(resultGLDC);
                            return result;
                        }

                        ctrlIntVencPropia.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);
                        comprobanteIntVencPropia.Header.NumeroDoc.Value = ctrlIntVencPropia.NumeroDoc.Value;
                        comprobanteIntVencPropia.Header.ComprobanteNro.Value = 0;

                        #endregion
                        #region Header del comprobante

                        comprobanteIntVencPropia.Header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                        comprobanteIntVencPropia.Header.PeriodoID.Value = periodo;
                        comprobanteIntVencPropia.Header.EmpresaID.Value = this.Empresa.ID.Value;
                        comprobanteIntVencPropia.Header.TasaCambioBase.Value = 0;
                        comprobanteIntVencPropia.Header.TasaCambioOtr.Value = 0;
                        comprobanteIntVencPropia.Header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                        comprobanteIntVencPropia.Header.MdaTransacc.Value = mdaLoc;
                        comprobanteIntVencPropia.Header.ComprobanteNro.Value = 0;
                        comprobanteIntVencPropia.Header.Fecha.Value = fechaDoc;

                        #endregion
                        #region Contabiliza el comprobante

                        comprobanteIntVencPropia.Footer = footerIntVencPropia;
                        result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobanteIntVencPropia, periodo, ModulesPrefix.cc, 0, true);

                        if (result.Result == ResultValue.NOK)
                            return result;

                        #endregion
                    }

                    #endregion

                    batchProgress[tupProgress] = 70;

                    #region 7.6 Provisión interes vencido

                    if (footerProvIntVenc.Count > 0)
                    {
                        #region Crea el documento del cierre (glDocumentoControl)

                        ctrlProvIntVenc = ObjectCopier.Clone(ctrlCredConsumo);
                        ctrlProvIntVenc.Descripcion.Value = "Provisión interes vencido";

                        resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlProvIntVenc, true);
                        if (resultGLDC.Message != ResultValue.OK.ToString())
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = "NOK";
                            result.Details.Add(resultGLDC);
                            return result;
                        }

                        ctrlProvIntVenc.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);
                        comprobanteProvIntVenc.Header.NumeroDoc.Value = ctrlProvIntVenc.NumeroDoc.Value;
                        comprobanteProvIntVenc.Header.ComprobanteNro.Value = 0;

                        #endregion
                        #region Header del comprobante

                        comprobanteProvIntVenc.Header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                        comprobanteProvIntVenc.Header.PeriodoID.Value = periodo;
                        comprobanteProvIntVenc.Header.EmpresaID.Value = this.Empresa.ID.Value;
                        comprobanteProvIntVenc.Header.TasaCambioBase.Value = 0;
                        comprobanteProvIntVenc.Header.TasaCambioOtr.Value = 0;
                        comprobanteProvIntVenc.Header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                        comprobanteProvIntVenc.Header.MdaTransacc.Value = mdaLoc;
                        comprobanteProvIntVenc.Header.ComprobanteNro.Value = 0;
                        comprobanteProvIntVenc.Header.Fecha.Value = fechaDoc;

                        #endregion
                        #region Contabiliza el comprobante

                        comprobanteProvIntVenc.Footer = footerProvIntVenc;
                        result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobanteProvIntVenc, periodo, ModulesPrefix.cc, 0, true);

                        if (result.Result == ResultValue.NOK)
                            return result;

                        #endregion
                    }

                    #endregion

                    #endregion

                    batchProgress[tupProgress] = 80;
                }

                #endregion
                #region 7.7 Reclasifica saldos cartera cedida

                if (credCarteraCedida.Count > 0)
                {
                    // Saldos cartera cedida
                    DTO_Comprobante comprobanteCarteraCedida = new DTO_Comprobante();
                    List<DTO_ComprobanteFooter> footerCarteraCedida = new List<DTO_ComprobanteFooter>();

                    #region Crea el documento del cierre (glDocumentoControl)

                    ctrlCarteraCedida = ObjectCopier.Clone(ctrlCredConsumo);
                    ctrlCarteraCedida.Descripcion.Value = "Reclasifica Saldos Cartera Cedida";
                    //CAMBIO GABRIEL
                    resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlCarteraCedida, true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);
                        return result;
                    }

                    ctrlCarteraCedida.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);
                    comprobanteCarteraCedida.Header.NumeroDoc.Value = ctrlCarteraCedida.NumeroDoc.Value;
                    comprobanteCarteraCedida.Header.ComprobanteNro.Value = 0;

                    #endregion
                    #region Header del comprobante

                    comprobanteCarteraCedida.Header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                    comprobanteCarteraCedida.Header.PeriodoID.Value = periodo;
                    comprobanteCarteraCedida.Header.EmpresaID.Value = this.Empresa.ID.Value;
                    comprobanteCarteraCedida.Header.TasaCambioBase.Value = 0;
                    comprobanteCarteraCedida.Header.TasaCambioOtr.Value = 0;
                    comprobanteCarteraCedida.Header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                    comprobanteCarteraCedida.Header.MdaTransacc.Value = mdaLoc;
                    comprobanteCarteraCedida.Header.ComprobanteNro.Value = 0;
                    comprobanteCarteraCedida.Header.Fecha.Value = fechaDoc;

                    #endregion

                    foreach (DTO_ccCierreMesCartera cr in credCarteraCedida)
                    {
                        ctrlCredito = cacheCtrls[cr.NumeroDoc.Value.Value];
                        #region Partida

                        DTO_ComprobanteFooter partida = new DTO_ComprobanteFooter();
                        partida.TerceroID.Value = ctrlCredito.TerceroID.Value;
                        partida.ProyectoID.Value = ctrlCredito.ProyectoID.Value;
                        partida.CentroCostoID.Value = ctrlCredito.CentroCostoID.Value;
                        partida.LineaPresupuestoID.Value = ctrlCredito.LineaPresupuestoID.Value;
                        partida.LugarGeograficoID.Value = ctrlCredito.LugarGeograficoID.Value;
                        partida.PrefijoCOM.Value = ctrlCredito.PrefijoID.Value;
                        partida.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                        partida.vlrBaseML.Value = 0;
                        partida.vlrBaseME.Value = 0;
                        partida.ConceptoCargoID.Value = concCargoDef;
                        partida.TasaCambio.Value = ctrlCarteraCedida.TasaCambioDOCU.Value;

                        partida.Descriptivo.Value = "RECLASIFICA SALDOS CARTERA CEDIDA";

                        #endregion
                        #region Contra Partida

                        DTO_ComprobanteFooter contra = new DTO_ComprobanteFooter();
                        contra = ObjectCopier.Clone(partida);

                        #endregion
                        #region Saldos
                        decimal saldoCapitalRecTerceros = this._moduloContabilidad.Saldo_GetByDocumentoCuenta(true, periodo, cr.NumeroDoc.Value.Value, ctaRecTercerosID, libroFunc);
                        decimal saldoPagoFlujos = this._moduloContabilidad.Saldo_GetByDocumentoCuenta(true, periodo, cr.NumeroDoc.Value.Value, ctaPagoFlujosID, libroFunc);

                        saldoCapitalRecTerceros = Math.Abs(saldoCapitalRecTerceros);
                        saldoPagoFlujos = Math.Abs(saldoPagoFlujos);

                        if (saldoCapitalRecTerceros > saldoPagoFlujos)
                        {
                            //Partida
                            partida.CuentaID.Value = ctaPagoFlujosID;
                            partida.ConceptoSaldoID.Value = cacheCtas[partida.CuentaID.Value].ID.Value;
                            partida.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[partida.CuentaID.Value]);

                            partida.vlrMdaLoc.Value = ctaPagoFlujos.OrigenMonetario.Value == (byte)NaturalezaCuenta.Debito ? saldoPagoFlujos * -1 : saldoPagoFlujos;
                            partida.vlrMdaExt.Value = ctrlCarteraCedida.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(partida.vlrMdaLoc.Value.Value / ctrlCarteraCedida.TasaCambioDOCU.Value.Value, 0);
                            partida.vlrMdaOtr.Value = partida.vlrMdaLoc.Value;

                            //Contra
                            contra.CuentaID.Value = ctaRecTercerosID;
                            contra.ConceptoSaldoID.Value = cacheCtas[contra.CuentaID.Value].ID.Value;
                            contra.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[contra.CuentaID.Value]);
                        }
                        else
                        {
                            //Partida
                            partida.CuentaID.Value = ctaRecTercerosID;
                            partida.ConceptoSaldoID.Value = cacheCtas[partida.CuentaID.Value].ID.Value;
                            partida.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[partida.CuentaID.Value]);

                            partida.vlrMdaLoc.Value = ctaRecTerceros.OrigenMonetario.Value == (byte)NaturalezaCuenta.Debito ? saldoCapitalRecTerceros * -1 : saldoCapitalRecTerceros;
                            partida.vlrMdaExt.Value = ctrlCarteraCedida.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(partida.vlrMdaLoc.Value.Value / ctrlCarteraCedida.TasaCambioDOCU.Value.Value, 0);
                            partida.vlrMdaOtr.Value = partida.vlrMdaLoc.Value;

                            //Contra
                            contra.CuentaID.Value = ctaPagoFlujosID;
                            contra.ConceptoSaldoID.Value = cacheCtas[contra.CuentaID.Value].ID.Value;
                            contra.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[contra.CuentaID.Value]);
                        }

                        contra.vlrMdaLoc.Value = partida.vlrMdaLoc.Value.Value * -1;
                        contra.vlrMdaExt.Value = partida.vlrMdaExt.Value.Value * -1;
                        contra.vlrMdaOtr.Value = partida.vlrMdaOtr.Value.Value * -1;

                        #endregion

                        footerCarteraCedida.Add(partida);
                        footerCarteraCedida.Add(contra);
                    }

                    #region Contabiliza el comprobante

                    comprobanteCarteraCedida.Footer = footerCarteraCedida;
                    result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobanteCarteraCedida, periodo, ModulesPrefix.cc, 0, true);

                    if (result.Result == ResultValue.NOK)
                        return result;

                    #endregion

                }

                #endregion
                #region 7.8 Provisiones

                DTO_Comprobante comprobanteProv = new DTO_Comprobante();
                #region Revierte el comprobante

                DateTime periodoOld = periodo.AddMonths(-1);
                DTO_glDocumentoControl ctrlProvOld = this._moduloGlobal.glDocumentoControl_GetByComprobante(documentID, periodoOld, compProv, 1);

                if (ctrlProvOld != null)
                {
                    result = this._moduloGlobal.glDocumentoControl_Revertir(documentID, ctrlProvOld.NumeroDoc.Value.Value, null, ref ctrlsReversion, ref coCompsReversion, true);
                    if (result.Result == ResultValue.NOK)
                        return result;
                }

                #endregion

                if (credCarteraPropia.Count > 0)
                {
                    #region Crea el documento del cierre para provisiones (glDocumentoControl)

                    ctrlProv = ObjectCopier.Clone(ctrlCredConsumo);
                    ctrlProv.ComprobanteID.Value = compProv;
                    ctrlProv.Descripcion.Value = "Cierre cartera provisiones";

                    resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlProv, true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);
                        return result;
                    }

                    ctrlProv.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);
                    comprobanteProv.Header.NumeroDoc.Value = ctrlProv.NumeroDoc.Value;
                    comprobanteProv.Header.ComprobanteNro.Value = 0;

                    #endregion
                    #region Carga la informacion del comprobante de provisiones

                    List<DTO_ComprobanteFooter> footerReclasif = new List<DTO_ComprobanteFooter>();
                    List<DTO_ComprobanteFooter> footerProvVenc = new List<DTO_ComprobanteFooter>();
                    List<DTO_ComprobanteFooter> footerGastoCartera = new List<DTO_ComprobanteFooter>();
                    List<DTO_ComprobanteFooter> footerAltoRiesgo = new List<DTO_ComprobanteFooter>();

                    #region Header

                    comprobanteProv.Header.ComprobanteID.Value = compProv;
                    comprobanteProv.Header.PeriodoID.Value = periodo;
                    comprobanteProv.Header.EmpresaID.Value = this.Empresa.ID.Value;
                    comprobanteProv.Header.TasaCambioBase.Value = 0;
                    comprobanteProv.Header.TasaCambioOtr.Value = 0;
                    comprobanteProv.Header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                    comprobanteProv.Header.MdaTransacc.Value = mdaLoc;
                    comprobanteProv.Header.ComprobanteNro.Value = 0;
                    comprobanteProv.Header.Fecha.Value = fechaDoc;

                    #endregion
                    #region Carga el detalle del comprobante de provisiones

                    foreach (DTO_ccCierreMesCartera prov in credCarteraPropia)
                    {
                        #region Detalles Reclasificacion Cartera Vencida

                        if (prov.Categoria.Value != "A" && prov.CapitalSDO.Value != null && prov.CapitalSDO.Value != 0)
                        {
                            DTO_ComprobanteFooter detDB_Prov = new DTO_ComprobanteFooter();
                            DTO_ComprobanteFooter detCR_Prov = new DTO_ComprobanteFooter();

                            ctrlCredito = cacheCtrls[prov.NumeroDoc.Value.Value];
                            riesgo = cacheRiesgo[prov.NumeroDoc.Value.Value];

                            #region DB

                            detDB_Prov.CuentaID.Value = riesgo.CtaReclasificaCAP.Value;
                            if (!cacheCtas.ContainsKey(detDB_Prov.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, riesgo.CtaReclasificaCAP.Value, true, false);
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheCtas[cta.ID.Value] = cSaldo;
                            }

                            detDB_Prov.ConceptoSaldoID.Value = cacheCtas[detDB_Prov.CuentaID.Value].ID.Value;
                            detDB_Prov.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detDB_Prov.CuentaID.Value]);

                            detDB_Prov.vlrMdaLoc.Value = Math.Round(Math.Abs(prov.CapitalSDO.Value.Value), 0);
                            detDB_Prov.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detDB_Prov.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detDB_Prov.vlrMdaOtr.Value = detDB_Prov.vlrMdaLoc.Value;

                            detDB_Prov.TerceroID.Value = ctrlCredito.TerceroID.Value;
                            detDB_Prov.ProyectoID.Value = ctrlCredito.ProyectoID.Value;
                            detDB_Prov.CentroCostoID.Value = ctrlCredito.CentroCostoID.Value;
                            detDB_Prov.LineaPresupuestoID.Value = ctrlCredito.LineaPresupuestoID.Value;
                            detDB_Prov.LugarGeograficoID.Value = ctrlCredito.LugarGeograficoID.Value;
                            detDB_Prov.PrefijoCOM.Value = ctrlCredito.PrefijoID.Value;
                            detDB_Prov.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                            detDB_Prov.vlrBaseML.Value = 0;
                            detDB_Prov.vlrBaseME.Value = 0;
                            detDB_Prov.ConceptoCargoID.Value = concCargoDef;
                            detDB_Prov.TasaCambio.Value = ctrlCredConsumo.TasaCambioDOCU.Value;

                            detDB_Prov.Descriptivo.Value = "RECLASIF. CARTERA VENCIDA";

                            footerReclasif.Add(detDB_Prov);
                            #endregion
                            #region CR

                            detCR_Prov = ObjectCopier.Clone(detDB_Prov);

                            detCR_Prov.CuentaID.Value = ctaReclasVencContra_CR;
                            detCR_Prov.ConceptoSaldoID.Value = cacheCtas[detCR_Prov.CuentaID.Value].ID.Value;
                            detCR_Prov.IdentificadorTR.Value = this.GetIdentificadorTR(ctrl1, cacheCtas[detCR_Prov.CuentaID.Value]);
                            detCR_Prov.vlrMdaLoc.Value = detDB_Prov.vlrMdaLoc.Value * -1;
                            detCR_Prov.vlrMdaExt.Value = detDB_Prov.vlrMdaExt.Value * -1;
                            detCR_Prov.vlrMdaOtr.Value = detCR_Prov.vlrMdaLoc.Value;

                            footerReclasif.Add(detCR_Prov);
                            #endregion
                        }

                        #endregion
                        #region Detalles Provisión Cartera vencida

                        if (prov.Categoria.Value != "A" && prov.ProvisionCAP.Value != null && prov.ProvisionCAP.Value != 0)
                        {
                            DTO_ComprobanteFooter detDB_Prov1 = new DTO_ComprobanteFooter();
                            DTO_ComprobanteFooter detCR_Prov1 = new DTO_ComprobanteFooter();

                            ctrlCredito = cacheCtrls[prov.NumeroDoc.Value.Value];
                            riesgo = cacheRiesgo[prov.NumeroDoc.Value.Value];

                            #region CR

                            detCR_Prov1.CuentaID.Value = riesgo.CtaProvisionCAP.Value;
                            if (!cacheCtas.ContainsKey(detCR_Prov1.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, riesgo.CtaProvisionCAP.Value, true, false);
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheCtas[cta.ID.Value] = cSaldo;
                            }

                            detCR_Prov1.ConceptoSaldoID.Value = cacheCtas[detCR_Prov1.CuentaID.Value].ID.Value;
                            detCR_Prov1.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detCR_Prov1.CuentaID.Value]);

                            detCR_Prov1.vlrMdaLoc.Value = Math.Round(Math.Abs(prov.ProvisionCAP.Value.Value) * -1, 0);
                            detCR_Prov1.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detCR_Prov1.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detCR_Prov1.vlrMdaOtr.Value = detCR_Prov1.vlrMdaLoc.Value;

                            detCR_Prov1.TerceroID.Value = ctrlCredito.TerceroID.Value;
                            detCR_Prov1.ProyectoID.Value = ctrlCredito.ProyectoID.Value;
                            detCR_Prov1.CentroCostoID.Value = ctrlCredito.CentroCostoID.Value;
                            detCR_Prov1.LineaPresupuestoID.Value = ctrlCredito.LineaPresupuestoID.Value;
                            detCR_Prov1.LugarGeograficoID.Value = ctrlCredito.LugarGeograficoID.Value;
                            detCR_Prov1.PrefijoCOM.Value = ctrlCredito.PrefijoID.Value;
                            detCR_Prov1.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                            detCR_Prov1.vlrBaseML.Value = 0;
                            detCR_Prov1.vlrBaseME.Value = 0;
                            detCR_Prov1.ConceptoCargoID.Value = concCargoDef;
                            detCR_Prov1.TasaCambio.Value = ctrlCredConsumo.TasaCambioDOCU.Value;

                            detCR_Prov1.Descriptivo.Value = "PROVISIÓN CARTERA VENCIDA";

                            footerProvVenc.Add(detCR_Prov1);
                            #endregion
                            #region DB
                            detDB_Prov1 = ObjectCopier.Clone(detCR_Prov1);

                            detDB_Prov1.CuentaID.Value = ctaProvVencContra_DB;
                            detDB_Prov1.ConceptoSaldoID.Value = cacheCtas[detDB_Prov1.CuentaID.Value].ID.Value;
                            detDB_Prov1.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detDB_Prov1.CuentaID.Value]);
                            detDB_Prov1.vlrMdaLoc.Value = detCR_Prov1.vlrMdaLoc.Value * -1;
                            detDB_Prov1.vlrMdaExt.Value = detCR_Prov1.vlrMdaExt.Value * -1;
                            detDB_Prov1.vlrMdaOtr.Value = detDB_Prov1.vlrMdaLoc.Value;

                            footerProvVenc.Add(detDB_Prov1);
                            #endregion
                        }

                        #endregion
                        #region Detalles Intereses cartera alto riesgo

                        if (prov.InteresORD.Value != null && prov.InteresORD.Value != 0)
                        {
                            DTO_ComprobanteFooter detDB_Prov2 = new DTO_ComprobanteFooter();
                            DTO_ComprobanteFooter detCR_Prov2 = new DTO_ComprobanteFooter();

                            ctrlCredito = cacheCtrls[prov.NumeroDoc.Value.Value];
                            riesgo = cacheRiesgo[prov.NumeroDoc.Value.Value];

                            if (string.IsNullOrWhiteSpace(riesgo.CtaProvisionINT.Value))
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = DictionaryMessages.Err_Cc_NoCtaProvInt + "&&" + riesgo.ClaseCredito.Value + "&&" + riesgo.DiasVencidos.Value.Value.ToString();
                                return result;
                            }

                            #region DB

                            detDB_Prov2.CuentaID.Value = riesgo.CtaProvisionINT.Value;
                            if (!cacheCtas.ContainsKey(detDB_Prov2.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, riesgo.CtaProvisionINT.Value, true, false);
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheCtas[cta.ID.Value] = cSaldo;
                            }

                            detDB_Prov2.ConceptoSaldoID.Value = cacheCtas[detDB_Prov2.CuentaID.Value].ID.Value;
                            detDB_Prov2.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detDB_Prov2.CuentaID.Value]);

                            detDB_Prov2.vlrMdaLoc.Value = Math.Round(Math.Abs(prov.InteresORD.Value.Value), 0);
                            detDB_Prov2.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detDB_Prov2.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                            detDB_Prov2.vlrMdaOtr.Value = detDB_Prov2.vlrMdaLoc.Value;

                            detDB_Prov2.TerceroID.Value = ctrlCredito.TerceroID.Value;
                            detDB_Prov2.ProyectoID.Value = ctrlCredito.ProyectoID.Value;
                            detDB_Prov2.CentroCostoID.Value = ctrlCredito.CentroCostoID.Value;
                            detDB_Prov2.LineaPresupuestoID.Value = ctrlCredito.LineaPresupuestoID.Value;
                            detDB_Prov2.LugarGeograficoID.Value = ctrlCredito.LugarGeograficoID.Value;
                            detDB_Prov2.PrefijoCOM.Value = ctrlCredito.PrefijoID.Value;
                            detDB_Prov2.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                            detDB_Prov2.vlrBaseML.Value = 0;
                            detDB_Prov2.vlrBaseME.Value = 0;
                            detDB_Prov2.ConceptoCargoID.Value = concCargoDef;
                            detDB_Prov2.TasaCambio.Value = ctrlCredConsumo.TasaCambioDOCU.Value;

                            detDB_Prov2.Descriptivo.Value = "PROVISIÓN INT. CARTERA ALTO RIESGO";

                            footerAltoRiesgo.Add(detDB_Prov2);
                            #endregion
                            #region CR
                            detCR_Prov2 = ObjectCopier.Clone(detDB_Prov2);

                            detCR_Prov2.CuentaID.Value = ctaProvVencOrdenContra_CR;
                            detCR_Prov2.ConceptoSaldoID.Value = cacheCtas[detCR_Prov2.CuentaID.Value].ID.Value;
                            detDB_Prov2.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detDB_Prov2.CuentaID.Value]);
                            detCR_Prov2.vlrMdaLoc.Value = detDB_Prov2.vlrMdaLoc.Value * -1;
                            detCR_Prov2.vlrMdaExt.Value = detDB_Prov2.vlrMdaExt.Value * -1;
                            detCR_Prov2.vlrMdaOtr.Value = detCR_Prov2.vlrMdaLoc.Value;

                            footerAltoRiesgo.Add(detCR_Prov2);
                            #endregion
                        }

                        #endregion
                        #region Detalles Provision general de cartera

                        DTO_ComprobanteFooter detDB_Prov3 = new DTO_ComprobanteFooter();
                        DTO_ComprobanteFooter detCR_Prov3 = new DTO_ComprobanteFooter();

                        ctrlCredito = cacheCtrls[prov.NumeroDoc.Value.Value];
                        riesgo = cacheRiesgo[prov.NumeroDoc.Value.Value];

                        #region CR

                        detCR_Prov3.CuentaID.Value = ctaProvGeneral;
                        detCR_Prov3.ConceptoSaldoID.Value = cacheCtas[detCR_Prov3.CuentaID.Value].ID.Value;
                        detCR_Prov3.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detCR_Prov3.CuentaID.Value]);

                        detCR_Prov3.vlrMdaLoc.Value = Math.Round(Math.Abs(prov.CapitalSDO.Value.Value * porcProvGeneral / 100) * -1, 0);
                        detCR_Prov3.vlrMdaExt.Value = ctrlCredConsumo.TasaCambioDOCU.Value == 0 ? 0 : Math.Round(detCR_Prov3.vlrMdaLoc.Value.Value / ctrlCredConsumo.TasaCambioDOCU.Value.Value, 0);
                        detCR_Prov3.vlrMdaOtr.Value = detCR_Prov3.vlrMdaLoc.Value;

                        detCR_Prov3.TerceroID.Value = ctrlCredito.TerceroID.Value;
                        detCR_Prov3.ProyectoID.Value = ctrlCredito.ProyectoID.Value;
                        detCR_Prov3.CentroCostoID.Value = ctrlCredito.CentroCostoID.Value;
                        detCR_Prov3.LineaPresupuestoID.Value = ctrlCredito.LineaPresupuestoID.Value;
                        detCR_Prov3.LugarGeograficoID.Value = ctrlCredito.LugarGeograficoID.Value;
                        detCR_Prov3.PrefijoCOM.Value = ctrlCredito.PrefijoID.Value;
                        detCR_Prov3.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                        detCR_Prov3.vlrBaseML.Value = 0;
                        detCR_Prov3.vlrBaseME.Value = 0;
                        detCR_Prov3.ConceptoCargoID.Value = concCargoDef;
                        detCR_Prov3.TasaCambio.Value = ctrlCredConsumo.TasaCambioDOCU.Value;

                        detCR_Prov3.Descriptivo.Value = "PROVISIÓN GENERAL CARTERA";

                        footerGastoCartera.Add(detCR_Prov3);
                        #endregion
                        #region DB
                        detDB_Prov3 = ObjectCopier.Clone(detCR_Prov3);

                        detDB_Prov3.CuentaID.Value = ctaGastoProvGeneral;
                        detDB_Prov3.ConceptoSaldoID.Value = cacheCtas[detDB_Prov3.CuentaID.Value].ID.Value;
                        detDB_Prov3.IdentificadorTR.Value = this.GetIdentificadorTR(ctrlCredito, cacheCtas[detDB_Prov3.CuentaID.Value]);

                        detDB_Prov3.vlrMdaLoc.Value = detCR_Prov3.vlrMdaLoc.Value * -1;
                        detDB_Prov3.vlrMdaExt.Value = detCR_Prov3.vlrMdaExt.Value * -1;
                        detDB_Prov3.vlrMdaLoc.Value = detDB_Prov3.vlrMdaLoc.Value;

                        footerGastoCartera.Add(detDB_Prov3);
                        #endregion

                        #endregion
                    }

                    comprobanteProv.Footer.AddRange(footerReclasif);
                    comprobanteProv.Footer.AddRange(footerProvVenc);
                    comprobanteProv.Footer.AddRange(footerAltoRiesgo);
                    comprobanteProv.Footer.AddRange(footerGastoCartera);

                    #endregion
                    #region Contabiliza el comprobante de provisiones

                    result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobanteProv, periodo, ModulesPrefix.cc, 0, true);

                    if (result.Result == ResultValue.NOK)
                        return result;

                    #endregion

                    #endregion
                }
                batchProgress[tupProgress] = 97;

                #endregion

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Proceso_CierreMes");

                return result;
            }
            finally
            {
                batchProgress[tupProgress] = 100;

                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Asigna consecutivos

                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        // 6.1 - Consecutivos para crédito de consumo
                        if (ctrlCredConsumo.NumeroDoc.Value != null && ctrlCredConsumo.NumeroDoc.Value != 0)
                        {
                            ctrlCredConsumo.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlCredConsumo.PrefijoID.Value);
                            ctrlCredConsumo.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlCredConsumo.PrefijoID.Value, ctrlCredConsumo.PeriodoDoc.Value.Value, ctrlCredConsumo.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlCredConsumo, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlCredConsumo.NumeroDoc.Value.Value, ctrlCredConsumo.ComprobanteIDNro.Value.Value, false);
                        }

                        // 6.2 - Consecutivos para el comprobante de interes anticipado
                        if (ctrlIntAnt != null)
                        {
                            ctrlIntAnt.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlIntAnt.PrefijoID.Value);
                            ctrlIntAnt.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlIntAnt.PrefijoID.Value, ctrlIntAnt.PeriodoDoc.Value.Value, ctrlIntAnt.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlIntAnt, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlIntAnt.NumeroDoc.Value.Value, ctrlIntAnt.ComprobanteIDNro.Value.Value, false);
                        }

                        // 6.3 - Consecutivos para patrimonio autónomo
                        if (ctrlPatrimonio != null)
                        {
                            ctrlPatrimonio.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlPatrimonio.PrefijoID.Value);
                            ctrlPatrimonio.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlPatrimonio.PrefijoID.Value, ctrlPatrimonio.PeriodoDoc.Value.Value, ctrlPatrimonio.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlPatrimonio, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlPatrimonio.NumeroDoc.Value.Value, ctrlPatrimonio.ComprobanteIDNro.Value.Value, false);
                        }

                        // 6.4 - Consecutivos para cuotas pagadas
                        if (ctrlCuotasPagadas != null)
                        {
                            ctrlCuotasPagadas.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlCuotasPagadas.PrefijoID.Value);
                            ctrlCuotasPagadas.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlCuotasPagadas.PrefijoID.Value, ctrlCuotasPagadas.PeriodoDoc.Value.Value, ctrlCuotasPagadas.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlCuotasPagadas, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlCuotasPagadas.NumeroDoc.Value.Value, ctrlCuotasPagadas.ComprobanteIDNro.Value.Value, false);
                        }
                        // 6.5 - Consecutivos para interes vencido de cartera propia
                        if (ctrlIntVencPropia != null)
                        {
                            ctrlIntVencPropia.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlIntVencPropia.PrefijoID.Value);
                            ctrlIntVencPropia.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlIntVencPropia.PrefijoID.Value, ctrlIntVencPropia.PeriodoDoc.Value.Value, ctrlIntVencPropia.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlIntVencPropia, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlIntVencPropia.NumeroDoc.Value.Value, ctrlIntVencPropia.ComprobanteIDNro.Value.Value, false);
                        }

                        // 6.6 - Consecutivos para provisión de interes vencido
                        if (ctrlProvIntVenc != null)
                        {
                            ctrlProvIntVenc.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlProvIntVenc.PrefijoID.Value);
                            ctrlProvIntVenc.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlProvIntVenc.PrefijoID.Value, ctrlProvIntVenc.PeriodoDoc.Value.Value, ctrlProvIntVenc.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlProvIntVenc, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlProvIntVenc.NumeroDoc.Value.Value, ctrlProvIntVenc.ComprobanteIDNro.Value.Value, false);
                        }

                        // 6.7 - Consecutivos saldos de cartera cedida
                        if (ctrlCarteraCedida != null)
                        {
                            ctrlCarteraCedida.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlCarteraCedida.PrefijoID.Value);
                            ctrlCarteraCedida.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlCarteraCedida.PrefijoID.Value, ctrlCarteraCedida.PeriodoDoc.Value.Value, ctrlCarteraCedida.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlCarteraCedida, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlCarteraCedida.NumeroDoc.Value.Value, ctrlCarteraCedida.ComprobanteIDNro.Value.Value, false);
                        }

                        // 6.8 - Consecutivos para provisiones
                        if (ctrlProv != null)
                        {
                            ctrlProv.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlProv.PrefijoID.Value);
                            ctrlProv.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompProv, ctrlProv.PrefijoID.Value, ctrlProv.PeriodoDoc.Value.Value, ctrlProv.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlProv, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlProv.NumeroDoc.Value.Value, ctrlProv.ComprobanteIDNro.Value.Value, false);
                        }

                        //Consecutivos para los documentos de reversion
                        for (int i = 0; i < ctrlsReversion.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlAnula = ctrlsReversion[i];
                            DTO_coComprobante coCompAnula = coCompsReversion[i];

                            //Obtiene el consecutivo del comprobante (cuando existe)
                            if (coCompAnula != null)
                                ctrlAnula.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompAnula, ctrlAnula.PrefijoID.Value, ctrlAnula.PeriodoDoc.Value.Value, ctrlAnula.DocumentoNro.Value.Value);

                            ctrlAnula.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlAnula.DocumentoID.Value.Value, ctrlAnula.PrefijoID.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlAnula, true, coCompAnula != null, false);

                            if (coCompAnula != null)
                                this._moduloContabilidad.ActualizaComprobanteNro(ctrlAnula.NumeroDoc.Value.Value, ctrlAnula.ComprobanteIDNro.Value.Value, false);
                        }

                        #endregion
                    }
                    else
                        throw new Exception("ContabilizaLiquidacion - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Carga la información para hacer un cierre diario
        /// </summary>
        /// <param name="fecha">Fecha de cierre</param>
        /// <returns></returns>
        public List<DTO_ccCierreMes> ccCierreMes_GetAll(Int16 año)
        {
            this._dal_ccCierreMes = (DAL_ccCierreMes)base.GetInstance(typeof(DAL_ccCierreMes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccCierreMes.DAL_ccCierreMes_GetAll(año);
        }

        /// <summary>
        /// Carga todos los cierres mes con uno o varios filtros
        /// </summary>
        /// <param name="filter">filtro</param>
        /// <returns>Lista de CierresCartera</returns>
        public List<DTO_ccCierreMesCartera> ccCierreMesCartera_GetByParameter(DTO_ccCierreMesCartera filter)
        {
            this._dal_ccCierreMes = (DAL_ccCierreMes)base.GetInstance(typeof(DAL_ccCierreMes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccCierreMes.DAL_ccCierreMesCartera_GetByParameter(filter);
        }

        /// <summary>
        /// Carga la información para realizar listado de Centrales de Riesgo
        /// </summary>
        /// <param name="periodo">Periodo a consultar</param>
        /// <returns>Listado de Cierres</returns>
        public List<DTO_CentralRiesgoMes> ccCierreMesCartera_GetCierreCentralRiesgoMes(DateTime periodo)
        {
            List<DTO_CentralRiesgoMes> result = new List<DTO_CentralRiesgoMes>();
            this._dal_ccCierreMes = (DAL_ccCierreMes)base.GetInstance(typeof(DAL_ccCierreMes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            result = this._dal_ccCierreMes.DAL_ccCierreMesCartera_GetCierreCentralRiesgo(periodo);

            DateTime periodoAnt = new DateTime(periodo.Year, periodo.Month - 1, periodo.Day);
            List<DTO_CentralRiesgoMes> cancelados = this._dal_ccCierreMes.DAL_ccCierreMesCartera_GetCierreCentralRiesgo(periodoAnt);

            //List<DTO_CentralRiesgoMes> Existen = (from p in cancelados 
            //                                      where (from b in result select b.Obligacion).Contains(p.Obligacion)
            //                                      select p).Distinct().ToList();

            List<DTO_CentralRiesgoMes> NoExisten = (from p in cancelados               
                                                    where !(from b in result select b.Obligacion).Contains(p.Obligacion)
                                                    select p).Distinct().ToList();


            result.AddRange(NoExisten);

            foreach (var cierre in result)
	        {
		        if(cierre.DiasMora.Value <= 29)
                {
                    cierre.EdadMora.Value = "001";
                    cierre.Calificacion.Value = "A";                   
                }
                else if(cierre.DiasMora.Value >= 30 && cierre.DiasMora.Value <= 59)
                {
                    cierre.EdadMora.Value = "030";
                    cierre.Calificacion.Value = "B";                   
                }
                else if(cierre.DiasMora.Value >= 60 && cierre.DiasMora.Value <= 89)
                {
                    cierre.EdadMora.Value = "060";
                    cierre.Calificacion.Value = "B";                   
                }
                else if(cierre.DiasMora.Value >= 90 && cierre.DiasMora.Value <= 119)
                {
                    cierre.EdadMora.Value = "090";
                    cierre.Calificacion.Value = "C";                   
                }
                else if(cierre.DiasMora.Value >= 120 && cierre.DiasMora.Value <= 149)
                {
                    cierre.EdadMora.Value = "120";
                    cierre.Calificacion.Value = "C";                   
                }
                else if(cierre.DiasMora.Value >= 150 && cierre.DiasMora.Value <= 179)
                {
                    cierre.EdadMora.Value = "150";
                    cierre.Calificacion.Value = "C";                   
                }
                else if(cierre.DiasMora.Value >= 180 && cierre.DiasMora.Value <= 209)
                {
                    cierre.EdadMora.Value = "180";
                    cierre.Calificacion.Value = "D";                   
                }
                else if(cierre.DiasMora.Value >= 210 && cierre.DiasMora.Value <= 239)
                {
                    cierre.EdadMora.Value = "210";
                    cierre.Calificacion.Value = "D";                   
                }
                else if(cierre.DiasMora.Value >= 240 && cierre.DiasMora.Value <= 269)
                {
                    cierre.EdadMora.Value = "240";
                    cierre.Calificacion.Value = "D";                   
                }
                else if(cierre.DiasMora.Value >= 270 && cierre.DiasMora.Value <= 299)
                {
                    cierre.EdadMora.Value = "270";
                    cierre.Calificacion.Value = "D";                   
                }
                else if(cierre.DiasMora.Value >= 300 && cierre.DiasMora.Value <= 329)
                {
                    cierre.EdadMora.Value = "300";
                    cierre.Calificacion.Value = "D";                   
                }
                else if(cierre.DiasMora.Value >= 330 && cierre.DiasMora.Value <= 359)
                {
                    cierre.EdadMora.Value = "330";
                    cierre.Calificacion.Value = "D";                   
                }
                 else if(cierre.DiasMora.Value >= 360 && cierre.DiasMora.Value <= 389)
                {
                    cierre.EdadMora.Value = "360";
                    cierre.Calificacion.Value = "D";                   
                }
	        }
            return result;
        }

        #endregion

        #endregion

        #region Migraciones

        #region Funciones Privadas

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="documentID">Documento ID</param>
        /// <param name="ventaCredito">DTO con la informacion de ventaDeta</param>
        private DTO_TxResult MigracionCartera_Guardar(int documentID, DateTime periodo, string compComodinID, DTO_MigracionCartera dto, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloCxP = (ModuloCuentasXPagar)base.GetInstance(typeof(ModuloCuentasXPagar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccVentaDeta = (DAL_ccVentaDeta)base.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccFlujoCesionDocu = (DAL_ccFlujoCesionDocu)base.GetInstance(typeof(DAL_ccFlujoCesionDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccFlujoCesionDeta = (DAL_ccFlujoCesionDeta)base.GetInstance(typeof(DAL_ccFlujoCesionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            DTO_glDocumentoControl ctrlCredito = new DTO_glDocumentoControl();
            DTO_glDocumentoControl ctrlRecuadoManual = null;
            DTO_glDocumentoControl ctrlVenta = null;
            DTO_glDocumentoControl ctrlPagoFlujos = null;
            DTO_glDocumentoControl ctrlCxPFlujos = new DTO_glDocumentoControl();
            DTO_ccVentaDocu ventaDocu = new DTO_ccVentaDocu();
            DTO_Comprobante comprobanteCredito = new DTO_Comprobante();
            DTO_Comprobante comprobanteVenta = new DTO_Comprobante();
            DTO_Comprobante compPagoFlujo = new DTO_Comprobante();
            DTO_coDocumento coDocCredito = new DTO_coDocumento();
            DTO_coDocumento coDocVenta = new DTO_coDocumento();
            DTO_coDocumento coDocPagoFlujo = new DTO_coDocumento();
            DTO_coComprobante coCompCredito = new DTO_coComprobante();
            DTO_coComprobante coCompRecuado = new DTO_coComprobante();
            DTO_coComprobante coCompVenta = new DTO_coComprobante();
            DTO_coPlanCuenta coPlanCtaFlujos = new DTO_coPlanCuenta();
            DTO_glConceptoSaldo concSaldoFlujos = new DTO_glConceptoSaldo();
            List<DTO_ComprobanteFooter> compFooterVenta = new List<DTO_ComprobanteFooter>();
            #endregion
            try
            {
                #region Variables Generales
                string areaFuncionalID = this.GetAreaFuncionalByUser();
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                decimal tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, periodo);

                //Variables por defecto
                string defTercero = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TerceroXDefecto);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defConceptoCargo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);

                //variables de componentes
                object compTempCredito = null;
                object compTempVenta = null;
                string compracarteraPropia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);
                string compCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string compSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string compAportes = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentedeAportes);

                //Variables de cuentas
                string ctaUtilidadID_Ganancias = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaUtilidadCesion);
                string ctaUtilidadID_Perdidas = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaCostoRecompraCartera);
                string ctaContraOrden_Propia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterPropia);
                string ctaContraOrden_Cedida = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterCedida);
                string ctaContraBalance_Cedida = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaBalanceCarteraCedida);
                string ctaOrdenCapitalCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenCapitalCesion);
                string ctaOrdenUtilidadCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenUtilidadCesion);
                string ctaOrdenCesionContra = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenCesionXContra);
                string ctaProvisionUtilidad = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaProvisionUtilidadVenta);
                string ctaReservaVenta = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaReservaVenta);
                string porcReservaUtilidadStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ReservaUtilidad);
                decimal tasaReservaUtilidad = !string.IsNullOrWhiteSpace(porcReservaUtilidadStr) ? Convert.ToDecimal(porcReservaUtilidadStr) : 0;

                //Variables de documentos contables
                string conceptoCxPFlujos = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CXPparaPagodeFlujos);
                string docContableMigracion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocuContMigSaldos);
                string docContableVenta = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocumentoVentaCartera);
                string docContablePagoFlujos = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocumentoContablePagoFlujos);

                //Variables de procedimiento y validaciones
                string nitFiduciaria = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_TerceroFiduciaria);
                string cajaRecaudos = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCajaRecaudosMasivos);
                string contabilizaOrdCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ContabilizacionCtasOrdCesion);
                Dictionary<int, decimal> vlrTotalesComponentes = new Dictionary<int, decimal>();

                //Variables para procesar la migracion
                DateTime fechaDoc = new DateTime(periodo.Year, periodo.Month, DateTime.DaysInMonth(periodo.Year, periodo.Month));
                string msgVentaInvalida = this.GetResource(LanguageTypes.Error, DictionaryMessages.Err_Cc_InvalidVentaCartera);
                string descCompComodin = string.Empty;
                object obj = null;

                int j = 0;
                int difVlrCuota = 0;
                //int ultCuota = 0;
                int primeraCuotaVenta = 0;
                decimal vlrPagos = dto.VlrPagos.Value.Value;
                bool hasPagos = vlrPagos != 0 ? true : false;
                bool hasVenta = false;
                bool hasFlujos = false;

                if (dto.NumCuotaVendidas.Value != null)
                    primeraCuotaVenta = dto.Plazo.Value.Value - dto.NumCuotaVendidas.Value.Value;

                if (dto.VlrVenta.Value != null)
                    hasVenta = dto.VlrVenta.Value.Value != 0 ? true : false;

                if (dto.VlrVenta.Value != null)
                    hasFlujos = dto.FlujosPago.Value.Value != 0 ? true : false;

                //DTO's
                List<DTO_ccCreditoPlanPagos> planPagos = new List<DTO_ccCreditoPlanPagos>();
                List<DTO_ccFlujoCesionDeta> flujosDeta = new List<DTO_ccFlujoCesionDeta>();
                DTO_TxResultDetail rd = new DTO_TxResultDetail();
                DTO_ccCompradorCartera comprador = new DTO_ccCompradorCartera();
                DTO_ccCreditoDocu credito = new DTO_ccCreditoDocu();
                DTO_PlanDePagos liquidacion = new DTO_PlanDePagos();
                DTO_tsCaja cajaRecuado = new DTO_tsCaja();

                //Actividades de flujo
                //Carga la actividad de la liquidacion del credito
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.AprobacionGiros);
                string actFlujoAprobGiro = actividades[0];

                actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.EntregaLibranza);
                string actFlujoEntregaLib = actividades[0];

                actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.VentaCartera);
                string actFlujoVenta = actividades[0];

                //Consecutivo del credito
                string EmpNro = this.Empresa.NumeroControl.Value;
                string _modId = ((int)ModulesPrefix.cc).ToString();
                string keyControl = EmpNro + _modId + AppControl.cc_ConsecutivoCreditos;

                DTO_glControl consecutivoCredDTO = this._moduloGlobal.GetControlByID(Convert.ToInt32(keyControl));
                int consecutivoCred = string.IsNullOrWhiteSpace(consecutivoCredDTO.Data.Value) ? 1 : Convert.ToInt32(consecutivoCredDTO.Data.Value) + 1;

                DTO_ccLineaCredito lineaCred = (DTO_ccLineaCredito)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccLineaCredito, dto.LineaCreditoID.Value, true, false);

                #endregion
                #region Crea la lista con los valores totales de los componentes
                vlrTotalesComponentes.Add(1, dto.VlrComponente1.Value.Value);
                vlrTotalesComponentes.Add(2, dto.VlrComponente2.Value.Value);
                vlrTotalesComponentes.Add(3, dto.VlrComponente3.Value.Value);
                vlrTotalesComponentes.Add(4, dto.VlrComponente4.Value.Value);
                vlrTotalesComponentes.Add(5, dto.VlrComponente5.Value.Value);
                vlrTotalesComponentes.Add(6, dto.VlrComponente6.Value.Value);
                vlrTotalesComponentes.Add(7, dto.VlrComponente7.Value.Value);
                vlrTotalesComponentes.Add(8, dto.VlrComponente8.Value.Value);
                vlrTotalesComponentes.Add(9, dto.VlrComponente9.Value.Value);
                vlrTotalesComponentes.Add(10, dto.VlrComponente10.Value.Value);
                #endregion
                #region Validaciones

                //Valida el coDocumento de la venta
                if (string.IsNullOrWhiteSpace(docContableVenta))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocumentoVentaCartera + "&&" + string.Empty;

                    return result;
                }
                else
                    coDocVenta = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, docContableVenta, true, false);

                //Valida que tenga comprobante
                if (string.IsNullOrWhiteSpace(coDocVenta.ComprobanteID.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;

                    return result;
                }

                //Valida que el documento asociado tenga cuenta local
                if (string.IsNullOrWhiteSpace(coDocVenta.CuentaLOC.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + docContableVenta;
                    return result;
                }

                //Valida que exista el documento contable del credito
                if (string.IsNullOrWhiteSpace(docContableMigracion))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocuContMigSaldos + "&&" + string.Empty;

                    return result;
                }
                else
                    coDocCredito = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, docContableMigracion, true, false);

                //Valida que exista el documento contable de los flujos
                if (!string.IsNullOrWhiteSpace(docContablePagoFlujos))
                {
                    coDocPagoFlujo = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, docContablePagoFlujos, true, false);
                    if (!string.IsNullOrWhiteSpace(coDocPagoFlujo.CuentaLOC.Value))
                    {
                        coPlanCtaFlujos = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, coDocPagoFlujo.CuentaLOC.Value, true, false);
                        concSaldoFlujos = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, coPlanCtaFlujos.ConceptoSaldoID.Value, true, false);
                    }
                    else
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocPagoFlujo.ID.Value;

                        return result;
                    }
                }
                else
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocumentoContablePagoFlujos + "&&" + string.Empty;

                    return result;
                }

                //Valida que el conceptoCxP de los flujos exista
                if (string.IsNullOrWhiteSpace(conceptoCxPFlujos))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CXPparaPagodeFlujos + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta de contra de orden cartera propia
                if (string.IsNullOrWhiteSpace(ctaContraOrden_Propia))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenContraCarterPropia + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta de contra de orden cartera cedida
                if (string.IsNullOrWhiteSpace(ctaContraOrden_Cedida))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenContraCarterCedida + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta de la utilidad de la cesion
                if (string.IsNullOrWhiteSpace(ctaUtilidadID_Ganancias))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaUtilidadCesion + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta de la utilidad de la cesion
                if (string.IsNullOrWhiteSpace(ctaUtilidadID_Perdidas))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaCostoRecompraCartera + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta de orden de capital cesion
                if (string.IsNullOrWhiteSpace(ctaOrdenCapitalCesion))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenCapitalCesion + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta de orden de utilidad cesion
                if (string.IsNullOrWhiteSpace(ctaOrdenUtilidadCesion))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaUtilidadCesion + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta de contrapartida de la cesion
                if (string.IsNullOrWhiteSpace(ctaOrdenCesionContra))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenCesionXContra + "&&" + string.Empty;

                    return result;
                }

                //Valida que exista una caja para realizar el recuado
                if (string.IsNullOrWhiteSpace(cajaRecaudos))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CodigoCajaRecaudosMasivos + "&&" + string.Empty;

                    return result;
                }
                else
                    cajaRecuado = (DTO_tsCaja)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.tsCaja, cajaRecaudos, true, false);
                #endregion
                #region Crea el Credito
                #region Crea el glDocumentoControl
                //ctrlCredito = new DTO_glDocumentoControl();
                ctrlCredito.PeriodoDoc.Value = periodo;
                ctrlCredito.PeriodoUltMov.Value = periodo;
                ctrlCredito.DocumentoID.Value = AppDocuments.LiquidacionCredito;
                ctrlCredito.NumeroDoc.Value = 0;
                ctrlCredito.ComprobanteID.Value = coDocCredito.ComprobanteID.Value;
                ctrlCredito.DocumentoTipo.Value = (byte)DocumentoTipo.DocExterno;
                ctrlCredito.Fecha.Value = DateTime.Now;
                ctrlCredito.FechaDoc.Value = fechaDoc;
                ctrlCredito.LugarGeograficoID.Value = dto.Ciudad.Value;
                ctrlCredito.AreaFuncionalID.Value = areaFuncionalID;
                ctrlCredito.PrefijoID.Value = defPrefijo;
                ctrlCredito.MonedaID.Value = mdaLoc;
                ctrlCredito.ProyectoID.Value = defProyecto;
                ctrlCredito.CentroCostoID.Value = defCentroCosto;
                ctrlCredito.LineaPresupuestoID.Value = defLineaPresupuesto;
                ctrlCredito.TerceroID.Value = dto.ClienteID.Value;
                ctrlCredito.DocumentoTercero.Value = dto.Libranza.Value.ToString();
                ctrlCredito.DocumentoNro.Value = 0;
                ctrlCredito.TasaCambioDOCU.Value = 0;
                ctrlCredito.TasaCambioCONT.Value = 0;
                ctrlCredito.Valor.Value = dto.VlrCredito.Value.Value;
                ctrlCredito.Iva.Value = 0;
                ctrlCredito.Observacion.Value = "Migracion - Credito";
                ctrlCredito.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrlCredito.seUsuarioID.Value = this.UserId;

                rd = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.LiquidacionCredito, ctrlCredito, true);
                if (rd.Message != ResultValue.OK.ToString())
                {
                    result.Result = ResultValue.NOK;
                    rd.line = 1;
                    result.Details.Add(rd);

                    return result;
                }
                else
                {
                    ctrlCredito.NumeroDoc.Value = Convert.ToInt32(rd.Key);
                    //this.AsignarFlujo(AppDocuments.AprobacionGiros, ctrlCredito.NumeroDoc.Value.Value, actFlujoAprobGiro, false, string.Empty);
                }
                #endregion
                #region Agrega el Credito

                credito.NumeroDoc.Value = ctrlCredito.NumeroDoc.Value;
                credito.NumSolicitud.Value = ctrlCredito.NumeroDoc.Value;
                credito.ClienteID.Value = dto.ClienteID.Value;
                credito.Libranza.Value = dto.Libranza.Value;
                credito.LineaCreditoID.Value = dto.LineaCreditoID.Value;
                credito.AsesorID.Value = dto.AsesorID.Value;
                credito.CentroPagoID.Value = dto.CentroPagoID.Value;
                credito.PagaduriaID.Value = dto.PagaduriaID.Value;
                credito.ZonaID.Value = dto.ZonaID.Value;
                credito.EstadoDeuda.Value = (byte)EstadoDeuda.Normal;
                credito.IncorporaMesInd.Value = false;
                credito.FechaLiquida.Value = dto.FechaLiquidacion.Value;
                credito.FechaCuota1.Value = dto.FechaCuota1.Value;
                credito.TipoEstado.Value = dto.TipoEstado.Value;
                credito.Ciudad.Value = dto.Ciudad.Value;
                credito.CompradorCarteraID.Value = dto.CompradorID.Value;

                if (dto.CompradorID.Value == compracarteraPropia)
                {
                    credito.CompraCarteraInd.Value = false;
                }
                else
                {
                    credito.CompraCarteraInd.Value = true;
                    credito.CompradorFinalID.Value = dto.CompradorID.Value;
                    credito.VendidaInd.Value = true;
                }

                credito.TipoCredito.Value = 1; // Nuevo
                credito.IncorporacionTipo.Value = 1; // Nuevo
                credito.PorInteres.Value = dto.PorInteres.Value;
                credito.PorSeguro.Value = 0;
                credito.PorComponente1.Value = 0;
                credito.PorComponente2.Value = 0;
                credito.PorComponente3.Value = 0;
                credito.Plazo.Value = dto.Plazo.Value;
                credito.VlrSolicitado.Value = dto.VlrCredito.Value;
                credito.VlrAdicional.Value = 0;
                credito.VlrPrestamo.Value = dto.VlrCredito.Value;
                credito.VlrLibranza.Value = dto.VlrLibranza.Value;
                credito.VlrCompra.Value = 0;
                credito.VlrDescuento.Value = 0;
                credito.VlrGiro.Value = dto.VlrCredito.Value;
                credito.VlrCuota.Value = dto.VlrCuota.Value;
                credito.VlrCupoDisponible.Value = 0;
                credito.PagoVentanillaInd.Value = false;
                credito.BloqueaVentaInd.Value = false;
                credito.VendidaInd.Value = false;
                credito.Observacion.Value = "Migracion";
                credito.CanceladoInd.Value = false;
                credito.DocAcuerdoPago.Value = 0;
                credito.VlrMaximoNivelRiesgo.Value = 0;
                credito.NumIncorporaDoc.Value = 0;
                //credito.CooperativaID.Value = dto.coo

                credito.EmpresaID.Value = this.Empresa.ID.Value;
                
                // Trae la liquidacion
                int vlrCredito = Convert.ToInt32(dto.VlrCredito.Value);
                int vlrCuota = Convert.ToInt32(dto.VlrCuota.Value);
                obj = this.LiquidacionMigracionCartera(dto.LineaCreditoID.Value, dto.PagaduriaID.Value, vlrCredito, vlrCuota, dto.Plazo.Value.Value, 
                    dto.PorInteres.Value.Value, fechaDoc, vlrTotalesComponentes, null, dto.FechaCuota1.Value.Value);
                if (obj.GetType() == typeof(DTO_TxResult))
                {
                    result = (DTO_TxResult)obj;
                    result.Result = ResultValue.NOK;

                    return result;
                }
                else
                {
                    liquidacion = (DTO_PlanDePagos)obj;
                    liquidacion.VlrLibranza = (int)credito.VlrLibranza.Value.Value;
                    descCompComodin = (from c in liquidacion.ComponentesAll where c.ComponenteCarteraID.Value == compComodinID select c.Descripcion.Value).First();
                    credito.VlrCupoDisponible.Value = liquidacion.VlrCuota;
                    
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Add(credito);
                }

                #endregion
                #region Actualiza la info de los componentes fijos
                difVlrCuota = Convert.ToInt32(Math.Abs(dto.VlrCuota.Value.Value - liquidacion.VlrCuota));
                foreach (DTO_ccSolicitudComponentes item in liquidacion.ComponentesAll)
                {
                    item.NumeroDoc.Value = ctrlCredito.NumeroDoc.Value;

                    bool isFijo = liquidacion.ComponentesFijos.ContainsKey(item.Descripcion.Value);
                    if (isFijo)
                    {
                        if (item.ComponenteCarteraID.Value == compComodinID)
                        {
                            #region Actualiza el valor del componente comodin

                            if (dto.VlrCuota.Value > liquidacion.VlrCuota)
                                item.TotalValor.Value += difVlrCuota;
                            else
                                item.TotalValor.Value -= difVlrCuota;

                            if (item.TotalValor.Value < 0)
                            {
                                rd.Message = DictionaryMessages.Err_Cc_ComodinNeg + "&&" + liquidacion.VlrCuota.ToString();
                                result.Result = ResultValue.NOK;

                                return result;
                            }

                            #endregion
                        }
                    }
                    #region Crea el componente del credito con base a la liquidacion
                    DTO_ccCreditoComponentes credComponente = new DTO_ccCreditoComponentes();
                    credComponente.NumeroDoc.Value = item.NumeroDoc.Value;
                    credComponente.ComponenteCarteraID.Value = item.ComponenteCarteraID.Value;
                    credComponente.CuotaValor.Value = item.CuotaValor.Value;
                    credComponente.TotalValor.Value = item.TotalValor.Value;
                    credComponente.AbonoValor.Value = 0;
                    credComponente.DescuentoInd.Value = false;
                    credComponente.CompInvisibleInd.Value = false;
                    #endregion
                    if (item.TotalValor.Value.Value != 0)
                        this._dal_ccCreditoComponentes.DAL_ccCarteraComponentes_Add(credComponente);
                }
                #endregion
                #region Actualiza el valor total de los componentes fijos en el plan de pagos
                int vlrDifCuota = difVlrCuota / dto.Plazo.Value.Value;
                if (vlrDifCuota != 0)
                {
                    foreach (DTO_Cuota cuota in liquidacion.Cuotas)
                    {
                        #region Actualiza el valor de los componentes con base al componente comodin
                        if (dto.VlrCuota.Value != liquidacion.VlrCuota)
                        {
                            if (compComodinID == compSeguro)
                            {
                                if (dto.VlrCuota.Value > liquidacion.VlrCuota)
                                    cuota.Seguro += vlrDifCuota;
                                else
                                    cuota.Seguro -= vlrDifCuota;
                            }
                            else
                            {
                                for (j = 0; j < cuota.Componentes.Count; ++j)
                                {
                                    if (cuota.Componentes[j] == descCompComodin)
                                    {
                                        if (dto.VlrCuota.Value > liquidacion.VlrCuota)
                                            cuota.ValoresComponentes[j] += vlrDifCuota;
                                        else
                                            cuota.ValoresComponentes[j] -= vlrDifCuota;

                                        j = cuota.Componentes.Count;
                                    }
                                }
                            }
                        }
                        #endregion
                        cuota.ValorCuota = cuota.Capital + cuota.Intereses + cuota.Seguro + cuota.ValoresComponentes.Sum();
                    }
                }
                liquidacion.VlrCuota = liquidacion.Cuotas[0].ValorCuota;
                this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Add(liquidacion, ctrlCredito.NumeroDoc.Value.Value);

                #endregion
                #region Contabilizacion Credito
                DTO_ccAsesor asesor = (DTO_ccAsesor)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccAsesor, dto.AsesorID.Value, true, false);
                List<List<DTO_ComprobanteFooter>> footerRecompras = new List<List<DTO_ComprobanteFooter>>();
                compTempCredito = this.GenerarComprobanteLiquidacion(documentID, ctrlCredito, coDocCredito, lineaCred.ClaseCredito.Value, ctaContraOrden_Propia, string.Empty,
                    compSeguro, footerRecompras, 0, asesor.TerceroID.Value, defConceptoCargo, defLugarGeografico, defLineaPresupuesto);
                if (compTempCredito.GetType() == typeof(DTO_TxResult))
                {
                    result = (DTO_TxResult)compTempCredito;
                    return result;
                }
                else
                {
                    comprobanteCredito = (DTO_Comprobante)compTempCredito;
                    coCompCredito = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, comprobanteCredito.Header.ComprobanteID.Value, true, false);
                    result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobanteCredito, periodo, ModulesPrefix.cc, 0, false);

                    if (result.Result == ResultValue.NOK)
                        return result;
                }
                #region Actualiza la fechadoc de glDocumentoControl (en comentarios)
                //ctrlCredito.FechaDoc.Value = credito.FechaLiquida.Value;
                //this._moduloGlobal.glDocumentoControl_Update(ctrlCredito, false, true);
                #endregion
                #endregion
                #endregion
                #region Crea la Venta
                //Verifica si el credito se credito se creo correctamente
                if (dto.CompradorID.Value != compracarteraPropia && hasVenta)
                {
                    //Comprador
                    comprador = (DTO_ccCompradorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCompradorCartera,
                        dto.CompradorID.Value, true, false);

                    if(planPagos.Count == 0)
                        planPagos = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(ctrlCredito.NumeroDoc.Value.Value);
                    
                    List<DTO_ccCreditoPlanPagos> planPagosVenta = planPagos.Where(x => x.CuotaID.Value.Value > primeraCuotaVenta && x.VlrPagadoCuota.Value == 0).ToList();
                    if (planPagosVenta.Count > 0)
                    {
                        primeraCuotaVenta = planPagosVenta[0].CuotaID.Value.Value;
                        #region Crea el glDocumentoControl
                        ctrlVenta = new DTO_glDocumentoControl();
                        ctrlVenta.PeriodoDoc.Value = periodo;
                        ctrlVenta.PeriodoUltMov.Value = periodo;
                        ctrlVenta.DocumentoID.Value = AppDocuments.VentaCartera;
                        ctrlVenta.ComprobanteID.Value = coDocVenta.ComprobanteID.Value;
                        ctrlVenta.NumeroDoc.Value = 0;
                        ctrlVenta.DocumentoTipo.Value = (byte)DocumentoTipo.DocExterno;
                        ctrlVenta.Fecha.Value = DateTime.Now;
                        ctrlVenta.FechaDoc.Value = fechaDoc;
                        ctrlVenta.LugarGeograficoID.Value = dto.Ciudad.Value;
                        ctrlVenta.AreaFuncionalID.Value = areaFuncionalID;
                        ctrlVenta.PrefijoID.Value = defPrefijo;
                        ctrlVenta.MonedaID.Value = mdaLoc;
                        ctrlVenta.ProyectoID.Value = defProyecto;
                        ctrlVenta.CentroCostoID.Value = defCentroCosto;
                        ctrlVenta.LineaPresupuestoID.Value = defLineaPresupuesto;
                        ctrlVenta.TerceroID.Value = dto.ClienteID.Value;
                        ctrlVenta.DocumentoTercero.Value = dto.Libranza.Value.ToString();
                        ctrlVenta.DocumentoNro.Value = 0;
                        ctrlVenta.TasaCambioDOCU.Value = 0;
                        ctrlVenta.TasaCambioCONT.Value = 0;
                        ctrlVenta.Valor.Value = dto.VlrVenta.Value.Value;
                        ctrlVenta.Iva.Value = 0;
                        ctrlVenta.Observacion.Value = "Migracion - Venta";
                        ctrlVenta.Estado.Value = (byte)EstadoDocControl.Aprobado;
                        ctrlVenta.seUsuarioID.Value = this.UserId;

                        rd = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.VentaCartera, ctrlVenta, true);
                        if (rd.Message != ResultValue.OK.ToString())
                        {
                            result.Result = ResultValue.NOK;
                            rd.line = 1;
                            result.Details.Add(rd);

                            return result;
                        }
                        else
                        {
                            ctrlVenta.NumeroDoc.Value = Convert.ToInt32(rd.Key);
                            //this.AsignarFlujo(AppDocuments.VentaCartera, ctrlCredito.NumeroDoc.Value.Value, actFlujoVenta, false, string.Empty);
                        }
                        #endregion
                        #region Calcula el valor de la venta y Actualiza el plan de pagos
                        
                        int numCuotas = planPagosVenta.Count();
                        decimal vlrCuotaVenta;
                        decimal vlrCompVenta = 0;
                        decimal vlrUtilidadCesion = 0;
                        decimal vlrDerechosCesion = 0;
                        decimal vlrCapitalCesion = 0;
                        decimal tasaTemp = dto.TasaVenta.Value.Value;
                        if (comprador.TipoLiquidacion.Value.Value == (byte)TipoLiquidacionComprador.Total)
                            vlrCuotaVenta = dto.VlrCuota.Value.Value;
                        else
                            vlrCuotaVenta = planPagosVenta[0].VlrCapital.Value.Value + planPagosVenta[0].VlrInteres.Value.Value;

                        #region Actualiza el plan de pagos
                        for (int k = 0; k < planPagosVenta.Count; ++k)
                        {
                            if (k == 0)
                            {
                                vlrCompVenta += planPagosVenta[k].VlrCapital.Value.Value; //+ planPagosVenta[k].VlrSeguro.Value.Value + planPagosVenta[k].VlrOtrosFijos.Value.Value;

                                vlrUtilidadCesion = Math.Round(dto.VlrVenta.Value.Value * tasaTemp);
                                vlrCapitalCesion = vlrCuotaVenta - vlrUtilidadCesion;
                                vlrDerechosCesion = vlrCapitalCesion - planPagosVenta[k].VlrCapital.Value.Value;
                                planPagosVenta[k].VlrSaldoCapitalCesion.Value = dto.VlrVenta.Value.Value;
                                planPagosVenta[k].VlrUtilidadCesion.Value = vlrUtilidadCesion;
                                planPagosVenta[k].VlrCapitalCesion.Value = vlrCapitalCesion;
                                planPagosVenta[k].VlrDerechosCesion.Value = vlrDerechosCesion;
                            }
                            else if (k == planPagosVenta.Count - 1)
                            {
                                vlrCompVenta += planPagosVenta[k].VlrCapital.Value.Value;// +planPagosVenta[k].VlrSeguro.Value.Value + planPagosVenta[k].VlrOtrosFijos.Value.Value;

                                decimal vlrSaldoCapital = planPagosVenta[k - 1].VlrSaldoCapitalCesion.Value.Value - planPagosVenta[k - 1].VlrCapitalCesion.Value.Value;
                                vlrCapitalCesion = vlrSaldoCapital;
                                vlrUtilidadCesion = vlrCuotaVenta - vlrCapitalCesion;
                                vlrDerechosCesion = vlrCapitalCesion - planPagosVenta[k].VlrCapital.Value.Value;
                                planPagosVenta[k].VlrSaldoCapitalCesion.Value = vlrSaldoCapital;
                                planPagosVenta[k].VlrUtilidadCesion.Value = vlrUtilidadCesion;
                                planPagosVenta[k].VlrCapitalCesion.Value = vlrCapitalCesion;
                                planPagosVenta[k].VlrDerechosCesion.Value = vlrDerechosCesion;
                            }
                            else
                            {
                                vlrCompVenta += planPagosVenta[k].VlrCapital.Value.Value;// + planPagosVenta[k].VlrSeguro.Value.Value + planPagosVenta[k].VlrOtrosFijos.Value.Value;

                                decimal vlrSaldoCapital = planPagosVenta[k - 1].VlrSaldoCapitalCesion.Value.Value - planPagosVenta[k - 1].VlrCapitalCesion.Value.Value;
                                vlrUtilidadCesion = Math.Round(vlrSaldoCapital * tasaTemp);
                                vlrCapitalCesion = vlrCuotaVenta - vlrUtilidadCesion;
                                vlrDerechosCesion = vlrCapitalCesion - planPagosVenta[k].VlrCapital.Value.Value;
                                planPagosVenta[k].VlrSaldoCapitalCesion.Value = vlrSaldoCapital;
                                planPagosVenta[k].VlrUtilidadCesion.Value = vlrUtilidadCesion;
                                planPagosVenta[k].VlrCapitalCesion.Value = vlrCapitalCesion;
                                planPagosVenta[k].VlrDerechosCesion.Value = vlrDerechosCesion;
                            }
                            planPagosVenta[k].DocVenta.Value = ctrlVenta.NumeroDoc.Value;
                            planPagosVenta[k].FechaFlujo.Value = planPagosVenta[k].FechaCuota.Value.Value.AddMonths(1);
                            planPagosVenta[k].CompradorCarteraID.Value = dto.CompradorID.Value;
                            this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(planPagosVenta[k]);
                        }
                        #endregion
                        credito.VlrVenta.Value = dto.VlrVenta.Value;
                        //if (comprador.TipoLiquidacion.Value.Value == (byte)TipoLiquidacionComprador.Factor)
                            credito.VlrUtilidad.Value = dto.VlrVenta.Value.Value - vlrCompVenta;
                        //else
                        //    credito.VlrUtilidad.Value = (from c in planPagosVenta select c.VlrUtilidadCesion.Value.Value).Sum();
                        #endregion
                        #region Crea el venta Docu
                        ventaDocu.NumeroDoc.Value = ctrlVenta.NumeroDoc.Value;
                        ventaDocu.CompradorCarteraID.Value = dto.CompradorID.Value;
                        ventaDocu.TipoVenta.Value = 1;//Recaudo
                        ventaDocu.Oferta.Value = dto.NumeroCesion.Value;
                        ventaDocu.Observacion.Value = "Migracion Cartera";
                        ventaDocu.FechaPago1.Value = (from c in planPagosVenta where c.CuotaID.Value == primeraCuotaVenta select c.FechaCuota.Value.Value).First();
                        ventaDocu.NumCuotas.Value = (short)dto.NumCuotaVendidas.Value;
                        ventaDocu.FechaPagoUlt.Value = planPagosVenta.Last().FechaCuota.Value.Value;
                        ventaDocu.FactorCesion.Value = dto.TasaVenta.Value;
                        ventaDocu.Valor.Value = credito.VlrVenta.Value;
                        ventaDocu.Iva.Value = 0;
                        ventaDocu.VlrVenta.Value = credito.VlrVenta.Value;
                        ventaDocu.FechaAceptacion.Value = dto.FechaLiquidacion.Value.Value;

                        this._dal_ccVentaDocu.DAL_ccVentaDocu_Add(ventaDocu);
                        #endregion
                        #region Crea el venta Deta
                        DTO_ccVentaDeta ventaDeta = new DTO_ccVentaDeta();
                        ventaDeta.NumeroDoc.Value = ctrlVenta.NumeroDoc.Value;
                        ventaDeta.NumDocCredito.Value = ctrlCredito.NumeroDoc.Value;
                        ventaDeta.Portafolio.Value = string.Empty;
                        ventaDeta.CuotaID.Value = primeraCuotaVenta;
                        ventaDeta.VlrCuota.Value = vlrCuotaVenta;
                        ventaDeta.CuotasVend.Value = dto.NumCuotaVendidas.Value;
                        ventaDeta.VlrLibranza.Value = dto.VlrLibranza.Value;
                        ventaDeta.VlrVenta.Value = credito.VlrVenta.Value;
                        ventaDeta.FactorCesion.Value = dto.TasaVenta.Value;
                        ventaDeta.VlrTotalDerechos.Value = credito.VlrPrestamo.Value.Value - credito.VlrVenta.Value;
                        ventaDeta.VlrNeto.Value = credito.VlrVenta.Value;
                        ventaDeta.CompradorFinal.Value = dto.CompradorID.Value;
                        this._dal_ccVentaDeta.DAL_ccVentaDeta_Add(ventaDeta);
                        #endregion
                        #region Actualiza el credito
                        credito.DocVenta.Value = ctrlVenta.NumeroDoc.Value;
                        this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                        credito.VlrCuota.Value = vlrCuotaVenta;
                        #endregion
                        #region Contabilizacion Venta Cartera
                        decimal contraBalML = 0;
                        decimal contraBalME = 0;
                        decimal vlrVenta = credito.VlrVenta.Value.Value;
                        decimal vlrSaldoCap = planPagosVenta.Sum(x => x.VlrCapitalCesion.Value.Value);
                        decimal vlrUtilidad = credito.VlrUtilidad.Value.Value;
                        string ctaUtilidadID = vlrUtilidad >= 0 ? ctaUtilidadID_Ganancias : ctaUtilidadID_Perdidas;
                        compTempVenta = this.VentaCartera_GenerarComprobante(ventaDeta.NumDocCredito.Value.Value, planPagosVenta, tc, coDocVenta,
                            ventaDocu.Oferta.Value, ctaUtilidadID, compracarteraPropia, defConceptoCargo, defLugarGeografico, defLineaPresupuesto,
                            compCapital, compInteres, ctaContraOrden_Propia, ctaContraOrden_Cedida, ctaContraBalance_Cedida, ctaOrdenCapitalCesion,
                            ctaOrdenUtilidadCesion, ctaOrdenCesionContra, ctaProvisionUtilidad, ctaReservaVenta, tasaReservaUtilidad, contabilizaOrdCesion, 
                            vlrVenta, vlrUtilidad, vlrSaldoCap,0,0,0,0,fechaDoc, comprador, nitFiduciaria,ref contraBalML, ref contraBalME);

                        if (compTempVenta.GetType() == typeof(DTO_TxResult))
                        {
                            result = (DTO_TxResult)compTempVenta;
                            return result;
                        }
                        else
                        {
                            coCompVenta = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, ctrlVenta.ComprobanteID.Value, true, false);

                            comprobanteVenta.Header = ObjectCopier.Clone(comprobanteCredito.Header);
                            comprobanteVenta.Header.NumeroDoc.Value = ctrlVenta.NumeroDoc.Value;
                            comprobanteVenta.Header.ComprobanteID.Value = ctrlVenta.ComprobanteID.Value;
                            compFooterVenta = (List<DTO_ComprobanteFooter>)compTempVenta;
                            comprobanteVenta.Footer = compFooterVenta;
                        }

                        #region Contabiliza el comprobante
                        if (compFooterVenta.Count == 0)
                        {
                            result = new DTO_TxResult();
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Co_CompNoResults;

                            return result;
                        }

                        result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobanteVenta, periodo, ModulesPrefix.cc, 0, false);
                        if (result.Result == ResultValue.NOK)
                            return result;

                        #endregion
                        #endregion
                        #region Actualiza la fechadoc de glDocumentoControl (en comentarios)
                        //ctrlVenta.FechaDoc.Value = credito.FechaLiquida.Value;
                        //this._moduloGlobal.glDocumentoControl_Update(ctrlVenta, false, true);
                        #endregion
                    }
                    else
                    {
                        result.Result = ResultValue.NOK;
                        rd.Message = msgVentaInvalida;
                        result.Details.Add(rd);

                        return result;
                    }
                }
                #endregion
                #region Realiza el Pago de las cuotas
                if (hasPagos)
                {
                    #region Carga el DTO de recibo de caja
                    DTO_tsReciboCajaDocu reciboCaja = new DTO_tsReciboCajaDocu();
                    reciboCaja.CajaID.Value = cajaRecuado.ID.Value;
                    reciboCaja.BancoCuentaID.Value = string.Empty;
                    reciboCaja.Valor.Value = dto.VlrPagos.Value;
                    reciboCaja.IVA.Value = 0;
                    reciboCaja.ClienteID.Value = dto.ClienteID.Value;
                    reciboCaja.TerceroID.Value = dto.ClienteID.Value;
                    #endregion
                    #region Trae el saldo del credito
                    DTO_InfoCredito saldosCredito = this.GetSaldoCredito(credito.NumeroDoc.Value.Value, fechaDoc, false, false, false);
                    if (saldosCredito.SaldosComponentes.Count == 0)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_LibranzaNoSaldo + "&&" + credito.Libranza.Value + "&&" + fechaDoc.ToString("yyyy/MM");

                        return result;
                    }
                    List<DTO_ccCreditoPlanPagos> ppRecuados = saldosCredito.PlanPagos;
                    List<DTO_ccSaldosComponentes> saldoCompRecuado = new List<DTO_ccSaldosComponentes>();
                    #endregion
                    #region Calcula los pagos
                    decimal abono = vlrPagos;//dto.VlrCuota.Value.Value;
                    decimal abonoInicial = vlrPagos;
                    decimal vlrPagadoCuota = 0;
                    foreach (DTO_ccCreditoPlanPagos cuota in ppRecuados)
                    {
                        cuota.PagoInd.Value = false;
                        vlrPagadoCuota = 0;
                        if (abonoInicial > 0)
                        {
                            cuota.PagoInd.Value = true;
                            List<DTO_ccSaldosComponentes> saldoCompRecuadoCuota = saldosCredito.SaldosComponentes.Where(x => x.CuotaID.Value == cuota.CuotaID.Value).ToList();
                            decimal saldoCuota = (from c in saldoCompRecuadoCuota select c.CuotaSaldo.Value.Value).Sum();

                            //Paga el valor de los componentes
                            decimal abonoAct = 0;
                            for (int h = saldoCompRecuadoCuota.Count; h > 0; h--)
                            {
                                //No se tiene en cuenta la usura ni el componente PJ, por ser migración
                                #region Asigna los pagos a los componentes de la cuota
                                #region Componentes fijos de pago

                                if (abono <= saldoCompRecuadoCuota[h - 1].CuotaSaldo.Value)
                                {
                                    saldoCompRecuadoCuota[h - 1].AbonoValor.Value = abono;
                                    vlrPagadoCuota += abono;
                                    abono = 0;
                                    abonoInicial = abono;
                                    //pago.ValorCuota.Value = abono;
                                    break;
                                }
                                else
                                {
                                    abonoAct = abono - saldoCompRecuadoCuota[h - 1].CuotaSaldo.Value.Value;
                                    saldoCompRecuadoCuota[h - 1].AbonoValor.Value = saldoCompRecuadoCuota[h - 1].CuotaSaldo.Value.Value;
                                    vlrPagadoCuota += saldoCompRecuadoCuota[h - 1].CuotaSaldo.Value.Value;
                                }

                                #endregion

                                abono = abonoAct;
                                abonoInicial = abono;
                                //pago.ValorCuota.Value = abono;

                                #endregion
                            }

                            saldoCompRecuado.AddRange(saldoCompRecuadoCuota);
                            
                            //Asigna el valor pagado de la cuota
                            cuota.VlrPagadoCuota.Value = vlrPagadoCuota;
                        }

                    }

                    //Filtra el plan de pagos con las cuotas que tienen pagos
                    ppRecuados = ppRecuados.Where(x => x.PagoInd.Value.Value).ToList();

                    #endregion
                    #region Contabiliza los pagos
                    
                    result = this.PagosCreditos_Parcial(TipoRecaudo.Normal, documentID, string.Empty, string.Empty, fechaDoc, fechaDoc, reciboCaja, credito, ppRecuados,
                        null,saldoCompRecuado, "RECAUDO MANUAL CARTERA - CRE:", true);
                    
                    if (result.Result == ResultValue.NOK)
                        return result;
                    else
                    {
                        ctrlRecuadoManual = this._moduloGlobal.glDocumentoControl_GetByID(Convert.ToInt32(result.ExtraField));
                        coCompRecuado = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, ctrlRecuadoManual.ComprobanteID.Value, true, false);
                    }

                    #endregion
                }
                #endregion
                #region Crea el pago de los flujos
                if (hasFlujos)
                {
                    if (planPagos.Count == 0)
                        planPagos = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(ctrlCredito.NumeroDoc.Value.Value);

                    int cuotaFlujoIni = planPagos.Where(x => !string.IsNullOrWhiteSpace(x.CompradorCarteraID.Value)).First().CuotaID.Value.Value;
                    int cuotaFlujoFin = cuotaFlujoIni + dto.FlujosPago.Value.Value -1;

                    List<DTO_ccCreditoPlanPagos> ppFlujos = planPagos.Where(x => x.CuotaID.Value.Value >= cuotaFlujoIni && x.CuotaID.Value.Value <= cuotaFlujoFin).ToList();
                    #region Crea el glDocumentoControl
                    ctrlPagoFlujos = new DTO_glDocumentoControl();
                    ctrlPagoFlujos.DocumentoNro.Value = 0;
                    ctrlPagoFlujos.DocumentoID.Value = AppDocuments.PagoFlujos;
                    ctrlPagoFlujos.LugarGeograficoID.Value = defLugarGeografico;
                    ctrlPagoFlujos.NumeroDoc.Value = 0;
                    ctrlPagoFlujos.DocumentoTipo.Value = (byte)DocumentoTipo.DocExterno;
                    ctrlPagoFlujos.Fecha.Value = DateTime.Now;
                    ctrlPagoFlujos.FechaDoc.Value = fechaDoc;
                    ctrlPagoFlujos.PeriodoDoc.Value = periodo;
                    ctrlPagoFlujos.PeriodoUltMov.Value = periodo;
                    ctrlPagoFlujos.CuentaID.Value = coPlanCtaFlujos.ID.Value;
                    ctrlPagoFlujos.AreaFuncionalID.Value = areaFuncionalID;
                    ctrlPagoFlujos.PrefijoID.Value = defPrefijo;
                    ctrlPagoFlujos.ProyectoID.Value = defProyecto;
                    ctrlPagoFlujos.CentroCostoID.Value = defCentroCosto;
                    ctrlPagoFlujos.LineaPresupuestoID.Value = defLineaPresupuesto;
                    ctrlPagoFlujos.TerceroID.Value = comprador.TerceroID.Value;
                    ctrlPagoFlujos.DocumentoTercero.Value = "FL" + dto.FechaLiquidacion.Value.Value.ToString("yy/MM/dd");
                    ctrlPagoFlujos.MonedaID.Value = mdaLoc;
                    ctrlPagoFlujos.TasaCambioCONT.Value = tc;
                    ctrlPagoFlujos.TasaCambioDOCU.Value = tc;
                    ctrlPagoFlujos.Observacion.Value = "Pago Flujo A - " + comprador.ID.Value + " - " + ctrlPagoFlujos.FechaDoc.Value.Value.ToString("yy/MM/dd");
                    ctrlPagoFlujos.Estado.Value = (byte)EstadoDocControl.Aprobado;
                    ctrlPagoFlujos.seUsuarioID.Value = this.UserId;
                    ctrlPagoFlujos.Descripcion.Value = "Pago Flujo A - " + comprador.ID.Value + " - " + ctrlPagoFlujos.FechaDoc.Value.Value.ToString("yy/MM/dd");
                    ctrlPagoFlujos.Valor.Value = credito.VlrCuota.Value.Value * dto.FlujosPago.Value.Value;
                    ctrlPagoFlujos.Iva.Value = 0;

                    rd = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.PagoFlujos, ctrlPagoFlujos, true);
                    if (rd.Message != ResultValue.OK.ToString())
                    {
                        result.Result = ResultValue.NOK;
                        rd.line = 1;
                        result.Details.Add(rd);

                        return result;
                    }
                    else
                    {
                        ctrlPagoFlujos.NumeroDoc.Value = Convert.ToInt32(rd.Key);
                        this.AsignarAlarma(ctrlPagoFlujos.NumeroDoc.Value.Value, string.Empty, false);
                    }
                    #endregion
                    #region Crea la CxP
                    DTO_coPlanCuenta cta = null;
                    DTO_glConceptoSaldo cSaldo = null;
                    #region Carga los datos del Footer

                    #region carga los valores
                    decimal vlrCapML = (from p in ppFlujos select p.VlrCapitalCesion.Value.Value).Sum();
                    decimal vlrCapME = 0;
                    decimal vlrUtilidadML = (from p in ppFlujos select p.VlrUtilidadCesion.Value.Value).Sum();
                    decimal vlrUtilidadME = 0;

                    if (ctrlCredito.TasaCambioDOCU.Value.Value != 0)
                    {
                        vlrCapME += Math.Round(vlrCapML / ctrlPagoFlujos.TasaCambioDOCU.Value.Value, 2);
                        vlrUtilidadME += Math.Round(vlrUtilidadML / ctrlPagoFlujos.TasaCambioDOCU.Value.Value, 2);
                    }

                    #endregion
                    #region Cancela flujo libranza
                    DTO_glDocumentoControl ctrlPagoFlujoCopy = ObjectCopier.Clone(ctrlPagoFlujos);
                    ctrlPagoFlujoCopy.DocumentoTercero.Value = dto.Libranza.Value.ToString();

                    decimal vlrFlujoML = (vlrCapML + vlrUtilidadML);
                    decimal vlrFlujoME = (vlrCapME + vlrUtilidadME);

                    DTO_ComprobanteFooter detFlujoPartida = this.CrearComprobanteFooter(ctrlPagoFlujoCopy, coPlanCtaFlujos, concSaldoFlujos, 0, defConceptoCargo,
                        defLugarGeografico, defLineaPresupuesto, vlrFlujoML, vlrFlujoME, false);

                    detFlujoPartida.Descriptivo.Value = "Cancela Flujo Libranza";
                    compPagoFlujo.Footer.Add(detFlujoPartida);
                    #endregion
                    if (contabilizaOrdCesion == "1")
                    {
                        #region Contabiliza capital e intereses de la cesion

                        //Capital Cesion - Orden
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenCapitalCesion, true, false);
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        DTO_ComprobanteFooter capitalDet = this.CrearComprobanteFooter(ctrlPagoFlujoCopy, cta, cSaldo, tc, defConceptoCargo, defLugarGeografico, defLineaPresupuesto, vlrCapML, vlrCapME, false);
                        capitalDet.Descriptivo.Value = "FLUJO CARTERA - CAPITAL CESION";
                        compPagoFlujo.Footer.Add(capitalDet);

                        //Utilidad(Intereses) Cesion - Orden
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenUtilidadCesion, true, false);
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        DTO_ComprobanteFooter interesDet = this.CrearComprobanteFooter(ctrlPagoFlujoCopy, cta, cSaldo, tc, defConceptoCargo, defLugarGeografico, defLineaPresupuesto, vlrUtilidadML, vlrUtilidadME, false);
                        interesDet.Descriptivo.Value = "FLUJO CARTERA - UTILIDAD CESION";
                        compPagoFlujo.Footer.Add(interesDet);

                        //Contrapartida cesion - Orden
                        decimal vlrTotalCesionML = (vlrCapML + vlrUtilidadML) * -1;
                        decimal vlrTotalCesionME = 0;
                        if (ctrlCredito.TasaCambioDOCU.Value.Value != 0)
                            vlrTotalCesionME += Math.Round(vlrTotalCesionML / ctrlPagoFlujos.TasaCambioDOCU.Value.Value, 2);

                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenCesionContra, true, false);
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        DTO_ComprobanteFooter cesionDet = this.CrearComprobanteFooter(ctrlPagoFlujoCopy, cta, cSaldo, tc, defConceptoCargo, defLugarGeografico, defLineaPresupuesto, vlrTotalCesionML, vlrTotalCesionME, false);
                        cesionDet.Descriptivo.Value = "FLUJO CARTERA - CONTRAP CESION";
                        compPagoFlujo.Footer.Add(cesionDet);

                        #endregion
                    }

                    #endregion
                    #region Genera la CxP
                    obj = this._moduloCxP.CuentasXPagar_Generar(ctrlPagoFlujos, conceptoCxPFlujos, ctrlPagoFlujos.Valor.Value.Value, compPagoFlujo.Footer, ModulesPrefix.cc, false);
                    if (obj.GetType() == typeof(DTO_TxResult))
                    {
                        result = (DTO_TxResult)obj;
                        return result;
                    }

                    //Trae la CxP para actualizar los consecutivos
                    ctrlCxPFlujos = (DTO_glDocumentoControl)obj;
                    #endregion
                    #endregion
                    #region Crea el flujo docu
                    DTO_ccFlujoCesionDocu flujoDocu = new DTO_ccFlujoCesionDocu();
                    flujoDocu.NumeroDoc.Value = ctrlPagoFlujos.NumeroDoc.Value;
                    flujoDocu.NumeroDocCXP.Value = ctrlCxPFlujos.NumeroDoc.Value;
                    flujoDocu.CompradorCarteraID.Value = comprador.ID.Value;
                    flujoDocu.TerceroPago.Value = comprador.TerceroID.Value;
                    flujoDocu.Valor.Value = ctrlPagoFlujos.Valor.Value;
                    flujoDocu.Iva.Value = 0;
                    this._dal_ccFlujoCesionDocu.DAL_ccFlujoCesionDocu_Add(flujoDocu);
                    #endregion
                    #region Crea el Flujo Deta
                    foreach (DTO_ccCreditoPlanPagos pago in ppFlujos)
                    {
                        DTO_ccFlujoCesionDeta flujoDeta = new DTO_ccFlujoCesionDeta();
                        flujoDeta.NumeroDoc.Value = ctrlPagoFlujos.NumeroDoc.Value;
                        flujoDeta.CreditoCuotaNum.Value = pago.Consecutivo.Value;
                        flujoDeta.VentaDocNum.Value = ctrlVenta.NumeroDoc.Value;
                        flujoDeta.DocPago.Value = ctrlCxPFlujos.NumeroDoc.Value;
                        flujoDeta.Libranza.Value = credito.Libranza.Value.ToString();
                        flujoDeta.Oferta.Value = dto.NumeroCesion.Value;
                        flujoDeta.Valor.Value = pago.VlrCuota.Value;
                        flujoDeta.VlrCapitalCesion.Value = pago.VlrCapitalCesion.Value;
                        flujoDeta.VlrUtilidadCesion.Value = pago.VlrUtilidadCesion.Value;
                        flujoDeta.VlrDerechosCesion.Value = pago.VlrDerechosCesion.Value;
                        this._dal_ccFlujoCesionDeta.DAL_ccFlujoCesionDeta_Add(flujoDeta);
                    }
                    #endregion
                }
                #endregion
                #region Asigna la activades flujo
                this.AsignarFlujo(AppDocuments.AprobacionGiros, ctrlCredito.NumeroDoc.Value.Value, actFlujoAprobGiro, false, string.Empty);
                this.AsignarFlujo(AppDocuments.EntregaLibranza, ctrlCredito.NumeroDoc.Value.Value, actFlujoEntregaLib, false, string.Empty);
                this.AsignarFlujo(AppDocuments.VentaCartera, ctrlCredito.NumeroDoc.Value.Value, actFlujoVenta, false, string.Empty);
                #endregion
                #region Actualiza el consecutivo del crédito

                consecutivoCredDTO.Data.Value = consecutivoCred.ToString();
                this._moduloGlobal.glControl_Update(consecutivoCredDTO);

                #endregion

                return result;
            }
            catch (Exception ex)            
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "MigracionCartera_Guardar");

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        //Actualiza el comprobante del credito
                        ctrlCredito.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlCredito.DocumentoID.Value.Value, ctrlCredito.PrefijoID.Value);
                        ctrlCredito.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompCredito, ctrlCredito.PrefijoID.Value, ctrlCredito.PeriodoDoc.Value.Value, ctrlCredito.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlCredito, true, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlCredito.NumeroDoc.Value.Value, ctrlCredito.ComprobanteIDNro.Value.Value, false);

                        //Actualiza el comprobnate de la venta
                        if (ctrlVenta != null)
                        {
                            ctrlVenta.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlVenta.DocumentoID.Value.Value, ctrlVenta.PrefijoID.Value);
                            ctrlVenta.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompVenta, ctrlVenta.PrefijoID.Value, ctrlVenta.PeriodoDoc.Value.Value, ctrlVenta.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlVenta, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlVenta.NumeroDoc.Value.Value, ctrlVenta.ComprobanteIDNro.Value.Value, false);
                        }

                        //Actuliza el comporbante de los pagos del credito
                        if (ctrlRecuadoManual != null)
                        {
                            ctrlRecuadoManual.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlRecuadoManual.DocumentoID.Value.Value, ctrlCredito.PrefijoID.Value);
                            ctrlRecuadoManual.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompRecuado, ctrlRecuadoManual.PrefijoID.Value, ctrlRecuadoManual.PeriodoDoc.Value.Value, ctrlRecuadoManual.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlRecuadoManual, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlRecuadoManual.NumeroDoc.Value.Value, ctrlRecuadoManual.ComprobanteIDNro.Value.Value, false);
                        }

                        //Actualiza el comprobnate de la venta
                        if (ctrlPagoFlujos != null)
                        {
                            DTO_coComprobante coComp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, ctrlCxPFlujos.ComprobanteID.Value, true, false);
                            ctrlCxPFlujos.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlCxPFlujos.PrefijoID.Value, ctrlCxPFlujos.PeriodoDoc.Value.Value, ctrlCxPFlujos.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlCxPFlujos, false, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlCxPFlujos.NumeroDoc.Value.Value, ctrlCxPFlujos.ComprobanteIDNro.Value.Value, false);
                        }
                        #endregion
                    }
                    else
                        throw new Exception("MigracionCartera_Guardar - Los consecutivos deben ser generados por la transaccion padre");

                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Realiza el proceso de liquidacion de la mirgracion de cartera
        /// </summary>
        /// <param name="edad">Edad del cliente. No se usa en el simulador</param>
        /// <param name="lineaCredID">Identificador de la linea de credito</param>
        /// <param name="pagaduriaID">Identificador de la pagaduria</param>
        /// <param name="plazo">Plazo de pago</param>
        /// <param name="valorPrestamo">Valor del prestamo</param>
        /// <param name="fechaLiquida">Fecha de liquidacion</param>
        /// <param name="traerCuotas">Indica si se debe incluir el plan de pagos</param>
        /// <returns>Retorna un objeto TxResult si se presenta un error, de lo contrario devuelve un objeto de tipo DTO_PlanDePagos</returns>
        private DTO_SerializedObject LiquidacionMigracionCartera(string lineaCredID, string pagaduriaID, int valorPrestamo, int valorCuota, 
            int plazo, decimal interes, DateTime fechaLiquida, Dictionary<int, decimal> vlrTotalesComponentes, int? edad, DateTime? fechaCuota1)
        {
            DTO_TxResult result = new DTO_TxResult();
            DTO_PlanDePagos planPagos = new DTO_PlanDePagos();

            try
            {
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                #region Variables

                //Variables para resultados
                List<DTO_ccSolicitudComponentes> componentes = new List<DTO_ccSolicitudComponentes>();
                List<DTO_Cuota> cuotas = new List<DTO_Cuota>();

                //Variables de calculos
                DTO_ccPagaduria pagaduria = (DTO_ccPagaduria)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccPagaduria, pagaduriaID, true, false);
                decimal prctTotal = interes;
                decimal vlrDescuento = 0;
                decimal vlrAdicional = 0;
                decimal vlrCompra = 0;
                int capitalTotal = 0;
                int saldoParcial = valorPrestamo;
                int diaTope = pagaduria.DiaTope.Value.Value;
                int ultimoDia = 1;
                if (fechaLiquida.Month == 2)
                    ultimoDia = 28;
                else
                    ultimoDia = 30;
                bool recaudoMes = pagaduria.RecaudoMes.Value.Value;
                DateTime periodo = new DateTime(fechaLiquida.Year, fechaLiquida.Month, 1);
                DateTime fechaCuota = new DateTime(fechaLiquida.Year, fechaLiquida.Month, ultimoDia);

                DTO_MasterBasic basic;

                //Variables de control
                string compCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string compSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);

                //Variables de cache
                Dictionary<string, int> totalComponentesSaldo = new Dictionary<string, int>();
                Dictionary<string, bool> ComponentesFijos = new Dictionary<string, bool>();
                #endregion
                #region Validaciones
                #region Valida los valores autorizados

                this._dal_ccValorAutorizado = (DAL_ccValorAutorizado)base.GetInstance(typeof(DAL_ccValorAutorizado), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                bool validValMonto = this._dal_ccValorAutorizado.DAL_ccValorAutorizado_IsValidData(valorPrestamo, plazo);
                if (!validValMonto)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_InvalidPlazoValor;
                    return result;
                }

                #endregion
                #region Valida el monto de la libranza
                if (edad.HasValue)
                {
                    basic = (DTO_MasterBasic)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccValorAmparado, edad.Value.ToString(), true, false);
                    if (basic == null)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidVlrLibranza;
                        return result;
                    }
                }
                #endregion
                #endregion
                #region Trae los componentes de la linea de credito
                List<DTO_ccCarteraComponente> comps = this._moduloGlobal.ccCarteraComponente_GetByLineaCredito(lineaCredID);
                foreach (DTO_ccCarteraComponente c in comps)
                {
                    DTO_ccSolicitudComponentes anexo = new DTO_ccSolicitudComponentes();
                    anexo.ComponenteCarteraID.Value = c.ID.Value;
                    anexo.Descripcion.Value = c.Descriptivo.Value;
                    anexo.CuotaValor.Value = 0;
                    anexo.TotalValor.Value = 0;
                    anexo.NroComponente.Value = c.NumeroComp.Value.Value;
                    if (c.ID.Value == compInteres)
                        anexo.Porcentaje.Value = prctTotal;
                    else
                        anexo.Porcentaje.Value = 0;

                    if (vlrTotalesComponentes.ContainsKey(c.NumeroComp.Value.Value))
                    {
                        if (vlrTotalesComponentes[c.NumeroComp.Value.Value] != 0)
                            componentes.Add(anexo);
                    }
                }
                #endregion
                #region Actualiza los valores de los componentes
                foreach (DTO_ccSolicitudComponentes comp in componentes)
                {
                    if (comp.ComponenteCarteraID.Value != compInteres &&
                        comp.ComponenteCarteraID.Value != compCapital)
                    {
                        comp.TotalValor.Value = vlrTotalesComponentes[comp.NroComponente.Value.Value];
                        comp.CuotaValor.Value = Math.Round(comp.TotalValor.Value.Value / plazo);
                    }

                }
                #endregion
                #region Llena los valores de las cuotas
                //Trae el valor de la cuota
                int i = 0;
                saldoParcial = valorPrestamo;
                //int vlrCuota = Evaluador.GetCuotaCreditoCartera(saldoParcial, plazo, prctTotal);
                if (valorCuota != 0)
                {
                    for (i = 1; i <= plazo; ++i)
                    {

                        int saldoXCapital = 0;
                        DTO_Cuota cuota = new DTO_Cuota();
                        List<string> componentesCuota = new List<string>();
                        List<int> valoresComponentesCuota = new List<int>();
                        cuota.NumCuota = i;
                        #region Calculo del capital para la ultima cuota
                        if (i == plazo)
                        {
                            cuota.Capital = saldoParcial;
                            capitalTotal += cuota.Capital;
                        }
                        #endregion
                        #region Calculo del valor de todas las cuotas excepto la ultima
                        if (i != plazo)
                        {
                            foreach (DTO_ccSolicitudComponentes comp in componentes)
                            {
                                if (comp.ComponenteCarteraID.Value != compCapital)
                                {
                                    int temp = 0;
                                    bool isSaldo = true;
                                    decimal tasa = comp.Porcentaje.Value.Value;
                                    #region Asigna los valores de la cuota
                                    if (comp.ComponenteCarteraID.Value == compInteres)
                                    {
                                        #region Intereses
                                        cuota.Intereses = Convert.ToInt32(tasa * saldoParcial);
                                        saldoXCapital += cuota.Intereses;
                                        temp = cuota.Intereses;
                                        #endregion
                                    }
                                    else if (comp.ComponenteCarteraID.Value == compSeguro)
                                    {
                                        #region Seguro
                                        isSaldo = false;
                                        cuota.Seguro = Convert.ToInt32(comp.CuotaValor.Value.Value);
                                        saldoXCapital += cuota.Seguro;
                                        temp = cuota.Seguro;
                                        #endregion
                                    }
                                    else
                                    {
                                        #region Componentes fijos
                                        isSaldo = false;
                                        componentesCuota.Add(comp.Descripcion.Value);
                                        valoresComponentesCuota.Add(Convert.ToInt32(comp.CuotaValor.Value.Value));
                                        saldoXCapital += (int)comp.CuotaValor.Value.Value;
                                        temp = (int)comp.CuotaValor.Value.Value;
                                        #endregion
                                    }
                                    #endregion
                                    #region Calculo de saldos y valores de componentes fijos
                                    if (isSaldo)
                                    {
                                        if (i == 1)
                                        {
                                            totalComponentesSaldo.Add(comp.ComponenteCarteraID.Value, temp);
                                            ComponentesFijos.Add(comp.Descripcion.Value, false);
                                        }
                                        else
                                            totalComponentesSaldo[comp.ComponenteCarteraID.Value] += temp;
                                    }
                                    else
                                    {
                                        if (i == 1)
                                        {
                                            totalComponentesSaldo.Add(comp.ComponenteCarteraID.Value, temp);
                                            ComponentesFijos.Add(comp.Descripcion.Value, true);
                                        }
                                        else
                                            totalComponentesSaldo[comp.ComponenteCarteraID.Value] += temp;
                                    }
                                    #endregion
                                }
                            }
                        }

                        #endregion
                        #region Calculo el valor de los componentes para la ultima cuota
                        if (i == plazo)
                        {
                            int vlrCompFijosFinal = 0;
                            #region Asigna el valor de los componente fijos
                            foreach (DTO_ccSolicitudComponentes comp in componentes)
                            {
                                if (comp.ComponenteCarteraID.Value != compCapital &&
                                    comp.ComponenteCarteraID.Value != compInteres)
                                {
                                    int totalSaldo = totalComponentesSaldo[comp.ComponenteCarteraID.Value];
                                    int totalComponente = Convert.ToInt32(vlrTotalesComponentes[comp.NroComponente.Value.Value]);

                                    if (comp.ComponenteCarteraID.Value == compSeguro)
                                    {
                                        vlrCompFijosFinal += totalComponente - totalSaldo;
                                        //cuota.Seguro = (int)comp.CuotaValor.Value.Value;
                                        cuota.Seguro = totalComponente - totalSaldo;
                                    }
                                    else
                                    {
                                        vlrCompFijosFinal += totalComponente - totalSaldo;
                                        componentesCuota.Add(comp.Descripcion.Value);
                                        valoresComponentesCuota.Add((int)comp.CuotaValor.Value.Value);
                                    }
                                }
                            }
                            #endregion

                            //Asigna la info del interes
                            cuota.Intereses = valorCuota - saldoParcial - vlrCompFijosFinal;
                            totalComponentesSaldo[compInteres] += cuota.Intereses;
                        }
                        #endregion
                        #region Calculo del capital para todas las cuotas menos la ultima
                        if (i != plazo)
                        {
                            // Asignan los valores de los componentes de anticipo
                            cuota.Capital = valorCuota - saldoXCapital;
                            capitalTotal += cuota.Capital;
                        }
                        #endregion
                        #region Asigna la fecha de la cuota
                        if (i == 1)
                        {
                            fechaCuota = fechaCuota1.Value;
                            cuota.Fecha = fechaCuota;
                        }
                        else
                        {
                            //if (fechaCuota.Month == 2)
                            //{
                            //    cuota.Fecha = fechaCuota.AddMonths(i - 1);
                            //    if (cuota.Fecha.Month != 2)
                            //        cuota.Fecha = cuota.Fecha.AddDays(2);
                            //}
                            //else
                                cuota.Fecha = fechaCuota.AddMonths(i - 1);
                        }
                        #endregion

                        cuota.Componentes = componentesCuota;
                        cuota.ValoresComponentes = valoresComponentesCuota;
                        cuota.ValorCuota = (from c in valoresComponentesCuota select c).Sum() + cuota.Capital + cuota.Intereses + cuota.Seguro;
                        cuotas.Add(cuota);

                        saldoParcial -= cuota.Capital;
                    }
                }

                #endregion
                #region Agrega el capital y calcula los valores de los saldos
                foreach (DTO_ccSolicitudComponentes comp in componentes)
                {
                    if (comp.ComponenteCarteraID.Value == compCapital)
                    {
                        comp.TotalValor.Value = capitalTotal;
                        comp.CuotaValor.Value = Convert.ToInt32(comp.TotalValor.Value.Value / plazo);
                    }
                    else
                    {
                        if (comp.ComponenteCarteraID.Value == compInteres)
                        {
                            comp.TotalValor.Value = totalComponentesSaldo[comp.ComponenteCarteraID.Value];
                            comp.CuotaValor.Value = Convert.ToInt32(comp.TotalValor.Value.Value / plazo);
                        }
                    }
                }

                #endregion
                #region Asigna las listas al plan de pagos
                planPagos.ComponentesAll = componentes;
                planPagos.ComponentesFijos = ComponentesFijos;
                planPagos.Cuotas = cuotas;
                #endregion
                #region Asigna Valores calculados de Campos Extra
                planPagos.VlrAdicional = Convert.ToInt32(vlrAdicional);
                planPagos.VlrDescuento = Convert.ToInt32(vlrDescuento);
                planPagos.VlrPrestamo = valorPrestamo + planPagos.VlrAdicional;
                planPagos.VlrCompra = Convert.ToInt32(vlrCompra);
                planPagos.VlrGiro = valorPrestamo - planPagos.VlrCompra - planPagos.VlrDescuento;
                planPagos.VlrCuota = cuotas.Last().ValorCuota;
                planPagos.VlrLibranza = valorCuota * plazo;
                planPagos.TasaTotal = prctTotal;
                #endregion
                return planPagos;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetLiquidacionCartera");
                return result;
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Valida que la información basica de la migracion nomina
        /// </summary>
        /// <param name="documentID">Documento que ejecuta el proceso</param>
        /// <param name="centroPagoID">Identificador del centro de pago</param>
        /// <param name="numDoc">Identificador del documento control</param>
        /// <param name="pagaduriaID">Identificador de la pagaduria</param>
        /// <param name="docTercero">Documento Tercero</param>
        /// <param name="isMensual">Indica si la consulta es quincenal o mensual</param>
        /// <param name="fechaIni">Fecha inicial de la migracion</param>
        /// <param name="fechaFin">Fecha final de la migracion</param>
        /// <param name="data">Información a migrar</param>
        /// <returns></returns>
        public DTO_TxResult RecaudosMasivos_Validar(int documentID, DateTime periodo, string centroPagoID, string pagaduriaID, DateTime fechaAplica, 
            ref List<DTO_ccIncorporacionDeta> data, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;
            try
            {
                #region Variables

                this._dal_ccNominaDeta = (DAL_ccNominaDeta)base.GetInstance(typeof(DAL_ccNominaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                //Variables de cache
                Dictionary<string, DTO_ccCliente> cacheCodigosEmpleados = new Dictionary<string, DTO_ccCliente>();
                Dictionary<string, DTO_ccCreditoDocu> cacheCreditosClientes = new Dictionary<string, DTO_ccCreditoDocu>();
                Dictionary<string, int> cacheCreditosClientesCount = new Dictionary<string, int>();
                Dictionary<int, int> cacheCreditosLineas = new Dictionary<int, int>();
                //Variables temporales
                DTO_ccCliente cliente;
                bool validRow = true;

                #endregion
                #region Valida si el centro de pago tiene migraciones en el mismo periodo
                bool hasMigraciones = this._dal_ccNominaDeta.DAL_ccNominaDeta_HasMigracionCentroPago(centroPagoID, fechaAplica);
                if (hasMigraciones)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_CentroPagoMigraciones + "&&" + centroPagoID;
                    return result;
                }
                #endregion
                for (int i = 1; i <= data.Count; ++i)
                {
                    #region Valida cada una de las lineas

                    //Manejo de porcentajes para la aprobacion
                    int percent = (i * 100) / data.Count;
                    batchProgress[tupProgress] = percent;

                    DTO_ccIncorporacionDeta dto = data[i - 1];
                    DTO_TxResultDetail rd = new DTO_TxResultDetail();
                    rd.DetailsFields = new List<DTO_TxResultDetailFields>();
                    rd.line = i;

                    validRow = true;
                    DTO_ccCreditoDocu credito = null;
                    #region Trae el credito

                    if (dto.Libranza.Value != null)
                    {
                        #region Credito por libranza
                        credito = this.GetCreditoByLibranza(dto.Libranza.Value.Value);
                        if (credito == null)
                        {
                            validRow = false;
                            DTO_ccSolicitudDocu solicitud = this.GetSolicitudByLibranza(dto.Libranza.Value.Value);
                            if (solicitud == null || !solicitud.IncorporacionPreviaInd.Value.Value)
                                rd.Message = DictionaryMessages.Err_Cc_InvalidLibranza + "&&" + dto.Libranza.Value.Value.ToString();
                            else
                                rd.Message = DictionaryMessages.Err_Cc_IncorpPrevia + "&&" + dto.Libranza.Value.Value.ToString();
                        }
                        #endregion
                    }
                    else if (!string.IsNullOrWhiteSpace(dto.CodEmpleado.Value))
                    {
                        #region Credito por codigo y validacion de cliente
                        if (!cacheCodigosEmpleados.ContainsKey(dto.CodEmpleado.Value))
                        {
                            cliente = this._moduloGlobal.ccCliente_GetClienteByCodigoEmpleado(dto.CodEmpleado.Value);
                            cacheCodigosEmpleados.Add(dto.CodEmpleado.Value, cliente);
                        }
                        else
                            cliente = cacheCodigosEmpleados[dto.CodEmpleado.Value];

                        if (cliente == null)
                        {
                            validRow = false;
                            rd.Message = DictionaryMessages.Err_Cc_InvalidCodEmpleado + "&&" + dto.CodEmpleado.Value;
                        }
                        else
                        {
                            if (cacheCreditosClientesCount.ContainsKey(cliente.ID.Value))
                            {
                                #region Cliente existente
                                if (cacheCreditosClientesCount[cliente.ID.Value] == 0)
                                {
                                    validRow = false;
                                    rd.Message = DictionaryMessages.Err_Cc_NoCredByCodigo + "&&" + dto.CodEmpleado.Value;
                                }
                                else if (cacheCreditosClientesCount[cliente.ID.Value] > 1)
                                {
                                    validRow = false;
                                    rd.Message = DictionaryMessages.Err_Cc_MultipleCredByCodigo + "&&" + dto.CodEmpleado.Value;
                                }
                                else
                                {
                                    credito = cacheCreditosClientes[cliente.ID.Value];
                                    dto.Libranza.Value = credito.Libranza.Value;
                                }
                                #endregion
                            }
                            else
                            {
                                #region Nuevo cliente
                                List<DTO_ccCreditoDocu> creditos = this.GetCreditosPendientesByCliente(cliente.ID.Value);
                                if (creditos.Count == 0)
                                {
                                    cacheCreditosClientesCount.Add(cliente.ID.Value, 0);
                                    cacheCreditosClientes.Add(cliente.ID.Value, null);

                                    validRow = false;
                                    rd.Message = DictionaryMessages.Err_Cc_NoCredByCodigo + "&&" + dto.CodEmpleado.Value;
                                }
                                else if (creditos.Count > 1)
                                {
                                    cacheCreditosClientesCount.Add(cliente.ID.Value, creditos.Count);
                                    cacheCreditosClientes.Add(cliente.ID.Value, null);

                                    validRow = false;
                                    rd.Message = DictionaryMessages.Err_Cc_MultipleCredByCodigo + "&&" + dto.CodEmpleado.Value;
                                }
                                else
                                {
                                    credito = creditos[0];
                                    dto.Libranza.Value = credito.Libranza.Value;

                                    cacheCreditosClientesCount.Add(cliente.ID.Value, creditos.Count);
                                    cacheCreditosClientes.Add(cliente.ID.Value, credito);
                                }
                                #endregion
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        #region Credito por cliente
                        if (cacheCreditosClientesCount.ContainsKey(dto.ClienteID.Value))
                        {
                            #region Cliente existente
                            if (cacheCreditosClientesCount[dto.ClienteID.Value] == 0)
                            {
                                validRow = false;
                                rd.Message = DictionaryMessages.Err_Cc_NoCredByCliente + "&&" + dto.ClienteID.Value;
                            }
                            else if (cacheCreditosClientesCount[dto.ClienteID.Value] > 1)
                            {
                                validRow = false;
                                rd.Message = DictionaryMessages.Err_Cc_MultipleCredByCliente + "&&" + dto.ClienteID.Value;
                            }
                            else
                            {
                                credito = cacheCreditosClientes[dto.ClienteID.Value];
                                dto.Libranza.Value = credito.Libranza.Value;
                            }
                            #endregion
                        }
                        else
                        {
                            #region Nuevo cliente
                            List<DTO_ccCreditoDocu> creditos = this.GetCreditosPendientesByCliente(dto.ClienteID.Value);
                            if (creditos.Count == 0)
                            {
                                cacheCreditosClientesCount.Add(dto.ClienteID.Value, 0);
                                cacheCreditosClientes.Add(dto.ClienteID.Value, null);

                                validRow = false;
                                rd.Message = DictionaryMessages.Err_Cc_NoCredByCliente + "&&" + dto.ClienteID.Value;
                            }
                            else if (creditos.Count > 1)
                            {
                                cacheCreditosClientesCount.Add(dto.ClienteID.Value, creditos.Count);
                                cacheCreditosClientes.Add(dto.ClienteID.Value, null);

                                validRow = false;
                                rd.Message = DictionaryMessages.Err_Cc_MultipleCredByCliente + "&&" + dto.ClienteID.Value;
                            }
                            else
                            {
                                credito = creditos[0];
                                dto.Libranza.Value = credito.Libranza.Value;

                                cacheCreditosClientesCount.Add(dto.ClienteID.Value, creditos.Count);
                                cacheCreditosClientes.Add(dto.ClienteID.Value, credito);
                            }
                            #endregion
                        }
                        #endregion
                    }

                    #endregion
                    #region Valida que el credito no haya sido agregado con anterioridad
                    if (string.IsNullOrWhiteSpace(rd.Message))
                    {
                        if (cacheCreditosLineas.ContainsKey(credito.Libranza.Value.Value))
                        {
                            validRow = false;
                            rd.Message = DictionaryMessages.Err_Cc_CreditoAgregado + "&&" + credito.Libranza.Value.Value.ToString() + "&&" + cacheCreditosLineas[credito.Libranza.Value.Value];
                        }
                        else
                            cacheCreditosLineas.Add(credito.Libranza.Value.Value, i);
                    }
                    #endregion
                    #region Valida que el cliente corresponda con el de el credito
                    if (string.IsNullOrWhiteSpace(rd.Message))
                    {
                        if (credito != null && !string.IsNullOrWhiteSpace(dto.ClienteID.Value) && credito.ClienteID.Value != dto.ClienteID.Value)
                        {
                            validRow = false;
                            rd.Message = DictionaryMessages.Err_Cc_InvalidClienteLibranza;
                        }
                        else
                            dto.Libranza.Value = credito.Libranza.Value;
                    }
                    #endregion
                    #region Valida que el cliente no este en estado inválido (Jurídico, acuerdo de pago, acuerdo de pago incumplido)
                    if (string.IsNullOrWhiteSpace(rd.Message))
                    {
                        DTO_ccCliente cli = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, credito.ClienteID.Value, true, false);
                        if(credito.EstadoDeuda.Value.Value == (byte)EstadoDeuda.Juridico
                            || credito.EstadoDeuda.Value.Value == (byte)EstadoDeuda.AcuerdoPago
                            || credito.EstadoDeuda.Value.Value == (byte)EstadoDeuda.AcuerdoPagoIncumplido)
                        {
                            validRow = false;
                            rd.Message = DictionaryMessages.Err_Cc_InvalidPagoEstadoCredito;
                        }
                    }
                    #endregion
                    #region Valida que el centro de pago corresponda con el de el credito
                    if (string.IsNullOrWhiteSpace(rd.Message))
                    {
                        if (credito != null && credito.CentroPagoID.Value != centroPagoID)
                        {
                            validRow = false;
                            rd.Message = DictionaryMessages.Err_Cc_InvalidCentroPagoLibranza;
                        }
                        else
                            dto.Libranza.Value = credito.Libranza.Value;
                    }
                    #endregion
                    #region Valida que tenga datos en ccIncorporaDeta
                    if (string.IsNullOrWhiteSpace(rd.Message))
                    {
                        bool hasIncorp = this.IncorporacionCredito_HasIncorporaciones(credito.NumeroDoc.Value.Value);
                        if (!hasIncorp)
                        {
                            validRow = false;
                            rd.Message = DictionaryMessages.Err_Cc_CreditoSinIncorporacion + "&&" + credito.Libranza.Value.Value.ToString();
                        }
                    }
                    #endregion
                    #region Valida que el crédito no tengo desestimiento
                    if (string.IsNullOrWhiteSpace(rd.Message))
                    {
                        if (credito.DocDesestimiento.Value.HasValue)
                        {
                            validRow = false;
                            rd.Message = DictionaryMessages.Err_Cc_CreditoDesestido + "&&" + credito.Libranza.Value.Value.ToString();
                        }
                    }
                    #endregion
                    #region Valida si el credito ya esta cancelado
                    if (string.IsNullOrWhiteSpace(rd.Message) && credito.CanceladoInd.Value.Value)
                    {
                        //ERROR, PERO LO DEJA SEGUIR
                        rd.Message = DictionaryMessages.Err_Cc_CreditoCancelado + "&&" + dto.Libranza.Value.Value.ToString();
                    }
                    #endregion
                    #region Valida si tiene estado de cuenta
                    if (string.IsNullOrWhiteSpace(rd.Message) && credito.DocEstadoCuenta.Value != null)
                    {
                        //TIENE ERROR PERO LO DEJA SEGUIR
                        rd.Message = DictionaryMessages.Err_Cc_CreditoConEstadoCuenta + "&&" + credito.Libranza.Value.Value.ToString();
                    }
                    #endregion

                    if (!string.IsNullOrWhiteSpace(rd.Message))
                    {
                        result.Details.Add(rd);
                        if (!validRow)
                            result.Result = ResultValue.NOK;
                    }

                    #endregion
                }

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "MigracionNomida_Validar");
                return result;
            }
        }

        /// <summary>
        /// Procesa la migracion de nomina
        /// </summary>
        /// <param name="documentID">Documento que ejecuta el proceso</param>
        /// <param name="numDoc">Identificador unico del documento</param>
        /// <param name="centroPagoID">Identificador del centro de pago</param>
        /// <param name="pagaduriaID">Identificador de la pagaduria</param>
        /// <param name="docTercero">Identificador del documento tercero</param>
        /// <param name="periodo">Periodo</param>
        /// <param name="isMensual">Indica si la consulta es quincenal o mensual</param>
        /// <param name="fecha">Fecha de la migracion (15 o ultimo dia del mes)</param>
        /// <param name="data">Información a migrar</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult RecaudosMasivos_Procesar(int documentID, string centroPagoID, string pagaduriaID, DateTime periodo, DateTime fecha, 
            List<DTO_ccIncorporacionDeta> data, bool isAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;
            try
            {
                this._dal_Cartera = (DAL_Cartera)base.GetInstance(typeof(DAL_Cartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccNominaPreliminar = (DAL_ccNominaPreliminar)base.GetInstance(typeof(DAL_ccNominaPreliminar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                this._dal_ccNominaPreliminar.DAL_ccNominaPreliminar_DeleteByCentroPago(centroPagoID);
                result = this._dal_Cartera.DAL_Cartera_RecaudosMasivos_Inconsistencias(centroPagoID, pagaduriaID, periodo, fecha, data);
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "RecaudosMasivos_Procesar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Paga los registros de la migracion de nomina
        /// </summary>
        /// <param name="documentID">Identificador del documento</param>
        /// <param name="actFlujoID">Identificador de la actividad de flujo</param>
        /// <param name="data">Datos a migrar</param>
        /// <returns>Retorna la lista de resultados</returns>
        public DTO_TxResult RecaudosMasivos_Pagar(int documentID, string actFlujoID, DateTime periodo, DateTime fecha, DateTime fechaAplica, decimal valorPagaduria, 
            string centroPagoID,  DTO_tsBancosCuenta banco, List<DTO_ccIncorporacionDeta> data, bool isAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            int i = 0;
            DTO_coComprobante comp = null;
            List<DTO_glDocumentoControl> ctrls = new List<DTO_glDocumentoControl>();
            List<DTO_Comprobante> comprobantes = new List<DTO_Comprobante>();
            try
            {
                #region Variables

                //Dals y módulos
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccNominaDeta = (DAL_ccNominaDeta)base.GetInstance(typeof(DAL_ccNominaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccNominaPreliminar = (DAL_ccNominaPreliminar)base.GetInstance(typeof(DAL_ccNominaPreliminar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloTesoreria = (ModuloTesoreria)base.GetInstance(typeof(ModuloTesoreria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                //Variables por defecto
                string lugarGeoXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string prefijoXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string centroCostoXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string concCargoXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string proyectoXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string lineaPresXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string monedaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                string areaFuncID = this.GetAreaFuncionalByUser();
                string compradorPropio = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);

                //Info de componentes
                string componenteCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string componenteInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string componenteSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string componenteInteresMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string componenteUsura = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteUsura);
                string componentePJ = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);
                string componenteSaldoFavor = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSaldosAFavor);

                //Cuenta para saldo de la pagaduria
                string ctaPagaduriaID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaSaldosAFavorPagaduria);

                //Variables generales
                string autoCuotasStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_IndAnticipoAutoCuotas);
                bool autoCuota = autoCuotasStr == "1" ? true : false;
                string reciboCajaID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCajaRecaudosMasivos);
                DTO_tsReciboCajaDocu reciboCaja;

                //Tercero
                string terceroRecaudo = string.Empty;
                string tipoCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);
                if (tipoCartera == ((byte)SectorCartera.Solidario).ToString())
                {
                    //Información del recibo
                    DTO_ccCentroPagoPAG centroPag = (DTO_ccCentroPagoPAG)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCentroPagoPAG, centroPagoID, true, false);
                    DTO_ccPagaduria pagaduria = (DTO_ccPagaduria)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccPagaduria, centroPag.PagaduriaID.Value, true, false);
                    terceroRecaudo = pagaduria.TerceroID.Value;
                }

                //Componenete de saldo a favor
                DTO_ccCarteraComponente compSaldoFavorDTO = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, componenteSaldoFavor, true, false);

                #endregion
                #region Validaciones

                //Valida el componente de saldo a favor
                if (string.IsNullOrWhiteSpace(componenteSaldoFavor))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ComponenteSaldosAFavor + "&&" + string.Empty;

                    return result;
                }

                //Valida el recibo de caja
                if (string.IsNullOrWhiteSpace(reciboCajaID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CodigoCajaRecaudosMasivos + "&&" + string.Empty;

                    return result;
                }

                //Valida el coDocumento
                DTO_tsCaja caja = (DTO_tsCaja)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.tsCaja, reciboCajaID, true, false);
                DTO_coDocumento coDocBanco = null;
                DTO_coDocumento coDocCaja = null;
                if(banco != null)
                {
                    coDocBanco = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, banco.coDocumentoID.Value, true, false);
                }
                if (string.IsNullOrWhiteSpace(caja.coDocumentoID.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CodigoDocumentoCredito + "&&" + string.Empty;

                    return result;
                }
                else
                    coDocCaja = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, caja.coDocumentoID.Value, true, false);

                //Valida que tenga comprobante
                if (string.IsNullOrWhiteSpace(coDocCaja.ComprobanteID.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;

                    return result;
                }
                else
                    comp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, coDocCaja.ComprobanteID.Value, true, false);

                //Valida que el documento asociado tenga cuenta local
                if (string.IsNullOrWhiteSpace(coDocBanco != null? coDocBanco.CuentaLOC.Value: coDocCaja.CuentaLOC.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocBanco != null ? coDocBanco.ID.Value : coDocCaja.ID.Value;

                    return result;
                }

                //Valida la cuenta del saldo a favor para la pagaduria
                if (string.IsNullOrWhiteSpace(ctaPagaduriaID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaSaldosAFavorPagaduria + "&&" + string.Empty;

                    return result;
                }

                #endregion
                #region Carga la info de nomina preliminar en nomina deta
                this._dal_ccNominaDeta.DAL_ccNominaDeta_AddFromPreliminar(centroPagoID);
                #endregion
                #region Carga la información de los créditos

                for (i = 0; i< data.Count; ++i)
                {
                    //Resultados
                    result = new DTO_TxResult();
                    result.Result = ResultValue.OK;
                    result.Details = new List<DTO_TxResultDetail>();
                    
                    DTO_TxResultDetail rd = new DTO_TxResultDetail();
                    rd.DetailsFields = new List<DTO_TxResultDetailFields>();
                    rd.line = i + 1;

                    //Manejo de porcentajes para la aprobacion
                    int percent = (i * 100) / data.Count;
                    batchProgress[tupProgress] = percent;

                    //Pago
                    DTO_ccIncorporacionDeta pago = data[i];
                    if (tipoCartera == ((byte)SectorCartera.Financiero).ToString())
                        terceroRecaudo = pago.ClienteID.Value;

                    #region Variables 

                    //Variables de inicio
                    decimal saldoTotal = 0;
                    decimal vlrUsura = 0;
                    decimal porcHonorarios = 0;
                    decimal valorPagadoCuota = 0;
                    DTO_ccSaldosComponentes saldoAFavor = null;
                    DTO_ccCreditoPlanPagos extraCuota = null;
                    Dictionary<string, bool> compExtras = new Dictionary<string, bool>();

                    //Lista de componentes
                    List<DTO_ccSaldosComponentes> componentes = new List<DTO_ccSaldosComponentes>();
                    List<DTO_ccSaldosComponentes> componentesPagos = new List<DTO_ccSaldosComponentes>();

                    //Información del comprobante
                    DTO_Comprobante comprobante = new DTO_Comprobante();
                    comprobante.Footer = new List<DTO_ComprobanteFooter>();

                    #endregion
                    #region Crea glDocumentoControl

                    DTO_glDocumentoControl ctrl = new DTO_glDocumentoControl();
                    ctrl.PeriodoDoc.Value = periodo;
                    ctrl.DocumentoNro.Value = 0;
                    ctrl.DocumentoID.Value = documentID;
                    ctrl.LugarGeograficoID.Value = lugarGeoXDef;
                    ctrl.DocumentoTipo.Value = (int)DocumentoTipo.DocInterno;
                    ctrl.ComprobanteID.Value = coDocCaja.ComprobanteID.Value;
                    ctrl.Fecha.Value = DateTime.Now;
                    ctrl.FechaDoc.Value = fecha;
                    ctrl.PeriodoUltMov.Value = periodo;
                    ctrl.CuentaID.Value =(coDocBanco != null ? coDocBanco.CuentaLOC.Value : coDocCaja.CuentaLOC.Value);
                    ctrl.AreaFuncionalID.Value = areaFuncID;
                    ctrl.PrefijoID.Value = prefijoXDef;
                    ctrl.ProyectoID.Value = proyectoXDef;
                    ctrl.CentroCostoID.Value = centroCostoXDef;
                    ctrl.LineaPresupuestoID.Value = lineaPresXDef;
                    ctrl.TerceroID.Value = terceroRecaudo;
                    ctrl.MonedaID.Value = monedaLoc;
                    ctrl.DocumentoTercero.Value = pago.Libranza.Value.Value.ToString();
                    ctrl.TasaCambioCONT.Value = 0;
                    ctrl.TasaCambioDOCU.Value = 0;
                    ctrl.Observacion.Value = "Recaudo Masivo Obl:  " + pago.Libranza.Value.ToString();
                    ctrl.Descripcion.Value = "RECAUDO MASIVO";
                    ctrl.Valor.Value = pago.ValorCuota.Value.Value;
                    ctrl.Estado.Value = (byte)EstadoDocControl.Aprobado;
                    ctrl.seUsuarioID.Value = this.UserId;

                    DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrl, true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";

                        resultGLDC.line = i + 1;
                        result.Details.Add(resultGLDC);

                        return result;
                    }

                    ctrl.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);
                    pago.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                    ctrls.Add(ctrl);

                    #endregion
                    #region Crea el recibo de caja

                    reciboCaja = new DTO_tsReciboCajaDocu();
                    reciboCaja.CajaID.Value = reciboCajaID;
                    reciboCaja.Valor.Value = pago.ValorCuota.Value.Value;
                    reciboCaja.IVA.Value = 0;
                    reciboCaja.TerceroID.Value = terceroRecaudo;
                    reciboCaja.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                    reciboCaja.FechaConsignacion.Value = fecha; 
                    reciboCaja.FechaAplica.Value = fechaAplica;
                    result = this._moduloTesoreria.ReciboCaja_Add(reciboCaja);

                    if (result.Result == ResultValue.NOK)
                    {
                        rd.Message = result.ResultMessage;
                        result.Details.Add(rd);
                        result.ResultMessage = "NOK";

                        return result;
                    }

                    #endregion
                    #region Trae la info del credito

                    DTO_ccCreditoDocu credito = this.GetCreditoByLibranza(pago.Libranza.Value.Value);
                    DTO_InfoCredito infoCredito = this.GetSaldoCredito(credito.NumeroDoc.Value.Value, pago.FechaNomina.Value.Value, true, true, true);

                    //Info para el cobro prejurídico
                    bool hasPJ = infoCredito.SaldosComponentes.Where(x => x.ComponenteCarteraID.Value == componentePJ).Count() > 0 ? true : false;
                    if (hasPJ)
                    {
                        porcHonorarios = 0;
                        DTO_ccCliente cliente = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, credito.ClienteID.Value, true, false);

                        string abogadoID = cliente.AbogadoID.Value;
                        if (string.IsNullOrWhiteSpace(abogadoID))
                            abogadoID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AbogadoCobroPrejuridico);

                        if (!string.IsNullOrWhiteSpace(abogadoID))
                        {
                            DTO_ccAbogado abogado = (DTO_ccAbogado)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccAbogado, abogadoID, true, false);
                            porcHonorarios = abogado.PorHonorarios.Value.Value;
                        }
                    }

                    #endregion
                    #region Actualiza la nómina
                    this._dal_ccNominaDeta.DAL_ccNominaDeta_UpdateNumDocRecibo(credito.NumeroDoc.Value.Value, ctrl.NumeroDoc.Value.Value);
                    #endregion
                    #region Calcula el saldo a favor

                    if (infoCredito.PlanPagos.Count > 0)
                    {
                        int ultimaCuota = (from c in infoCredito.SaldosComponentes select c.CuotaID.Value.Value).OrderBy(x => x).Last();
                        componentes = infoCredito.SaldosComponentes.Where(x => x.CuotaID.Value == ultimaCuota).ToList();
                        //componentes = infoCredito.SaldosComponentes.Where(x => x.CuotaID.Value == credito.Plazo.Value).ToList();
                        saldoTotal = (from c in componentes select c.TotalSaldo.Value.Value).Sum();
                    }

                    if (infoCredito.PlanPagos.Count == 0 || pago.ValorCuota.Value.Value > saldoTotal)
                    {
                        saldoAFavor = new DTO_ccSaldosComponentes();
                        saldoAFavor.CuotaID.Value = (from c in infoCredito.SaldosComponentes select c.CuotaID.Value.Value).OrderBy(x => x).Last(); 
                        saldoAFavor.ComponenteCarteraID.Value = componenteSaldoFavor;
                        saldoAFavor.ComponenteFijo.Value = false;
                        saldoAFavor.PagoTotalInd.Value = true;
                        saldoAFavor.TipoComponente.Value = compSaldoFavorDTO.TipoComponente.Value;
                        saldoAFavor.CuotaInicial.Value = Math.Abs(saldoTotal - pago.ValorCuota.Value.Value);
                        saldoAFavor.TotalInicial.Value = saldoAFavor.CuotaInicial.Value;
                        saldoAFavor.CuotaSaldo.Value = saldoAFavor.CuotaInicial.Value;
                        saldoAFavor.TotalSaldo.Value = saldoAFavor.CuotaInicial.Value;
                        saldoAFavor.AbonoValor.Value = saldoAFavor.CuotaInicial.Value;

                        //Asigna el componente a la info general
                        infoCredito.SaldosComponentes.Add(saldoAFavor);
                    }

                    if (infoCredito.PlanPagos.Count == 0)
                    {
                        extraCuota = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(credito.NumeroDoc.Value.Value).Last();
                        extraCuota.PagoInd.Value = true;
                        extraCuota.VlrPagadoCuota.Value = saldoAFavor.TotalInicial.Value;

                        infoCredito.PlanPagos.Add(extraCuota);
                    }

                    List<DTO_ccCreditoPlanPagos> planPagos = infoCredito.PlanPagos;

                    #endregion
                    #region Calcula los pagos

                    decimal abono = pago.ValorCuota.Value.Value;
                    decimal vlrCuotaInicial = pago.ValorCuota.Value.Value;
                    foreach (DTO_ccCreditoPlanPagos cuota in planPagos)
                    {
                        cuota.PagoInd.Value = false;
                        if (!infoCredito.SaldosComponentes.Exists(x=>x.ComponenteCarteraID.Value == componenteSaldoFavor))
                            cuota.PagoInd.Value = false;
                        valorPagadoCuota = 0;
                        if (pago.ValorCuota.Value.Value > 0)
                        {
                            cuota.PagoInd.Value = true;
                            componentes = infoCredito.SaldosComponentes.Where(x => x.CuotaID.Value == cuota.CuotaID.Value).ToList();
                            decimal saldoCuota = (from c in componentes select c.CuotaSaldo.Value.Value).Sum();
                            vlrUsura = (from c in componentes where c.ComponenteCarteraID.Value == componenteUsura select c.CuotaSaldo.Value.Value).Sum();

                            #region Revisa si la cuota tiene componente prejurídico

                            bool hasPJ_cuota = componentes.Where(c => c.ComponenteCarteraID.Value == componentePJ).Count() > 0 ? true : false;
                            if (hasPJ_cuota && porcHonorarios > 0)
                            {
                                decimal totalPJ = componentes.Where(c => c.ComponenteCarteraID.Value == componentePJ).First().CuotaSaldo.Value.Value;
                                decimal vlrTmp = abono - (Convert.ToInt32(abono / ((porcHonorarios / 100) + 1)));
                                decimal abonoPJ = Math.Round(vlrTmp / 1000, 0) * 1000;
                                abonoPJ = Convert.ToInt32(1000 * Math.Round(Convert.ToDouble(abonoPJ) / 1000));

                                if (abonoPJ > totalPJ)
                                    abonoPJ = Convert.ToInt32(totalPJ);

                                abono -= abonoPJ;
                                componentes.Where(c => c.ComponenteCarteraID.Value == componentePJ).First().AbonoValor.Value = abonoPJ;
                            }

                            #endregion

                            //Paga el valor de los componentes
                            decimal abonoAct = 0;
                            for (int j = componentes.Count; j > 0; j--)
                            {
                                #region Asigna los pagos a los componentes de la cuota

                                if (componentes[j - 1].ComponenteCarteraID.Value != componenteUsura && componentes[j - 1].ComponenteCarteraID.Value != componentePJ)
                                {
                                    if (vlrUsura != 0 && componentes[j - 1].ComponenteCarteraID.Value == componenteInteres)
                                    {
                                        #region Componentes dependientes de la usura
                                        decimal interesReal = componentes[j - 1].CuotaSaldo.Value.Value + vlrUsura;

                                        if (abono <= interesReal)
                                        {
                                            componentes[j - 1].AbonoValor.Value = abono;
                                            valorPagadoCuota += abono;
                                            abono = 0;
                                            pago.ValorCuota.Value = abono;

                                            break;
                                        }
                                        else
                                        {
                                            abonoAct = abono - interesReal;
                                            componentes[j - 1].AbonoValor.Value = componentes[j - 1].CuotaSaldo.Value.Value;

                                            // Pago de usura
                                            DTO_ccSaldosComponentes usura = componentes.Where(c => c.ComponenteCarteraID.Value == componenteUsura).First();
                                            usura.AbonoValor.Value = usura.CuotaSaldo.Value;

                                            valorPagadoCuota += componentes[j - 1].CuotaSaldo.Value.Value + usura.CuotaSaldo.Value.Value;
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region Componentes fijos de pago
                                        if (abono <= componentes[j - 1].CuotaSaldo.Value)
                                        {
                                            componentes[j - 1].AbonoValor.Value = abono;
                                            valorPagadoCuota += abono;
                                            abono = 0;
                                            pago.ValorCuota.Value = abono;

                                            break;
                                        }
                                        else
                                        {
                                            //vlrDescuentoComp = 

                                            abonoAct = abono - componentes[j - 1].CuotaSaldo.Value.Value;
                                            componentes[j - 1].AbonoValor.Value = componentes[j - 1].CuotaSaldo.Value.Value;
                                            valorPagadoCuota += componentes[j - 1].CuotaSaldo.Value.Value;
                                        }
                                        #endregion
                                    }

                                    abono = abonoAct;
                                    pago.ValorCuota.Value = abono;
                                }

                                #endregion
                            }

                            //Asigna el valor pagado de la cuota
                            cuota.VlrPagadoCuota.Value = valorPagadoCuota;

                            //Si es la ultima cuota y hay saldo a favor lo agrega
                            if (cuota.CuotaID.Value == credito.Plazo.Value && saldoAFavor != null)
                                cuota.VlrPagadoCuota.Value += saldoAFavor.AbonoValor.Value;
                        }
                    }
                    #endregion
                    #region Actualiza los pagos

                    planPagos = (from p in planPagos.Where(p => p.PagoInd.Value.Value) select p).ToList();
                    foreach (DTO_ccCreditoPlanPagos p in planPagos)
                        componentesPagos.AddRange(from c in infoCredito.SaldosComponentes.Where(c => c.CuotaID.Value.Value == p.CuotaID.Value.Value) select c);

                    foreach (DTO_ccCreditoPlanPagos pagoSaldo in planPagos)
                    {
                        decimal vlrMoraPago = 0;

                        #region Asigna el registro de pago de credito
                        DTO_ccCreditoPagos pagoCredito = new DTO_ccCreditoPagos();
                        List<DTO_ccSaldosComponentes> componentesCuota = (from c in componentesPagos where c.CuotaID.Value == pagoSaldo.CuotaID.Value select c).ToList();

                        //Valores iniciales
                        pagoCredito.VlrCapital.Value = 0;
                        pagoCredito.VlrInteres.Value = 0;
                        pagoCredito.VlrSeguro.Value = 0;
                        pagoCredito.VlrAjusteUsura.Value = 0;
                        pagoCredito.VlrPrejuridicoPago.Value = 0;

                        pagoCredito.CreditoCuotaNum.Value = pagoSaldo.Consecutivo.Value;
                        pagoCredito.NumeroDoc.Value = credito.NumeroDoc.Value;
                        pagoCredito.PagoDocu.Value = ctrl.NumeroDoc.Value;
                        pagoCredito.Valor.Value = pagoSaldo.VlrPagadoCuota.Value;
                        pagoCredito.DiasMora.Value = 0;
                        pagoCredito.VlrOtro1.Value = 0;
                        pagoCredito.VlrOtro2.Value = 0;
                        pagoCredito.VlrOtro3.Value = 0;
                        pagoCredito.VlrOtrosFijos.Value = 0;
                        pagoCredito.VlrMoraPago.Value = 0;
                        pagoCredito.VlrMoraliquida.Value = pagoSaldo.VlrMoraLiquida.Value;
                        pagoCredito.VlrAjusteUsura.Value = 0;
                        pagoCredito.VlrOtrosComponentes.Value = 0;
                        pagoCredito.DocVenta.Value = pagoSaldo.DocVenta.Value;
                        pagoCredito.VlrCapitalCesion.Value = 0;
                        pagoCredito.VlrDerechosCesion.Value = 0;
                        pagoCredito.VlrMoraPagoANT.Value = pagoSaldo.VlrMoraPagoANT.Value;
                        pagoCredito.VlrMoraLiquidaANT.Value = pagoSaldo.VlrMoraLiquidaANT.Value;
                        pagoCredito.FechaLiquidaMoraANT.Value = pagoSaldo.FechaLiquidaMoraANT.Value;

                        if (autoCuota && pagoSaldo.CuotaID.Value == 1)
                            pagoCredito.TipoPago.Value = (byte)TipoPago.Anticipado;
                        else
                            pagoCredito.TipoPago.Value = (byte)TipoPago.Normal;

                        #region Asigna el valor de los componentes
                        foreach (var item in componentesCuota)
                        {
                            if (item.ComponenteCarteraID.Value == componenteCapital)
                                pagoCredito.VlrCapital.Value = item.AbonoValor.Value;
                            else if (item.ComponenteCarteraID.Value == componenteInteres)
                                pagoCredito.VlrInteres.Value = item.AbonoValor.Value;
                            else if (item.ComponenteCarteraID.Value == componenteSeguro)
                                pagoCredito.VlrSeguro.Value = item.AbonoValor.Value;
                            else if (item.ComponenteCarteraID.Value == componenteUsura)
                                pagoCredito.VlrAjusteUsura.Value = item.AbonoValor.Value;
                            else if (item.ComponenteCarteraID.Value == componentePJ)
                                pagoCredito.VlrPrejuridicoPago.Value = item.AbonoValor.Value;
                            else if (item.ComponenteCarteraID.Value == componenteInteresMora)
                            {
                                vlrMoraPago = item.AbonoValor.Value.Value;
                                pagoCredito.DiasMora.Value = Convert.ToInt32((fecha - pagoSaldo.FechaLiquidaMora.Value.Value).TotalDays);
                                pagoCredito.VlrMoraPago.Value = vlrMoraPago;
                                pagoCredito.VlrMoraliquida.Value = pagoSaldo.VlrMoraLiquida.Value;
                                pagoCredito.TipoPago.Value = (byte)TipoPago.Mora;
                            }
                            else
                            {
                                //Revisa si es un componente extra
                                if (!compExtras.ContainsKey(item.ComponenteCarteraID.Value))
                                {
                                    DTO_ccCarteraComponente cTemp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, item.ComponenteCarteraID.Value, true, false);
                                    bool isExtra = cTemp.TipoComponente.Value.Value == 5 ? true : false;
                                    compExtras.Add(item.ComponenteCarteraID.Value, isExtra);
                                }

                                //Componente extra
                                if (compExtras[item.ComponenteCarteraID.Value])
                                {
                                    pagoCredito.VlrOtrosComponentes.Value += item.AbonoValor.Value;
                                }
                                else if (item.ComponenteFijo.Value.Value)
                                    pagoCredito.VlrOtrosFijos.Value += item.AbonoValor.Value;
                                else
                                {
                                    if (pagoSaldo.VlrOtro1.Value.Value != 0 && pagoCredito.VlrOtro1.Value == 0)
                                        pagoCredito.VlrOtro1.Value = item.AbonoValor.Value;
                                    else if (pagoSaldo.VlrOtro2.Value.Value != 0 && pagoCredito.VlrOtro2.Value == 0)
                                        pagoCredito.VlrOtro2.Value = item.AbonoValor.Value;
                                    else if (pagoSaldo.VlrOtro3.Value.Value != 0 && pagoCredito.VlrOtro3.Value == 0)
                                        pagoCredito.VlrOtro3.Value = item.AbonoValor.Value;
                                }
                            }
                        }
                        #endregion
                        #region Asigna la información de la cesión

                        if (!string.IsNullOrWhiteSpace(pagoSaldo.CompradorCarteraID.Value) && pagoSaldo.CompradorCarteraID.Value != compradorPropio)
                        {
                            decimal cuotaSaldo = componentesCuota.Sum(c => c.CuotaSaldo.Value.Value);
                            decimal cuotaAbono = componentesCuota.Sum(c => c.AbonoSaldo.Value.Value);

                            if (cuotaSaldo == cuotaAbono)
                            {
                                //Paga la totalidad de la cuota
                                List<DTO_ccCreditoPagos> pagosCuota = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetByCuotaNum(pagoSaldo.Consecutivo.Value.Value);
                                decimal pagosCesion = pagosCuota.Sum(p => p.VlrCapitalCesion.Value.Value);
                                pagoCredito.VlrCapitalCesion.Value = Math.Round(pagoSaldo.VlrCapitalCesion.Value.Value - pagosCesion,0);
                            }
                            else if (pagoCredito.VlrCapital.Value > 0 || pagoCredito.VlrInteres.Value > 0)
                            {
                                //Pago parcial
                                decimal factor = (pagoSaldo.VlrCapital.Value.Value + pagoSaldo.VlrInteres.Value.Value) != 0 ?
                                                 pagoSaldo.VlrCapitalCesion.Value.Value / (pagoSaldo.VlrCapital.Value.Value) : 0;

                                pagoCredito.VlrCapitalCesion.Value = Math.Round((pagoCredito.VlrCapital.Value.Value) * factor, 0);
                            }
                            else
                                pagoCredito.VlrCapitalCesion.Value = 0;

                            pagoCredito.VlrDerechosCesion.Value = Math.Round(pagoCredito.VlrCapitalCesion.Value.Value - pagoCredito.VlrCapital.Value.Value,0);
                        }

                        #endregion
                        this._dal_ccCreditoPagos.DAL_ccCreditoPagos_Add(pagoCredito);

                        #endregion
                        #region Actualiza el plan de pagos

                        decimal vlrPagoCuota = 
                        (
                            from c in infoCredito.SaldosComponentes
                            where c.CuotaID.Value == pagoSaldo.CuotaID.Value && (c.TipoComponente.Value.Value == (byte)TipoComponente.CapitalSolicitado || c.TipoComponente.Value.Value == (byte)TipoComponente.ComponenteCuota)
                            select c.AbonoValor.Value.Value
                        ).Sum();

                        pagoSaldo.VlrMoraPago.Value = vlrMoraPago;
                        pagoSaldo.VlrPagadoExtras.Value = pagoSaldo.VlrPagadoCuota.Value.Value - vlrPagoCuota;
                        pagoSaldo.VlrPagadoCuota.Value = vlrPagoCuota;

                        this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(pagoSaldo);
                        #endregion
                    }

                    #endregion
                    #region Guarda los movimientos de cartera

                    List<string> credComps = componentesPagos.Select(x => x.ComponenteCarteraID.Value).Distinct().ToList();
                    foreach (string c in credComps)
                    {
                        DTO_ccCarteraComponente componente = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, c, true, false);
                        DTO_ccCarteraMvto mvto = new DTO_ccCarteraMvto();
                        mvto.NumCredito.Value = credito.NumeroDoc.Value.Value;
                        mvto.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                        mvto.ComponenteCarteraID.Value = c;
                        mvto.CompradorCarteraID.Value = credito.CompradorCarteraID.Value;
                        mvto.Tasa.Value = 0;

                        mvto.VlrAbono.Value = (from x in componentesPagos where x.ComponenteCarteraID.Value == c select x.AbonoValor.Value.Value).Sum() * -1;
                        mvto.VlrComponente.Value = 0;
                        if (componente.TipoComponente.Value == (byte)TipoComponente.CapitalSolicitado || componente.TipoComponente.Value == (byte)TipoComponente.ComponenteCuota)
                            mvto.VlrComponente.Value = mvto.VlrAbono.Value;

                        this.ccCarteraMvto_Add(mvto);
                    }

                    #endregion
                    #region Actualización incorporaciones previas
                    if (autoCuota)
                    {
                        bool hasIncorporacionPrevia = this._dal_ccNominaPreliminar.DAL_ccNominaPreliminar_HasIncorporacionPrevia(centroPagoID, credito.NumeroDoc.Value.Value);
                        if (hasIncorporacionPrevia)
                            this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_UpdateIncorporacionPrevia(credito.NumeroDoc.Value.Value);
                    }
                    #endregion
                    #region Genera la info del comprobante (footer)

                    DTO_glDocumentoControl ctrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(credito.NumeroDoc.Value.Value);
                    DTO_glDocumentoControl ctrlContraOrden = ObjectCopier.Clone(ctrl);
                    ctrlContraOrden.LugarGeograficoID.Value = ctrlCredito.LugarGeograficoID.Value;
                    ctrlContraOrden.AreaFuncionalID.Value = ctrlCredito.AreaFuncionalID.Value;
                    ctrlContraOrden.PrefijoID.Value = ctrlCredito.PrefijoID.Value;
                    ctrlContraOrden.ProyectoID.Value = ctrlCredito.ProyectoID.Value;
                    ctrlContraOrden.CentroCostoID.Value = ctrlCredito.CentroCostoID.Value;
                    ctrlContraOrden.LineaPresupuestoID.Value = ctrlCredito.LineaPresupuestoID.Value;
                    ctrlContraOrden.TerceroID.Value = credito.ClienteID.Value;
                    ctrlContraOrden.DocumentoTercero.Value = credito.Libranza.Value.ToString();
                    ctrlContraOrden.MonedaID.Value = ctrlCredito.MonedaID.Value;
                    ctrlContraOrden.Valor.Value = vlrCuotaInicial;

                    decimal vlrAbonoCapital = 0;
                    object compRes = this.GenerarComprobante_PagosCartera(TipoRecaudo.Normal, ctrlContraOrden, ctrlCredito, credito, planPagos, componentesPagos,null,
                        (coDocBanco != null ? coDocBanco : coDocCaja), componenteCapital, componenteInteres, componenteSeguro, true, "RECAUDO MASIVO CARTERA - CRE: " + ctrlCredito.DocumentoTercero.Value,
                        (int)EstadoDeuda.Normal, ref vlrAbonoCapital);

                    if (compRes.GetType() == typeof(DTO_TxResult))
                    {
                        result = (DTO_TxResult)compRes;

                        rd.Message = result.ResultMessage;
                        result.Details.Add(rd);
                        result.ResultMessage = "NOK";

                        return result;
                    }
                    else
                    {
                        DTO_Comprobante comprobanteCredito = (DTO_Comprobante)compRes;
                        if (comprobanteCredito.Footer.Count == 0)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Co_CompNoResults;

                            return result;
                        }

                        comprobante.Footer.AddRange(comprobanteCredito.Footer);
                    }

                    #endregion
                    #region Organiza la información de las contrapartidas

                    //Cartera Propia Balance: coDoc.CuentaLOC.Value
                    //Cartera Cedida Balance: coDoc.CuentaLOC.Value

                    //Cartera Propia Orden: ctaContraOrden_Propia - 16500 - 93500501
                    //Cartera Cedida Orden: ctaContraOrden_Cedida - 16501 - 88050501

                    List<DTO_ComprobanteFooter> contras = comprobante.Footer.Where(f => f.CuentaID.Value == (coDocBanco != null ? coDocBanco.CuentaLOC.Value : coDocCaja.CuentaLOC.Value) &&
                        f.DatoAdd4.Value == AuxiliarDatoAdd4.Contrapartida.ToString()).ToList();
                    comprobante.Footer.RemoveAll(f => f.CuentaID.Value == (coDocBanco != null ? coDocBanco.CuentaLOC.Value : coDocCaja.CuentaLOC.Value) &&
                        f.DatoAdd4.Value == AuxiliarDatoAdd4.Contrapartida.ToString());

                    decimal valML = (from x in contras select x.vlrMdaLoc.Value.Value).Sum();
                    decimal valME = (from x in contras select x.vlrMdaExt.Value.Value).Sum();

                    DTO_ComprobanteFooter det = this.CrearComprobanteFooter(ctrl, 0, concCargoXDef, lugarGeoXDef, lineaPresXDef, valML, valME, true);
                    det.CuentaID.Value = (coDocBanco != null ? coDocBanco.CuentaLOC.Value : coDocCaja.CuentaLOC.Value);
                    det.ConceptoSaldoID.Value = contras.First().ConceptoSaldoID.Value;
                    det.IdentificadorTR.Value = contras.First().IdentificadorTR.Value;

                    comprobante.Footer.Add(det);

                    #endregion
                    #region Contabiliza el comprobante

                    comprobante.Header.ComprobanteID.Value = coDocCaja.ComprobanteID.Value;
                    comprobante.Header.ComprobanteNro.Value = 0;
                    comprobante.Header.Fecha.Value = fecha;
                    comprobante.Header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                    comprobante.Header.MdaTransacc.Value = monedaLoc;
                    comprobante.Header.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                    comprobante.Header.PeriodoID.Value = periodo;
                    comprobante.Header.TasaCambioBase.Value = ctrl.TasaCambioCONT.Value;
                    comprobante.Header.TasaCambioOtr.Value = ctrl.TasaCambioCONT.Value;

                    result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobante, periodo, ModulesPrefix.cc, 0, false);
                    if (result.Result == ResultValue.NOK)
                    {
                        result.Details.ForEach(rDet => rDet.line = rd.line);
                        return result;
                    }

                    comprobantes.Add(comprobante);
                    #endregion
                    #region Actualiza el crédito

                    bool hasSaldos = this._moduloContabilidad.Saldos_CreditoHasSaldo(periodo, credito.NumeroDoc.Value.Value);
                    if (!hasSaldos)
                        credito.CanceladoInd.Value = true;

                    credito.DocUltNomina.Value = ctrl.NumeroDoc.Value;
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);

                    #endregion
                }

                #endregion
                #region Carga el saldo a favor para la pagaduria

                if (valorPagaduria != 0)
                {
                    #region Crea glDocumentoControl

                    DTO_glDocumentoControl ctrl = new DTO_glDocumentoControl();
                    ctrl.PeriodoDoc.Value = periodo;
                    ctrl.DocumentoNro.Value = 0;
                    ctrl.DocumentoID.Value = documentID;
                    ctrl.LugarGeograficoID.Value = lugarGeoXDef;
                    ctrl.DocumentoTipo.Value = (int)DocumentoTipo.DocInterno;
                    ctrl.ComprobanteID.Value = coDocCaja.ComprobanteID.Value;
                    ctrl.Fecha.Value = DateTime.Now;
                    ctrl.FechaDoc.Value = fecha;
                    ctrl.PeriodoUltMov.Value = periodo;
                    ctrl.CuentaID.Value = (coDocBanco != null ? coDocBanco.CuentaLOC.Value : coDocCaja.CuentaLOC.Value);
                    ctrl.AreaFuncionalID.Value = areaFuncID;
                    ctrl.PrefijoID.Value = prefijoXDef;
                    ctrl.ProyectoID.Value = proyectoXDef;
                    ctrl.CentroCostoID.Value = centroCostoXDef;
                    ctrl.LineaPresupuestoID.Value = lineaPresXDef;
                    ctrl.TerceroID.Value = terceroRecaudo;
                    ctrl.MonedaID.Value = monedaLoc;
                    ctrl.TasaCambioCONT.Value = 0;
                    ctrl.TasaCambioDOCU.Value = 0;
                    ctrl.DocumentoTercero.Value = string.Empty; 
                    ctrl.Observacion.Value = "RECAUDO MASIVO - SALDO A FAVOR PAGADURIA";
                    ctrl.Descripcion.Value = "RECAUDO MASIVO - SALDO A FAVOR PAGADURIA";
                    ctrl.Valor.Value = valorPagaduria;
                    ctrl.Estado.Value = (byte)EstadoDocControl.Aprobado;
                    ctrl.seUsuarioID.Value = this.UserId;

                    DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrl, true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);

                        return result;
                    }

                    ctrl.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);

                    ctrls.Add(ctrl);

                    #endregion
                    #region Carga el comprobante

                    DTO_Comprobante comprobante = new DTO_Comprobante();
                    comprobante.Footer = new List<DTO_ComprobanteFooter>();

                    #region Header

                    comprobante.Header.ComprobanteID.Value = coDocCaja.ComprobanteID.Value;
                    comprobante.Header.ComprobanteNro.Value = 0;
                    comprobante.Header.Fecha.Value = fecha;
                    comprobante.Header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                    comprobante.Header.MdaTransacc.Value = monedaLoc;
                    comprobante.Header.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                    comprobante.Header.PeriodoID.Value = periodo;
                    comprobante.Header.TasaCambioBase.Value = ctrl.TasaCambioCONT.Value;
                    comprobante.Header.TasaCambioOtr.Value = ctrl.TasaCambioCONT.Value;

                    #endregion
                    #region Footer

                    decimal pagME = 0;
                    if (ctrl.TasaCambioDOCU.Value != 0)
                        pagME += valorPagaduria / ctrl.TasaCambioDOCU.Value.Value;

                    //Partida
                    DTO_coPlanCuenta ctaPagaduria = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaPagaduriaID, true, false);
                    DTO_glConceptoSaldo cSaldoPagaduria = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, ctaPagaduria.ConceptoSaldoID.Value, true, false);
                    DTO_ComprobanteFooter detPagaduria = this.CrearComprobanteFooter(ctrl, ctaPagaduria, cSaldoPagaduria, ctrl.TasaCambioDOCU.Value.Value,
                        concCargoXDef, lugarGeoXDef, lineaPresXDef, valorPagaduria, pagME, false);
                    detPagaduria.TerceroID.Value = terceroRecaudo;
                    comprobante.Footer.Add(detPagaduria);

                    //Contrapartida
                    DTO_ComprobanteFooter detContra = this.CrearComprobanteFooter(ctrl, ctrl.TasaCambioDOCU.Value.Value, concCargoXDef, lugarGeoXDef, lineaPresXDef,
                        valorPagaduria * -1, pagME * -1, true);
                    comprobante.Footer.Add(detContra);

                    #endregion

                    result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobante, periodo, ModulesPrefix.cc, 0, false);
                    if (result.Result == ResultValue.NOK)
                        return result;

                    comprobantes.Add(comprobante);

                    #endregion
                }

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                DTO_TxResultDetail rd = new DTO_TxResultDetail();
                rd.line = i +1;
                rd.Message = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "MigracionNomina_Pagar");

                result.Result = ResultValue.NOK;
                result.Details.Add(rd);
                result.ResultMessage = "NOK";

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        foreach (DTO_glDocumentoControl ctrl in ctrls)
                        {
                            ctrl.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrl.PrefijoID.Value);
                            ctrl.ComprobanteIDNro.Value = this.GenerarComprobanteNro(comp, ctrl.PrefijoID.Value, ctrl.PeriodoDoc.Value.Value, ctrl.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrl, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrl.NumeroDoc.Value.Value, ctrl.ComprobanteIDNro.Value.Value, false);
                        }

                        #endregion
                    }
                    else
                        throw new Exception("MigracionNomina_Pagar - Los consecutivos deben ser generados por la transaccion padre");

                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                        base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Revierte el proceso de migracion de nómina
        /// </summary>
        /// <param name="documentID">Documento que genera la reversión</param>
        /// <param name="numeroDoc">Numero doc del pago a revertir</param>
        /// <param name="consecutivoPos">Posicion del los documentos en la lista. Lleva el control de los consecutivos (Null si es el primero)</param>
        /// <param name="ctrls">Documento de reversion</param>
        /// <param name="coComps">Comprobante (maestra) de reversion (si existe)</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult RecaudosMasivos_Revertir(int documentID, int numeroDoc, int? consecutivoPos, ref List<DTO_glDocumentoControl> ctrls,
            ref List<DTO_coComprobante> coComps, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Inicia las variables globales

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;

            if (!consecutivoPos.HasValue)
            {
                ctrls = new List<DTO_glDocumentoControl>();
                coComps = new List<DTO_coComprobante>();
            }

            #endregion
            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)this.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)this.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)this.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCarteraMvto = (DAL_ccCarteraMvto)base.GetInstance(typeof(DAL_ccCarteraMvto), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                string periodoStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoStr);

                //Variables del credito
                List<DTO_ccCreditoDocu> creditos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetForReversionMigracionNom(numeroDoc);

                #endregion
                #region Validaciones

                foreach (DTO_ccCreditoDocu cred in creditos)
                {
                    // Valida no se hayan pagado cuotas despues de la cuota a revertir
                    long countPagosPost = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetByPagosForReversion(numeroDoc, cred.NumeroDoc.Value.Value);
                    if (countPagosPost > 0)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_RevRecCuotasPagadas;
                        return result;
                    }
                }

                #endregion
                #region Revierte el documento

                result = this._moduloGlobal.glDocumentoControl_Revertir(documentID, numeroDoc, consecutivoPos, ref ctrls, ref coComps, true);
                if (result.Result == ResultValue.NOK)
                    return result;

                #endregion
                #region Actualiza los creditos

                if (!consecutivoPos.HasValue)
                    consecutivoPos = 0;

                int numDocAnula = ctrls[consecutivoPos.Value].NumeroDoc.Value.Value;

                foreach (DTO_ccCreditoDocu cred in creditos)
                {
                    //Revierte la información relacionada con el crédito
                    result = this.CarteraPagosPriv_Revertir(cred, numDocAnula, numeroDoc, periodo);


                }

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "CarteraPagos_Revertir");

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Commit y consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        for (int i = 0; i < ctrls.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlAnula = ctrls[i];
                            DTO_coComprobante coCompAnula = coComps[i];

                            //Obtiene el consecutivo del comprobante (cuando existe)
                            ctrlAnula.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlAnula.DocumentoID.Value.Value, ctrlAnula.PrefijoID.Value);
                            if (coCompAnula != null)
                                ctrlAnula.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompAnula, ctrlAnula.PrefijoID.Value, ctrlAnula.PeriodoDoc.Value.Value, ctrlAnula.DocumentoNro.Value.Value);

                            this._moduloGlobal.ActualizaConsecutivos(ctrlAnula, true, coCompAnula != null, false);
                            if (coCompAnula != null)
                                this._moduloContabilidad.ActualizaComprobanteNro(ctrlAnula.NumeroDoc.Value.Value, ctrlAnula.ComprobanteIDNro.Value.Value, false);
                        }

                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Proceso de migracion de cartera
        /// </summary>
        /// <param name="documentID">Identificador del documento que inicia el proceso</param>
        /// <param name="periodo">Periodo de ingreso de datos</param>
        /// <param name="compComodinID">Identificador del componente comodin</param>
        /// <param name="data">Lista de creditos a migrar</param>
        /// <returns>Retorna al resultado de la operacion</returns>
        public List<DTO_TxResult> MigracionCartera(int documentID, DateTime periodo, string compComodinID, List<DTO_MigracionCartera> data, bool isAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            List<DTO_TxResult> results = new List<DTO_TxResult>();
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            try
            {
                for (int i = 0; i < data.Count; ++i)
                {
                    #region Variables de inicio
                    bool isValid = true;

                    int percent = (i * 100) / data.Count;
                    batchProgress[tupProgress] = percent;

                    DTO_MigracionCartera dto = data[i];

                    #endregion
                    #region Valida que el credito no exista en la tabla de ccCreditoDocu
                    DTO_ccCreditoDocu crediTemp = new DTO_ccCreditoDocu();
                    crediTemp = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByLibranza(dto.Libranza.Value.Value);
                    if (crediTemp != null)
                    {
                        isValid = false;

                        result = new DTO_TxResult();
                        result.Details = new List<DTO_TxResultDetail>();
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_LibranzaRegistrada + "&&" + dto.Libranza.Value;

                        results.Add(result);
                    }
                    #endregion
                    if (isValid)
                    {
                        DTO_TxResult resultsGuardar = this.MigracionCartera_Guardar(documentID, periodo, compComodinID, dto, false);
                        results.Add(resultsGuardar);
                    }
                }

                return results;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "MigracionCartera");
                results.Add(result);
                return results;
            }
        }

        /// <summary>
        /// Proceso de migracion de cartera
        /// </summary>
        /// <param name="documentID">Identificador del documento que inicia el proceso</param>
        /// <param name="data">Lista de creditos a migrar</param>
        /// <returns>Retorna al resultado de la operacion</returns>
        public List<DTO_TxResult> MigracionEstadoCartera(int documentID, List<DTO_MigracionEstadoCartera> data, bool isAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            List<DTO_TxResult> results = new List<DTO_TxResult>();
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            try
            {
                for (int i = 0; i < data.Count; ++i)
                {
                    #region Variables de inicio
                    int percent = (i * 100) / data.Count;
                    batchProgress[tupProgress] = percent;

                    DTO_MigracionEstadoCartera dto = data[i];

                    #endregion
                    #region Valida que el credito exista en la tabla de ccCreditoDocu
                    DTO_ccCreditoDocu credExist = new DTO_ccCreditoDocu();
                    credExist = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByLibranza(dto.Libranza.Value.Value);
                    if (credExist == null)
                    {
                        result = new DTO_TxResult();
                        result.Details = new List<DTO_TxResultDetail>();
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidLibranza + "&&" + dto.Libranza.Value;

                        results.Add(result);
                    }
                    #endregion
                    else 
                    {
                        if (!string.IsNullOrWhiteSpace(dto.CobranzaGestionID.Value))
                            credExist.CobranzaGestionID.Value = dto.CobranzaGestionID.Value;
                        if (!string.IsNullOrWhiteSpace(dto.CobranzaEstadoID.Value)) 
                            credExist.CobranzaEstadoID.Value = dto.CobranzaEstadoID.Value;
                        if (!string.IsNullOrWhiteSpace(dto.NovedadIncorporaID.Value)) 
                            credExist.NovedadIncorporaID.Value = dto.NovedadIncorporaID.Value;
                        if (!string.IsNullOrWhiteSpace(dto.SiniestroEstadoID.Value)) 
                            credExist.SiniestroEstadoID.Value = dto.SiniestroEstadoID.Value;

                        if(result.Result == ResultValue.OK)
                            this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credExist);                     
                    }
                }

                return results;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "MigracionEstadoCartera");
                results.Add(result);
                return results;
            }
        }
        
        /// <summary>
        /// Proceso de migracion de cartera
        /// </summary>
        /// <param name="documentID">Identificador del documento que inicia el proceso</param>
        /// <param name="periodo">Periodo de ingreso de datos</param>
        /// <param name="pagaduria">pagaduria</param>
        /// <param name="data">Lista de creditos a migrar</param>
        /// <returns>Retorna al resultado de la operacion</returns>
        public List<DTO_TxResult> MigracionVerificacion(int documentID, DateTime periodo, string pagaduria, List<DTO_MigracionVerificacion> data, bool isAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccIncorporacionDeta = (DAL_ccIncorporacionDeta)base.GetInstance(typeof(DAL_ccIncorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            List<DTO_TxResult> results = new List<DTO_TxResult>();
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();         

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            try
            {
                for (int i = 0; i < data.Count; ++i)
                {
                    #region Variables de inicio
                    int percent = (i * 100) / data.Count;
                    batchProgress[tupProgress] = percent;
                    DTO_MigracionVerificacion dto = data[i];
                    #endregion

                    DTO_ccCreditoDocu cred = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByLibranza(dto.Libranza.Value.Value);
                    if (cred == null)
                    {
                        result = new DTO_TxResult();
                        result.Details = new List<DTO_TxResultDetail>();
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Cc_LibranzaNoDisponible;
                        results.Add(result);
                    }
                    else
                    {
                       if(cred.PagaduriaID.Value != pagaduria)
                       {
                           result = new DTO_TxResult();
                           result.Details = new List<DTO_TxResultDetail>();
                           result.Result = ResultValue.NOK;
                           result.ResultMessage = "La pagaduria no corresponde al crédito";
                           results.Add(result);
                       }
                       else if (cred.ClienteID.Value != dto.ClienteID.Value)
                       {
                           result = new DTO_TxResult();
                           result.Details = new List<DTO_TxResultDetail>();
                           result.Result = ResultValue.NOK;
                           result.ResultMessage = "El cliente no corresponde al crédito";
                           results.Add(result);
                       }
                       else
                       {
                           var incorpExist = this._dal_ccIncorporacionDeta.DAL_ccIncorporacionDeta_GetByNumDocCred(cred.NumeroDoc.Value.Value).ToList();
                           if (incorpExist.Count > 0)
                           {
                               foreach (var inc in incorpExist)
                               {
                                   DTO_glDocumentoControl ctrl = this._moduloGlobal.glDocumentoControl_GetByID(inc.NumeroDoc.Value.Value);
                                   ctrl.Observacion.Value = dto.Observacion.Value;
                                   this._moduloGlobal.glDocumentoControl_Update(ctrl, true, true);
                               }
                           }
                       }                       
                    }
                }
                return results;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "MigracionVerificacion");
                results.Add(result);
                return results;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                        base._mySqlConnectionTx.Commit();                  

                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #region Consultas Generales

        #region Funciones privadas

        /// <summary>
        /// Trae la info de un credito por su libranza
        /// </summary>
        /// <param name="isSolicitud">Indicador si se esta buscando una solisitud o un credito</param>
        /// <param name="libranzaID">Identificador de la libranza</param>
        /// <returns><Retorna la info de un credito/returns>
        private DTO_ccSolicitudDocu GetSolicitudByNumeroDoc(int numeroDoc)
        {
            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByNumeroDoc(numeroDoc);
        }

        /// <summary>
        /// Trae la info de un credito por su libranza
        /// </summary>
        /// <param name="isSolicitud">Indicador si se esta buscando una solisitud o un credito</param>
        /// <param name="libranzaID">Identificador de la libranza</param>
        /// <returns><Retorna la info de un credito/returns>
        private DTO_ccSolicitudDocu GetSolicitudByLibranza(int libranzaID)
        {
            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByLibranza(libranzaID);
        }

        #endregion

        #region Funciones públicas

        #region Información de los Creditos

        /// <summary>
        /// Funcion que trae la informacion de un credito y su plan de pagos
        /// </summary>
        /// <param name="libranza">Identificador del credito</param>
        /// <returns>Retorna el DTO_Credito con la informacion del credito y su plan de pagos</returns>
        public DTO_Credito GetCredito_All(int libranza)
        {
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoCompraCartera = (DAL_ccCreditoCompraCartera)base.GetInstance(typeof(DAL_ccCreditoCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            DTO_Credito credito = new DTO_Credito();
            List<DTO_Cuota> cuotas = new List<DTO_Cuota>();

            try
            {
                credito.CreditoDocu = this.GetCreditoByLibranza(libranza);
                if (credito.CreditoDocu != null)
                {
                    credito.DocControl = this._moduloGlobal.glDocumentoControl_GetByID(credito.CreditoDocu.NumeroDoc.Value.Value);
                    credito.PlanPagos = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(credito.CreditoDocu.NumeroDoc.Value.Value);
                    credito.Componentes = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(credito.CreditoDocu.NumeroDoc.Value.Value);
                    credito.CompraCartera = this._dal_ccCreditoCompraCartera.DAL_ccCreditoCompraCartera_GetByNumeroDoc(credito.CreditoDocu.NumeroDoc.Value.Value);

                    //Carga la lista de cuotas
                    foreach (DTO_ccCreditoPlanPagos pp in credito.PlanPagos)
                    {
                        credito.Cuotas.Add(new DTO_Cuota()
                        {
                            NumCuota = pp.CuotaID.Value.Value,
                            Fecha = pp.FechaCuota.Value.Value,
                            ValorCuota = Convert.ToInt32(pp.VlrCuota.Value.Value)// + Convert.ToInt32(pp.VlrSeguro.Value.Value) + Convert.ToInt32(pp.VlrOtro1.Value.Value)
                        });
                    }
                }

                return credito;
            }
            catch (Exception ex) 
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCredito_All");
                throw ex;
            }
        }

        /// <summary>
        /// Trae la info de un credito por su numero doc
        /// </summary>
        /// <param name="numDoc">Num Doc del credito a buscar</param>
        /// <returns><Retorna la info de un credito/returns>
        public DTO_ccCreditoDocu GetCreditoByNumeroDoc(int numDoc)
        {
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(numDoc);
        }

        /// <summary>
        /// Trae la info de un credito por su libranza
        /// </summary>
        /// <param name="isSolicitud">Indicador si se esta buscando una solisitud o un credito</param>
        /// <param name="libranzaID">Identificador de la libranza</param>
        /// <returns><Retorna la info de un credito/returns>
        public DTO_ccCreditoDocu GetCreditoByLibranza(int libranzaID)
        {
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByLibranza(libranzaID);
        }

        /// <summary>
        /// Muestra el credito de acuerdo a la libranza 
        /// </summary>
        /// <param name="libranza">Numero de libranza a consultar</param>
        /// <param name="numeroDoc">Numero doc de la libranza</param>
        /// <param name="fechaCorte">Fecha en se que realizo la libranza</param>
        /// <param name="isCooperativa"></param>
        /// <returns></returns>
        public DTO_ccCreditoDocu GetCreditoByLibranzaAndFechaCorte(int libranza, int numeroDoc, DateTime fechaCorte)
        {
            try
            {
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DTO_ccCreditoDocu credito = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditoByLibranzaAndFechaCorte(libranza, numeroDoc, fechaCorte);
                credito.Detalle = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(credito.NumeroDoc.Value.Value);
                credito.Detalle = credito.Detalle.OrderBy(x => x.ComponenteCarteraID.Value).ToList();

                return credito;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ccCreditoDocu_GetCreditosByLibranza");
                throw ex; ;
            }
        }

        /// <summary>
        /// Trae la info de un credito segun el cliente
        /// </summary>
        /// <param name="cliente">Identificador del cliente</param>
        /// <returns><Retorna la info de un credito/returns>
        public List<DTO_ccCreditoDocu> GetCreditoByCliente(string cliente)
        {
            try
            {
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByCliente(cliente);
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCreditoByCliente");
                throw ex;
            }
        }

        /// <summary>
        /// Trae la info de un credito segun el cliente
        /// </summary>
        /// <param name="cliente">Identificador del cliente</param>
        /// <returns><Retorna la info de un credito/returns>
        public List<DTO_ccCreditoDocu> GetCreditoByClienteAndFecha(string cliente, DateTime fechaCorte, bool onlyWithSaldo, bool useFechaCorte)
        {
            try
            {
                this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                //Tipo de cartera
                string sectorStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);
                SectorCartera sector = (SectorCartera)Enum.Parse(typeof(SectorCartera), sectorStr);

                List<DTO_ccCreditoDocu> creditos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosByClienteAndFecha(cliente, fechaCorte, sector, onlyWithSaldo,useFechaCorte);
                foreach (DTO_ccCreditoDocu cred in creditos)
                {
                    cred.Detalle = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(cred.NumeroDoc.Value.Value);
                    cred.Detalle = cred.Detalle.OrderBy(x => x.ComponenteCarteraID.Value).ToList();
                }
                return creditos;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCreditoByCliente");
                throw ex;
            }
        }

        /// <summary>
        /// Trae la info de un credito segun el comprador de cartera
        /// </summary>
        /// <param name="compradorCartera">Identificador del comprador de cartera</param>
        /// <returns><Retorna la info de un credito/returns>
        public List<DTO_ccCreditoDocu> GetCreditoByCompradorCartera(string compradorCartera)
        {
            try
            {
                this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_ccCreditoDocu> creditos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByCompradorCartera(compradorCartera);
                foreach (DTO_ccCreditoDocu cred in creditos)
                {
                    cred.Detalle = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(cred.NumeroDoc.Value.Value);
                    cred.Detalle = cred.Detalle.OrderBy(x => x.ComponenteCarteraID.Value).ToList();
                }
                return creditos;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCreditoByCompradorCartera");
                throw ex;
            }
        }

        /// <summary>
        /// Trae todos los registros de DTO_ccCarteraDocu segun al cliente
        /// </summary>
        /// <param name="clienteID">Identificador del cliente</param>
        /// <param name="isFijado">Indica si el credito esta fijado</param>        
        /// <returns>retorna una lista de DTO_ccCarteraDocu</returns>
        public List<DTO_ccCreditoDocu> GetCreditosPendientesByCliente(string clienteID)
        {
            try
            {
                //Carga la actividad de la entraga de libranzas
                string sectorCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);
                string actFlujoAprobGiro = string.Empty;
                if (sectorCartera == ((byte)SectorCartera.Solidario).ToString())
                {
                    this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.AprobacionGiros);
                    if (actividades.Count == 0)
                        return new List<DTO_ccCreditoDocu>();

                    actFlujoAprobGiro = actividades[0];
                }

                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_ccCreditoDocu> creditos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosPendientesByCliente(clienteID, actFlujoAprobGiro);
                return creditos;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCreditosPendientesByCliente");
                throw ex;
            }
        }

        /// <summary>
        /// Trae todos los registros de DTO_ccCarteraDocu segun al cliente
        /// </summary>
        /// <param name="clienteID">Identificador del cliente</param>
        /// <param name="isFijado">Indica si el credito esta fijado</param>        
        /// <returns>retorna una lista de DTO_ccCarteraDocu</returns>
        public List<DTO_ccCreditoDocu> GetCreditosPendientesByClienteAndEstado(string clienteID, List<byte> estados)
        {
            try
            {
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_ccCreditoDocu> creditos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosPendientesByClienteAndEstado(clienteID, estados);
                return creditos;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCreditosPendientesByCliente");
                throw ex;
            }
        }

        /// <summary>
        /// Trae todos los registros de DTO_ccCarteraDocu segun al cliente
        /// </summary>
        /// <param name="clienteID">Identificador del cliente</param>
        /// <returns>retorna una lista de DTO_ccCarteraDocu</returns>
        public List<DTO_ccCreditoDocu> GetCreditosPendientesByProposito(string clienteID, int proposito)
        {
            try
            {
                //Carga la actividad de la entraga de libranzas
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.AprobacionGiros);
                if (actividades.Count == 0)
                    return new List<DTO_ccCreditoDocu>();

                string actFlujoAprobGiro = actividades[0];

                SectorCartera sector = SectorCartera.Solidario;
                string sectorStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);
                if (!string.IsNullOrWhiteSpace(sectorStr) && sectorStr != "0")
                    sector = (SectorCartera)Enum.Parse(typeof(SectorCartera), sectorStr);

                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_ccCreditoDocu> creditos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosByProposito(clienteID, actFlujoAprobGiro, proposito, sector);
                return creditos;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCreditosPendientesByProposito");
                throw ex;
            }
        }

        /// <summary>
        /// Trae la info de un credito segun la oferta
        /// </summary>
        /// <param name="compradorCartera">Identificador de la oferta</param>
        /// <returns><Retorna la info de un credito/returns>
        public DTO_ccCreditoDocu GetCreditoByOferta(string oferta)
        {
            try
            {
                this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DTO_ccCreditoDocu credito = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByOferta(oferta);
                credito.Detalle = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(credito.NumeroDoc.Value.Value);
                credito.Detalle = credito.Detalle.OrderBy(x => x.ComponenteCarteraID.Value).ToList();

                return credito;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCreditoByOferta");
                throw ex;
            }
        }

        /// <summary>
        /// Trae el plan de pagos de un crédito
        /// </summary>
        /// <param name="numeroDoc">Identificador único del crédito</param>
        /// <returns></returns>
        public List<DTO_ccCreditoPlanPagos> GetPlanPagos(int numeroDoc)
        {
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(numeroDoc);
        }

        /// <summary>
        /// Obtiene los correos de los clientes
        /// </summary>
        /// <param name="clienteID">cliente filtrado</param>
        /// <param name="cleinteInd">solo clientes</param>
        /// <param name="conyugeInd">solo conyuges</param>
        /// <param name="codeudorInd">solo codeudores</param>
        /// <returns>Correos</returns>
        public List<DTO_CorreoCliente> GetCorreosCliente(string clienteID,bool clienteInd,bool conyugeInd,bool codeudorInd)
        {
            try
            {
                List<DTO_CorreoCliente> results = new List<DTO_CorreoCliente>();
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                List<DTO_CorreoCliente>  tmp = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetClienteForCorreo(clienteID);
                if (clienteInd)
                    results.AddRange(tmp);
                if (conyugeInd)
                {
                    DTO_ccCliente conyu = null;
                    DTO_coTercero terConyu = null;
                    foreach (DTO_CorreoCliente c in tmp)
                    {
                        #region Conyuge
                        if (!string.IsNullOrEmpty(c.Conyuge.Value) && !results.Exists(x => x.ClienteID.Value == c.Conyuge.Value))
                        {
                            DTO_CorreoCliente mail = new DTO_CorreoCliente();
                            mail.Libranza.Value = c.Libranza.Value;
                            mail.ClienteID.Value = c.Conyuge.Value;
                            mail.ConyugeInd.Value = true;
                            mail.ClienteInd.Value = false;
                            mail.CodeudorInd.Value = false;
                            mail.EstadoDeuda.Value = c.EstadoDeuda.Value;
                            mail.NumeroDoc.Value = c.NumeroDoc.Value;
                            mail.SdoCapital.Value = c.SdoCapital.Value;
                            mail.SdoSeguro.Value = c.SdoSeguro.Value;

                            //Trae datos adicionales
                            conyu = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, c.Conyuge.Value, true, false);
                            if (conyu != null)
                            {
                                mail.Nombre.Value = conyu.Descriptivo.Value;
                                mail.Correo.Value = conyu.Correo.Value;
                                results.Add(mail);
                            }
                            else
                            {
                                terConyu = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, c.Conyuge.Value, true, false);
                                if (terConyu != null)
                                {
                                    mail.Nombre.Value = terConyu.Descriptivo.Value;
                                    mail.Correo.Value = terConyu.CECorporativo.Value;
                                    results.Add(mail);
                                }                            
                            }
                        } 
                        #endregion
                    }
                }
                if (codeudorInd)
                {
                    DTO_ccCliente cod = null;
                    DTO_coTercero terCod = null;
                    foreach (DTO_CorreoCliente c in tmp)
                    {
                        #region Codeudor 1
                        if (!string.IsNullOrEmpty(c.Codeudor1.Value) && !results.Exists(x => x.ClienteID.Value == c.Codeudor1.Value))
                        {
                            DTO_CorreoCliente mail = new DTO_CorreoCliente();
                            mail.Libranza.Value = c.Libranza.Value;
                            mail.ClienteID.Value = c.Codeudor1.Value;
                            mail.ConyugeInd.Value = false;
                            mail.ClienteInd.Value = false;
                            mail.CodeudorInd.Value = true;
                            mail.EstadoDeuda.Value = c.EstadoDeuda.Value;
                            mail.NumeroDoc.Value = c.NumeroDoc.Value;
                            mail.SdoCapital.Value = c.SdoCapital.Value;
                            mail.SdoSeguro.Value = c.SdoSeguro.Value;

                            //Trae datos adicionales
                            terCod = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, c.Codeudor1.Value, true, false);
                            if (terCod != null)
                            {
                                mail.Nombre.Value = terCod.Descriptivo.Value;
                                mail.Correo.Value = terCod.CECorporativo.Value;
                                results.Add(mail);
                            }
                        } 
                        #endregion
                        #region Codeudor 2
                        if (!string.IsNullOrEmpty(c.Codeudor2.Value) && !results.Exists(x => x.ClienteID.Value == c.Codeudor2.Value))
                        {
                            DTO_CorreoCliente mail = new DTO_CorreoCliente();
                            mail.Libranza.Value = c.Libranza.Value;
                            mail.ClienteID.Value = c.Codeudor2.Value;
                            mail.ConyugeInd.Value = false;
                            mail.ClienteInd.Value = false;
                            mail.CodeudorInd.Value = true;
                            mail.EstadoDeuda.Value = c.EstadoDeuda.Value;
                            mail.NumeroDoc.Value = c.NumeroDoc.Value;
                            mail.SdoCapital.Value = c.SdoCapital.Value;
                            mail.SdoSeguro.Value = c.SdoSeguro.Value;

                            //Trae datos adicionales
                            terCod = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, c.Codeudor2.Value, true, false);
                            if (terCod != null)
                            {
                                mail.Nombre.Value = terCod.Descriptivo.Value;
                                mail.Correo.Value = terCod.CECorporativo.Value;
                                results.Add(mail);
                            }
                        }
                        #endregion
                        #region Codeudor 3
                        if (!string.IsNullOrEmpty(c.Codeudor3.Value) && !results.Exists(x => x.ClienteID.Value == c.Codeudor3.Value))
                        {
                            DTO_CorreoCliente mail = new DTO_CorreoCliente();
                            mail.Libranza.Value = c.Libranza.Value;
                            mail.ClienteID.Value = c.Codeudor3.Value;
                            mail.ConyugeInd.Value = false;
                            mail.ClienteInd.Value = false;
                            mail.CodeudorInd.Value = true;
                            mail.EstadoDeuda.Value = c.EstadoDeuda.Value;
                            mail.NumeroDoc.Value = c.NumeroDoc.Value;
                            mail.SdoCapital.Value = c.SdoCapital.Value;
                            mail.SdoSeguro.Value = c.SdoSeguro.Value;

                            //Trae datos adicionales
                            terCod = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, c.Codeudor3.Value, true, false);
                            if (terCod != null)
                            {
                                mail.Nombre.Value = terCod.Descriptivo.Value;
                                mail.Correo.Value = terCod.CECorporativo.Value;
                                results.Add(mail);
                            }
                        }
                        #endregion
                        #region Codeudor 4
                        if (!string.IsNullOrEmpty(c.Codeudor4.Value) && !results.Exists(x => x.ClienteID.Value == c.Codeudor4.Value))
                        {
                            DTO_CorreoCliente mail = new DTO_CorreoCliente();
                            mail.Libranza.Value = c.Libranza.Value;
                            mail.ClienteID.Value = c.Codeudor4.Value;
                            mail.ConyugeInd.Value = false;
                            mail.ClienteInd.Value = false;
                            mail.CodeudorInd.Value = true;
                            mail.EstadoDeuda.Value = c.EstadoDeuda.Value;
                            mail.NumeroDoc.Value = c.NumeroDoc.Value;
                            mail.SdoCapital.Value = c.SdoCapital.Value;
                            mail.SdoSeguro.Value = c.SdoSeguro.Value;

                            //Trae datos
                            terCod = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, c.Codeudor4.Value, true, false);
                            if (terCod != null)
                            {
                                mail.Nombre.Value = terCod.Descriptivo.Value;
                                mail.Correo.Value = terCod.CECorporativo.Value;
                                results.Add(mail);
                            }
                        }
                        #endregion
                        #region Codeudor 5
                        if (!string.IsNullOrEmpty(c.Codeudor5.Value) && !results.Exists(x => x.ClienteID.Value == c.Codeudor5.Value))
                        {
                            DTO_CorreoCliente mail = new DTO_CorreoCliente();
                            mail.Libranza.Value = c.Libranza.Value;
                            mail.ClienteID.Value = c.Codeudor5.Value;
                            mail.ConyugeInd.Value = false;
                            mail.ClienteInd.Value = false;
                            mail.CodeudorInd.Value = true;
                            mail.EstadoDeuda.Value = c.EstadoDeuda.Value;
                            mail.NumeroDoc.Value = c.NumeroDoc.Value;
                            mail.SdoCapital.Value = c.SdoCapital.Value;
                            mail.SdoSeguro.Value = c.SdoSeguro.Value;

                            //Trae datos adicionales
                            terCod = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, c.Codeudor5.Value, true, false);
                            if (terCod != null)
                            {
                                mail.Nombre.Value = terCod.Descriptivo.Value;
                                mail.Correo.Value = terCod.CECorporativo.Value;
                                results.Add(mail);
                            }
                        }
                        #endregion
                    }
                }
                return results;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ccCreditoDocu_GetCreditosByLibranza");
                throw ex;
                return null;
            }
        }

        /// <summary>
        /// Trae todos los creditos donde la cedula sea codeudor
        /// </summary>
        /// <param name="codeudor">Identificador del codeudor</param>       
        /// <returns>retorna una lista de DTO_ccCreditoDocu</returns>
        public List<DTO_ccCreditoDocu> GetCreditosByCodeudor(string codeudor)
        {
            try
            {
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_ccCreditoDocu> creditos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosByCodeudor(codeudor);
                return creditos;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCreditosByCodeudor");
                throw ex;
            }
        }

        #endregion

        #region Estado de pagos y saldos

        /// <summary>
        /// Funcion que retorna la informacion del credito
        /// </summary>
        /// <param name="numDoc">Numero Doc</param>
        /// <param name="fechaCorte">Fecha de corte</param>
        /// <returns>Retorna DTO con el plan de pagos y sus componentes</returns>
        public DTO_InfoCredito GetInfoCredito(int numDoc, DateTime fechaCorte)//, bool asignaMora, bool asignaUsura, bool asignaPJ)
        {
            try
            {
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_Cartera = (DAL_Cartera)base.GetInstance(typeof(DAL_Cartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccSolicitudCompraCartera = (DAL_ccSolicitudCompraCartera)base.GetInstance(typeof(DAL_ccSolicitudCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                string periodoStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoStr);

                DTO_InfoCredito result = new DTO_InfoCredito();
                List<DTO_ccCreditoPlanPagos> planPagos = new List<DTO_ccCreditoPlanPagos>();
                List<DTO_ccSaldosComponentes> componentes = new List<DTO_ccSaldosComponentes>();

                #region Carga la info de la compra de cartera

                Tuple<int, byte, string> compraCartera = this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_GetEstadoByDocCompra(numDoc);

                result.LibranzaCompraCartera.Value = compraCartera.Item1;
                result.EstadoCompraCartera.Value = compraCartera.Item2;
                result.ActFlujoSolicitudCompraCartera.Value = compraCartera.Item3;

                #endregion
                #region Carga el plan de pagos de la libranza

                planPagos = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(numDoc);

                #endregion
                #region Carga los componentes con los saldos actualizados

                componentes = this._dal_Cartera.DAL_Cartera_GetComponentes(numDoc, periodo, fechaCorte);
                if (componentes == null)
                    componentes = new List<DTO_ccSaldosComponentes>();

                #endregion
                #region Trae la ultima fecha de pago
                List<DTO_ccCreditoPlanPagos> planPagosNoPend = planPagos.Where(c => c.VlrPagadoCuota.Value != 0 || c.VlrPagadoExtras.Value != 0 || c.VlrMoraPago.Value != 0).ToList();
                if (planPagosNoPend.Count > 0)
                {
                    planPagosNoPend = planPagosNoPend.OrderBy(x => x.Consecutivo.Value).ToList();
                    var pagoUlt = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetByCuotaNum(planPagosNoPend.Last().Consecutivo.Value.Value).ToList();
                    DTO_glDocumentoControl ctrl = pagoUlt.Count > 0? this._moduloGlobal.glDocumentoControl_GetByID(pagoUlt.Last().PagoDocu.Value.Value): null;
                    result.FechaUltPago.Value = ctrl != null ? ctrl.FechaDoc.Value : null;
                }

                #endregion
                result.AddData(planPagos, componentes);
                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetInfoCredito");
                return null;
            }
        }

        /// <summary>
        /// Funcion que retorna la informacion de los saldos del credito
        /// </summary>
        /// <param name="numDoc">Numero Doc</param>
        /// <param name="fechaCorte">Fecha de corte</param>
        /// <returns>Retorna DTO con el plan de pagos y sus componentes</returns>
        public DTO_InfoCredito GetSaldoCredito(int numDoc, DateTime fechaCorte, bool asignaMora, bool asignaUsura, bool asignaPJ, bool useWhere = true)
        {
            try
            {
                DTO_InfoCredito result = new DTO_InfoCredito();
                List<DTO_ccCreditoPlanPagos> planPagos = new List<DTO_ccCreditoPlanPagos>();
                List<DTO_ccSaldosComponentes> componentes = new List<DTO_ccSaldosComponentes>();

                string componenteMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string componenteUsura = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteUsura);
                string componentePJ = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);

                if (fechaCorte.DayOfWeek == DayOfWeek.Saturday)
                   fechaCorte = fechaCorte.Date.AddDays(2);
                else if(fechaCorte.DayOfWeek == DayOfWeek.Sunday)
                   fechaCorte = fechaCorte.Date.AddDays(1);                              

                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("Fecha", fechaCorte.ToShortDateString());
                pks.Add("DiasFestivoID", fechaCorte.ToShortDateString());
                DTO_glDiasFestivos festivo = (DTO_glDiasFestivos)this.GetMasterComplexDTO(AppMasters.glDiasFestivos, pks, true);

                if (festivo != null)
                   fechaCorte = fechaCorte.Date.AddDays(1);

                DTO_InfoCredito infoCredito = this.GetInfoCredito(numDoc, fechaCorte.Date);

                if (infoCredito != null)
                {
                    #region Filtra el plan de pago con base a la primera cuota de los componentes

                    foreach (DTO_ccCreditoPlanPagos p in infoCredito.PlanPagos)
                    {
                        p.VlrAjusteUsura.Value = 0;
                        p.VlrPrejuridico.Value = 0;
                        decimal vlrTotal = 0;
                        List<DTO_ccSaldosComponentes> componentesCuota = (from c in infoCredito.SaldosComponentes where c.CuotaID.Value == p.CuotaID.Value select c).ToList();
                       if(useWhere)
                           vlrTotal = (from c in componentesCuota
                                       where c.ComponenteCarteraID.Value != componenteMora && c.ComponenteCarteraID.Value != componenteUsura &&
                                             c.ComponenteCarteraID.Value != componentePJ select c.CuotaSaldo.Value.Value).Sum();
                       else
                           vlrTotal = (from c in componentesCuota select c.CuotaSaldo.Value.Value).Sum();
                        if (vlrTotal > 0)
                        {
                            p.VlrSaldo.Value = vlrTotal;
                            p.VlrPagadoCuota.Value = 0;
                            planPagos.Add(p);

                            //componentesCuota.RemoveAll(c => c.ComponenteCarteraID.Value == componenteMora && c.TotalSaldo.Value == 0);
                            componentes.AddRange(componentesCuota);
                        }
                    }

                    #endregion

                    //Asigna la info de mora y usura
                    this.AsignarMora_PlanPagos(asignaMora, fechaCorte, planPagos, componentes);
                    this.AsignarUsura_PlanPagos(asignaUsura, planPagos, componentes);
                    this.AsignarPJ_PlanPagos(asignaPJ, planPagos, componentes);
                }

                result.AddData(planPagos, componentes);
                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetSaldoCredito");
                return null;
            }
        }

        /// <summary>
        /// Funcion que retorna la informacion de los pagos del credito
        /// </summary>
        /// <param name="numDoc">Numero Doc</param>
        /// <param name="fechaCorte">Fecha de corte</param>
        /// <returns>Retorna DTO con el plan de pagos y sus componentes</returns>
        public DTO_InfoCredito GetPagosCredito(int numDoc, DateTime fechaCorte)
        {
            try
            {
                DTO_InfoCredito result = new DTO_InfoCredito();
                DTO_InfoCredito infoCredito = new DTO_InfoCredito();

                List<DTO_ccCreditoPlanPagos> planPagos = new List<DTO_ccCreditoPlanPagos>();
                List<DTO_ccSaldosComponentes> componentes = new List<DTO_ccSaldosComponentes>();

                infoCredito = this.GetInfoCredito(numDoc, fechaCorte);
                if (infoCredito != null)
                {
                    #region Genera el plan de pagos y los componentes, guardando lo que ha pagado por componente
                    List<DTO_ccCreditoPlanPagos> planPagosFilter = infoCredito.PlanPagos.Where(c => c.VlrPagadoCuota.Value != 0 && c.VlrPagadoExtras.Value != 0 && c.VlrMoraPago.Value != 0).ToList();

                    foreach (DTO_ccCreditoPlanPagos p in planPagosFilter)
                    {
                        List<DTO_ccSaldosComponentes> compCuota = (from c in infoCredito.SaldosComponentes where c.CuotaID.Value == p.CuotaID.Value select c).ToList();
                        foreach (DTO_ccSaldosComponentes item in compCuota)
                        {
                            if (item.CuotaInicial.Value != item.CuotaSaldo.Value)
                            {
                                item.CuotaSaldo.Value = item.CuotaInicial.Value - item.CuotaSaldo.Value;
                                item.TotalSaldo.Value = item.TotalInicial.Value - item.CuotaSaldo.Value;
                            }
                        }

                        planPagos.Add(p);
                        componentes.AddRange(compCuota);
                    }
                    #endregion
                }

                result.AddData(planPagos, componentes);
                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetPagosCredito");
                return null;
            }
        }

        /// <summary>
        /// Funcion que trae la informacion de los pagos de un credito
        /// </summary>
        /// <param name="numDoc">Numero de referencia del credito</param>
        /// <returns></returns>
        public DTO_InfoPagos GetInfoPagos(int numDoc)
        {
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_InfoPagos infoPagos = new DTO_InfoPagos();
            List<DTO_ccCreditoPlanPagos> planPagos = new List<DTO_ccCreditoPlanPagos>();
            List<DTO_ccCreditoPagos> crediPagos = new List<DTO_ccCreditoPagos>();

            planPagos = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(numDoc);
            List<DTO_ccCreditoPlanPagos> planPagosWithSaldo = (from c in planPagos select c).ToList();
            if (planPagosWithSaldo.Count > 0)
            {
                List<DTO_ccCreditoPagos> pagosCredito = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetByNumDocCredito(numDoc);
                foreach (DTO_ccCreditoPlanPagos planPago in planPagosWithSaldo)
                {
                    List<DTO_ccCreditoPagos> cpTemp = pagosCredito.Where(w => planPago.Consecutivo.Value.Value == w.CreditoCuotaNum.Value.Value).ToList();
                    cpTemp.ForEach(f => f.CuotaID.Value = planPago.CuotaID.Value);
                    crediPagos.AddRange(cpTemp);
                }
            }
            crediPagos = crediPagos.OrderBy(x => x.CuotaID.Value).ThenBy(y=>y.NumeroDoc.Value).ToList();
            infoPagos.AddData(crediPagos, planPagos);
            return infoPagos;
        }

        /// <summary>
        /// Funcion que trae los saldos de las cuentas asociadas a un credito
        /// </summary>
        /// <param name="numDoc">Numero de referencia del credito</param>
        /// <param name="tercero">Tercero al cual pertenece el credito</param>
        /// <returns></returns>
        public List<DTO_ccSaldosComponentes> GetSaldoCuentasForCredito(int numDoc, string tercero)
        {
            this._dal_Cartera = (DAL_Cartera)base.GetInstance(typeof(DAL_Cartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));
            return this._dal_Cartera.DAL_Cartera_GetSaldoCuentasByNumDoc(numDoc, tercero, periodo);
        }

        /// <summary>
        /// Trae un registro ccCreditoPagos por consecutivo
        /// </summary>
        /// <returns>retorna un ccCreditoPagos</returns>
        public DTO_ccCreditoPagos ccCreditoPagos_GetByCons(int consecutivo)
        {
            this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetByCons(consecutivo);
        }

        #endregion

        #region Ventas de cartera

        /// <summary>
        /// Trae la info de la venta de un credito por su libranza
        /// </summary>
        /// <param name="numDocLibranza">Identificador de la libranza</param>
        /// <returns><Retorna la info de un credito/returns>
        public DTO_VentaCartera GetInfoVentaByLibranza(int numDocLibranza, int libranza)
        {
            try
            {
                this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccVentaDeta = (DAL_ccVentaDeta)base.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccFlujoCesionDeta = (DAL_ccFlujoCesionDeta)base.GetInstance(typeof(DAL_ccFlujoCesionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DTO_VentaCartera ventaCartera = new DTO_VentaCartera();
                DTO_ccVentaDocu ventaDocu = null; 
                List<DTO_ccCreditoDocu> preventa = new List<DTO_ccCreditoDocu>();
                List<DTO_ccCreditoPlanPagos> planPagos = new List<DTO_ccCreditoPlanPagos>();
                List<DTO_ccVentaDeta> ventaDeta = new List<DTO_ccVentaDeta>();

                DTO_ccVentaDeta ventaDetaTemp = this._dal_ccVentaDeta.DAL_ccVentaDeta_GetByNumDocLibranza(numDocLibranza);
                if (ventaDetaTemp != null)
                {
                    ventaDocu = new DTO_ccVentaDocu();
                    ventaDocu = this._dal_ccVentaDocu.DAL_ccVentaDocu_GetByID(ventaDetaTemp.NumeroDoc.Value.Value);
                    ventaDeta.Add(ventaDetaTemp);

                    List<DTO_ccCreditoPlanPagos> ppTemp = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(ventaDetaTemp.NumDocCredito.Value.Value);
                    planPagos = (from c in ppTemp where c.DocVenta.Value == ventaDocu.NumeroDoc.Value select c).ToList();

                    //Carga los flujos para asignar las fechas de pago
                    List<DTO_ccFlujoCesionDeta> pagoFlujos = this._dal_ccFlujoCesionDeta.DAL_ccFlujoCesionDeta_GetByID(libranza);
                    planPagos.ForEach(pp => 
                    {
                        DTO_ccFlujoCesionDeta pago = pagoFlujos.FirstOrDefault(pag => pag.CreditoCuotaNum.Value == pp.Consecutivo.Value);
                        if(pago != null)
                            pp.FechaPago.Value = pago.FechaPago.Value;
                    });
                }
                ventaCartera.AddData(preventa, planPagos, ventaDeta, ventaDocu);
                return ventaCartera;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetInfoVentaByLibranza");
                throw ex;
            }
        }

        /// <summary>
        /// Trae un registro de DTO_ccVentaDeta con base a libranza
        /// </summary>
        /// <returns>retorna un registro de DTO_ccVentaDeta</returns>
        public DTO_ccVentaDeta ccVentaDeta_GetByNumDocLibranza(int numDocCredito)
        {
            this._dal_ccVentaDeta = (DAL_ccVentaDeta)base.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccVentaDeta.DAL_ccVentaDeta_GetByNumDocLibranza(numDocCredito);
        }

        #endregion

        #region Gestion Cobranza/Gestion Diaria

        /// <summary>
        /// Trae la info de un credito segun el cliente
       /// </summary>
       /// <param name="cliente">Cliente a consultar</param>
       /// <param name="orden">orden de la lista</param>
       /// <returns>Lista de creditos por cliente</returns>
        public List<DTO_GestionCobranza> ccCierreDiaCartera_GetGestionCobranza(string cliente, byte orden)
        {
            try
            {
                this._dal_ccCierreDia = (DAL_ccCierreDia)base.GetInstance(typeof(DAL_ccCierreDia), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                //Fecha de cierre
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                string actCobranza = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ActFlujoGestCobranza);

                string dia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DiaUltimoCierre);
                if (string.IsNullOrWhiteSpace(dia) || dia == "0")
                    dia = "1";
                DateTime fechaCierre = new DateTime(periodo.Year, periodo.Month, Convert.ToInt32(dia));

                DTO_ccCierreDiaCartera ultimoDia = this._dal_ccCierreDia.DAL_ccCierreDiaCartera_GetUltimoDiaCierre(cliente, null);
                List<DTO_GestionCobranza> cobranzaList = this._dal_ccCierreDia.DAL_ccCierreDiaCartera_GetGestionCobranza(cliente, ultimoDia != null ? ultimoDia.Fecha.Value.Value : fechaCierre, actCobranza);

                foreach (DTO_GestionCobranza cob in cobranzaList)
                {              
                    //Obtiene las solicitudes de credito del Cliente
                    DTO_ccCreditoDocu credito = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByLibranza(Convert.ToInt32(cob.Libranza.Value));
                    //Recorre los creditos para obtener Codeudores
                    List<string> clientes = new List<string>();
                    clientes.Add(cob.ClienteID.Value);
                    if (!string.IsNullOrEmpty(credito.Codeudor1.Value) && credito.Codeudor1.Value != "0")
                        clientes.Add(credito.Codeudor1.Value);
                    if (!string.IsNullOrEmpty(credito.Codeudor2.Value) && credito.Codeudor2.Value != "0")
                        clientes.Add(credito.Codeudor2.Value);
                    if (!string.IsNullOrEmpty(credito.Codeudor3.Value) && credito.Codeudor3.Value != "0")
                        clientes.Add(credito.Codeudor3.Value);
                    if (!string.IsNullOrEmpty(credito.Codeudor4.Value) && credito.Codeudor4.Value != "0")
                        clientes.Add(credito.Codeudor4.Value);
                    if (!string.IsNullOrEmpty(credito.Codeudor5.Value) && credito.Codeudor5.Value != "0")
                        clientes.Add(credito.Codeudor5.Value);
                    cob.CodeudorDet.AddRange(this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetInfoCodeudor(clientes, credito.NumeroDoc.Value));
                    clientes.Clear();

                    List<DTO_InfoTarea> actEstado =  this._moduloGlobal.glActividadEstado_GetPendientesByParameter(cob.NumeroDoc.Value, null, actCobranza, null, null,string.Empty,string.Empty,null,EstadoTareaIncumplimiento.Todas,false,null);
                    if (actEstado.Count > 0)
                    {
                        if (!actEstado[0].CerradoInd.Value.Value)
                            cob.FechaCompromiso.Value = actEstado[0].FechaAlarma1.Value;
                        cob.ActividadEstado = actEstado[0];
                    }
                    else
                        cob.ActividadEstado = null;

                    if(orden == 1) //Por Cliente
                        cobranzaList = cobranzaList.OrderBy(x => x.ClienteID.Value).ToList();
                    else //Por Vencimiento
                        cobranzaList = cobranzaList.OrderBy(x => x.FechaMora.Value).ToList();

                    cob.Valor1.Value = cob.Valor1.Value ?? 0;
                    cob.Detalle.Add(cob);
                }
                return cobranzaList;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetGestionCobranza");
                throw ex;
            }
        }

        /// <summary>
        /// Trae la info de las actividades de Gestion Cobranza
        /// </summary>
        /// <param name="fechaINi">Fecha inicial a consultar</param>
        /// <param name="fechaFin">Fecha inicial a consultar</param>
        /// <param name="ActividadFlujoID">actividad a consultar</param>
        /// <param name="cliente">client a consultar</param>
        /// <returns>Lista de actividades por cobranza</returns>
        public List<DTO_QueryGestionCobranza> GestionCobranza_GetActividades(DateTime fechaIni,DateTime fechaFin,string etapaFilter, string cliente)
        {
            try
            {
                this._dal_Cartera = (DAL_Cartera)base.GetInstance(typeof(DAL_Cartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_MasterSimple = (DAL_MasterSimple)base.GetInstance(typeof(DAL_MasterSimple), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                this._dal_MasterSimple.DocumentID = AppMasters.glIncumplimientoEtapa;
                long count = this._dal_MasterSimple.DAL_MasterSimple_Count(null, null, true);
                List<DTO_glIncumplimientoEtapa> listEtapas = this._dal_MasterSimple.DAL_MasterSimple_GetPaged(count, 1, null, null, true).Cast<DTO_glIncumplimientoEtapa>().ToList();
                
                //Ordena por Dia de tope 
                listEtapas = listEtapas.OrderBy(x => x.DiasInicio.Value).ToList();
                for (int i = 0; i < listEtapas.Count; i++)
                {
                    listEtapas[i].DiasInicio.Value = listEtapas[i].DiasInicio.Value ?? 0;
                    if(i == 0) //Valida el primero
                        listEtapas[i].DiasInicioInferior.Value = 1;
                    else //Trae el dia de tope anterior mas uno
                        listEtapas[i].DiasInicioInferior.Value = listEtapas[i - 1].DiasInicio.Value + 1;
                }
                DTO_glIncumplimientoEtapa filter = listEtapas.Find(x => x.ID.Value == etapaFilter);
                List<DTO_QueryGestionCobranza> cobranzaList = this._dal_Cartera.DAL_Cartera_GestionCobranzaGetActividades(fechaFin, filter, cliente);

                //Filtra los que no tengan cobranza de cierre
                 cobranzaList = cobranzaList.FindAll(x=>!string.IsNullOrEmpty(x.CobranzaGestionCierre.Value)).ToList();

                //Valida los riesgos de la cobranza
                if (filter != null && filter.NivelRiesgo.Value >= 4)
                    cobranzaList.ForEach(x => x.FechaAct.Value = null);

                DTO_glDatosAnuales datAnual = (DTO_glDatosAnuales)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glDatosAnuales, fechaFin.Year.ToString(), true, false);
                if (datAnual != null && datAnual.Valor11.Value.HasValue)
                {
                    //Obtiene el 10% del valor del SMMLV para filtrar las cobranzas
                    decimal SMMLV10Porc = Convert.ToInt32(datAnual.Valor11.Value.Value * 10/100);
                    cobranzaList = cobranzaList.FindAll(x => x.VlrSaldoCuota.Value > SMMLV10Porc).ToList();
                }

                return cobranzaList;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GestionCobranza_GetActividades");
                throw ex;
            }
        }

        /// <summary>
        /// Agrega datos de actividad y actualiza historia del credito
        /// </summary>
        /// <param name="documentoID">Documento que ejecuta la transaccione</param>
        /// <param name="cobranzas">Lista de los cobranzas</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult GestionCobranza_Add(int documentoID, List<DTO_GestionCobranza> cobranzas, bool isAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloAplicacion = (ModuloAplicacion)base.GetInstance(typeof(ModuloAplicacion), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            try
            {
                string actCobranza = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ActFlujoGestCobranza);
                foreach (DTO_GestionCobranza cob in cobranzas)
                {
                    DTO_glDocumentoControl ctrlCred = this._moduloGlobal.glDocumentoControl_GetByID(cob.NumeroDoc.Value.Value);
                    #region Actualiza glDocumentoControl
                    CultureInfo culture = new CultureInfo("en-US");
                    ctrlCred.Observacion.Value += "\r\n     (User: " + this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId).Descriptivo.Value + ": " + DateTime.Now.ToString() +
                                                    "\r\n Compromiso: " + cob.ObservacionCompromiso.Value + ",Valor Pago: " + cob.Valor1.Value.Value.ToString("C0", culture) +
                                                    ",Fecha Pago: " +(cob.FechaCompromiso.Value.HasValue? cob.FechaCompromiso.Value.Value.ToShortDateString(): "No Registra") + ",Cumplió: " + (cob.CumplidoInd.Value.HasValue && cob.CumplidoInd.Value.Value ? "SI)" : "NO)");
                    this._moduloGlobal.glDocumentoControl_Update(ctrlCred, true, true);
                  
                    #endregion  
                    #region Asignar nuevo flujo
                    if (cob.ActividadEstado == null)
                    {
                        cob.ActividadEstado = new DTO_InfoTarea();
                        cob.ActividadEstado.FechaAlarma1.Value = cob.FechaCompromiso.Value.HasValue ? cob.FechaCompromiso.Value : null;
                        cob.ActividadEstado.FechaInicio.Value = DateTime.Now;
                        cob.ActividadEstado.UsuarioID.Value = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId).ID.Value;
                        cob.ActividadEstado.UsuarioAlarma1.Value = this.UserId;
                        cob.ActividadEstado.ActividadFlujoID.Value = actCobranza;
                        cob.ActividadEstado.NumeroDoc.Value = cob.NumeroDoc.Value;
                        cob.ActividadEstado.Observaciones.Value = cob.ObservacionCompromiso.Value;
                        cob.ActividadEstado.CerradoInd.Value = cob.CumplidoInd.Value.HasValue ? cob.CumplidoInd.Value.Value : false;
                        this._moduloGlobal.glActividadEstado_AddOrUpd(documentoID, cob.ActividadEstado, false, DictionaryProgress.BatchProgress, true);
                    }
                    else
                    {
                        cob.ActividadEstado.FechaAlarma1.Value = cob.FechaCompromiso.Value.HasValue ? cob.FechaCompromiso.Value : null;
                        cob.ActividadEstado.UsuarioAlarma1.Value = this.UserId;
                        cob.ActividadEstado.Observaciones.Value = cob.ObservacionCompromiso.Value;
                        cob.ActividadEstado.CerradoInd.Value = cob.CumplidoInd.Value.HasValue ? cob.CumplidoInd.Value.Value : false;
                        this._moduloGlobal.glActividadEstado_AddOrUpd(documentoID, cob.ActividadEstado, true, DictionaryProgress.BatchProgress, true);
                    }
                    //result = this.AsignarFlujo(documentoID, cob.NumeroDoc.Value.Value, actCobranza, false, string.Empty);
                    #endregion
                    #region Guarda en la bitacora
                    int bId = this._moduloAplicacion.aplBitacora_Add(this.Empresa.ID.Value, documentoID, (int)FormsActions.Edit, DateTime.Now,
                        this.UserId, this.Empresa.ID.Value, cob.NumeroDoc.Value.ToString(), documentoID.ToString(), string.Empty,
                        string.Empty, string.Empty, 0, 0, 0);
                    #endregion 
                }
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GestionCobranza_Add");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Obtiene datatable para Excel
        /// </summary>
        /// <param name="tipoReporte">Tipo de Reporte a Generar</param>
        /// <param name="fechaCorte">Fecha Corte</param>
        /// <param name="gestionCobrID">Gestion CobranzaID</param>
        /// <param name="estado">Estado de la cobranza</param>
        /// <param name="tipoGestion">Tipo gestion</param>
        /// <returns>Datatable</returns>
        public DataTable HistoricoGestionCobranza_GetExcel(int documentoID, DateTime fechaCorte, string gestionCobrID, string clienteID, string libranza, byte? estado, byte? tipoGestion)
        {
            try
            {
                DataTable result = new DataTable();
                this._dal_ccHistoricoGestionCob = (DAL_ccHistoricoGestionCobranza)this.GetInstance(typeof(DAL_ccHistoricoGestionCobranza), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_glAreaFuncional afUser = (DTO_glAreaFuncional)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glAreaFuncional, this.GetAreaFuncionalByUser(), true, false);
                if (!string.IsNullOrEmpty(clienteID) || !string.IsNullOrEmpty(libranza))
                    result = this._dal_ccHistoricoGestionCob.DAL_ccHistoricoGestionCobranza_GetExcelSinFecha(gestionCobrID, clienteID, libranza, estado, tipoGestion, afUser.CentroCostoID.Value);
                else
                    result = this._dal_ccHistoricoGestionCob.DAL_ccHistoricoGestionCobranza_GetExcel(fechaCorte, gestionCobrID, estado, tipoGestion, afUser.CentroCostoID.Value);

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "HistoricoGestionCobranza_GetExcel");
                throw ex;
            }
        }

        /// <summary>
        /// Obtiene lista para gestion
        /// </summary>
        /// <param name="tipoReporte">Tipo de Reporte a Generar</param>
        /// <param name="fechaCorte">Fecha Corte</param>
        /// <param name="gestionCobrID">Gestion CobranzaID</param>
        /// <param name="estado">Estado de la cobranza</param>
        /// <param name="tipoGestion">Tipo gestion</param>
        /// <returns>Datatable</returns>
        public List<DTO_ccHistoricoGestionCobranza> HistoricoGestionCobranza_GetGestion(int documentoID, DateTime fechaCorte, string gestionCobrID, byte? estado, byte? tipoGestion)
        {
            try
            {
                List<DTO_ccHistoricoGestionCobranza> result = new List<DTO_ccHistoricoGestionCobranza>();
                this._dal_ccHistoricoGestionCob = (DAL_ccHistoricoGestionCobranza)this.GetInstance(typeof(DAL_ccHistoricoGestionCobranza), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_glAreaFuncional afUser = (DTO_glAreaFuncional)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glAreaFuncional, this.GetAreaFuncionalByUser(), true, false);
                result = this._dal_ccHistoricoGestionCob.DAL_ccHistoricoGestionCobranza_GetGestion(fechaCorte, gestionCobrID, estado, tipoGestion, afUser.CentroCostoID.Value);

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_CarteraToExcel");
                throw ex;
            }
        }

        /// <summary>
        /// Actualiza la tabla de gestiones historico
        /// </summary>
        /// <param name="data">datos a actualizar</param>
        /// <returns>Resultado</returns>
        public DTO_TxResult HistoricoGestionCobranza_Update(int documentoID, List<DTO_ccHistoricoGestionCobranza> data, bool isAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();
            try
            {  
                this._dal_ccHistoricoGestionCob = (DAL_ccHistoricoGestionCobranza)this.GetInstance(typeof(DAL_ccHistoricoGestionCobranza), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccHistoricoGestionCob.DAL_ccHistoricoGestionCobranza_Update(data);
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "HistoricoGestionCobranza_Update");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Consulta Movimiento

        /// <summary>
        /// OBtiene los documentos de movimiento de cartera
        /// </summary>
        /// <param name="clienteMov">Filtro del cliente</param>
        /// <param name="libranza">Filtro del libranza</param>
        /// <param name="fechaInt">Filtro del fechaIni</param>
        /// <param name="fechaFin">Filtro del fechaFin</param>
        /// <param name="pagaduria">Filtro de la pagaduria</param>
        /// <param name="tipoMovimiento">Filtro del tipoMov</param>
        /// <returns>Lista de documentos</returns> 
        public List<DTO_QueryCarteraMvto> Cartera_GetMvto(string clienteMov, string NroCredito, DateTime fechaInt, DateTime fechaFin, int tipoMovimiento, int tipoAnulado)
        {
            List<DTO_QueryCarteraMvto> result = new List<DTO_QueryCarteraMvto>();
            this._dal_Cartera = (DAL_Cartera)this.GetInstance(typeof(DAL_Cartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            result = this._dal_Cartera.DAL_Cartera_GetMvto(clienteMov, NroCredito, fechaInt, fechaFin,  tipoMovimiento, tipoAnulado);
            
            // Ordenar por filtro  de Cliente
            if(!string.IsNullOrEmpty(clienteMov))
                result = result.OrderBy(x => x.NroCredito.Value).ToList();

            return result;
        }

        /// <summary>
        /// Funcion que trae los movimientos de cartera de una libranza
        /// </summary>
        /// <param name="libranza">libranza</param>
        /// <param name="CompCAP">Componente CApital</param>
        /// <param name="CompINT">Componente Interes</param>
        /// <param name="CompSEG">Componente Seguro</param>
        /// <param name="CompINS">Componente Interes Seguro</param>
        /// <param name="CompMOR">Componente Interes mora</param>
        /// <param name="CompPRJ">Componente Prefuridico</param>
        /// <param name="CompFAV">Componente Saldo a favor</param>
        /// <returns>Lista</returns>
        public List<DTO_QueryCarteraMvto> CarteraMvto_QueryByLibranza(int? libranza,string clienteID,bool byCuota,bool abonoInd = false)
        {
            try
            {
                List<DTO_QueryCarteraMvto> result = new List<DTO_QueryCarteraMvto>();
                this._dal_ccCarteraMvto = (DAL_ccCarteraMvto)this.GetInstance(typeof(DAL_ccCarteraMvto), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                string compCap = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string compINT = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string compSEG = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string compINTS = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresSeguro);
                string compMOR = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string compPRJ = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);
                string compSFV = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSaldosAFavor);
                result = _dal_ccCarteraMvto.DAL_CarteraMvto_QueryByLibranza(libranza,clienteID, byCuota, compCap, compINT, compSEG, compINTS, compMOR, compPRJ, compSFV, abonoInd);
                //Ordena por fecha
                result = result.OrderBy(x => x.FechaDoc.Value).ToList();
                //Resume los valores en un total por item
                foreach (DTO_QueryCarteraMvto mvto in result)
                {
                    mvto.TotalDocumento.Value = mvto.VlrCapital.Value + mvto.VlrInteres.Value + mvto.VlrSeguro.Value + mvto.VlrOtrCuota.Value + mvto.VlrMora.Value + 
                                                mvto.VlrPrejuridico.Value + mvto.VlrGastos.Value + mvto.VlrExtra.Value + mvto.SdoFavor.Value;
                }

                return result;
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "carteraMvto_QueryByLibranza");
                throw exception;
            }
        }


        #endregion

        #endregion

        #endregion

        #region Operaciones Generales

        #region Funciones Privadas

        #region Pantallas Aprobacion

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="documentID"></param>
        /// <param name="sol"></param>
        /// <param name="docCtrl"></param>
        private DTO_TxResult SolicitudLibranza_Aprobar(int documentID, string actFlujoID, DTO_SolicitudAprobacionCartera sol, List<DTO_ccSolicitudAnexo> anexos, List<DTO_ccTareaChequeoLista> tareas, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudAnexo = (DAL_ccSolicitudAnexo)base.GetInstance(typeof(DAL_ccSolicitudAnexo), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccTareaChequeoLista = (DAL_ccTareaChequeoLista)base.GetInstance(typeof(DAL_ccTareaChequeoLista), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            DTO_TxResult result = new DTO_TxResult();

            try
            {
                #region Actualiza el estado de los documentos y el flujo
                this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, sol.NumeroDoc.Value.Value, EstadoDocControl.ParaAprobacion, sol.Observacion.Value, true);
                //Asigna el nuevo flujo
                result = this.AsignarFlujo(documentID, sol.NumeroDoc.Value.Value, actFlujoID, false, sol.Observacion.Value);
                #endregion
                #region Actualiza las tareas y anexos
                if (documentID == AppDocuments.AnalisisRiesgo)
                {
                    //Borra las tareas anteriores y las remplaza con las nuevas
                    this._dal_ccTareaChequeoLista.DAL_ccTareaChequeoLista_Delete(sol.NumeroDoc.Value.Value);
                    //Crea las tareas
                    foreach (DTO_ccTareaChequeoLista tarea in tareas)
                        this._dal_ccTareaChequeoLista.DAL_ccTareaChequeoLista_Add(tarea);
                }
                else
                {
                    //Actualiza las tareas
                    foreach (DTO_ccTareaChequeoLista tarea in tareas)
                        this._dal_ccTareaChequeoLista.DAL_ccTareaChequeoLista_Update(tarea);

                    //Actualiza los anexos
                    foreach (DTO_ccSolicitudAnexo anexo in anexos)
                        this._dal_ccSolicitudAnexo.DAL_ccSolicitudAnexo_Update(anexo);

                }
                #endregion
                #region Actualiza Cliente
                if (documentID == AppDocuments.AnalisisRiesgo)
                {
                    this._dal_MasterSimple = (DAL_MasterSimple)base.GetInstance(typeof(DAL_MasterSimple), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                    DTO_ccCliente cli = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, sol.ClienteID.Value, true, false);
                    cli.Acierta.Value = sol.Acierta.Value;
                    cli.AciertaCifin.Value = sol.AciertaCifin.Value;
                    this._dal_MasterSimple.DAL_MasterSimple_Update(cli, true);
                    this._dal_ccTareaChequeoLista.DAL_ccTareaChequeoLista_Delete(sol.NumeroDoc.Value.Value);
                    //Crea las tareas
                    foreach (DTO_ccTareaChequeoLista tarea in tareas)
                        this._dal_ccTareaChequeoLista.DAL_ccTareaChequeoLista_Add(tarea);
                }
               
                #endregion
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudCredito_Aprobar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx && documentID != AppDocuments.AprobacionSolicitudLibranza)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="documentID"></param>
        /// <param name="sol"></param>
        /// <param name="docCtrl"></param>
        private DTO_TxResult SolicitudLibranza_Rechazar(int documentID, string actFlujoID, DTO_SolicitudAprobacionCartera sol, bool updateStatus, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();
            try
            {
                #region Trae la actividad de la Solicitud de Libranza (Primer paso del flujo)
                List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.SolicitudLibranza);
                string actSolicitudLibranzas = actividades[0].Trim();
                #endregion
                #region Cambia el estado del documento o Asigna el nuevo flujo (cancela las alarmas)
                if (updateStatus)
                {
                    this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, sol.NumeroDoc.Value.Value, EstadoDocControl.Cerrado, sol.Observacion.Value, true);
                    result = this.AsignarFlujo(documentID, sol.NumeroDoc.Value.Value, actFlujoID, true, sol.Observacion.Value);
                }
                else if (sol.ActividadFlujoReversion.Value == actSolicitudLibranzas) //Como la primera actividad del flujo no tiene flujo se actuala el docControl
                {
                    this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, sol.NumeroDoc.Value.Value, EstadoDocControl.SinAprobar, sol.Observacion.Value, true);
                    result = this.ActualizarReversionFlujo(documentID, sol.NumeroDoc.Value.Value, actFlujoID, sol.ActividadFlujoReversion.Value, sol.Observacion.Value);
                }
                else
                    result = this.ActualizarReversionFlujo(documentID, sol.NumeroDoc.Value.Value, actFlujoID, sol.ActividadFlujoReversion.Value, sol.Observacion.Value);
                #endregion
                #region Actualiza la observacion del glDocumentoCtrl
                DTO_glDocumentoControl ctrl = this._moduloGlobal.glDocumentoControl_GetByID(sol.NumeroDoc.Value.Value);
                ctrl.Observacion.Value = sol.Observacion.Value;
                this._moduloGlobal.glDocumentoControl_Update(ctrl, false, true);
                #endregion
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudCredito_Rechazar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="documentID"></param>
        /// <param name="sol"></param>
        /// <param name="docCtrl"></param>
        private DTO_TxResult PantallaCredito_Aprobar(int documentID, string actFlujoID, DTO_ccCreditoDocu credito, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();

            try
            {
                #region Actualiza el Crédito
                if (!string.IsNullOrEmpty(credito.Observacion.Value))
                {
                    //Revisar donde mas se esta llamando esto
                    #region Actualiza el estado
                    this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, credito.NumeroDoc.Value.Value, EstadoDocControl.Aprobado, credito.Observacion.Value, true);
                    #endregion
                    //Actualiza la solicitud
                    DTO_ccCreditoDocu ccDocu = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(credito.NumeroDoc.Value.Value);
                    ccDocu.Observacion.Value = credito.Observacion.Value;
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(ccDocu);
                }
                #endregion
                #region Asigna el nuevo flujo
                result = this.AsignarFlujo(documentID, credito.NumeroDoc.Value.Value, actFlujoID, false, credito.Observacion.Value);
                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Credito_Aprobar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="credito">Credito al que se le realiza la operacion de rechazo</param>
        /// <param name="CancelaDocumento">Indica si se cambia el estado del documento a cerrado o no</param>
        private DTO_TxResult PantallaCredito_Rechazar(int documentID, string actFlujoID, DTO_ccCreditoDocu credito, bool CancelaDocumento, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            try
            {
                #region Cambia el estado del documento
                if (CancelaDocumento)
                    this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, credito.NumeroDoc.Value.Value, EstadoDocControl.Cerrado, credito.Observacion.Value, true);
                #endregion
                #region Trae y actualiza la solicitud
                DTO_ccCreditoDocu credDocu = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(credito.NumeroDoc.Value.Value);
                credDocu.Observacion.Value = credito.Observacion.Value;
                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credDocu);
                #endregion
                #region Asigna el nuevo flujo (cancela las alarmas)
                result = this.AsignarFlujo(documentID, credito.NumeroDoc.Value.Value, actFlujoID, true, credito.Observacion.Value);
                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Credito_Rechazar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        /// <summary>
        /// Realiza la liquidacon segun el componente
        /// </summary>
        /// <param name="lineaCredID">Identificador de la linea de credito</param>
        /// <param name="solComponente">Solicitud del componente</param>
        /// <param name="pagaduriaID">Identificador de la pagaduria</param>
        /// <param name="valorPrestamo">Valor del prestamo</param>
        /// <param name="fechaLiquida">Fecha de liquidacion</param>
        /// <param name="SMMLV">Salario Minimo Mensual Legal vigente</param>
        /// <param name="plazo">Numero de cuotas</param>
        /// <param name="tasaSaldo">Tasa (%) del componente</param>
        /// <param name="pagoAnticipado">Indicador de pago anticipado</param>
        /// <returns>Retorna un resultado con los valores de los componentes llenos.</returns>
        internal DTO_TxResult LiquidarComponente(string lineaCredID, DTO_ccSolicitudComponentes solComponente, int vlrSolicitado, int vlrGiro,
            int plazo, int edad, int SMMLV, ref decimal vlrBase, out decimal tasaSaldo, decimal porcIVA,
            Dictionary<string, bool> pagosAnticipados,
            Dictionary<string, bool> mayorValor,
            Dictionary<string, bool> valorCredito,
            Dictionary<string, bool> componentesFijos,
            Dictionary<string, bool> saldoPromediado,
            Dictionary<string, decimal> tasasComponentes,
            Dictionary<string, Int16> tiposValor,
            Dictionary<Tuple<string, string>, DTO_ccLineaComponente> cacheLineaCred,
            Dictionary<Tuple<string, int>, DTO_ccComponenteEdad> cacheEdad,
            Dictionary<Tuple<string, string, int>, DTO_ccLineaComponenteMonto> cacheMontos,
            Dictionary<Tuple<string, string, int, int>, DTO_ccLineaComponentePlazo> cachePlazos,
            int diasAnticipo, decimal? tasaFija, decimal? tasaIntCte, ref bool reCalcularIntAnt, bool isIntAnticipado = false)
        {
            DTO_TxResult result = new DTO_TxResult();
            tasaSaldo = 0;

            try
            {
                #region Variables

                DTO_ccCarteraComponente componente = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, solComponente.ComponenteCarteraID.Value, true, false);
                string compIntSeguro = this.GetControlValueByCompany(ModulesPrefix.cc,AppControl.cc_ComponenteInteresSeguro);
                pagosAnticipados[solComponente.ComponenteCarteraID.Value] = false;
                tiposValor[componente.ID.Value] = componente.TipoValor.Value.Value;

                Int16 fuenteLiquida = componente.FuenteLiquida.Value.Value;
                Int16 tipoLiquida = componente.TipoLiquida.Value.Value;
                Int16 tipoValor = componente.TipoValor.Value.Value;
                Int16 tipoComponente = componente.TipoComponente.Value.Value;

                int valorComponente = 0;
                decimal tasaComponente = 0;

                string msgNoPorc = DictionaryMessages.Err_Cc_NoComponentePorc + "&&" + componente.ID.Value +
                    "&&" + lineaCredID + "&&" + vlrSolicitado.ToString() + "&&" + plazo.ToString();

                #endregion
                #region Trae el porcentaje (tasa) y valor del componente
                switch (fuenteLiquida)
                {
                    case (Int16)FuenteLiquida.Componente:
                        #region Valida que el componente tenga un porcentaje asignado

                        if (isIntAnticipado && (componente.PorcentajeID.Value == null || componente.PorcentajeID.Value == 0))
                        {
                            reCalcularIntAnt = true;
                            componente.PorcentajeID.Value = tasaIntCte.Value;
                        }
                        else if(tasaFija.HasValue)
                        {
                            componente.PorcentajeID.Value = tasaFija.Value;
                        }

                        if (componente.PorcentajeID.Value == null || componente.Valor.Value == null)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = msgNoPorc;
                            return result;
                        }

                        #endregion
                        #region Asigna la Tasa y el valor
                        if (!reCalcularIntAnt && !tasaFija.HasValue && componente.IvaLiquida.Value == (int)IVALiquida.Adicional)
                            tasaComponente = componente.PorcentajeID.Value.Value * (1 + (porcIVA/100));
                        else
                            tasaComponente = componente.PorcentajeID.Value.Value;
                        valorComponente = Convert.ToInt32(componente.Valor.Value.Value);
                        #endregion

                        break;
                    case (Int16)FuenteLiquida.LineaCredito:
                        #region Valida que el componente tenga un porcentaje asignado

                        Dictionary<string, string> pks = new Dictionary<string, string>();
                        Tuple<string, string> tuple = new Tuple<string, string>(lineaCredID, componente.ID.Value);
                        DTO_ccLineaComponente lineaCred;

                        if (cacheLineaCred.ContainsKey(tuple))
                            lineaCred = cacheLineaCred[tuple];
                        else
                        {
                            pks.Add("LineaCreditoID", lineaCredID);
                            pks.Add("ComponenteCarteraID", componente.ID.Value);

                            try
                            {
                                lineaCred = (DTO_ccLineaComponente)this.GetMasterComplexDTO(AppMasters.ccLineaComponente, pks, true);
                                cacheLineaCred.Add(tuple, lineaCred);
                            }
                            catch (Exception)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = msgNoPorc;
                                return result;
                            }

                            //Calculo de tasa para el interes anticipado
                            if (isIntAnticipado && (lineaCred.PorcentajeID.Value == null || lineaCred.PorcentajeID.Value == 0))
                            {
                                reCalcularIntAnt = true;
                                lineaCred.PorcentajeID.Value = tasaIntCte.Value;
                            }
                            else if (tasaFija.HasValue)
                            {
                                lineaCred.PorcentajeID.Value = tasaFija.Value;
                            }

                            if (lineaCred.PorcentajeID.Value == null || lineaCred.Valor.Value == null)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = msgNoPorc;
                                return result;
                            }
                        }
                        #endregion
                        #region Asigna la Tasa y el valor
                        if (!reCalcularIntAnt && !tasaFija.HasValue && componente.IvaLiquida.Value == (int)IVALiquida.Adicional)
                            tasaComponente = lineaCred.PorcentajeID.Value.Value * (1 + (porcIVA / 100));
                        else
                            tasaComponente = lineaCred.PorcentajeID.Value.Value;
                        valorComponente = Convert.ToInt32(lineaCred.Valor.Value.Value);
                        #endregion

                        break;
                    case (Int16)FuenteLiquida.Monto:
                        #region Valida que el componente tenga un porcentaje asignado

                        Tuple<string, string, int> tupleMonto = new Tuple<string, string, int>(lineaCredID, componente.ID.Value, vlrSolicitado);
                        DTO_ccLineaComponenteMonto monto;

                        if (cacheMontos.ContainsKey(tupleMonto))
                            monto = cacheMontos[tupleMonto];
                        else
                        {
                            this._dal_ccLineaComponenteMonto = (DAL_ccLineaComponenteMonto)base.GetInstance(typeof(DAL_ccLineaComponenteMonto), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                            monto = this._dal_ccLineaComponenteMonto.DAL_ccLineaComponenteMonto_GetByMonto(lineaCredID, componente.ID.Value, vlrSolicitado);
                            cacheMontos.Add(tupleMonto, monto);

                            if (monto == null)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = msgNoPorc;
                                return result;
                            }

                            //Calculo de tasa para el interes anticipado
                            if (isIntAnticipado && (monto.PorcentajeID.Value == null || monto.PorcentajeID.Value == 0))
                            {
                                reCalcularIntAnt = true;
                                monto.PorcentajeID.Value = tasaIntCte.Value;
                            }
                            else if (tasaFija.HasValue)
                            {
                                monto.PorcentajeID.Value = tasaFija.Value;
                            }

                            if (monto.PorcentajeID.Value == null || monto.Valor.Value == null) 
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = msgNoPorc;
                                return result;
                            }
                        }
                        #endregion
                        #region Asigna la Tasa y el valor
                        if (!reCalcularIntAnt && !tasaFija.HasValue && componente.IvaLiquida.Value == (int)IVALiquida.Adicional)
                            tasaComponente = monto.PorcentajeID.Value.Value * (1 + (porcIVA / 100));
                        else
                            tasaComponente = monto.PorcentajeID.Value.Value;
                        valorComponente = Convert.ToInt32(monto.Valor.Value.Value);
                        #endregion

                        break;
                    case (Int16)FuenteLiquida.MontoPlazo:
                        #region Valida que el componente tenga un porcentaje asignado

                        Tuple<string, string, int, int> tuplePlazo = new Tuple<string, string, int, int>(lineaCredID, componente.ID.Value, vlrSolicitado, plazo);
                        DTO_ccLineaComponentePlazo plazoDTO;

                        if (cachePlazos.ContainsKey(tuplePlazo))
                            plazoDTO = cachePlazos[tuplePlazo];
                        else
                        {
                            this._dal_ccLineaComponentePlazo = (DAL_ccLineaComponentePlazo)base.GetInstance(typeof(DAL_ccLineaComponentePlazo), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                            plazoDTO = this._dal_ccLineaComponentePlazo.DAL_ccLineaComponentePlazo_GetByMonto(lineaCredID, componente.ID.Value, vlrSolicitado, plazo);
                            cachePlazos.Add(tuplePlazo, plazoDTO);

                            if (plazoDTO == null)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = msgNoPorc;
                                return result;
                            }

                            //Calculo de tasa para el interes anticipado
                            if (isIntAnticipado && (plazoDTO.PorcentajeID.Value == null || plazoDTO.PorcentajeID.Value == 0))
                            {
                                reCalcularIntAnt = true;
                                plazoDTO.PorcentajeID.Value = tasaIntCte.Value;
                            }
                            else if (tasaFija.HasValue)
                            {
                                plazoDTO.PorcentajeID.Value = tasaFija.Value;
                            }

                            if (plazoDTO.PorcentajeID.Value == null || plazoDTO.Valor.Value == null)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = msgNoPorc;
                                return result;
                            }
                        }
                        #endregion
                        #region Asigna la Tasa y el valor
                        if (!reCalcularIntAnt && !tasaFija.HasValue && componente.IvaLiquida.Value == (int)IVALiquida.Adicional)
                            tasaComponente = plazoDTO.PorcentajeID.Value.Value * (1 + (porcIVA / 100));
                        else
                            tasaComponente = plazoDTO.PorcentajeID.Value.Value;
                        valorComponente = Convert.ToInt32(plazoDTO.Valor.Value.Value);
                        #endregion

                        break;
                    case (Int16)FuenteLiquida.ComponenteEdad:
                        #region Valida que el componente tenga un porcentaje asignado

                        Tuple<string, int> tupleEdad = new Tuple<string, int>(componente.ID.Value, edad);
                        DTO_ccComponenteEdad edadDTO;

                        if (cacheEdad.ContainsKey(tupleEdad))
                            edadDTO = cacheEdad[tupleEdad];
                        else
                        {
                            this._dal_ccComponenteEdad = (DAL_ccComponenteEdad)base.GetInstance(typeof(DAL_ccComponenteEdad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                            edadDTO = this._dal_ccComponenteEdad.DAL_ccComponenteEdad_GetByEdad(componente.ID.Value, edad);
                            cacheEdad.Add(tupleEdad, edadDTO);

                            if (edadDTO == null)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = msgNoPorc;
                                return result;
                            }

                            //Calculo de tasa para el interes anticipado
                            if (isIntAnticipado && (edadDTO.PorcentajeID.Value == null || edadDTO.PorcentajeID.Value == 0))
                            {
                                reCalcularIntAnt = true;
                                edadDTO.PorcentajeID.Value = tasaIntCte.Value;
                            }
                            else if (tasaFija.HasValue)
                            {
                                edadDTO.PorcentajeID.Value = tasaFija.Value;
                            }

                            if (edadDTO.PorcentajeID.Value == null || edadDTO.Valor.Value == null)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = msgNoPorc;
                                return result;
                            }
                        }
                        #endregion
                        #region Asigna la Tasa y el valor
                        if (!reCalcularIntAnt && !tasaFija.HasValue && componente.IvaLiquida.Value == (int)IVALiquida.Adicional)
                            tasaComponente = edadDTO.PorcentajeID.Value.Value * (1 + (porcIVA / 100));
                        else
                            tasaComponente = edadDTO.PorcentajeID.Value.Value;
                        valorComponente = Convert.ToInt32(edadDTO.Valor.Value.Value);

                        break;
                        #endregion
                }

                tasasComponentes[solComponente.ComponenteCarteraID.Value] = tasaComponente;

                #endregion
                #region Trae los tipos de componente (Mayor Valor)
                switch (tipoComponente)
                {
                    case (Int16)TipoComponente.MayorValor:
                         pagosAnticipados[componente.ID.Value] = false;
                         mayorValor[componente.ID.Value] = true;

                        break;

                    case (Int16)TipoComponente.DescuentoGiro:
                        pagosAnticipados[componente.ID.Value] = true;
                        mayorValor[componente.ID.Value] = false;

                        break;

                    default:
                        pagosAnticipados[componente.ID.Value] = false;
                        mayorValor[componente.ID.Value] = false;

                        break;
                }
                #endregion
                #region Calcula el valor

                componentesFijos[componente.ID.Value] = true;
                valorCredito[componente.ID.Value] = false;
                saldoPromediado[componente.ID.Value] = false;
                switch (tipoLiquida)
                {
                    case (Int16)TipoLiquidacionCartera.FactorSMMLV:
                        #region SMMLV

                        valorComponente = Convert.ToInt32(SMMLV * tasaComponente / 100);
                        if (tipoValor == (Int16)TipoValor.Cuota)
                        {
                            solComponente.CuotaValor.Value = valorComponente;
                            solComponente.TotalValor.Value = valorComponente * plazo;
                        }
                        else
                        {
                            solComponente.CuotaValor.Value = SMMLV / plazo;
                            solComponente.TotalValor.Value = valorComponente;
                        }

                        #endregion
                        break;

                    case (Int16)TipoLiquidacionCartera.Valor:
                        #region Valor

                        if (tipoValor == (Int16)TipoValor.Cuota)
                        {
                            solComponente.CuotaValor.Value = valorComponente;
                            solComponente.TotalValor.Value = valorComponente * plazo;
                        }
                        else if (tipoValor == (Int16)TipoValor.Valor)
                        {
                            solComponente.CuotaValor.Value = valorComponente / plazo;
                            solComponente.TotalValor.Value = valorComponente;
                        }
                        else
                            solComponente.TotalValor.Value = valorComponente;

                        #endregion
                        break;

                    case (Int16)TipoLiquidacionCartera.FactorSaldo:
                        #region Saldo

                        componentesFijos[componente.ID.Value] = false;
                        tasaSaldo = tasaComponente;

                        #endregion
                        break;

                    case (Int16)TipoLiquidacionCartera.FactorVlrSolicitado:
                        #region Valor Solicitado

                        // Si es por valor crédito usar la misma fórmula despues del calculo del valor del crédito
                        if (isIntAnticipado)
                        {
                            decimal tasaDiaria = tasaComponente * (Convert.ToDecimal(diasAnticipo) / 30);
                            valorComponente = Convert.ToInt32(vlrSolicitado * tasaDiaria / 100);
                        }
                        else
                            valorComponente = Convert.ToInt32(vlrSolicitado * tasaComponente / 100);

                        if (tipoValor == (Int16)TipoValor.Cuota)
                        {
                            solComponente.CuotaValor.Value = valorComponente;
                            solComponente.TotalValor.Value = valorComponente * plazo;
                        }
                        else if (tipoValor == (Int16)TipoValor.Valor)
                        {
                            solComponente.CuotaValor.Value = valorComponente / plazo;
                            solComponente.TotalValor.Value = valorComponente;
                        }
                        else
                            solComponente.TotalValor.Value = valorComponente;

                        #endregion
                        break;

                    case (Int16)TipoLiquidacionCartera.FactorVlrCredito:
                        #region Valor Credito

                        valorCredito[componente.ID.Value] = true;
                        solComponente.CuotaValor.Value = 0;
                        solComponente.TotalValor.Value = 0;

                        #endregion
                        break;

                    case (Int16)TipoLiquidacionCartera.FactorVlrGiro:
                        #region Valor Giro

                        valorComponente = Convert.ToInt32(vlrGiro * tasaComponente / 100);
                        if (tipoValor == (Int16)TipoValor.Cuota)
                        {
                            solComponente.CuotaValor.Value = valorComponente;
                            solComponente.TotalValor.Value = valorComponente * plazo;
                        }
                        else if (tipoValor == (Int16)TipoValor.Valor)
                        {
                            solComponente.CuotaValor.Value = valorComponente / plazo;
                            solComponente.TotalValor.Value = valorComponente;
                        }
                        else
                            solComponente.TotalValor.Value = vlrSolicitado;

                        #endregion
                        break;

                    case (Int16)TipoLiquidacionCartera.FactorSaldoPromediado:
                        #region Saldo

                        componentesFijos[componente.ID.Value] = true;
                        saldoPromediado[componente.ID.Value] = true;
                        //tasaSaldo = tasaComponente;

                        #endregion
                        break;
                    case (Int16)TipoLiquidacionCartera.NoAplica:
                        #region NO aplica
                        if (solComponente.ComponenteCarteraID.Value == compIntSeguro)
                            componentesFijos[componente.ID.Value] = false;
                        #endregion
                        break;
                }

                if (tipoComponente != (Int16)TipoComponente.CapitalSolicitado && tipoComponente != (Int16)TipoComponente.ComponenteCuota)
                    solComponente.CuotaValor.Value = 0;

                //Asigna el valor base
                if(tipoComponente == (int)TipoComponente.MayorValor && tipoLiquida != (int)TipoLiquidacionCartera.FactorVlrCredito)
                {
                    if(!isIntAnticipado || !reCalcularIntAnt)
                    {
                        vlrBase += solComponente.TotalValor.Value.Value;
                    }
                }

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "LiquidarComponente");
                return result;
            }
        }

        /// <summary>
        /// Trea de un listado de cuentas de componentes la que tenga un determinado comprobante de cartera
        /// </summary>
        /// <param name="compCtas"></param>
        /// <param name="compCarteraID"></param>
        /// <returns></returns>
        private DTO_ccComponenteCuenta GetComponenteCuentaByComponenteCartera(List<DTO_ccComponenteCuenta> compCtas, string compCarteraID)
        {
            IEnumerable<DTO_ccComponenteCuenta> temp = compCtas.Where(x => x.ComponenteCarteraID.Value == compCarteraID);
            if (temp.Count() == 0)
                return null;
            else
                return temp.First();
        }

        /// <summary>
        /// Asigna a un plan de pagos la informacion de la mora
        /// </summary>
        /// <param name="planPagos">Plan de pagos</param>
        /// <param name="componentes">Componentes</param>
        private void AsignarMora_PlanPagos(bool asignar, DateTime fechaCorte, List<DTO_ccCreditoPlanPagos> planPagos, List<DTO_ccSaldosComponentes> saldoComponentes)
        {
            try
            {
                string componenteMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                if (asignar)
                {
                    List<DTO_ccSaldosComponentes> componentesMora = (from c in saldoComponentes where c.ComponenteCarteraID.Value == componenteMora select c).ToList();
                    foreach (DTO_ccSaldosComponentes cm in componentesMora)
                    {
                        int cuotaID = cm.CuotaID.Value.Value;
                        DTO_ccCreditoPlanPagos pago = (from p in planPagos where p.CuotaID.Value.Value == cuotaID select p).First();

                        //Correccion por Daniel Peralta (Ago 25 2015) para ver el plan de pagos de recaudos manuales
                        pago.VlrMoraLiquida.Value = cm.CuotaSaldo.Value; // pago.VlrMoraLiquida.Value.Value + cm.CuotaSaldo.Value;
                        pago.FechaLiquidaMora.Value = fechaCorte;

                        pago.NuevoVlrMoraLiquida.Value = cm.CuotaSaldo.Value;
                    }
                }
                else
                {
                    planPagos.ForEach(p => p.NuevoVlrMoraLiquida.Value = 0);
                    saldoComponentes.RemoveAll(c => c.ComponenteCarteraID.Value == componenteMora);
                }
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "AsignarMora_PlanPagos");
                throw ex;
            }
        }

        /// <summary>
        /// Asigna a un plan de pagos la informacion de la usura
        /// </summary>
        /// <param name="planPagos">Plan de pagos</param>
        /// <param name="componentes">Componentes</param>
        private void AsignarUsura_PlanPagos(bool asignar, List<DTO_ccCreditoPlanPagos> planPagos, List<DTO_ccSaldosComponentes> saldoComponentes)
        {
            try
            {
                string componenteUsura = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteUsura);
                if (asignar)
                {
                    List<DTO_ccSaldosComponentes> componentesUsura = (from c in saldoComponentes where c.ComponenteCarteraID.Value == componenteUsura select c).ToList();

                    foreach (DTO_ccSaldosComponentes cm in componentesUsura)
                    {
                        int cuotaID = cm.CuotaID.Value.Value;
                        DTO_ccCreditoPlanPagos pago = (from p in planPagos where p.CuotaID.Value.Value == cuotaID select p).First();

                        pago.VlrAjusteUsura.Value = cm.CuotaSaldo.Value;
                        //pago.VlrSaldo.Value -= cm.CuotaSaldo.Value;
                    }
                }
                else
                    saldoComponentes.RemoveAll(c => c.ComponenteCarteraID.Value == componenteUsura);
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "AsignarUsura_PlanPagos");
                throw ex;
            }
        }

        /// <summary>
        /// Asigna a un plan de pagos la informacion del componente prejurídico
        /// </summary>
        /// <param name="planPagos">Plan de pagos</param>
        /// <param name="componentes">Componentes</param>
        private void AsignarPJ_PlanPagos(bool asignar, List<DTO_ccCreditoPlanPagos> planPagos, List<DTO_ccSaldosComponentes> saldoComponentes)
        {
            try
            {
                string componentePJ = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);
                if (asignar)
                {
                    List<DTO_ccSaldosComponentes> componentesPJ = (from c in saldoComponentes where c.ComponenteCarteraID.Value == componentePJ select c).ToList();

                    foreach (DTO_ccSaldosComponentes cm in componentesPJ)
                    {
                        int cuotaID = cm.CuotaID.Value.Value;
                        DTO_ccCreditoPlanPagos pago = (from p in planPagos where p.CuotaID.Value.Value == cuotaID select p).First();

                        pago.VlrPrejuridico.Value = cm.CuotaSaldo.Value;
                        //pago.VlrSaldo.Value -= cm.CuotaSaldo.Value;
                    }
                }
                else
                    saldoComponentes.RemoveAll(c => c.ComponenteCarteraID.Value == componentePJ);
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "AsignarUsura_PlanPagos");
                throw ex;
            }
        }

        /// <summary>
        /// Añade los un registro a ccCarteraMvto
        /// </summary>
        /// <param name="mvto">Movimiento de la caretra</param>
        internal void ccCarteraMvto_Add(DTO_ccCarteraMvto mvto)
        {
            this._dal_ccCarteraMvto = (DAL_ccCarteraMvto)base.GetInstance(typeof(DAL_ccCarteraMvto), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCarteraMvto.DAL_ccCarteraMvto_Add(mvto);
        }

        /// <summary>
        /// Revierte una tx de ccCarteraMvto
        /// </summary><param name="numDocCredito">Ídentificador del crédito</param>
        /// <param name="numDocReversion">Identificador del documento que genero el movimiento de cartera</param>
        /// <param name="numDocNuevo">Identificador del nuevo movimiento</param>
        internal void ccCarteraMvto_Revertir(int numDocCredito, int numDocReversion, int numDocNuevo)
        {
            this._dal_ccCarteraMvto = (DAL_ccCarteraMvto)base.GetInstance(typeof(DAL_ccCarteraMvto), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCarteraMvto.DAL_ccCarteraMvto_Revertir(numDocCredito, numDocReversion, numDocNuevo);
        }
        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Retorna el Listado de las solicitudes de credito
        /// </summary>
        /// <returns></returns> 
        public List<DTO_SolicitudAprobacionCartera> SolicitudLibranza_GetForVerificacion(int documentoID, string actFlujoID)
        {
            try
            {
                this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)this.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_seUsuario seUsuario = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);
                string usuarioID = seUsuario.ID.Value;
                return _dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetForVerificacion(documentoID, actFlujoID, usuarioID);
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "SolicitudCredito_GetForVerificacion");
                throw exception;
            }
        }

        /// <summary>
        /// Verifica en la lista que documentos estan para aprobar y rechazar, Actualiza la tarea si es aprobado.
        /// </summary>
        /// <param name="documentID">Documento que ejecula la transaccion</param>
        /// <param name="solicitudes">Listado de documentos</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public List<DTO_SerializedObject> SolicitudLibranza_AprobarRechazar(int documentID, string actFlujoID, List<DTO_SolicitudAprobacionCartera> solicitudes, 
            List<DTO_ccSolicitudAnexo> anexos, List<DTO_ccTareaChequeoLista> tareas, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            try
            {
                int i = 0;
                foreach (DTO_SolicitudAprobacionCartera sol in solicitudes)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / solicitudes.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    if (sol.Aprobado.Value.Value)
                    {
                        try
                        {
                            List<DTO_ccSolicitudAnexo> anexosTemp = anexos.Where(x => x.NumeroDoc.Value == sol.NumeroDoc.Value).ToList();
                            List<DTO_ccTareaChequeoLista> tareasTemp = tareas.Where(x => x.NumeroDoc.Value == sol.NumeroDoc.Value).ToList();
                            result = this.SolicitudLibranza_Aprobar(documentID, actFlujoID, sol, anexosTemp, tareasTemp, false);
                        }
                        catch (Exception exAprob)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exAprob, this.UserId.ToString(), "SolicitudCredito_AprobarRechazar (Aprobar)");
                        }
                    }
                    else if (sol.Rechazado.Value.Value)
                    {
                        try
                        {
                            //Verifica si hay una actividad de flujo para revertir, si es vacio es porque se quiere anular el documento
                            if (String.IsNullOrWhiteSpace(sol.ActividadFlujoReversion.Value))
                                result = this.SolicitudLibranza_Rechazar(documentID, actFlujoID, sol, true, false);
                            else
                                result = this.SolicitudLibranza_Rechazar(documentID, actFlujoID, sol, false, false);

                        }
                        catch (Exception exRech)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exRech, this.UserId.ToString(), "SolicitudCredito_AprobarRechazar (Rechazar)");
                        }
                    }

                    if (result.Result == ResultValue.NOK)
                        results.Add(result);
                    else
                    {
                        base._mySqlConnectionTx = null;
                        DTO_Alarma alarma = this.GetFirstMailInfo(sol.NumeroDoc.Value.Value, false);
                        results.Add(alarma);
                    }
                }
                return results;
            }
            catch (Exception ex)
            {
                results.Clear();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudCredito_AprobarRechazar");
                results.Add(result);
                return results;
            }
        }

        /// <summary>
        /// Verifica en la lista que documentos estan para aprobar y rechazar, Actualiza la tarea si es aprobado.
        /// </summary>
        /// <param name="documentID">Documento que ejecula la transaccion</param>
        /// <param name="solicitudes">Listado de documentos</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public List<DTO_SerializedObject> PantallaCredito_AprobarRechazar(int documentID, string actFlujoID, List<DTO_ccCreditoDocu> creditos, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            try
            {
                int i = 0;
                foreach (DTO_ccCreditoDocu credito in creditos)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / creditos.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    if (credito.Aprobado.Value.Value)
                    {
                        try
                        {
                            result = this.PantallaCredito_Aprobar(documentID, actFlujoID, credito, false);
                        }
                        catch (Exception exAprob)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exAprob, this.UserId.ToString(), "Credito_AprobarRechazar (Aprobar)");
                        }
                    }
                    else if (credito.Rechazado.Value.Value)
                    {
                        try
                        {
                            result = this.PantallaCredito_Rechazar(documentID, actFlujoID, credito, true, false);
                        }
                        catch (Exception exRech)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exRech, this.UserId.ToString(), "Credito_AprobarRechazar (Rechazar)");
                        }
                    }

                    if (result.Result == ResultValue.NOK)
                        results.Add(result);
                    else
                    {
                        base._mySqlConnectionTx = null;
                        DTO_Alarma alarma = this.GetFirstMailInfo(credito.NumeroDoc.Value.Value, false);
                        results.Add(alarma);
                    }
                }
                return results;
            }
            catch (Exception ex)
            {
                results.Clear();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Credito_AprobarRechazar");
                results.Add(result);
                return results;
            }
        }

        /// <summary>
        /// Realiza el proceso de liquidacion de cartera
        /// </summary>
        /// <param name="edad">Edad del cliente. No se usa en el simulador</param>
        /// <param name="lineaCredID">Identificador de la linea de credito</param>
        /// <param name="pagaduriaID">Identificador de la pagaduria</param>
        /// <param name="plazo">Plazo de pago</param>
        /// <param name="valorPrestamo">Valor del prestamo</param>
        /// <param name="fechaLiquida">Fecha de liquidacion</param>
        /// <param name="traerCuotas">Indica si se debe incluir el plan de pagos</param>
        /// <returns>Retorna un objeto TxResult si se presenta un error, de lo contrario devuelve un objeto de tipo DTO_PlanDePagos</returns>
        public DTO_SerializedObject GenerarLiquidacionCartera(string lineaCredID, string pagaduriaID, int valorCapital, int vlrGiro, int plazo, int edad,
            DateTime fechaLiquida, decimal? interes, DateTime fechaCuota1)
        {
            DTO_TxResult result = new DTO_TxResult();
            DTO_PlanDePagos planPagos = new DTO_PlanDePagos();

            try
            {
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_MasterSimple = (DAL_MasterSimple)base.GetInstance(typeof(DAL_MasterSimple), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                #region Variables

                //Variables para resultados
                List<DTO_ccSolicitudComponentes> componentes = new List<DTO_ccSolicitudComponentes>();
                List<DTO_ccSolicitudComponentes> componentesUsuario = new List<DTO_ccSolicitudComponentes>();
                List<DTO_ccSolicitudComponentes> componentesAll = new List<DTO_ccSolicitudComponentes>();
                List<DTO_Cuota> cuotas = new List<DTO_Cuota>();

                //Variables de control
                string compCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string compSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string compAportes = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentedeAportes);
                string compConfed = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCONFED);
                string compInteresAnti = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresAnticipado);
                string compSeguroAnti = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroAnti);
                string compAportesAnti = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteAporteAnti);

                //Variables de control e IVA
                DTO_ccPagaduria pagaduria = (DTO_ccPagaduria)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccPagaduria, pagaduriaID, true, false);
                string indCalculoInteresAnticipado = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CalculaInteresAnticipadoInd);
                string liquidaIntAnticipado = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_LiquiIntAntiVlrCredito);
                string ctaIVAID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaIVAComponentes);
                DTO_coPlanCuenta ctaIVA;
                decimal porcIVA = 0;

                //Variables de calculos
                int SMMLV = 0;
                decimal tasaTotal = interes != null ? interes.Value : 0;
                decimal vlrDescuento = 0;
                decimal vlrAdicional = 0;
                decimal vlrCompra = 0;
                decimal sumInteres = 0;
                decimal vlrCredito = 0;
                int vlrCuota = 0;
                int capitalTotal = 0;
                int saldoParcial = valorCapital;

                //Variables de fechas
                int diaTope = pagaduria.DiaTope.Value.Value;
                int ultimoDia = 1;
                if (fechaCuota1.Month == 2)
                    ultimoDia = 28;
                else
                    ultimoDia = 30;
                bool recaudoMes = pagaduria.RecaudoMes.Value.Value;
                DateTime periodo = new DateTime(fechaLiquida.Year, fechaLiquida.Month, 1);
                DateTime fechaCuota = new DateTime(fechaCuota1.Year, fechaCuota1.Month, ultimoDia);
                DateTime fechaLiquidacion = fechaLiquida.Date;

                //Calculo los dias de anticipo
                if (fechaCuota1.Month == 2)
                    fechaCuota1 = new DateTime(fechaCuota1.Year, fechaCuota1.Month, 28);
                else
                    fechaCuota1 = new DateTime(fechaCuota1.Year, fechaCuota1.Month, 30);
                int diasAnticipo = 0;
                if (fechaCuota.Month == fechaLiquidacion.Month)
                    liquidaIntAnticipado = "0";
                else
                {
                    DateTime ultimoMes = fechaCuota1.AddMonths(-1);
                    DateTime fechaCalculoAnticipo = new DateTime(ultimoMes.Year, ultimoMes.Month, DateTime.DaysInMonth(ultimoMes.Year, ultimoMes.Month));
                    diasAnticipo = fechaCalculoAnticipo.Subtract(fechaLiquidacion).Days;
                    //diasAnticipo += 1; Se deshabilito debido a que anteriormente se estaba tomando tambien la hora en la que se ejecutaba el liquidador
                }

                //Variables
                string descSeguro = string.Empty;
                DTO_MasterBasic basic;

                //Variables de cache
                DTO_ccCarteraComponente carteraComponenteDTO = new DTO_ccCarteraComponente();
                Dictionary<string, bool> dict_PagosAnticipados = new Dictionary<string, bool>();
                Dictionary<string, bool> dict_MayorValor = new Dictionary<string, bool>();
                Dictionary<string, decimal> dict_TasasComponentes = new Dictionary<string, decimal>();
                Dictionary<string, Int16> dict_TiposValor = new Dictionary<string, Int16>();
                Dictionary<string, bool> dict_ComponentesFijos = new Dictionary<string, bool>();
                Dictionary<string, bool> dict_FactorValorCredito = new Dictionary<string, bool>();
                Dictionary<string, bool> dict_SaldoPromediado = new Dictionary<string, bool>();
                Dictionary<string, int> dict_TotalComponentesSaldo = new Dictionary<string, int>();
                Dictionary<string, DTO_ccCarteraComponente> cacheCarteraComponentes = new Dictionary<string, DTO_ccCarteraComponente>();
                Dictionary<Tuple<string, string>, DTO_ccLineaComponente> cacheLineaCred = new Dictionary<Tuple<string, string>, DTO_ccLineaComponente>();
                Dictionary<Tuple<string, int>, DTO_ccComponenteEdad> cacheEdad = new Dictionary<Tuple<string, int>, DTO_ccComponenteEdad>();
                Dictionary<Tuple<string, string, int>, DTO_ccLineaComponenteMonto> cacheMontos = new Dictionary<Tuple<string, string, int>, DTO_ccLineaComponenteMonto>();
                Dictionary<Tuple<string, string, int, int>, DTO_ccLineaComponentePlazo> cachePlazos = new Dictionary<Tuple<string, string, int, int>, DTO_ccLineaComponentePlazo>();

                #endregion
                #region Validaciones

                #region Valida los valores autorizados

                this._dal_ccValorAutorizado = (DAL_ccValorAutorizado)base.GetInstance(typeof(DAL_ccValorAutorizado), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                bool validValMonto = this._dal_ccValorAutorizado.DAL_ccValorAutorizado_IsValidData(valorCapital, plazo);
                if (!validValMonto)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_InvalidPlazoValor;
                    return result;
                }

                #endregion
                #region Valida el valor amparado de la libranza
                this._dal_MasterSimple.DocumentID = AppMasters.ccValorAmparado;
                long count = this._dal_MasterSimple.DAL_MasterSimple_Count(null, null, true);
                List<DTO_MasterBasic> masterVlrAmparado = this._dal_MasterSimple.DAL_MasterSimple_GetPaged(count, 1, null, null, true).ToList();

                for (int k = 0; k < masterVlrAmparado.Count; ++k)
                {
                    DTO_ccValorAmparado vlrAmparado = (DTO_ccValorAmparado)masterVlrAmparado[k];
                    int edadMaestra = Convert.ToInt32(vlrAmparado.ID.Value);
                    decimal vlrMonto = vlrAmparado.Valor.Value.Value;
                    if (k == 0)
                    {
                        if (edadMaestra <= edad && valorCapital < vlrMonto)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Cc_InvalidVlrLibranza;
                            return result;
                        }
                    }
                    else if (k != masterVlrAmparado.Count)
                    {
                        if (edad <= edadMaestra && valorCapital <= vlrMonto)
                            break;
                        else if (edad <= edadMaestra)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Cc_InvalidVlrLibranza;
                            return result;
                        }
                    }
                    else if (k == masterVlrAmparado.Count)
                    {
                        if (valorCapital > vlrMonto)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Cc_InvalidVlrLibranza;
                            return result;
                        }
                    }
                }

                #endregion
                #region Valida el SMMLV
                basic = (DTO_MasterBasic)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glDatosAnuales, periodo.Year.ToString(), true, false);
                if (basic == null)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidSMMLV;
                    return result;
                }
                else
                {
                    try
                    {
                        DTO_glDatosAnuales datos = (DTO_glDatosAnuales)basic;
                        SMMLV = Convert.ToInt32(datos.Valor11.Value.Value);
                    }
                    catch (Exception)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_InvalidSMMLV;
                        return result;
                    }
                }
                #endregion
                #region Valida la cuenta de IVA

                //Valida la cuenta de IVA
                if (string.IsNullOrWhiteSpace(ctaIVAID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaIVAComponentes + "&&" + string.Empty;

                    return result;
                }
                   
                ctaIVA = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaIVAID, true, false);
                porcIVA = ctaIVA.ImpuestoPorc.Value != null && ctaIVA.ImpuestoPorc.Value.HasValue ? ctaIVA.ImpuestoPorc.Value.Value : 0;

                #endregion

                #endregion
                #region Trae la lista de componentes

                int maxComp = 0;
                string maxCompID = string.Empty;
                List<DTO_ccCarteraComponente> comps = this._moduloGlobal.ccCarteraComponente_GetByLineaCredito(lineaCredID);
                List<DTO_ccCarteraComponente> compsAll = new List<DTO_ccCarteraComponente>();

                compsAll.AddRange(comps);

                #region Carga los componentes automáticos
                foreach (DTO_ccCarteraComponente c in comps)
                {
                    if (!string.IsNullOrWhiteSpace(c.ComponenteAUT.Value))
                    {
                        DTO_ccCarteraComponente compAuto = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, c.ComponenteAUT.Value, true, false);

                        if (compAuto.TipoComponente.Value.Value != (Int16)TipoComponente.DescuentoGiro)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCompAuto + "&&" + c.ID.Value.Trim() + "&&" + compAuto.ComponenteAUT.Value.Trim();
                            return result;
                        }

                        compsAll.Add(compAuto);
                    }
                }
                #endregion
                foreach (DTO_ccCarteraComponente c in compsAll)
                {
                    DTO_ccSolicitudComponentes anexo = new DTO_ccSolicitudComponentes();
                    anexo.ComponenteCarteraID.Value = c.ID.Value;
                    anexo.Descripcion.Value = c.Descriptivo.Value;
                    anexo.CuotaValor.Value = 0;
                    anexo.TotalValor.Value = 0;

                    componentes.Add(anexo);

                    //Revisa si es el máximo componente
                    if (maxComp == 0 || c.NumeroComp.Value.Value > maxComp)
                    {
                        maxComp = c.NumeroComp.Value.Value;
                        maxCompID = c.ID.Value;
                    }

                    DTO_ccCarteraComponente cT = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, c.ID.Value, true, false);
                    cacheCarteraComponentes.Add(c.ID.Value, cT);
                }

                #endregion
                #region Calcula los valores de todos los componentes

                int i = 1;
                bool isValid = true;
                result.Details = new List<DTO_TxResultDetail>();
                int vlrCuotaPrestamo = Evaluador.GetCuotaCreditoCartera(valorCapital, plazo, tasaTotal);
                decimal vlrBase = 0;

                #region Calcula los valores de los componentes de la linea del credito y agrega los componentes de pago anticipado (Interes, seguro y aportes)
                foreach (DTO_ccSolicitudComponentes comp in componentes)
                {
                    i++;
                    comp.CompInvisibleInd.Value = false;
                    if (comp.ComponenteCarteraID.Value != compCapital)
                    {
                        decimal tasaSaldo = 0;

                        bool reCalculaIntAnt = false;
                        DTO_TxResult resultLiquida = this.LiquidarComponente(lineaCredID, comp, valorCapital, vlrGiro, plazo, edad, SMMLV, ref vlrBase, out tasaSaldo,
                            porcIVA, dict_PagosAnticipados, dict_MayorValor, dict_FactorValorCredito, dict_ComponentesFijos, dict_SaldoPromediado, dict_TasasComponentes, 
                            dict_TiposValor, cacheLineaCred, cacheEdad, cacheMontos, cachePlazos, diasAnticipo, null, null, ref reCalculaIntAnt);

                        if (resultLiquida.Result == ResultValue.NOK)
                        {
                            isValid = false;
                            result.Result = ResultValue.NOK;

                            DTO_TxResultDetail rd = new DTO_TxResultDetail();
                            rd.line = i;
                            rd.Message = resultLiquida.ResultMessage;
                            result.Details.Add(rd);
                        }
                        else
                        {
                            if (tasaSaldo != 0 && vlrCuotaPrestamo == 0)
                                tasaTotal += tasaSaldo;

                            if (dict_PagosAnticipados[comp.ComponenteCarteraID.Value])
                            {
                                vlrDescuento += comp.TotalValor.Value.Value;
                                comp.CompInvisibleInd.Value = true;
                            }

                            if (dict_MayorValor[comp.ComponenteCarteraID.Value])
                            {
                                vlrAdicional += comp.TotalValor.Value.Value;
                                comp.CompInvisibleInd.Value = true;
                            }

                            if (cacheCarteraComponentes[comp.ComponenteCarteraID.Value].RecAnticipadoInd.Value.Value)
                            {

                                //Crea el nuevo componente
                                DTO_ccSolicitudComponentes cTemp = new DTO_ccSolicitudComponentes();
                                cTemp.CuotaValor.Value = 0;
                                cTemp.TotalValor.Value = comp.CuotaValor.Value;
                                cTemp.CompInvisibleInd.Value = true;

                                #region Componente Interes Anticipado
                                if (comp.ComponenteCarteraID.Value == compInteres && liquidaIntAnticipado == "1")
                                {
                                    //Valida que el componente existan en glControl
                                    if (string.IsNullOrWhiteSpace(compInteresAnti))
                                    {
                                        result.Result = ResultValue.NOK;
                                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ComponenteInteresAnticipado + "&&" + string.Empty;
                                        return result;
                                    }

                                    carteraComponenteDTO = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, compInteresAnti, true, false);
                                    cTemp.ComponenteCarteraID.Value = carteraComponenteDTO.ID.Value;
                                    cTemp.Descripcion.Value = carteraComponenteDTO.Descriptivo.Value;
                                    componentesAll.Add(cTemp);

                                    cacheCarteraComponentes[cTemp.ComponenteCarteraID.Value] = carteraComponenteDTO;
                                }
                                #endregion
                                #region Componente Seguro Anticipado
                                else if (comp.ComponenteCarteraID.Value == compSeguro)
                                {
                                    //Valida que el componente existan en glControl
                                    if (string.IsNullOrWhiteSpace(compSeguroAnti))
                                    {
                                        result.Result = ResultValue.NOK;
                                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ComponenteSeguroAnti + "&&" + string.Empty;
                                        return result;
                                    }
                                    carteraComponenteDTO = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, compSeguroAnti, true, false);
                                    cTemp.ComponenteCarteraID.Value = carteraComponenteDTO.ID.Value;
                                    cTemp.Descripcion.Value = carteraComponenteDTO.Descriptivo.Value;
                                    //cTemp.Porcentaje.Value = tasa;
                                    componentesAll.Add(cTemp);

                                    cacheCarteraComponentes[cTemp.ComponenteCarteraID.Value] = carteraComponenteDTO;
                                }
                                #endregion
                                #region Componente Aporte Anticipado
                                else if (comp.ComponenteCarteraID.Value == compAportes)
                                {
                                    //Valida que el componente existan en glControl
                                    if (string.IsNullOrWhiteSpace(compAportesAnti))
                                    {
                                        result.Result = ResultValue.NOK;
                                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ComponenteAporteAnti + "&&" + string.Empty;
                                        return result;
                                    }
                                    carteraComponenteDTO = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, compAportesAnti, true, false);
                                    cTemp.ComponenteCarteraID.Value = carteraComponenteDTO.ID.Value;
                                    cTemp.Descripcion.Value = carteraComponenteDTO.Descriptivo.Value;
                                    //cTemp.Porcentaje.Value = tasa;
                                    componentesAll.Add(cTemp);

                                    cacheCarteraComponentes[cTemp.ComponenteCarteraID.Value] = carteraComponenteDTO;
                                }
                                #endregion
                            }
                        }
                    }
                }
                if (!isValid)
                    return result;

                #endregion
                #region Calcula los valores de los componentes anticipados
                foreach (DTO_ccSolicitudComponentes comp in componentesAll)
                {
                    i++;

                    decimal tasaSaldo = 0;
                    DTO_TxResult resultLiquida = null;
                    if (comp.ComponenteCarteraID.Value == compInteresAnti)
                    {
                        #region Calcula el interes anticipado (si existe)

                        //Calcula la tasa por defecto del interes anticipado
                        bool reCalculaIntAnt = false;
                        decimal interesCte = dict_TasasComponentes[compInteres];
                        resultLiquida = this.LiquidarComponente(lineaCredID, comp, valorCapital, vlrGiro, plazo, edad, SMMLV, ref vlrBase, out tasaSaldo, porcIVA,
                            dict_PagosAnticipados, dict_MayorValor, dict_FactorValorCredito, dict_ComponentesFijos, dict_SaldoPromediado, dict_TasasComponentes, dict_TiposValor,
                            cacheLineaCred, cacheEdad, cacheMontos, cachePlazos, diasAnticipo, null, interesCte, ref reCalculaIntAnt, true);

                        if(resultLiquida.Result  == ResultValue.OK && reCalculaIntAnt)
                        {
                            #region Re calcula el interes anticipado en base a el interes corriente

                            //Calcula la tasa anticipada a partir de la tasa vencida
                            decimal tasaVencida = dict_TasasComponentes[compInteresAnti] / 100;
                            decimal tasaAnticipada = indCalculoInteresAnticipado == "1" ? (tasaVencida / (1 + tasaVencida)) * 100 : tasaVencida * 100;

                            //Calcula el valor del componente int ant a partir del int cte
                            resultLiquida = this.LiquidarComponente(lineaCredID, comp, valorCapital, vlrGiro, plazo, edad, SMMLV, ref vlrBase, out tasaSaldo, porcIVA,
                                dict_PagosAnticipados, dict_MayorValor, dict_FactorValorCredito, dict_ComponentesFijos, dict_SaldoPromediado, dict_TasasComponentes, 
                                dict_TiposValor, cacheLineaCred, cacheEdad, cacheMontos, cachePlazos, diasAnticipo, null, tasaAnticipada, ref reCalculaIntAnt, true);

                            #endregion
                        }
                        
                        if (resultLiquida.Result == ResultValue.NOK)
                        {
                            result.Result = ResultValue.NOK;

                            DTO_TxResultDetail rd = new DTO_TxResultDetail();
                            rd.line = i;
                            rd.Message = resultLiquida.ResultMessage;
                            result.Details.Add(rd);

                            return result;
                        }

                        #endregion
                    }
                    else
                    {
                        bool reCalculaIntAnt = false;
                        resultLiquida = this.LiquidarComponente(lineaCredID, comp, valorCapital, vlrGiro, plazo, edad, SMMLV, ref vlrBase, out tasaSaldo, porcIVA,
                            dict_PagosAnticipados, dict_MayorValor, dict_FactorValorCredito, dict_ComponentesFijos, dict_SaldoPromediado, dict_TasasComponentes, 
                            dict_TiposValor, cacheLineaCred, cacheEdad, cacheMontos, cachePlazos, diasAnticipo, null, null, ref reCalculaIntAnt);
                    }

                    if (resultLiquida.Result == ResultValue.NOK)
                    {
                        result.Result = ResultValue.NOK;

                        DTO_TxResultDetail rd = new DTO_TxResultDetail();
                        rd.line = i;
                        rd.Message = resultLiquida.ResultMessage;
                        result.Details.Add(rd);

                        return result;
                    }

                    if (tasaSaldo != 0 && vlrCuotaPrestamo == 0)
                        tasaTotal += tasaSaldo;

                    if (dict_PagosAnticipados[comp.ComponenteCarteraID.Value])
                        vlrDescuento += comp.TotalValor.Value.Value;

                    if (dict_MayorValor[comp.ComponenteCarteraID.Value])
                        vlrAdicional += comp.TotalValor.Value.Value;
                }


                #endregion

                //Agrega los componentes de la linea del credito a la lista de los nuevos componentes
                componentesAll.AddRange(componentes);

                #endregion
                #region Calcula el porcentaje de interes total y el porcentaje de capital

                decimal totalCapital = 0;
                foreach (DTO_ccSolicitudComponentes comp in componentesAll)
                {
                    //Porcentaje de interes
                    if (comp.ComponenteCarteraID.Value != compCapital)
                    {
                        comp.Porcentaje.Value = dict_TasasComponentes[comp.ComponenteCarteraID.Value] / 100;
                        if (dict_MayorValor[comp.ComponenteCarteraID.Value] && dict_FactorValorCredito[comp.ComponenteCarteraID.Value])
                            sumInteres += dict_TasasComponentes[comp.ComponenteCarteraID.Value] / 100;
                    }

                    //Porcntaje de capital 
                    if(comp.ComponenteCarteraID.Value == compCapital || dict_MayorValor[comp.ComponenteCarteraID.Value])
                    {
                        totalCapital += comp.TotalValor.Value.Value;
                    }
                }

                foreach (DTO_ccSolicitudComponentes comp in componentesAll)
                {
                    //Porcntaje de capital 
                    if (comp.ComponenteCarteraID.Value == compCapital || dict_MayorValor[comp.ComponenteCarteraID.Value])
                    {
                        decimal porCapital = comp.TotalValor.Value.Value * 100 / totalCapital;
                        //comp.por
                    }
                }

                #endregion
                #region Calcula el valor del crédito
                vlrBase = vlrBase + valorCapital;
                vlrCredito = Math.Round(vlrBase / (1 - sumInteres));
                #endregion
                #region Asigna los valores a los componentes de mayor valor y factor valor de crédito
                if(componentesAll.Count == 0)
                {
                    planPagos = new DTO_PlanDePagos();
                    return planPagos; 
                }

                //Asigna el componente fijo de resta al final
                DTO_ccSolicitudComponentes compMax_DTO = componentesAll.Where(x => x.ComponenteCarteraID.Value == maxCompID).First();
                componentesAll.Remove(compMax_DTO);
                componentesAll.Add(compMax_DTO);

                decimal vlrTemp = 0;
                bool found = false;
                foreach (DTO_ccSolicitudComponentes comp in componentesAll)
                {
                    if (comp.ComponenteCarteraID.Value != compCapital && dict_FactorValorCredito[comp.ComponenteCarteraID.Value])
                    {
                        if (dict_MayorValor[comp.ComponenteCarteraID.Value])
                        {
                            #region Valores anticipados

                            if (maxCompID == comp.ComponenteCarteraID.Value)
                            {
                                if (found)
                                    comp.TotalValor.Value = vlrCredito - vlrBase - vlrTemp;
                                else
                                {
                                    if (comp.ComponenteCarteraID.Value == compInteresAnti)
                                    {
                                        decimal tasaDiaria = comp.Porcentaje.Value.Value * (Convert.ToDecimal(diasAnticipo) / 30);
                                        comp.TotalValor.Value = Math.Round(vlrCredito * tasaDiaria / 100);
                                    }
                                    else
                                        comp.TotalValor.Value = Math.Round(vlrCredito * comp.Porcentaje.Value.Value);
                                }
                            }
                            else
                            {
                                found = true;

                                if (comp.ComponenteCarteraID.Value == compInteresAnti)
                                {
                                    decimal tasaDiaria = comp.Porcentaje.Value.Value * (Convert.ToDecimal(diasAnticipo) / 30);
                                    comp.TotalValor.Value = Math.Round(vlrCredito * tasaDiaria / 100);
                                }
                                else
                                    comp.TotalValor.Value = Math.Round(vlrCredito * comp.Porcentaje.Value.Value);

                                vlrTemp += comp.TotalValor.Value.Value;
                            }

                            #endregion
                        }
                        else
                        {
                            #region Valor credito

                            decimal valorComp = Math.Round(vlrCredito * comp.Porcentaje.Value.Value);
                            if (dict_TiposValor[comp.ComponenteCarteraID.Value] == (Int16)TipoValor.Cuota)
                            {
                                comp.CuotaValor.Value = valorComp;
                                comp.TotalValor.Value = valorComp * plazo;
                            }
                            else if (dict_TiposValor[comp.ComponenteCarteraID.Value] == (Int16)TipoValor.Valor)
                            {
                                comp.CuotaValor.Value = valorComp / plazo;
                                comp.TotalValor.Value = valorComp;
                            }
                            else
                                comp.TotalValor.Value = valorComp;


                            #endregion
                        }
                    }
                }

                #endregion
                #region Llena los valores de las cuotas

                //Trae el valor de la cuota
                int vlrAd = Convert.ToInt32(vlrCredito);
                saldoParcial = vlrAd;
                if (vlrCuotaPrestamo == 0)
                    vlrCuota = Evaluador.GetCuotaCreditoCartera(vlrAd, plazo, tasaTotal);
                else
                    vlrCuota = vlrCuotaPrestamo;

                if (vlrCuota != 0)
                {
                    for (i = 1; i <= plazo; ++i)
                    {
                        int saldoXCapital = 0;
                        decimal vlrRadAnticipo = 0;
                        DTO_Cuota cuota = new DTO_Cuota();
                        List<string> componentesCuota = new List<string>();
                        List<int> valoresComponentesCuota = new List<int>();

                        cuota.NumCuota = i;
                        #region Calculo del capital para la ultima cuota
                        if (i == plazo)
                        {
                            cuota.Capital = saldoParcial;
                            capitalTotal += cuota.Capital;
                        }
                        #endregion
                        #region Calculo del valor de todas las cuotas excepto la ultima
                        if (i != plazo)
                        {
                            foreach (DTO_ccSolicitudComponentes comp in componentes)
                            {
                                if (comp.ComponenteCarteraID.Value != compCapital &&
                                    !dict_PagosAnticipados[comp.ComponenteCarteraID.Value] &&
                                    !dict_MayorValor[comp.ComponenteCarteraID.Value])
                                {
                                    int temp = 0;
                                    decimal tasa = dict_TasasComponentes[comp.ComponenteCarteraID.Value];
                                    #region Asigna los valores de la cuota
                                    if (comp.ComponenteCarteraID.Value == compInteres)
                                    {
                                        #region Intereses

                                        cuota.Intereses = Convert.ToInt32(tasa * saldoParcial / 100);
                                        saldoXCapital += cuota.Intereses;
                                        temp = cuota.Intereses;

                                        #endregion
                                    }
                                    else if (comp.ComponenteCarteraID.Value == compSeguro)
                                    {
                                        #region Seguro
                                        descSeguro = comp.Descripcion.Value;

                                        if (!dict_ComponentesFijos[comp.ComponenteCarteraID.Value])
                                        {
                                            cuota.Seguro = Convert.ToInt32(tasa * saldoParcial / 100);
                                            temp = cuota.Seguro;

                                            if (!dict_SaldoPromediado[comp.ComponenteCarteraID.Value])
                                                saldoXCapital += cuota.Seguro;
                                        }
                                        else
                                            cuota.Seguro = (int)comp.CuotaValor.Value.Value;

                                        #endregion
                                    }
                                    else if (!dict_ComponentesFijos[comp.ComponenteCarteraID.Value])
                                    {
                                        #region Componentes Variables

                                        componentesCuota.Add(comp.Descripcion.Value);
                                        int vlrCompCouta = Convert.ToInt32(tasa * saldoParcial / 100);
                                        valoresComponentesCuota.Add(vlrCompCouta);
                                        temp = vlrCompCouta;

                                        if (!dict_SaldoPromediado[comp.ComponenteCarteraID.Value])
                                            saldoXCapital += vlrCompCouta; 

                                        #endregion
                                    }
                                    else
                                    {
                                        #region Componentes fijos

                                        componentesCuota.Add(comp.Descripcion.Value);
                                        valoresComponentesCuota.Add(Convert.ToInt32(comp.CuotaValor.Value.Value));

                                        #endregion
                                    }
                                    #endregion
                                    #region Calculo de saldos y valores de componentes fijos y variables

                                    if (!dict_ComponentesFijos[comp.ComponenteCarteraID.Value])
                                    {
                                        if (i == 1)
                                            dict_TotalComponentesSaldo.Add(comp.ComponenteCarteraID.Value, temp);
                                        else
                                            dict_TotalComponentesSaldo[comp.ComponenteCarteraID.Value] += temp;
                                    }

                                    #endregion
                                    #region Revisa si es un componente con codigo indicador de anticipo radicado

                                    DTO_ccCarteraComponente c = cacheCarteraComponentes[comp.ComponenteCarteraID.Value];
                                    if (c.RecAnticipadoInd.Value.Value)
                                        vlrRadAnticipo += comp.TotalValor.Value.Value;

                                    #endregion
                                }
                            }
                        }

                        #endregion
                        #region Calculo el valor de los componentes para la ultima cuota

                        if (i == plazo)
                        {
                            DTO_ccSolicitudComponentes comp = null;

                            //Asigna la info del seguro
                            if (dict_TasasComponentes.ContainsKey(compSeguro))
                            {
                                decimal tasa = dict_TasasComponentes[compSeguro];
                                comp = componentes.Where(x => x.ComponenteCarteraID.Value == compSeguro).First();
                                if (!dict_ComponentesFijos[compSeguro])
                                {
                                    cuota.Seguro = Convert.ToInt32(tasa * saldoParcial / 100);
                                    dict_TotalComponentesSaldo[compSeguro] += cuota.Seguro;
                                }
                                else
                                    cuota.Seguro = (int)comp.CuotaValor.Value.Value;

                                componentesUsuario.Insert(0, comp);
                            }
                            else
                                cuota.Seguro = 0;

                            //Otros componentes
                            int vlrVariableFinal = 0;
                            #region Asigna los valores de la cuota
                            foreach (string tComp in dict_ComponentesFijos.Keys)
                            {
                                if (tComp != compSeguro && tComp != compInteres && tComp != compCapital && !dict_MayorValor[tComp] && !dict_PagosAnticipados[tComp])
                                {
                                    comp = componentesAll.Where(x => x.ComponenteCarteraID.Value == tComp).First();
                                    if (!dict_ComponentesFijos[tComp])
                                    {
                                        componentesCuota.Add(comp.Descripcion.Value);
                                        int cTemp = Convert.ToInt32(dict_TasasComponentes[tComp] * saldoParcial / 100);
                                        valoresComponentesCuota.Add(cTemp);
                                        dict_TotalComponentesSaldo[tComp] += cTemp;

                                        vlrVariableFinal += cTemp;
                                    }
                                    else
                                    {
                                        componentesCuota.Add(comp.Descripcion.Value);
                                        valoresComponentesCuota.Add(Convert.ToInt32(comp.CuotaValor.Value.Value));
                                    }
                                    componentesUsuario.Add(comp);
                                }
                            }
                            #endregion

                            //Asigna la info del interes
                            if (!dict_ComponentesFijos.ContainsKey(compSeguro) || dict_ComponentesFijos[compSeguro] || dict_SaldoPromediado[compSeguro])
                                cuota.Intereses = vlrCuota - saldoParcial - vlrVariableFinal;
                            else
                                cuota.Intereses = vlrCuota - saldoParcial - cuota.Seguro - vlrVariableFinal;

                            dict_TotalComponentesSaldo[compInteres] += cuota.Intereses;
                            comp = componentes.Where(x => x.ComponenteCarteraID.Value == compInteres).First();

                            if (dict_TasasComponentes.ContainsKey(compSeguro))
                                componentesUsuario.Insert(1, comp);
                            else
                                componentesUsuario.Insert(0, comp);
                        }

                        #endregion
                        #region Calculo del capital para todas las cuotas menos la ultima
                        if (i != plazo)
                        {
                            // Asignan los valores de los componentes de anticipo
                            cuota.Capital = vlrCuota - saldoXCapital;
                            capitalTotal += cuota.Capital;
                        }
                        #endregion
                        #region Asigna la fecha de la cuota
                        if (i == 1)
                        {
                            #region Cuota1
                            if (fechaCuota1 != null)
                            {
                                fechaCuota = fechaCuota1;
                                cuota.Fecha = fechaCuota;
                            }
                            else if (fechaLiquidacion.Day <= diaTope && recaudoMes == true)
                            {
                                cuota.Fecha = fechaCuota;
                            }
                            else if (fechaLiquidacion.Day <= diaTope && recaudoMes == false)
                            {
                                if (fechaCuota.Month == 2)
                                    fechaCuota = new DateTime(fechaCuota.Year, fechaCuota.AddMonths(i).Month, 30);
                                else
                                    fechaCuota = fechaCuota.AddMonths(i);
                                cuota.Fecha = fechaCuota;
                            }
                            else if (fechaLiquidacion.Day > diaTope && recaudoMes == true)
                            {
                                if (fechaCuota.Month == 2)
                                    fechaCuota = new DateTime(fechaCuota.Year, fechaCuota.AddMonths(i).Month, 30);
                                else
                                    fechaCuota = fechaCuota.AddMonths(i);
                                cuota.Fecha = fechaCuota;
                            }
                            else
                            {
                                if (fechaCuota.Month == 2)
                                    fechaCuota = new DateTime(fechaCuota.Year, fechaCuota.AddMonths(i + 1).Month, 30);
                                else
                                    fechaCuota = fechaCuota.AddMonths(i + 1);
                                cuota.Fecha = fechaCuota;
                            }
                            #endregion
                        }
                        else
                        {
                            //if (fechaCuota.Month == 2)
                            //{
                            //    cuota.Fecha = fechaCuota.AddMonths(i - 1);
                            //    if (cuota.Fecha.Month != 2)
                            //        cuota.Fecha = cuota.Fecha.AddDays(2);
                            //}
                            //else
                                cuota.Fecha = fechaCuota.AddMonths(i - 1);
                        }
                        #endregion

                        cuota.Componentes = componentesCuota;
                        cuota.ValoresComponentes = valoresComponentesCuota;

                        cuota.ValorCuota = (from c in valoresComponentesCuota select c).Sum() + cuota.Capital + cuota.Intereses + cuota.Seguro;

                        cuotas.Add(cuota);
                        saldoParcial -= cuota.Capital;
                    }
                }

                #endregion
                #region Recalcula el valor de cuota cuando hay componentes con saldo promediado (Pendiente componentes variables != seguro

                if(dict_SaldoPromediado[compSeguro])
                {
                    decimal vlrTotalSeguro = cuotas.Sum(c => c.Seguro);
                    int seguroProm = Convert.ToInt32(Math.Round(vlrTotalSeguro / plazo));
                    dict_TotalComponentesSaldo[compSeguro] = seguroProm * plazo;

                    for (i = 0; i < plazo; ++i)
                    {
                        DTO_Cuota cuota = cuotas[i];
                        cuota.Seguro = seguroProm;
                        cuota.ValorCuota = (from c in cuota.ValoresComponentes select c).Sum() + cuota.Capital + cuota.Intereses + cuota.Seguro;
                    }
                }

                #endregion
                #region Agrega el capital y calcula los valores de los saldos
                foreach (DTO_ccSolicitudComponentes comp in componentes)
                {
                    if (comp.ComponenteCarteraID.Value == compCapital)
                    {
                        comp.TotalValor.Value = capitalTotal;
                        comp.CuotaValor.Value = Convert.ToInt32(comp.TotalValor.Value.Value / plazo);
                        componentesUsuario.Insert(0, comp);
                    }
                    else if (!dict_MayorValor[comp.ComponenteCarteraID.Value])
                    {
                        if (comp.ComponenteCarteraID.Value == compInteres || !dict_ComponentesFijos[comp.ComponenteCarteraID.Value])
                        {
                            comp.TotalValor.Value = dict_TotalComponentesSaldo[comp.ComponenteCarteraID.Value];
                            comp.CuotaValor.Value = Convert.ToInt32(comp.TotalValor.Value.Value / plazo);
                            comp.Porcentaje.Value = dict_TasasComponentes[comp.ComponenteCarteraID.Value];
                        }
                    }
                }

                #endregion
                #region Asigna las listas al plan de pagos
                //Organiza los componentes de usuario por componente de cartera

                dict_ComponentesFijos[compSeguro] = false;

                planPagos.ComponentesFijos = dict_ComponentesFijos;
                planPagos.Tasas = dict_TasasComponentes;
                planPagos.ComponentesAll = (from c in componentesAll orderby c.ComponenteCarteraID.Value select c).ToList();
                planPagos.ComponentesUsuario = (from c in componentesUsuario orderby c.ComponenteCarteraID.Value select c).ToList();
                planPagos.Cuotas = cuotas;

                decimal cuotaLibranza = 0;
                foreach (DTO_ccSolicitudComponentes c in planPagos.ComponentesUsuario)
                    cuotaLibranza += c.TotalValor.Value.Value;
                #endregion
                #region Asigna Valores calculados de Campos Extra
                planPagos.VlrAdicional = Convert.ToInt32(vlrCredito - valorCapital);
                planPagos.VlrDescuento = Convert.ToInt32(vlrDescuento);
                planPagos.VlrPrestamo = (int)vlrCredito;
                planPagos.VlrCompra = Convert.ToInt32(vlrCompra);
                planPagos.VlrGiro = valorCapital - planPagos.VlrCompra - planPagos.VlrDescuento;
                planPagos.VlrLibranza = Convert.ToInt32(cuotaLibranza);
                planPagos.VlrCuota = Convert.ToInt32(planPagos.VlrLibranza / plazo);
                planPagos.TasaTotal = tasaTotal;
                #endregion

                return planPagos;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetLiquidacionCartera");
                return result;
            }
        }

        /// <summary>
        /// Funcion que actualiza la fecha del plan de pagos y la informacion del credito
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="credito">DTO con la informacion del credito y su plan de pagos</param>
        /// <param name="insideAnotherTx">Indicador para establecer si se encuentra dentor de otra transaccion</param>
        /// <returns></returns>
        public List<DTO_SerializedObject> CambiaFechaPlanPagos(int documentID, DTO_Credito credito, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Generales
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloAplicacion = (ModuloAplicacion)this.GetInstance(typeof(ModuloAplicacion), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            bool isValid = true;
            #endregion
            try
            {
                int i = 0;
                #region Actualiza el credito
                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito.CreditoDocu);
                #endregion
                #region Actualiza el plan de pagos
                foreach (DTO_ccCreditoPlanPagos pp in credito.PlanPagos)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / credito.PlanPagos.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(pp);
                    if (i == 1)
                    {
                        DTO_Alarma alarma = this.GetFirstMailInfo(pp.NumeroDoc.Value.Value, false);
                        results.Add(alarma);
                    }
                }
                #endregion
                #region Guarda en la bitacora
                this._moduloAplicacion.aplBitacora_Add(this.Empresa.ID.Value, documentID, (int)FormsActions.Add, DateTime.Now,
                    this.UserId, this.Empresa.ID.Value, documentID.ToString(), credito.CreditoDocu.NumeroDoc.Value.ToString(), string.Empty,
                    string.Empty, string.Empty, 0, 0, 0);
                #endregion
                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "CambiaFechaPlanPagos_Add");
                results.Add(result);
                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion
        
        #region Creacion Creditos

        #region Solicitud Crédito

        /// <summary>
        /// Trae la info de las solicitudes de un cliente
        /// </summary>
        /// <param name="cliente">Identificador del cliente</param>
        /// <returns><Retorna la info de un credito/returns>
        public List<DTO_ccSolicitudDocu> GetSolicitudesByCliente(string cliente)
        {
            try
            {
                this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByCliente(cliente);
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetSolicitudesByCliente");
                throw ex;
            }
        }

        /// <summary>
        /// Retorna el Listado de las solicitudes de viabilidad
        /// </summary>
        /// <param name="documentoID">Id del Documento</param>
        /// <param name="actFlujoID">Actividad de flujo del documento</param>
        /// <returns>Retorna un listado de las solicitudes que se encuentrar para aprobar o rechazar</returns> 
        public List<DTO_ccSolicitudDocu> GetSolicitudesByActividad(string actFlujoID)
        {
            try
            {
                this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)this.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_seUsuario seUsuario = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);
                string usuarioID = seUsuario.ID.Value;

                return _dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByActividad(actFlujoID, usuarioID);
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "SolicitudDocu_GetForViabilidad");
                throw exception;
            }
        }

        /// <summary>
        /// Trae la informacion de una solicitud de credito segun a libranza
        /// </summary>
        /// <param name="libranzaID">Libranza</param>
        /// <param name="actFlujoID">Identificador de la actividad de flujo</param>
        /// <returns>Retorna la informacion de una solicitud de credito</returns>
        public DTO_SolicitudLibranza SolicitudLibranza_GetByLibranza(int libranzaID, string actFlujoID)
        {
            try
            {
                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccSolicitudAnexo = (DAL_ccSolicitudAnexo)base.GetInstance(typeof(DAL_ccSolicitudAnexo), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccTareaChequeoLista = (DAL_ccTareaChequeoLista)base.GetInstance(typeof(DAL_ccTareaChequeoLista), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DTO_SolicitudLibranza result = new DTO_SolicitudLibranza();
                result.DocCtrl = null;

                DTO_glDocumentoControl ctrl = this._moduloGlobal.glDocumentoControl_GetByLibranzaSolicitud(libranzaID, actFlujoID, true);

                //Si no se ha enviado a aprobar trae la info
                if (ctrl == null)
                    ctrl = this._moduloGlobal.glDocumentoControl_GetByLibranzaSolicitud(libranzaID, actFlujoID, false);

                if (ctrl != null)
                {
                    DTO_ccSolicitudDocu docu = null;
                    List<DTO_ccSolicitudAnexo> anexos = null;
                    List<DTO_ccTareaChequeoLista> tareas = null;

                    docu = this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByNumeroDoc(ctrl.NumeroDoc.Value.Value);
                    if (ctrl.Estado.Value.Value == (int)EstadoDocControl.SinAprobar)
                    {
                        anexos = new List<DTO_ccSolicitudAnexo>();
                        #region Trae los anexos existentes y agrega los nuevos
                        List<DTO_MasterBasic> basics = this._moduloGlobal.ccPagaduriaAnexos_GetByPagaduria(docu.PagaduriaID.Value);
                        List<DTO_ccSolicitudAnexo> anexosTemp = this._dal_ccSolicitudAnexo.DAL_ccSolicitudAnexo_GetByNumeroDoc(ctrl.NumeroDoc.Value.Value);

                        foreach (DTO_MasterBasic basic in basics)
                        {
                            List<DTO_ccSolicitudAnexo> itemsAdded = anexosTemp.Where(x => x.DocumListaID.Value == basic.ID.Value).ToList();
                            if (itemsAdded.Count > 0)
                                anexos.Add(itemsAdded.First());
                            else
                            {
                                DTO_ccSolicitudAnexo _footer = new DTO_ccSolicitudAnexo();
                                _footer.DocumListaID.Value = basic.ID.Value;
                                _footer.Descriptivo.Value = basic.Descriptivo.Value;
                                _footer.Descripcion.Value = string.Empty;
                                _footer.IncluidoInd.Value = false;

                                anexos.Add(_footer);
                            }
                        }
                        #endregion

                        //Asigna las tareas 
                        tareas = new List<DTO_ccTareaChequeoLista>();
                    }
                    else
                    {
                        anexos = this._dal_ccSolicitudAnexo.DAL_ccSolicitudAnexo_GetByNumeroDoc(ctrl.NumeroDoc.Value.Value);
                        tareas = this._dal_ccTareaChequeoLista.DAL_ccTareaChequeoLista_GetNumeroDoc(ctrl.NumeroDoc.Value.Value);
                    }

                    result.AddData(ctrl, docu, anexos, tareas);
                }

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudLibranza_GetByLibranza");
                throw ex;
            }
        }

        /// <summary>
        /// Trae el NumeroDoc de la Tarea
        /// </summary>
        /// <param name="NumeroDoc"></param>
        /// <returns>Trae el NumeroDoc de la Tarea</returns>
        public string EstadoSolicitud_GetByNumeroDoc(string _numeroLibranza)
        {
            try
            {
                this._dal_TareaNumeroDoc = (DAL_glActividadEstado)base.GetInstance(typeof(DAL_glActividadEstado), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                string result = this._dal_TareaNumeroDoc.DAL_glActividadEstado_GetStatedbyNumeroDoc(_numeroLibranza);

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudLibranza_GetByLibranza");
                throw ex;
            }
        }

        /// <summary>
        ///  Actualizar el campo de seUsuario del glDocumentoControl
        /// </summary>
        /// <param name="ctrSolicitud"></param>
        /// <returns>Actualizar el campo de seUsuario del glDocumentoControl</returns>
        public void Solicitud_UpdateUSer(DTO_glDocumentoControl ctrSolicitud)
        {
            try
            {
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal.glDocumentoControl_Update(ctrSolicitud,true,false);

            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudLibranza_GetByLibranza");
                throw ex;
            }
        }

        /// <summary>
        /// Agrega informacion a la tabla ccSolicitudDocu
        /// </summary>
        /// <param name="documentoID">Documento que ejecuta la transaccione</param>
        /// <param name="solicitud">Solicitud que se debe agregar</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult SolicitudLibranza_Add(int documentoID, DTO_SolicitudLibranza solicitud, bool isAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudAnexo = (DAL_ccSolicitudAnexo)base.GetInstance(typeof(DAL_ccSolicitudAnexo), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            try
            {
                DTO_glDocumentoControl ctrl = solicitud.DocCtrl;
                DTO_ccSolicitudDocu header = solicitud.Header;
                List<DTO_ccSolicitudAnexo> anexos = solicitud.Anexos;
                List<DTO_ccTareaChequeoLista> footer = solicitud.TareasChequeos;

                if (ctrl.NumeroDoc.Value.HasValue && ctrl.NumeroDoc.Value.Value != 0)
                {
                    #region Actualiza la info

                    //Documento Control
                    ctrl.TerceroID.Value = header.ClienteID.Value;
                    ctrl.DocumentoTercero.Value = header.Libranza.Value.ToString();
                    DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Update(ctrl, true, true);
                    if (resultGLDC.Message == "NOK")
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);

                        return result;
                    }

                    //Actualiaza el flujo del documento
                    if (header.DevueltaInd.Value.HasValue && header.DevueltaInd.Value.Value)
                    {
                        #region Trae la lista de actividades a cerrar
                      
                        string actividadSolicitud = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.SolicitudLibranza).FirstOrDefault();
                        if (!string.IsNullOrWhiteSpace(actividadSolicitud))
                        {
                            //Filtro
                            DTO_glConsulta q = new DTO_glConsulta();
                            List<DTO_glConsultaFiltro> filtros = new List<DTO_glConsultaFiltro>();
                            DTO_glConsultaFiltro filtro = new DTO_glConsultaFiltro()
                            {
                                CampoFisico = "ActividadPadre",
                                ValorFiltro = actividadSolicitud,
                                OperadorFiltro = OperadorFiltro.Igual,
                                OperadorSentencia = "OR"
                            };
                            filtros.Add(filtro);
                            q.Filtros = filtros;

                            //Trae la lista actividades del flujo
                            DAL_MasterComplex complexDAL = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                            complexDAL.DocumentID = AppMasters.glProcedimientoFlujo;

                            long count = complexDAL.DAL_MasterComplex_Count(q, true);
                            List<DTO_MasterComplex> list = complexDAL.DAL_MasterComplex_GetPaged(count, 1, q, true).ToList();
                            List<DTO_glProcedimientoFlujo> nuevasAct = list.Cast<DTO_glProcedimientoFlujo>().ToList();

                            foreach (DTO_glProcedimientoFlujo f in nuevasAct)
                            {
                                //Cierra Solicitud
                                result = this.AsignarFlujo(documentoID, ctrl.NumeroDoc.Value.Value, f.ActividadHija.Value, true, string.Empty);
                                if (result.Result == ResultValue.NOK)
                                    return result;
                            }
                        }

                        #endregion

                        ////Abre la actividad original
                        //this._dal_ccSolicitudDevolucion = (DAL_ccSolicitudDevolucion)this.GetInstance(typeof(DAL_ccSolicitudDevolucion), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                        //List<DTO_ccSolicitudDevolucion> devoluciones = this._dal_ccSolicitudDevolucion.DAL_ccSolicitudDevolucion_GetByLibranza(ctrl.NumeroDoc.Value.Value);
                        //this.AsignarAlarma(ctrl.NumeroDoc.Value.Value, devoluciones.First().ActividadFlujoID.Value, true);
                    }
                    //else
                    //{
                    if (header.NegociosGestionarInd.Value.HasValue && header.NegociosGestionarInd.Value.Value)
                    {
                        List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.SolicitudLibranza);
                        string actSolicitudLibranzas = actividades[0];
                        string ActFlujoRadicacion = this.GetControlValueByCompany(ModulesPrefix.dr, AppControl.dr_Radicacion);
                        this.AsignarFlujo(documentoID, ctrl.NumeroDoc.Value.Value, actSolicitudLibranzas, false, string.Empty);
                        header.NegociosGestionarInd.Value = false;

                    }
                    //}

                    //Solicitud Docu
                    DTO_ccSolicitudDocu docu = this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByNumeroDoc(ctrl.NumeroDoc.Value.Value);
                    bool newAnexos = header.PagaduriaID.Value == docu.PagaduriaID.Value ? false : true;
                    header.DevueltaInd.Value = false;
                    this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_Update(header);

                    //Anexos
                    this._dal_ccSolicitudAnexo.DAL_ccSolicitudAnexo_Delete(ctrl.NumeroDoc.Value.Value);

                    #region Borra las tablas complementarias de la solicitud(Si existen)
                    this._dal_ccSolicitudPlanPagos = (DAL_ccSolicitudPlanPagos)base.GetInstance(typeof(DAL_ccSolicitudPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    this._dal_ccSolicitudComponentes = (DAL_ccSolicitudComponentes)base.GetInstance(typeof(DAL_ccSolicitudComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    this._dal_ccSolicitudCompraCartera = (DAL_ccSolicitudCompraCartera)base.GetInstance(typeof(DAL_ccSolicitudCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    this._dal_ccSolicitudDetallePago = (DAL_ccSolicitudDetallePago)base.GetInstance(typeof(DAL_ccSolicitudDetallePago), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    this._dal_ccSolicitudCtasExtra = (DAL_ccSolicitudCtasExtra)base.GetInstance(typeof(DAL_ccSolicitudCtasExtra), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                    //Borra el plan de pagos
                    this._dal_ccSolicitudPlanPagos.DAL_ccSolicitudPlanPagos_Delete(ctrl.NumeroDoc.Value.Value);
                    //Borra los componentes de cartera
                    this._dal_ccSolicitudComponentes.DAL_ccSolicitudComponentes_Delete(ctrl.NumeroDoc.Value.Value);
                    //Borra la Compra Cartera
                    this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_Delete(ctrl.NumeroDoc.Value.Value);
                    //Borra los detalles de pago a terceros
                    this._dal_ccSolicitudDetallePago.DAL_ccSolicitudDetallePago_Delete(ctrl.NumeroDoc.Value.Value);
                    //Borra las cuotas extras
                    this._dal_ccSolicitudCtasExtra.DAL_ccSolicitudCtasExtra_Delete(ctrl.NumeroDoc.Value.Value);

                    #endregion

                    #endregion
                }
                else
                {
                    #region Agrega la info

                    #region Variables 

                    //Por defecto
                    string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                    string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                    string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                    string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);

                    //Consecutivo de la solicitud
                    string EmpNro = this.Empresa.NumeroControl.Value;
                    string _modId = ((int)ModulesPrefix.cc).ToString();
                    string keyControl = EmpNro + _modId + AppControl.cc_ConsecutivoSolicitudes;

                    DTO_glControl consecutivoSolDTO = this._moduloGlobal.GetControlByID(Convert.ToInt32(keyControl));
                    int consecutivoSol = string.IsNullOrWhiteSpace(consecutivoSolDTO.Data.Value) ? 1 : Convert.ToInt32(consecutivoSolDTO.Data.Value) + 1;

                    #endregion
                    #region Documento Control
                    ctrl.PrefijoID.Value = defPrefijo;
                    ctrl.ProyectoID.Value = defProyecto;
                    ctrl.CentroCostoID.Value = defCentroCosto;
                    ctrl.LineaPresupuestoID.Value = defLineaPresupuesto;
                    ctrl.TerceroID.Value = header.ClienteID.Value;
                    ctrl.DocumentoTercero.Value = header.Libranza.Value.ToString();
                    ctrl.DocumentoNro.Value = 0;
                    DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentoID, ctrl, true,true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);

                        return result;
                    }

                    ctrl.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);
                    #endregion
                    #region Solicitud Docu
                    header.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                    if (header.TipoGarantia.Value.Value == (int)TipoGarantia.Real)
                    {                       
                        header.Solicitud.Value = header.Libranza.Value;
                        header.Libranza.Value = consecutivoSol;
                        header.Solicitud.Value = consecutivoSol;                        
                        this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_Add(header);
                    }
                    else
                        this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_Add(header);

                    #endregion
                    #region Actualiza el consecutivo de la solicitud

                    consecutivoSolDTO.Data.Value = consecutivoSol.ToString();
                    this._moduloGlobal.glControl_Update(consecutivoSolDTO);
                    
                    #endregion
                    #endregion
                }

                //Anexos
                foreach (DTO_ccSolicitudAnexo item in anexos)
                {
                    item.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                    this._dal_ccSolicitudAnexo.DAL_ccSolicitudAnexo_Add(item);
                }

                result.ExtraField = header.Libranza.Value.Value.ToString();
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudLibranza_Add");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Retorna el Listado los Documentos Anexos
        /// </summary>
        /// <returns></returns> 
        public List<DTO_ccSolicitudAnexo> SolicitudLibranza_GetAnexosByID(int NumeroDoc)
        {
            try
            {
                SqlCommand mySqlCommand = base._mySqlConnection.CreateCommand();
                mySqlCommand.Transaction = base._mySqlConnectionTx;

                this._dal_ccSolicitudAnexo = (DAL_ccSolicitudAnexo)this.GetInstance(typeof(DAL_ccSolicitudAnexo), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return _dal_ccSolicitudAnexo.DAL_ccSolicitudAnexo_GetByNumeroDoc(NumeroDoc);

            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "SolicitudLibranza_GetAnexosByID");
                throw exception;
            }
        }

        /// <summary>
        /// Retorna el Listado los Documentos Anexos
        /// </summary>
        /// <returns></returns> 
        public List<DTO_ccTareaChequeoLista> SolicitudLibranza_GetTareasByNumeroDoc(int NumeroDoc)
        {
            try
            {
                SqlCommand mySqlCommand = base._mySqlConnection.CreateCommand();
                mySqlCommand.Transaction = base._mySqlConnectionTx;

                this._dal_ccTareaChequeoLista = (DAL_ccTareaChequeoLista)this.GetInstance(typeof(DAL_ccTareaChequeoLista), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return _dal_ccTareaChequeoLista.DAL_ccTareaChequeoLista_GetNumeroDoc(NumeroDoc);

            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "SolicitudLibranza_GetTareasByNumeroDoc");
                throw exception;
            }
        }

        #endregion       

        #region Aprobacion Solicitud Libranza

        #region Funciones Privadas

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="documentID"></param>
        /// <param name="sol"></param>
        /// <param name="docCtrl"></param>
        private DTO_TxResult AprobacionSolicitud_Rechazar(int documentID, string actFlujoID, DTO_SolicitudAprobacionCartera sol, bool updateStatus, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            try
            {
                int estado = (int)EstadoDocControl.Aprobado;
                #region Trae la actividad de la Solicitud de Libranza (Primer paso del flujo)
                List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.SolicitudLibranza);
                string actSolicitudLibranzas = actividades[0].Trim();
                #endregion
                #region Valida que no tenga anticipos aprobados
                int anticipoAprob = this._moduloGlobal.glDocumentoControl_GetApproveChilds(sol.NumeroDoc.Value.Value, estado);
                if (anticipoAprob > 0)
                {
                    result.Result = ResultValue.NOK;
                    string msg = String.Format(DictionaryMessages.Err_Cc_AnticiposAprobados, sol.Libranza.Value);
                    result.ResultMessage = msg;
                    return result;
                }

                #endregion
                #region Cambia el estado del documento o Asigna el nuevo flujo (cancela las alarmas)
                if (updateStatus)
                {
                    this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, sol.NumeroDoc.Value.Value, EstadoDocControl.Cerrado, sol.Observacion.Value, true);
                    result = this.AsignarFlujo(documentID, sol.NumeroDoc.Value.Value, actFlujoID, true, sol.Observacion.Value);
                }
                else if (sol.ActividadFlujoReversion.Value == actSolicitudLibranzas) //Como la primera actividad del flujo no tiene flujo se actuala el docControl
                {
                    this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, sol.NumeroDoc.Value.Value, EstadoDocControl.SinAprobar, sol.Observacion.Value, true);
                    result = this.ActualizarReversionFlujo(documentID, sol.NumeroDoc.Value.Value, actFlujoID, sol.ActividadFlujoReversion.Value, sol.Observacion.Value);
                }
                else
                    result = this.ActualizarReversionFlujo(documentID, sol.NumeroDoc.Value.Value, actFlujoID, sol.ActividadFlujoReversion.Value, sol.Observacion.Value);
                #endregion
                #region Actualiza la observacion del glDocumentoCtrl
                DTO_glDocumentoControl ctrl = this._moduloGlobal.glDocumentoControl_GetByID(sol.NumeroDoc.Value.Value);
                ctrl.Observacion.Value = sol.Observacion.Value;
                this._moduloGlobal.glDocumentoControl_Update(ctrl, false, true);
                #endregion
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "AprobacionSolicitud_Rechazar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Retorna el Listado de las solicitudes de credito
        /// </summary>
        /// <param name="documentoID">Id del Documento</param>
        /// <param name="actFlujoID">Actividad de flujo del documento</param>
        /// <returns>Retorna un listado de las solicitudes que se encuentrar para aprobar o rechazar</returns> 
        public List<DTO_SolicitudAprobacionCartera> SolicitudDocu_GetForAprobacion(int documentoID, string actFlujoID, int _libranza)
        {
            try
            {
                this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)this.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_seUsuario seUsuario = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);
                string usuarioID = seUsuario.ID.Value;
                return _dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetForAprobacion(documentoID, actFlujoID, usuarioID, _libranza);
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "ModuloCartera_SolicitudDocu_GetForAprobacion");
                throw exception;
            }
        }

        /// <summary>
        /// Verifica en la lista que documentos estan para aprobar y rechazar, Actualiza la tarea si es aprobado.
        /// </summary>
        /// <param name="documentID">Documento que ejecula la transaccion</param>
        /// <param name="solicitudes">Listado de documentos</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public List<DTO_SerializedObject> AprobacionSolicitud_AprobarRechazar(int documentID, string actFlujoID, List<DTO_SolicitudAprobacionCartera> solicitudes, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            try
            {
                int i = 0;
                foreach (DTO_SolicitudAprobacionCartera sol in solicitudes)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / solicitudes.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    if (sol.Aprobado.Value.Value)
                    {
                        try
                        {
                            List<DTO_ccSolicitudAnexo> anexos = new List<DTO_ccSolicitudAnexo>();
                            List<DTO_ccTareaChequeoLista> tareas = new List<DTO_ccTareaChequeoLista>();
                            result = this.SolicitudLibranza_Aprobar(documentID, actFlujoID, sol, anexos, tareas, false);
                        }
                        catch (Exception exAprob)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exAprob, this.UserId.ToString(), "SolicitudCredito_AprobarRechazar (Aprobar)");
                        }
                    }
                    else if (sol.Rechazado.Value.Value)
                    {
                        try
                        {
                            if (String.IsNullOrWhiteSpace(sol.ActividadFlujoReversion.Value))
                                result = this.AprobacionSolicitud_Rechazar(documentID, actFlujoID, sol, true, false);
                            else
                                result = this.AprobacionSolicitud_Rechazar(documentID, actFlujoID, sol, false, false);
                        }
                        catch (Exception exRech)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exRech, this.UserId.ToString(), "SolicitudCredito_AprobarRechazar (Rechazar)");
                        }
                    }

                    if (result.Result == ResultValue.NOK)
                        results.Add(result);
                    else
                    {
                        base._mySqlConnectionTx = null;
                        DTO_Alarma alarma = this.GetFirstMailInfo(sol.NumeroDoc.Value.Value, false);
                        results.Add(alarma);
                    }
                }
                return results;
            }
            catch (Exception ex)
            {
                results.Clear();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudCredito_AprobarRechazar");
                results.Add(result);
                return results;
            }
        }

        #endregion

        #endregion

        #region Digitacion Credito

        #region Funciones Privadas

        /// <summary>
        /// Funcion que trae todos los creditos con estado de cuenta para recompra
        /// </summary>
        /// <param name="clienteID">Cliente Id</param>
        /// <returns>Lista con todos los creditos que estan para recompra de un cliente</returns>
        private List<DTO_ccSolicitudCompraCartera> GetCreditosForRecompra(string clienteID)
        {
            try
            {
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_MasterSimple = (DAL_MasterSimple)base.GetInstance(typeof(DAL_MasterSimple), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                //Carga la actividad 
                List<string> actividades = new List<string>();                             
                actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.AprobacionGiros);

                if (actividades.Count == 0)
                    return new List<DTO_ccSolicitudCompraCartera>();
                
                string actFlujo = actividades[0];
                DTO_seUsuario user = (DTO_seUsuario)this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_ccSolicitudCompraCartera> creditosWithRecompra = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosWithRecompra(clienteID, user.ID.Value, actFlujo, true);

                string terceroxDef = this.GetControlValueByCompany(ModulesPrefix.co,AppControl.co_TerceroXDefecto);

                DTO_glConsulta consulta = new DTO_glConsulta();
                List<DTO_glConsultaFiltro> filtros = new List<DTO_glConsultaFiltro>();
                filtros.Add(new DTO_glConsultaFiltro()
                {
                    CampoFisico = "TerceroID",
                    ValorFiltro = terceroxDef,
                    OperadorFiltro = OperadorFiltro.Igual,
                });
                consulta.Filtros = filtros;
                
                this._dal_MasterSimple.DocumentID = AppMasters.ccFinanciera;
                long count = this._dal_MasterSimple.DAL_MasterSimple_Count(consulta,null,true);
                List<DTO_MasterBasic> listTmp = this._dal_MasterSimple.DAL_MasterSimple_GetPaged(count, 1, consulta,null, true).ToList();
                List<DTO_ccFinanciera> listFinan = listTmp.Cast<DTO_ccFinanciera>().ToList();

                string financiera = listFinan.Count > 0? listFinan.First().ID.Value: string.Empty;
                string financieraDesc = listFinan.Count > 0 ? listFinan.First().Descriptivo.Value : string.Empty;
                foreach (var comp in creditosWithRecompra)
                {
                    comp.FinancieraID.Value = financiera;
                    comp.Descriptivo.Value = financieraDesc;
                }

                return creditosWithRecompra;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCreditosForRecompra");
                throw ex;
            }
        }

        #endregion

        #region Funciones Públicas

        /// <summary>
        /// Trae la informacion de una solicitud de credito segun a libranza
        /// </summary>
        /// <param name="libranzaID">Libranza</param>
        /// <param name="actFlujoID">Identificador de la actividad de flujo</param>
        /// <returns>Retorna la informacion de una solicitud de credito</returns>
        public DTO_DigitacionCredito DigitacionCredito_GetByLibranza(int libranzaID, string actFlujoID)
        {
            try
            {
                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_MasterComplex = (DAL_MasterComplex)this.GetInstance(typeof(DAL_MasterComplex), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccPolizaEstado = (DAL_ccPolizaEstado)base.GetInstance(typeof(DAL_ccPolizaEstado), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccSolicitudPlanPagos = (DAL_ccSolicitudPlanPagos)base.GetInstance(typeof(DAL_ccSolicitudPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccSolicitudComponentes = (DAL_ccSolicitudComponentes)base.GetInstance(typeof(DAL_ccSolicitudComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccSolicitudCompraCartera = (DAL_ccSolicitudCompraCartera)base.GetInstance(typeof(DAL_ccSolicitudCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccSolicitudDetallePago = (DAL_ccSolicitudDetallePago)base.GetInstance(typeof(DAL_ccSolicitudDetallePago), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DTO_DigitacionCredito result = new DTO_DigitacionCredito();
                result.DocCtrl = null;

                DTO_glDocumentoControl ctrl = this._moduloGlobal.glDocumentoControl_GetByLibranzaSolicitud(libranzaID, actFlujoID, false);
                if (ctrl == null)
                {
                    #region Carga las activivdad de referenciacion, y el glDocControl

                    DTO_glConsulta consulta = new DTO_glConsulta();
                    List<DTO_glConsultaFiltro> filtros = new List<DTO_glConsultaFiltro>();
                    filtros.Add(new DTO_glConsultaFiltro()
                    {
                        CampoFisico = "ActividadPadre",
                        ValorFiltro = actFlujoID,
                        OperadorFiltro = OperadorFiltro.Igual,
                        OperadorSentencia = "AND"
                    });
                    consulta.Filtros = filtros;
                   
                    this._dal_MasterComplex.DocumentID = AppMasters.glProcedimientoFlujo;
                    long count = this._dal_MasterComplex.DAL_MasterComplex_Count(consulta, true);
                    List<DTO_MasterComplex> listTmp = _dal_MasterComplex.DAL_MasterComplex_GetPaged(count, 1, consulta, true).ToList();
                    DTO_glProcedimientoFlujo actHija = listTmp.Cast<DTO_glProcedimientoFlujo>().FirstOrDefault();
                    if (actHija != null)
                        ctrl = this._moduloGlobal.glDocumentoControl_GetByLibranzaSolicitud(libranzaID, actHija.ActividadHija.Value, false);

                    #endregion
                }

                if (ctrl != null)
                {
                    #region Carga la información para la digitacion del credito

                    DTO_ccSolicitudDocu solicitud = null;
                    DTO_PlanDePagos planPagos = new DTO_PlanDePagos();
                    DTO_ccPolizaEstado poliza = new DTO_ccPolizaEstado();
                    List<DTO_ccSolicitudComponentes> componentesCartera = new List<DTO_ccSolicitudComponentes>();
                    List<DTO_ccSolicitudCompraCartera> compraCartera = new List<DTO_ccSolicitudCompraCartera>();
                    List<DTO_ccSolicitudDetallePago> detallePagosTerceros = new List<DTO_ccSolicitudDetallePago>();

                    solicitud = this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByNumeroDoc(ctrl.NumeroDoc.Value.Value);
                    //planPagos  = this._dal_ccSolicitudPlanPagos.DAL_ccSolicitudPlanPagos_GetByNumDoc(ctrl.NumeroDoc.Value.Value);
                    #region Trae la informacion de las tabla complementarias de la digitacion del credito

                    //Trae los componentes de cartera
                    componentesCartera = this._dal_ccSolicitudComponentes.DAL_ccSolicitudComponentes_GetByNumeroDoc(ctrl.NumeroDoc.Value.Value);

                    //Cambio realizado por Daniel Peralta para siempre cargar las compras por los estados de cuenta actualizados
                    //Trae las compras de cartera
                    //bool buscarCompras = true;
                    if (solicitud.CompraCarteraInd.Value.Value)
                    {
                        compraCartera = this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_GetByNumeroDoc(ctrl.NumeroDoc.Value.Value, true);
                        //if (componentesCartera.Count > 0)
                        //    buscarCompras = false;
                    }

                    //if (buscarCompras)
                    List<DTO_ccSolicitudCompraCartera> compraCarteraCliente = this.GetCreditosForRecompra(solicitud.ClienteID.Value);
                    compraCartera.AddRange(compraCarteraCliente);

                    //Trae los detalles a pagos de terceros
                    detallePagosTerceros = this._dal_ccSolicitudDetallePago.DAL_ccSolicitudDetallePago_GetByID(ctrl.NumeroDoc.Value.Value);
                    

                    //Trae la información de la poliza
                    poliza = this._dal_ccPolizaEstado.DAL_ccPolizaEstado_GetForSolicitud(ctrl.TerceroID.Value, solicitud.NumeroDoc.Value.Value);

                    #endregion

                    result.AddData(ctrl, solicitud, poliza, planPagos, componentesCartera, compraCartera, detallePagosTerceros);

                    #endregion
                }

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DigitacionCredito_GetByLibranza");
                throw ex;
            }
        }

        /// <summary>
        /// Agrega informacion a la tabla ccSolicitudDocu
        /// </summary>
        /// <param name="documentoID">Documento que ejecuta la transaccione</param>
        /// <param name="digCredito">Solicitud que se debe agregar</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult DigitacionCredito_Add(int documentoID, string actFlujoId, DTO_DigitacionCredito digCredito, List<DTO_Cuota> cuotasExtras, bool isAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudPlanPagos = (DAL_ccSolicitudPlanPagos)base.GetInstance(typeof(DAL_ccSolicitudPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudComponentes = (DAL_ccSolicitudComponentes)base.GetInstance(typeof(DAL_ccSolicitudComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudCompraCartera = (DAL_ccSolicitudCompraCartera)base.GetInstance(typeof(DAL_ccSolicitudCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudDetallePago = (DAL_ccSolicitudDetallePago)base.GetInstance(typeof(DAL_ccSolicitudDetallePago), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudCtasExtra = (DAL_ccSolicitudCtasExtra)base.GetInstance(typeof(DAL_ccSolicitudCtasExtra), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccPolizaEstado = (DAL_ccPolizaEstado)base.GetInstance(typeof(DAL_ccPolizaEstado), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            try
            {
                #region Variables
                DTO_glDocumentoControl ctrl = digCredito.DocCtrl;
                DTO_ccSolicitudDocu solicitud = digCredito.Header;
                DTO_PlanDePagos planPagos = digCredito.PlanPagos;
                DTO_ccPolizaEstado poliza = digCredito.Poliza;
                List<DTO_ccSolicitudComponentes> componentes = digCredito.Componentes;
                List<DTO_ccSolicitudCompraCartera> compraCartera = digCredito.CompraCartera;
                List<DTO_ccSolicitudDetallePago> detallesPago = digCredito.DetaPagos;
                int numDocNew = 0;

                //Variables por defecto
                string defArealFuncional = this.GetAreaFuncionalByUser();
                string defMoneda = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string defConceptoCargo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string zonaXDefecto = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Zona);
                string componenteCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string sectorCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);

                string periodoCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoCartera);

                #endregion

                if (solicitud.LiquidaAll.Value.Value)
                {
                    #region Actualiza el glDocumentoControl
                    if (sectorCartera == ((byte)SectorCartera.Financiero).ToString())
                    {
                        DTO_ccConcesionario concesionario = (DTO_ccConcesionario)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccConcesionario, solicitud.ConcesionarioID.Value, true, false);
                        if (!string.IsNullOrWhiteSpace(concesionario.CtoCostoNormal.Value))
                            ctrl.CentroCostoID.Value = concesionario.CtoCostoNormal.Value;

                        this._moduloGlobal.glDocumentoControl_Update(ctrl, false, true);
                    }
                    else
                        this._moduloGlobal.glDocumentoControl_Update(ctrl, false, true);
                    #endregion
                    #region  Solicitud Docu
                    this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_Update(solicitud);
                    #endregion
                }
                else
                {
                    #region Crea glDocumentoControl para la poliza

                    DTO_ccConcesionario concesionario = (DTO_ccConcesionario)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccConcesionario, solicitud.ConcesionarioID.Value, true, false);

                    ctrl.DocumentoNro.Value = 0;
                    ctrl.DocumentoID.Value = documentoID;
                    ctrl.LugarGeograficoID.Value = defLugarGeografico;
                    ctrl.NumeroDoc.Value = 0;
                    ctrl.DocumentoTipo.Value = (byte)DocumentoTipo.DocExterno;
                    ctrl.Fecha.Value = DateTime.Now;
                    ctrl.PeriodoDoc.Value = periodo;
                    ctrl.PeriodoUltMov.Value = periodo;
                    ctrl.AreaFuncionalID.Value = defArealFuncional;
                    ctrl.PrefijoID.Value = defPrefijo;
                    ctrl.ProyectoID.Value = defProyecto;
                    ctrl.CentroCostoID.Value = concesionario != null && !string.IsNullOrWhiteSpace(concesionario.CtoCostoNormal.Value) ? concesionario.CtoCostoNormal.Value : defCentroCosto;
                    ctrl.LineaPresupuestoID.Value = defLineaPresupuesto;
                    ctrl.TerceroID.Value = solicitud.ClienteID.Value;
                    ctrl.TasaCambioCONT.Value = 0;
                    ctrl.TasaCambioDOCU.Value = 0;
                    ctrl.MonedaID.Value = defMoneda;
                    ctrl.Observacion.Value = solicitud.Observacion.Value;
                    ctrl.Descripcion.Value = "Solicitud - Poliza " + solicitud.Poliza.Value;
                    ctrl.Estado.Value = (byte)EstadoDocControl.ParaAprobacion;
                    ctrl.seUsuarioID.Value = this.UserId;
                    ctrl.Valor.Value = solicitud.VlrPoliza.Value.Value;
                    ctrl.Iva.Value = 0;

                    DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentoID, ctrl, true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);
                        return result;
                    }
                    numDocNew = Convert.ToInt32(resultGLDC.Key);
                    ctrl.NumeroDoc.Value = numDocNew;
                    #endregion
                    #region Agrega el Solicitud Docu de la poliza
                    this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_Add(solicitud);
                    #endregion
                    #region Actualiza el plan de pagos del credito con la informacion de la poliza nueva
                    Dictionary<string, bool> dic = planPagos.ComponentesFijos;
                    decimal vlrSaldoCapital = planPagos.VlrPrestamo;
                    decimal vlrSaldoCapitalPoliza = planPagos.VlrPoliza;
                    for (int i = 0; i < planPagos.Cuotas.Count; i++)
                    {
                        DTO_ccCreditoPlanPagos planPagosCred = new DTO_ccCreditoPlanPagos();
                        planPagosCred.NumeroDoc.Value = solicitud.NumDocCredito.Value.Value;
                        planPagosCred.VlrCuota.Value = planPagos.Cuotas[i].ValorCuota;
                        planPagosCred.CuotaID.Value = planPagos.Cuotas[i].NumCuota;
                        planPagosCred.VlrCapital.Value = planPagos.Cuotas[i].Capital;
                        planPagosCred.VlrInteres.Value = planPagos.Cuotas[i].Intereses;
                        planPagosCred.VlrSeguro.Value = planPagos.Cuotas[i].Seguro;
                        planPagosCred.VlrOtro1.Value = 0;
                        planPagosCred.VlrOtro2.Value = 0;
                        planPagosCred.VlrOtro3.Value = 0;

                        List<string> extraComp = planPagos.Cuotas[i].Componentes;
                        List<int> valores = planPagos.Cuotas[i].ValoresComponentes;
                        int totalFijos = 0;
                        for (int j = 0; j < extraComp.Count; j++)
                        {
                            string nombre = extraComp[j];
                            int valor = valores[j];
                            DTO_ccSolicitudComponentes comp = planPagos.ComponentesAll.Where(x => x.Descripcion.Value == nombre).First();
                            if (dic[comp.ComponenteCarteraID.Value])
                            {
                                totalFijos += valores[j];
                            }
                            else
                            {
                                if (j == 0)
                                    planPagosCred.VlrOtro1.Value = valores[j];
                                if (j == 1)
                                    planPagosCred.VlrOtro2.Value = valores[j];
                                if (j == 2)
                                    planPagosCred.VlrOtro3.Value = valores[j];
                            }
                        }

                        planPagosCred.VlrOtrosFijos.Value = totalFijos;
                        planPagosCred.VlrSaldoCapital.Value = vlrSaldoCapital;
                        planPagosCred.VlrSaldoSeguro.Value = vlrSaldoCapitalPoliza;
                        this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(planPagosCred);

                        vlrSaldoCapitalPoliza = vlrSaldoCapital - planPagos.Cuotas[i].Seguro;
                        vlrSaldoCapital = vlrSaldoCapital - planPagos.Cuotas[i].Capital;
                    }
                    #endregion
                }

                #region Borra las tablas complementarias de la solicitud

                //Borra el plan de pagos
                this._dal_ccSolicitudPlanPagos.DAL_ccSolicitudPlanPagos_Delete(ctrl.NumeroDoc.Value.Value);

                //Borra los componentes de cartera
                this._dal_ccSolicitudComponentes.DAL_ccSolicitudComponentes_Delete(ctrl.NumeroDoc.Value.Value);

                //Borra la Compra Cartera
                this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_Delete(ctrl.NumeroDoc.Value.Value);

                //Borra los detalles de pago a terceros
                this._dal_ccSolicitudDetallePago.DAL_ccSolicitudDetallePago_Delete(ctrl.NumeroDoc.Value.Value);

                //Borra las cuotas extras
                this._dal_ccSolicitudCtasExtra.DAL_ccSolicitudCtasExtra_Delete(ctrl.NumeroDoc.Value.Value);

                #endregion
                #region Agrega el nuevo plan de pagos
                this._dal_ccSolicitudPlanPagos.DAL_ccSolicitudPlanPagos_Add(planPagos, ctrl.NumeroDoc.Value.Value);
                #endregion
                #region Agrega los nuevos Componentes Cartera

                //Calcula el valor de porcentaje de capital para los componentes
                decimal porCapital = 0;
                Dictionary<string, bool> calculaPorCapital = new Dictionary<string, bool>();
                decimal porCapitalTotal = 0;
                decimal vlrCapital = componentes.FindAll(x => x.ComponenteCarteraID.Value == componenteCapital).Sum(y => y.TotalValor.Value.Value);
                foreach (DTO_ccSolicitudComponentes item in componentes)
                {
                    DTO_ccCarteraComponente comp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, item.ComponenteCarteraID.Value, true, false);
                    if (comp.TipoComponente.Value == (byte)TipoComponente.CapitalSolicitado || comp.TipoComponente.Value == (byte)TipoComponente.MayorValor)
                    {
                        porCapital += item.TotalValor.Value.Value;
                        calculaPorCapital[item.ComponenteCarteraID.Value] = true;
                    }
                    else
                        calculaPorCapital[item.ComponenteCarteraID.Value] = false;
                }

                foreach (DTO_ccSolicitudComponentes item in componentes)
                {
                    if (calculaPorCapital[item.ComponenteCarteraID.Value])
                    {
                        item.PorCapital.Value = Math.Round(item.TotalValor.Value.Value * 100 / vlrCapital, 7);
                        porCapitalTotal = item.PorCapital.Value.Value;
                    }
                    else
                        item.PorCapital.Value = 0;

                    item.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                }
                DTO_ccSolicitudComponentes cap = componentes.Find(x => x.ComponenteCarteraID.Value == componenteCapital);
                foreach (DTO_ccSolicitudComponentes item in componentes)
                {
                    if (calculaPorCapital[item.ComponenteCarteraID.Value] && item.ComponenteCarteraID.Value != componenteCapital && cap != null)
                        cap.PorCapital.Value -= item.PorCapital.Value;
                }
                if (porCapitalTotal != 100 &&  sectorCartera == ((byte)SectorCartera.Financiero).ToString())
                {
                    //Validación para créditos de pólizas (financieras)
                    DTO_ccSolicitudComponentes compCap = componentes.FirstOrDefault(c => c.ComponenteCarteraID.Value == componenteCapital);
                    if(compCap != null)
                        compCap.PorCapital.Value += (100 - porCapitalTotal);
                }

                foreach (DTO_ccSolicitudComponentes item in componentes)
                    this._dal_ccSolicitudComponentes.DAL_ccSolicitudComponentes_Add(item);

                #endregion
                #region Agrega la nueva Compra Cartera

                foreach (DTO_ccSolicitudCompraCartera item in compraCartera)
                {
                    item.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                    this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_Add(item);
                }

                #endregion
                #region Agrega los detalle de los pagos a terceros
                foreach (DTO_ccSolicitudDetallePago detaPago in detallesPago)
                {
                    detaPago.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                    detaPago.Documento.Value = solicitud.Libranza.Value.ToString();
                    this._dal_ccSolicitudDetallePago.DAL_ccSolicitudDetallePago_Add(detaPago);
                }
                #endregion
                #region Agrega las cuotas extras
                foreach (DTO_Cuota cExtra in cuotasExtras)
                {
                    DTO_ccSolicitudCtasExtra cuotaExtra = new DTO_ccSolicitudCtasExtra();
                    cuotaExtra.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                    cuotaExtra.CuotaID.Value = cExtra.NumCuota;
                    cuotaExtra.VlrCuota.Value = cExtra.ValorCuota;

                    this._dal_ccSolicitudCtasExtra.DAL_ccSolicitudCtasExtra_Add(cuotaExtra);
                }
                #endregion
                #region Agrega / Actualiza la información de la póliza
                
                if(poliza != null)
                {
                    this._dal_ccPolizaEstado.DAL_ccPolizaEstado_Upd(poliza);
                }

                #endregion
//Revisar oscar
                #region Asignar nuevo flujo

               // result = this.AsignarFlujo(documentoID, ctrl.NumeroDoc.Value.Value, actFlujoId, false, string.Empty);

                //Restaura la actividad de flujo para la edicion del credito para financieras
                //if (sectorCartera == ((byte)SectorCartera.Financiero).ToString())
                //{
                //    List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.SolicitudLibranza);
                //    result = this.AsignarFlujo(documentoID, ctrl.NumeroDoc.Value.Value, actividades[0], false, string.Empty);
                //}
                #endregion

                if (result.Result == ResultValue.OK)
                    result.ResultMessage = string.Empty;

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DigitacionCredito_Add");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Añade los un registro a ccCarteraMvto
        /// </summary>
        /// <param name="mvto">Movimiento de la caretra</param>
        public List<DTO_ccCreditoComponentes> ccCreditoComponentes_GetByNumDocCred(int numeroDoc)
        {
            this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(numeroDoc);
        }

        #endregion

        #endregion

        #region Solicitud Anticipos

        /// <summary>
        /// Funcion que retorna el listado de las compra de cartera para solicitud de anticipos
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo</param>
        /// <param name="libranzaID">Numero de la libranza</param>
        /// <returns>Retorna las compra de cartera para realizar la solicitud de anticipo</returns>     
        public List<DTO_ccSolicitudCompraCartera> SolicitudAnticipo_GetByLibranza(int documentID, int libranzaID, int numeroDoc)
        {
            try
            {
                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccSolicitudCompraCartera = (DAL_ccSolicitudCompraCartera)base.GetInstance(typeof(DAL_ccSolicitudCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                //Trae la actividad de digitacion de credito
                List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.DigitacionCredito);
                if (actividades.Count == 0)
                    return new List<DTO_ccSolicitudCompraCartera>();

                string actFlujoDigCredito = actividades[0];
                List<DTO_ccSolicitudCompraCartera> comprasCartera = new List<DTO_ccSolicitudCompraCartera>();
                comprasCartera = this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_GetForAnticipo(actFlujoDigCredito, numeroDoc);

                return comprasCartera;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudAnticipo_GetByLibranza");
                throw ex;
            }
        }

        /// <summary>
        /// Envia la solicitud de nuevos anticipos
        /// </summary>
        /// <param name="documentID">Documento que ejecuta la transaccion</param>
        /// <param name="compras">Listado de carteras externas a comprar</param>
        /// <returns>Retorna la lista de resultados</returns>
        public List<DTO_SerializedObject> SolicitudAnticipos_SolicitarAnticipos(int documentID, List<DTO_ccSolicitudCompraCartera> compras, Dictionary<Tuple<int, int>, int> batchProgress, bool insideAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();
            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            bool isValid = true;
            try
            {
                #region Variables
                this._moduloAplicacion = (ModuloAplicacion)base.GetInstance(typeof(ModuloAplicacion), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloCxP = (ModuloCuentasXPagar)base.GetInstance(typeof(ModuloCuentasXPagar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccSolicitudCompraCartera = (DAL_ccSolicitudCompraCartera)base.GetInstance(typeof(DAL_ccSolicitudCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                // Variables calculadas
                string periodoCxP = this.GetControlValueByCompany(ModulesPrefix.cp, AppControl.co_Periodo);
                string periodoCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoCartera);
                DateTime fecha = periodo < DateTime.Now.Date ? new DateTime(periodo.Year, periodo.Month, DateTime.DaysInMonth(periodo.Year, periodo.Month)) : DateTime.Now.Date;
                string af = this.GetAreaFuncionalByUser();
                string tipoAnticipoID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_TipoAnticipoCompraCartera);
                string concCxPID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_TipoAnticipoConceptoCxP);
                DTO_cpAnticipoTipo tipoAnticipo = null;
                DTO_coDocumento coDocumento = null;
                DTO_coPlanCuenta cta = null;

                //Variables por defecto
                string prefijoXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string cuentaXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CtaXDefecto);
                string proyectoXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string ctoCostoXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string lineaPresXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string lugGeoXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string consSaldoXDef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoSaldoXDefecto);
                string monedaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);

                #endregion
                #region Validaciones

                #region Datos en glControl
                if (string.IsNullOrWhiteSpace(concCxPID))
                {
                    isValid = false;

                    result = new DTO_TxResult();
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_TipoAnticipoConceptoCxP + "&&" + string.Empty;
                    results.Add(result);

                    return results;
                }

                if (string.IsNullOrWhiteSpace(tipoAnticipoID))
                {
                    isValid = false;

                    result = new DTO_TxResult();
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_TipoAnticipoCompraCartera + "&&" + string.Empty;
                    results.Add(result);

                    return results;
                }

                tipoAnticipo = (DTO_cpAnticipoTipo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.cpAnticipoTipo, tipoAnticipoID, true, false);
                coDocumento = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, tipoAnticipo.coDocumentoID.Value, true, false);

                if (string.IsNullOrWhiteSpace(coDocumento.CuentaLOC.Value))
                {
                    isValid = false;

                    result = new DTO_TxResult();
                    result.Result = ResultValue.NOK;

                    DTO_TxResultDetail rd = new DTO_TxResultDetail();
                    DTO_TxResultDetailFields rdF = new DTO_TxResultDetailFields();
                    rdF.Field = "CuentaLoc";
                    rdF.Message = DictionaryMessages.FkNotFound;
                    rd.DetailsFields.Add(rdF);

                    result.Details.Add(rd);
                    results.Add(result);

                    return results;
                }

                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, coDocumento.CuentaLOC.Value, true, false);

                #endregion
                #region Validacion de periodos
                if (periodoCartera != periodoCxP)
                {
                    isValid = false;

                    result = new DTO_TxResult();
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_InvalidPeriodoAnticipos;
                    results.Add(result);

                    return results;
                }

                #endregion

                #endregion

                int i = 0;
                decimal porcTotal = 0;
                foreach (DTO_ccSolicitudCompraCartera c in compras)
                {
                    #region Progreso

                    porcTotal = compras.Count * i / 100;
                    batchProgress[tupProgress] = (int)porcTotal;
                    i++;

                    result = new DTO_TxResult();
                    result.Result = ResultValue.OK;
                    result.Details = new List<DTO_TxResultDetail>();

                    #endregion
                    //Funciona solo para anticipos nuevos
                    if (!c.AnticipoInd.Value.Value)
                    {
                        #region Variables del ciclo
                        DTO_ccCreditoDocu creditoCompra = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(c.DocCompra.Value.Value);
                        DTO_glDocumentoControl ctrlCompra = this._moduloGlobal.glDocumentoControl_GetByID(c.DocCompra.Value.Value);
                        DTO_ccFinanciera financiera = (DTO_ccFinanciera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccFinanciera, c.FinancieraID.Value, true, false);
                        #endregion
                        #region Crea el documento

                        DTO_glDocumentoControl ctrl = new DTO_glDocumentoControl();
                        ctrl.DocumentoID.Value = AppDocuments.Anticipos;
                        ctrl.DocumentoTipo.Value = (byte)DocumentoTipo.DocExterno;
                        ctrl.Fecha.Value = DateTime.Now;
                        ctrl.FechaDoc.Value = c.FechaDoc.Value;
                        ctrl.PeriodoDoc.Value = periodo;
                        ctrl.PeriodoUltMov.Value = periodo;
                        ctrl.AreaFuncionalID.Value = af;

                        ctrl.PrefijoID.Value = ctrlCompra != null ? ctrlCompra.PrefijoID.Value : prefijoXDef;
                        ctrl.ProyectoID.Value = ctrlCompra != null ? ctrlCompra.ProyectoID.Value : proyectoXDef;
                        ctrl.CentroCostoID.Value = ctrlCompra != null ? ctrlCompra.CentroCostoID.Value : ctoCostoXDef;
                        ctrl.LineaPresupuestoID.Value = ctrlCompra != null ? ctrlCompra.LineaPresupuestoID.Value : lineaPresXDef;
                        ctrl.LugarGeograficoID.Value = ctrlCompra != null ? ctrlCompra.LugarGeograficoID.Value : lugGeoXDef;
                        ctrl.MonedaID.Value = ctrlCompra != null ? ctrlCompra.MonedaID.Value : monedaLoc;
                        ctrl.TasaCambioCONT.Value = ctrlCompra != null ? ctrlCompra.TasaCambioCONT.Value : 0;
                        ctrl.TasaCambioDOCU.Value = ctrlCompra != null ? ctrlCompra.TasaCambioDOCU.Value : 0;

                        // Valores del anticipo
                        ctrl.CuentaID.Value = cta.ID.Value;
                        ctrl.TerceroID.Value = financiera.TerceroID.Value;
                        ctrl.DocumentoTercero.Value = c.Documento.Value.Value.ToString();
                        ctrl.Descripcion.Value = "Anticipo - Compra de cartera. Crédito: " + c.Documento.Value.Value.ToString();
                        ctrl.Observacion.Value = string.Empty;
                        ctrl.Estado.Value = (byte)EstadoDocControl.ParaAprobacion;
                        ctrl.seUsuarioID.Value = this.UserId;
                        ctrl.Valor.Value = c.VlrSaldo.Value.Value;
                        ctrl.Iva.Value = 0;
                        //ctrl.DocumentoPadre.Value = c.NumeroDoc.Value;

                        #endregion
                        #region Crea el anticipo

                        DTO_cpAnticipo ant = new DTO_cpAnticipo();
                        ant.RadicaFecha.Value = fecha;
                        ant.AnticipoTipoID.Value = tipoAnticipoID;
                        ant.Plazo.Value = 0;
                        ant.ConceptoCxPID.Value = concCxPID;
                        ant.Valor.Value = c.VlrSaldo.Value;

                        #endregion
                        #region Guarda el anticipo
                        DTO_SerializedObject obj = this._moduloCxP.cpAnticipos_Guardar(AppDocuments.Anticipos, ctrl, ant, false, new Dictionary<Tuple<int, int>, int>(), true);
                        if (obj.GetType() == typeof(DTO_TxResult))
                            isValid = false;

                        results.Add(obj);
                        #endregion
                        if (isValid)
                        {
                            #region Actualiza la solicitud de compra
                            c.DocAnticipo.Value = ctrl.NumeroDoc.Value;
                            this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_Update(c);
                            #endregion
                            #region Guarda la info en bitacora
                            int bId = this._moduloAplicacion.aplBitacora_Add(this.Empresa.ID.Value, documentID, (int)FormsActions.Edit, DateTime.Now,
                                this.UserId, this.Empresa.ID.Value, c.NumeroDoc.Value.Value.ToString(), ctrl.NumeroDoc.Value.Value.ToString(),
                                c.Documento.Value.Value.ToString(), string.Empty, string.Empty, 0, 0, 0);

                            #endregion
                        }
                    }
                }

                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                results.Clear();
                result = new DTO_TxResult();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudAnticipos_SolicitarAnticipos");
                results.Add(result);

                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Genera los paz y salvos de la compra de cartea
        /// </summary>
        /// <param name="documentID">Documento que ejecuta la transaccion</param>
        /// <param name="compras">Listado de carteras externas a comprar</param>
        /// <returns>Retorna la lista de resultados</returns>
        public List<DTO_SerializedObject> SolicitudAnticipos_GenerarPazYSalvo(int documentID, List<DTO_ccSolicitudCompraCartera> compras, Dictionary<Tuple<int, int>, int> batchProgress, bool insideAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();
            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            bool isValid = true;
            try
            {
                #region Variables
                this._dal_ccSolicitudCompraCartera = (DAL_ccSolicitudCompraCartera)base.GetInstance(typeof(DAL_ccSolicitudCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloAplicacion = (ModuloAplicacion)base.GetInstance(typeof(ModuloAplicacion), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DTO_seUsuario user = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);
                #endregion

                int i = 0;
                decimal porcTotal = 0;
                foreach (DTO_ccSolicitudCompraCartera c in compras)
                {
                    porcTotal = compras.Count * i / 100;
                    batchProgress[tupProgress] = (int)porcTotal;
                    i++;

                    if (c.NuevoPyS.Value.Value && c.IndRecibePazySalvo.Value.Value)
                    {
                        #region Nuevo paz y salvo

                        c.FechaPazySalvo.Value = DateTime.Now;
                        c.UsuarioID.Value = user.ID.Value;
                        this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_Update(c);

                        // Guarda la info en bitacora
                        int bId = this._moduloAplicacion.aplBitacora_Add(this.Empresa.ID.Value, documentID, (int)FormsActions.Add, DateTime.Now,
                            this.UserId, this.Empresa.ID.Value, c.NumeroDoc.Value.Value.ToString(), c.DocAnticipo.Value.Value.ToString(),
                            c.Documento.Value.Value.ToString(), string.Empty, string.Empty, 0, 0, 0);

                        #endregion
                    }
                    else if (!c.NuevoPyS.Value.Value && !c.IndRecibePazySalvo.Value.Value)
                    {
                        #region Paz y salvo existente

                        c.FechaPazySalvo = new UDTSQL_smalldatetime();
                        c.UsuarioID.Value = string.Empty;
                        this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_Update(c);

                        // Guarda la info en bitacora
                        int bId = this._moduloAplicacion.aplBitacora_Add(this.Empresa.ID.Value, documentID, (int)FormsActions.Edit, DateTime.Now,
                            this.UserId, this.Empresa.ID.Value, c.NumeroDoc.Value.Value.ToString(), c.DocAnticipo.Value.Value.ToString(),
                            c.Documento.Value.Value.ToString(), string.Empty, string.Empty, 0, 0, 0);

                        #endregion
                    }
                }

                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                results.Clear();
                result = new DTO_TxResult();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudAnticipos_GenerarPazYSalvo");
                results.Add(result);

                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Genera reversion de anticipos de compra de cartea
        /// </summary>
        /// <param name="documentID">Documento que ejecuta la transaccion</param>
        /// <param name="compras">Listado de carteras externas a comprar</param>
        /// <returns>Retorna la lista de resultados</returns>
        public List<DTO_SerializedObject> SolicitudAnticipos_RevertirAnticipos(int documentID, List<DTO_ccSolicitudCompraCartera> compras, Dictionary<Tuple<int, int>, int> batchProgress, bool insideAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();
            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            int? consecutivoPos = null;
            List<DTO_glDocumentoControl> ctrls = new List<DTO_glDocumentoControl>();
            List<DTO_coComprobante> coComps = new List<DTO_coComprobante>();

            bool isValid = true;
            try
            {
                #region Variables
                this._dal_ccSolicitudCompraCartera = (DAL_ccSolicitudCompraCartera)base.GetInstance(typeof(DAL_ccSolicitudCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloAplicacion = (ModuloAplicacion)base.GetInstance(typeof(ModuloAplicacion), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloCxP = (ModuloCuentasXPagar)base.GetInstance(typeof(ModuloCuentasXPagar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                #endregion

                int i = 0;
                decimal porcTotal = 0;
                foreach (DTO_ccSolicitudCompraCartera c in compras)
                {
                    porcTotal = compras.Count * i / 100;
                    batchProgress[tupProgress] = (int)porcTotal;
                    i++;

                    var docAnticipo = this._moduloGlobal.glDocumentoControl_GetByID(c.DocAnticipo.Value.Value);

                    #region Revierte o Anula el documento
                    if (docAnticipo != null && docAnticipo.Estado.Value == (byte)EstadoDocControl.Aprobado)
                        result = this._moduloCxP.CuentasXPagar_Revertir(AppDocuments.Anticipos, c.DocAnticipo.Value.Value, consecutivoPos, ref ctrls, ref coComps, true);
                    else
                    {
                        List<int> antic = new List<int>();
                        antic.Add(c.DocAnticipo.Value.Value);
                        result = this._moduloGlobal.glDocumentoControl_Anular(AppDocuments.Anticipos, antic, batchProgress, true);
                    }

                    if (result.Result == ResultValue.NOK)
                    {
                        results.Add(result);
                        isValid = false;
                        return results;                       
                    }                        

                    if (!consecutivoPos.HasValue)
                        consecutivoPos = 0;

                    if (isValid)
                    {
                        DTO_ccSolicitudCompraCartera compraCar = this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_GetByDocAnticipo(c.DocAnticipo.Value.Value);
                        compraCar.IndRecibePazySalvo.Value = false;
                        compraCar.DocAnticipo.Value = null;
                        this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_Update(compraCar); 
                    }
                    #endregion                   
                    
                }

                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                results.Clear();
                result = new DTO_TxResult();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SolicitudAnticipos_GenerarPazYSalvo");
                results.Add(result);

                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }


        #endregion

        #region Devolución Solicitud

        /// <summary>
        /// Trae la informacion de una solicitud de credito para devolición
        /// </summary>
        /// <param name="libranzaID">Libranza</param>
        /// <returns>Retorna la informacion de una solicitud de credito</returns>
        public DTO_ccSolicitudDocu DevolucionSolicitud_GetByLibranza(int libranzaID, ref List<DTO_ccSolicitudDevolucionDeta> devoluciones)
        {
            try
            {
                this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_ccSolicitudDocu docu = this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByLibranza(libranzaID);
                if (docu != null)
                {
                    this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    DTO_glDocumentoControl ctrl = this._moduloGlobal.glDocumentoControl_GetByID(docu.NumeroDoc.Value.Value);
                    docu.Estado.Value = ctrl.Estado.Value;

                    this._dal_ccSolicitudDevolucion = (DAL_ccSolicitudDevolucion)this.GetInstance(typeof(DAL_ccSolicitudDevolucion), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    List<DTO_ccSolicitudDevolucion> devolucionDocu = this._dal_ccSolicitudDevolucion.DAL_ccSolicitudDevolucion_GetByLibranza(docu.NumeroDoc.Value.Value);
                    docu.NumDevoluciones.Value = devolucionDocu.Count;

                    //Obtiene los registros de devolucion
                    this._dal_ccSolicitudDevDeta = (DAL_ccSolicitudDevolucionDeta)this.GetInstance(typeof(DAL_ccSolicitudDevolucionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    foreach (var d in devolucionDocu)
                    {
                        d.Detalle = this._dal_ccSolicitudDevDeta.DAL_ccSolicitudDevolucionDetaDeta_GetByNumeroDEV(d.NumeroDEV.Value.Value, d.NumeroDoc.Value.Value);
                        devoluciones.AddRange(d.Detalle);
                    }
                    foreach (var dev in devoluciones)
                    {
                        DTO_ccDevolucionCausal causal = (DTO_ccDevolucionCausal)this.GetMasterDTO(AppMasters.MasterType.Simple,AppMasters.ccDevolucionCausal,dev.DevCausalID.Value,true,false);
                        if(causal != null)
                        {
                            dev.DevCausalDesc.Value = causal.Descriptivo.Value;                           
                            dev.DevCausalGrupoID.Value = causal.DevCausalGrupoID.Value;
                            dev.DevCausalGrupoDesc.Value = causal.DevCausalGrupoDesc.Value;
                        }
                    }                    
                }

                return docu;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DevolucionSolicitud_GetByLibranza");
                throw ex;
            }
        }

        /// <summary>
        /// Agrega informacion a la tabla ccSolicitudDocu
        /// </summary>
        /// <param name="documentoID">Documento que ejecuta la transaccione</param>
        /// <param name="solicitud">Solicitud que se debe agregar</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult DevolucionSolicitud_Add(int documentoID, DTO_ccSolicitudDevolucion devolucion, bool isAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            try
            {
                //Cierra el flujo
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_InfoTarea> tarea = this._moduloGlobal.glActividadEstado_GetPendientesByParameter(devolucion.NumeroDoc.Value.Value, null, string.Empty, null, null, string.Empty, 
                    string.Empty, null, EstadoTareaIncumplimiento.Abiertas, false, null);
                DTO_InfoTarea actividadAbierta = tarea.FirstOrDefault();

                List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.SolicitudLibranza);

                if (actividadAbierta != null && actividades.Count > 0)
                {
                    //Actividad abierta
                    result = this.AsignarFlujo(documentoID, devolucion.NumeroDoc.Value.Value, actividadAbierta.ActividadFlujoID.Value, true, string.Empty);
                    if (result.Result == ResultValue.NOK)
                        return result;

                    ////Solicitud
                    //result = this.AsignarFlujo(documentoID, devolucion.NumeroDoc.Value.Value, actividades[0], false, string.Empty);
                    //if (result.Result == ResultValue.NOK)
                    //    return result;

                    //Crea el registro de devolución
                    devolucion.ActividadFlujoID.Value = actividadAbierta.ActividadFlujoID.Value;
                    this._dal_ccSolicitudDevolucion = (DAL_ccSolicitudDevolucion)this.GetInstance(typeof(DAL_ccSolicitudDevolucion), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    this._dal_ccSolicitudDevolucion.DAL_ccSolicitudDevolucion_Add(devolucion);

                    //Crea los registros de devolucion
                    foreach (var dev in devolucion.Detalle)
                    {
                        dev.NumeroDoc.Value = devolucion.NumeroDoc.Value;
                        this._dal_ccSolicitudDevDeta = (DAL_ccSolicitudDevolucionDeta)this.GetInstance(typeof(DAL_ccSolicitudDevolucionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                        this._dal_ccSolicitudDevDeta.DAL_ccSolicitudDevolucionDeta_Add(dev);
                    }

                    //Actualiza la solucitud
                    this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    DTO_ccSolicitudDocu docu = this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByNumeroDoc(devolucion.NumeroDoc.Value.Value);
                    docu.DevueltaInd.Value = true;
                    this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_Update(docu);

                }

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DevolucionSolicitud_Add");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Consulta informacion de la tabla ccSolicitudDevolucion
        /// </summary>
        /// <param name="documentoID">Documento que ejecuta la transaccione</param>
        /// <param name="numDocSol">Solicitud que se debe consultar</param>
        /// <returns>Retorna lista</returns>
        public  List<DTO_ccSolicitudDevolucion> DevolucionSolicitud_GetByNumeroDoc(int documentoID, int  numDocSol)
        {
            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudDevolucion = (DAL_ccSolicitudDevolucion)this.GetInstance(typeof(DAL_ccSolicitudDevolucion), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            try
            {
                List<DTO_ccSolicitudDevolucion> devolucionDocu = this._dal_ccSolicitudDevolucion.DAL_ccSolicitudDevolucion_GetByLibranza(numDocSol);

                //Obtiene los registros de devolucion
                this._dal_ccSolicitudDevDeta = (DAL_ccSolicitudDevolucionDeta)this.GetInstance(typeof(DAL_ccSolicitudDevolucionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                foreach (var d in devolucionDocu)
                {
                    DTO_glActividadFlujo act = (DTO_glActividadFlujo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glActividadFlujo, d.ActividadFlujoID.Value, true, false);
                    d.ActividadFlujoDesc.Value = act != null ? act.Descriptivo.Value : string.Empty;
                    DTO_seUsuario user = this._moduloGlobal.seUsuario_GetUserByReplicaID(d.seUsuarioID.Value.Value);
                    d.UsuarioID.Value = user != null ? user.ID.Value : string.Empty;
                    d.UsuarioDesc.Value = user != null ? user.Descriptivo.Value : string.Empty;
                    d.Detalle = this._dal_ccSolicitudDevDeta.DAL_ccSolicitudDevolucionDetaDeta_GetByNumeroDEV(d.NumeroDEV.Value.Value, d.NumeroDoc.Value.Value);
                    foreach (var dev in d.Detalle)
                    {
                        DTO_ccDevolucionCausal causal = (DTO_ccDevolucionCausal)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccDevolucionCausal, dev.DevCausalID.Value, true, false);
                        if (causal != null)
                        {
                            dev.DevCausalDesc.Value = causal.Descriptivo.Value;
                            dev.DevCausalGrupoID.Value = causal.DevCausalGrupoID.Value;
                            dev.DevCausalGrupoDesc.Value = causal.DevCausalGrupoDesc.Value;
                        }
                    }
                }
                return devolucionDocu;
            }
            catch (Exception ex)
            {
                 Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DevolucionSolicitud_GetByNumeroDoc");
                 return null;
            }           
        }

        #endregion

        #region Liquidación Crédito

        #region Funciones Privadas

        /// <summary>
        /// Funcion para aprobar el credito
        /// </summary>
        /// <param name="documentID">Documento </param>
        /// <param name="actFlujoID"></param>
        /// <param name="ccCredito"></param>
        /// <param name="insideAnotherTx"></param>
        /// <returns></returns>
        internal DTO_TxResult LiquidacionCredito_Aprobar(int documentID, string actFlujoID, DTO_ccSolicitudDocu solicitud, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            #region Variables generales

            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoCompraCartera = (DAL_ccCreditoCompraCartera)base.GetInstance(typeof(DAL_ccCreditoCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccEstadoCuentaHistoria = (DAL_ccEstadoCuentaHistoria)base.GetInstance(typeof(DAL_ccEstadoCuentaHistoria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccEstadoCuentaComponentes = (DAL_ccEstadoCuentaComponentes)base.GetInstance(typeof(DAL_ccEstadoCuentaComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloTesoreria = (ModuloTesoreria)base.GetInstance(typeof(ModuloTesoreria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            // Principal
            DTO_glDocumentoControl ctrlNew = null;
            DTO_Comprobante comprobante = null;
            DTO_coComprobante comp = null;

            // Recompra
            List<DTO_glDocumentoControl> listCtrlReoperacion = new List<DTO_glDocumentoControl>();
            DTO_glDocumentoControl ctrlReoperacion = null;
            DTO_Comprobante comprobanteReoperacion = null;
            DTO_coComprobante compReoperacion = null;
            #endregion
            try
            {
                #region Variables

                int numDocNew = 0;
                int numDocNewReoperacion = 0;
                decimal valorReoperacionTot = 0;
                DTO_glDocumentoControl ctrlOld = this._moduloGlobal.glDocumentoControl_GetByID(solicitud.NumeroDoc.Value.Value);
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));

                //Variables del comprobante
                DTO_coDocumento coDoc = new DTO_coDocumento();
                string coDocID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoDocumentoCredito);
                string ctaContraOrden = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterPropia);

                //Variables para reoperaciones
                DTO_coDocumento coDocReoperacion = new DTO_coDocumento();
                string coDocReOperacionID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocumentoContableReoperacion);

                //Componentes
                string componenteCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string componenteInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string componenteSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string componenteMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string componenteUsura = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteUsura);
                string componentePJ = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);
                string componentePolizaEC = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePolizaEC);
                string componenteAbonosCap = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteAbonosDeuda);

                //Información por defecto
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string cajaXdef = this.GetControlValueByCompany(ModulesPrefix.ts, AppControl.ts_CajaXDefecto);
                string compradorPropio = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);

                //Variables de operación
                List<DTO_ccCreditoDocu> creditosRecomprados = new List<DTO_ccCreditoDocu>();

                //Consecutivo del credito
                string EmpNro = this.Empresa.NumeroControl.Value;
                string _modId = ((int)ModulesPrefix.cc).ToString();
                string keyControl = EmpNro + _modId + AppControl.cc_ConsecutivoCreditos;

                DTO_glControl consecutivoCredDTO = this._moduloGlobal.GetControlByID(Convert.ToInt32(keyControl));
                int consecutivoCred = string.IsNullOrWhiteSpace(consecutivoCredDTO.Data.Value) ? 1 : Convert.ToInt32(consecutivoCredDTO.Data.Value) + 1;

                Dictionary<int, decimal> valoresRecompra = new Dictionary<int, decimal>();
                DTO_ccLineaCredito lineaCred = (DTO_ccLineaCredito)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccLineaCredito, solicitud.LineaCreditoID.Value, true, false);
                #endregion
                #region Validaciones

                //Valida el coDocumento
                if (string.IsNullOrWhiteSpace(coDocID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CodigoDocumentoCredito + "&&" + string.Empty;

                    return result;
                }
                else
                    coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocID, true, false);

                //Valida que tenga comprobante
                if (string.IsNullOrWhiteSpace(coDoc.ComprobanteID.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;

                    return result;
                }

                //Valida que el documento asociado tenga cuenta local
                if (string.IsNullOrWhiteSpace(coDoc.CuentaLOC.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocID;

                    return result;
                }

                //Valida la cuenta de contraP
                if (string.IsNullOrWhiteSpace(ctaContraOrden))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenContraCarterPropia + "&&" + string.Empty;

                    return result;
                }

                //Valida el coDocumento
                if (string.IsNullOrWhiteSpace(coDocReOperacionID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocumentoContableReoperacion + "&&" + string.Empty;

                    return result;
                }
                else
                    coDocReoperacion = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocReOperacionID, true, false);

                //Valida que tenga comprobante
                if (string.IsNullOrWhiteSpace(coDocReoperacion.ComprobanteID.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;

                    return result;
                }

                //Valida que el documento asociado tenga cuenta local
                if (string.IsNullOrWhiteSpace(coDocReoperacion.CuentaLOC.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocReOperacionID;

                    return result;
                }

                //Valida el periodo
                if (periodo.Month != ctrlOld.FechaDoc.Value.Value.Month)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidDatePeriod;

                    return result;
                }
                //else
                //    solicitud.FechaLiquida.Value = ctrlOld.FechaDoc.Value.Value;

                //Valida la caja
                if (string.IsNullOrWhiteSpace(cajaXdef))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.ts).ToString() + AppControl.ts_CajaXDefecto + "&&" + string.Empty;

                    return result;
                }


                #endregion
                #region Asigna el nuevo flujo y actualiza el estado de la solicitud

                if (documentID == AppDocuments.AprobacionSolicitudFin)
                {
                    List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.DigitacionCreditoFinanciera);
                    this.DeshabilitarAlarma(solicitud.NumeroDoc.Value.Value, actividades[0]);
                }

                this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, solicitud.NumeroDoc.Value.Value, EstadoDocControl.Aprobado, solicitud.Observacion.Value, true);
                result = this.AsignarFlujo(documentID, solicitud.NumeroDoc.Value.Value, actFlujoID, false, solicitud.Observacion.Value);
                if (result.Result == ResultValue.NOK)
                    return result;

                #endregion
                #region Crea glDocumentoControl

                ctrlNew = new DTO_glDocumentoControl();
                ctrlNew.DocumentoNro.Value = 0;
                ctrlNew.DocumentoID.Value = AppDocuments.LiquidacionCredito;
                ctrlNew.LugarGeograficoID.Value = ctrlOld.LugarGeograficoID.Value;
                ctrlNew.NumeroDoc.Value = 0;
                ctrlNew.DocumentoTipo.Value = ctrlOld.DocumentoTipo.Value;
                ctrlNew.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                ctrlNew.Fecha.Value = DateTime.Now;
                ctrlNew.FechaDoc.Value = solicitud.FechaLiquida.Value;
                ctrlNew.PeriodoDoc.Value = periodo;
                ctrlNew.PeriodoUltMov.Value = periodo;
                ctrlNew.CuentaID.Value = coDoc.CuentaLOC.Value;
                ctrlNew.AreaFuncionalID.Value = ctrlOld.AreaFuncionalID.Value;
                ctrlNew.PrefijoID.Value = ctrlOld.PrefijoID.Value;
                ctrlNew.ProyectoID.Value = ctrlOld.ProyectoID.Value;
                ctrlNew.CentroCostoID.Value = ctrlOld.CentroCostoID.Value;
                ctrlNew.LineaPresupuestoID.Value = ctrlOld.LineaPresupuestoID.Value;
                ctrlNew.TerceroID.Value = solicitud.ClienteID.Value;
                ctrlNew.DocumentoTercero.Value = solicitud.Libranza.Value.ToString();
                ctrlNew.MonedaID.Value = ctrlOld.MonedaID.Value;
                ctrlNew.TasaCambioCONT.Value = ctrlOld.TasaCambioCONT.Value;
                ctrlNew.TasaCambioDOCU.Value = ctrlOld.TasaCambioDOCU.Value;
                ctrlNew.Observacion.Value = solicitud.Observacion.Value;
                ctrlNew.Descripcion.Value = "Liquidación - Crédito " + solicitud.Libranza.Value;
                ctrlNew.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrlNew.seUsuarioID.Value = this.UserId;
                ctrlNew.Valor.Value = solicitud.VlrPrestamo.Value.Value;
                ctrlNew.Iva.Value = 0;

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.LiquidacionCredito, ctrlNew, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    return result;
                }
                numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrlNew.NumeroDoc.Value = numDocNew;
                #endregion
                #region Asigna el crédito como padre de la solicitud

                DTO_glDocumentoControl ctrlSolicitud = this._moduloGlobal.glDocumentoControl_GetByID(solicitud.NumeroDoc.Value.Value);
                //ctrlSolicitud.DocumentoPadre.Value = numDocNew;

                this._moduloGlobal.glDocumentoControl_Update(ctrlSolicitud, true, true);

                #endregion
                #region Copia la informacion de las tablas de solicitud a los creditos

                //ccCreditoDocu 
                //if (solicitud.TipoGarantia.Value != null && solicitud.TipoGarantia.Value.HasValue && solicitud.TipoGarantia.Value.Value == (int)TipoGarantia.Real)
                //    solicitud.Libranza.Value = consecutivoCred;
                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_AddFromccSolicitudDocu(solicitud, numDocNew);

                //ccSolicitudPlanPagos
                this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_AddFromSolicitudPlanPagos(solicitud.NumeroDoc.Value.Value, numDocNew);

                //ccCreditoComponentes
                this._dal_ccCreditoComponentes.DAL_ccCarteraComponentes_AddFromccSolicitudComponentes(solicitud.NumeroDoc.Value.Value, numDocNew);

                //ccCreditoCompraCartera
                this._dal_ccCreditoCompraCartera.DAL_ccCreditoCompraCartera_AddFromccSolicitudCompraCartera(solicitud.NumeroDoc.Value.Value, numDocNew);

                #endregion
                #region Guarda los movimientos de cartera
                List<DTO_ccCreditoComponentes> credComps = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(numDocNew);
                foreach (DTO_ccCreditoComponentes c in credComps)
                {
                    DTO_ccCarteraComponente componente = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, c.ComponenteCarteraID.Value, true, false);
                    if (componente.TipoComponente.Value == (byte)TipoComponente.CapitalSolicitado || componente.TipoComponente.Value == (byte)TipoComponente.ComponenteCuota)
                    {
                        DTO_ccCarteraMvto mvto = new DTO_ccCarteraMvto();
                        mvto.NumCredito.Value = numDocNew;
                        mvto.NumeroDoc.Value = numDocNew;
                        mvto.ComponenteCarteraID.Value = c.ComponenteCarteraID.Value;
                        mvto.Tasa.Value = 0;
                        mvto.VlrAbono.Value = 0;
                        mvto.VlrComponente.Value = c.TotalValor.Value;
                        this.ccCarteraMvto_Add(mvto);
                    }
                }

                #endregion
                #region Actualiza la información de reoperaciones (cartera comprada)

                List<List<DTO_ComprobanteFooter>> footerCompraInterna = new List<List<DTO_ComprobanteFooter>>();
                List<List<DTO_ComprobanteFooter>> footerCompraExterna = new List<List<DTO_ComprobanteFooter>>();
                List<DTO_ccSolicitudCompraCartera> compras = this._dal_ccCreditoCompraCartera.DAL_ccCreditoCompraCartera_GetByNumeroDoc(ctrlNew.NumeroDoc.Value.Value);
                foreach (DTO_ccSolicitudCompraCartera compra in compras)
                {
                    List<DTO_ComprobanteFooter> footerCompra = new List<DTO_ComprobanteFooter>();
                    if (compra.DocCompra.Value != null && compra.DocCompra.Value != 0)
                    {
                        DTO_ccCreditoDocu creditoRecompra = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(compra.DocCompra.Value.Value);
                        DTO_ccEstadoCuentaHistoria estadoCuentaHistoriaEC = this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_GetByNumeroDoc(creditoRecompra.DocEstadoCuenta.Value.Value);

                        if (estadoCuentaHistoriaEC.EC_Proposito.Value != null 
                            && estadoCuentaHistoriaEC.EC_FijadoInd.Value != null && estadoCuentaHistoriaEC.EC_FijadoInd.Value.Value
                            && (estadoCuentaHistoriaEC.EC_Proposito.Value.Value == (int)PropositoEstadoCuenta.RecogeSaldo || estadoCuentaHistoriaEC.EC_Proposito.Value.Value == (int)PropositoEstadoCuenta.RestructuracionAbono))
                        {
                            #region Carga la info para reoperaciones
                            if (estadoCuentaHistoriaEC.EC_ValorPago.Value == compra.VlrSaldo.Value)
                            {
                                creditosRecomprados.Add(creditoRecompra);
                                #region Trae la info del credito y los valores a pagar por componente

                                //Se maneja igual que en la pantalla de pagos totales
                                List<DTO_ccEstadoCuentaComponentes> pagosComponentesEC = this._dal_ccEstadoCuentaComponentes.DAL_ccEstadoCuentaComponentes_GetByLibranza(compra.Documento.Value.Value.ToString(), componenteMora, componentePJ, componenteUsura);
                                pagosComponentesEC.RemoveAll(x => x.VlrPagar.Value == 0 && x.PagoValor.Value == 0 && x.AbonoValor.Value == 0 && x.SaldoValor.Value == 0);
                                List<DTO_ccSaldosComponentes> saldoComponentesEC = new List<DTO_ccSaldosComponentes>();
                                foreach (DTO_ccEstadoCuentaComponentes item in pagosComponentesEC)
                                {
                                    DTO_ccSaldosComponentes saldoComp = new DTO_ccSaldosComponentes();
                                    saldoComp.ComponenteCarteraID.Value = item.ComponenteCarteraID.Value;
                                    saldoComp.Descriptivo.Value = item.Descriptivo.Value;

                                    saldoComp.TotalSaldo.Value = item.SaldoValor.Value;
                                    saldoComp.CuotaSaldo.Value = item.AbonoValor.Value;
                                    saldoComp.AbonoValor.Value = item.AbonoValor.Value;

                                    saldoComponentesEC.Add(saldoComp);
                                }

                                List<DTO_ccSaldosComponentes> saldosRecompra = new List<DTO_ccSaldosComponentes>();
                                DTO_glDocumentoControl ctrlRecompraEC = this._moduloGlobal.glDocumentoControl_GetByID(compra.DocCompra.Value.Value);
                                List<DTO_ccCreditoPlanPagos> planPagosRecompra = this.LoadCreditoInfo_Pago(TipoRecaudo.PagoTotal, creditoRecompra, estadoCuentaHistoriaEC, saldoComponentesEC, saldosRecompra);

                                #endregion
                                #region Genera el comprobante (sin contrapartida de balance)
                                decimal vlrAbonoCapital = 0;
                                List<DTO_ccSaldosComponentes> saldosAbonoCap = new List<DTO_ccSaldosComponentes>();
                                DTO_ccSaldosComponentes dtoAbono = new DTO_ccSaldosComponentes();
                                DTO_ccCarteraComponente compAbono = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, componenteAbonosCap, true, false);
                                if (compAbono != null)
                                {
                                    dtoAbono.ComponenteCarteraID.Value = componenteAbonosCap;
                                    dtoAbono.Descriptivo.Value = compAbono.Descriptivo.Value;
                                    dtoAbono.TipoComponente.Value = compAbono.TipoComponente.Value;
                                    dtoAbono.TotalInicial.Value = 0;
                                    dtoAbono.TotalSaldo.Value = 0;
                                    dtoAbono.CuotaInicial.Value = 0;
                                    dtoAbono.CuotaSaldo.Value = estadoCuentaHistoriaEC.EC_ValorAbono.Value * -1; 
                                    dtoAbono.AbonoSaldo.Value = 0;
                                    dtoAbono.AbonoValor.Value = 0;
                                    dtoAbono.CuotaID.Value = creditoRecompra.Plazo.Value;
                                    saldosAbonoCap.Add(dtoAbono);
                                }
                                else
                                {
                                    if (estadoCuentaHistoriaEC.EC_Proposito.Value.Value == (int)PropositoEstadoCuenta.RestructuracionAbono)
                                    {
                                        result.Result = ResultValue.NOK;
                                        result.ResultMessage = "NO existe el componente de Abono a Deuda";
                                        return result;
                                    }
                                }
                                creditoRecompra.EC_PolizaMvto.Value = estadoCuentaHistoriaEC.EC_PolizaMvto.Value;//Asigna el tipo de Poliza para contabilizar
                                object compCompra = this.GenerarComprobante_PagosCartera(TipoRecaudo.PagoTotal, ctrlNew, ctrlRecompraEC, creditoRecompra, planPagosRecompra, saldosRecompra,
                                    saldosAbonoCap, null, componenteCapital, componenteInteres, componenteSeguro, false, "RECOMPRA CARTERA - OBL: ", (int)EstadoDeuda.Normal,
                                    ref vlrAbonoCapital);

                                if (compCompra.GetType() == typeof(DTO_TxResult))
                                {
                                    result = (DTO_TxResult)compCompra;
                                    return result;
                                }
                                else
                                {
                                    footerCompra = ((DTO_Comprobante)compCompra).Footer;
                                    foreach (DTO_ComprobanteFooter f in footerCompra)
                                        f.Descriptivo.Value = "CANCELA CREDITO POR COMPRA CARTERA";
                                }
                                #endregion
                                #region Obtiene la información de la reoperación
                                decimal valorReoperacion = 0;
                                valorReoperacion = footerCompra.Sum(f => f.vlrMdaLoc.Value.Value);
                                valorReoperacion = Math.Abs(valorReoperacion);
                                valorReoperacionTot += valorReoperacion;
                                #endregion
                                #region General el comprobante de reoperacion
                                if (footerCompra.Count > 0)
                                {
                                    #region Crea glDocumentoControl

                                    ctrlReoperacion = new DTO_glDocumentoControl();
                                    ctrlReoperacion.DocumentoNro.Value = 0;
                                    ctrlReoperacion.DocumentoID.Value = AppDocuments.RecaudoReoperacion;
                                    ctrlReoperacion.LugarGeograficoID.Value = ctrlOld.LugarGeograficoID.Value;
                                    ctrlReoperacion.NumeroDoc.Value = 0;
                                    ctrlReoperacion.DocumentoTipo.Value = ctrlOld.DocumentoTipo.Value;
                                    ctrlReoperacion.ComprobanteID.Value = coDocReoperacion.ComprobanteID.Value;
                                    ctrlReoperacion.Fecha.Value = DateTime.Now;
                                    ctrlReoperacion.FechaDoc.Value = solicitud.FechaLiquida.Value;
                                    ctrlReoperacion.PeriodoDoc.Value = periodo;
                                    ctrlReoperacion.PeriodoUltMov.Value = periodo;
                                    ctrlReoperacion.CuentaID.Value = coDoc.CuentaLOC.Value;
                                    ctrlReoperacion.AreaFuncionalID.Value = ctrlOld.AreaFuncionalID.Value;
                                    ctrlReoperacion.PrefijoID.Value = ctrlOld.PrefijoID.Value;
                                    ctrlReoperacion.ProyectoID.Value = ctrlOld.ProyectoID.Value;
                                    ctrlReoperacion.CentroCostoID.Value = ctrlOld.CentroCostoID.Value;
                                    ctrlReoperacion.LineaPresupuestoID.Value = ctrlOld.LineaPresupuestoID.Value;
                                    ctrlReoperacion.TerceroID.Value = solicitud.ClienteID.Value;
                                    ctrlReoperacion.DocumentoTercero.Value = solicitud.Libranza.Value.ToString();
                                    ctrlReoperacion.MonedaID.Value = ctrlOld.MonedaID.Value;
                                    ctrlReoperacion.TasaCambioCONT.Value = ctrlOld.TasaCambioCONT.Value;
                                    ctrlReoperacion.TasaCambioDOCU.Value = ctrlOld.TasaCambioDOCU.Value;
                                    ctrlReoperacion.Observacion.Value = solicitud.Observacion.Value;
                                    ctrlReoperacion.Descripcion.Value = "Reoperacion Crédito " + solicitud.Libranza.Value;
                                    ctrlReoperacion.Estado.Value = (byte)EstadoDocControl.Aprobado;
                                    ctrlReoperacion.seUsuarioID.Value = this.UserId;
                                    ctrlReoperacion.Valor.Value = valorReoperacion;
                                    ctrlReoperacion.Iva.Value = 0;
                                    ctrlReoperacion.DocumentoPadre.Value = numDocNew;

                                    DTO_TxResultDetail resultGLDC_Recompra = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.LiquidacionCredito, ctrlReoperacion, true);
                                    if (resultGLDC_Recompra.Message != ResultValue.OK.ToString())
                                    {
                                        result.Result = ResultValue.NOK;
                                        result.ResultMessage = "NOK";
                                        result.Details.Add(resultGLDC);
                                        return result;
                                    }
                                    numDocNewReoperacion = Convert.ToInt32(resultGLDC_Recompra.Key);
                                    ctrlReoperacion.NumeroDoc.Value = numDocNewReoperacion;
                                    listCtrlReoperacion.Add(ctrlReoperacion);
                                    #endregion
                                    #region Genera el comprobante de reoperación
                                    DTO_ccCompradorCartera comprador = (DTO_ccCompradorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCompradorCartera, creditoRecompra.CompradorCarteraID.Value, true, false); 
                                    object compTempReoperacion = this.GenerarComprobanteReoperacion(ctrlReoperacion, coDocReoperacion, footerCompra, concCargoXdef, lgXdef, lineaXdef);
                                    if (compTempReoperacion.GetType() == typeof(DTO_TxResult))
                                    {
                                        result = (DTO_TxResult)compTempReoperacion;
                                        return result;
                                    }
                                    else
                                    {
                                        comprobanteReoperacion = (DTO_Comprobante)compTempReoperacion;
                                        compReoperacion = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, comprobanteReoperacion.Header.ComprobanteID.Value, true, false);
                                        foreach (var f in  comprobanteReoperacion.Footer)
                                            f.DatoAdd2.Value = comprador != null? comprador.TerceroID.Value : string.Empty;
                                        
                                        result = this._moduloContabilidad.ContabilizarComprobante(AppDocuments.RecaudoReoperacion, comprobanteReoperacion, periodo, ModulesPrefix.cc, 0, false);
                                        if (result.Result == ResultValue.NOK)
                                            return result;
                                    }
                                    #endregion
                                    #region Crea el recibo de caja(tsReciboCajaDocu)

                                    DTO_ccCliente cliente = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, solicitud.ClienteID.Value, true, false);
                                    DTO_tsReciboCajaDocu recibo = new DTO_tsReciboCajaDocu();
                                    recibo.NumeroDoc.Value = ctrlReoperacion.NumeroDoc.Value;
                                    recibo.CajaID.Value = cajaXdef;
                                    recibo.Valor.Value = valorReoperacion;
                                    recibo.IVA.Value = 0;
                                    recibo.TerceroID.Value = cliente.TerceroID.Value;
                                    recibo.ClienteID.Value = cliente.ID.Value;
                                    result = this._moduloTesoreria.ReciboCaja_Add(recibo);
                                    if (result.Result == ResultValue.NOK)
                                        return result;

                                    #endregion
                                }

                                #endregion
                                #region Actualiza la info de los pagos y plan de pagos

                                result = this.UpdateInfoCredito_Pagos(TipoRecaudo.PagoTotal, numDocNewReoperacion, creditoRecompra, periodo, ctrlNew.FechaDoc.Value.Value,
                                    planPagosRecompra, saldosRecompra, compradorPropio, componenteCapital, componenteInteres, componenteSeguro, componenteMora, componenteUsura, 
                                    componentePJ, componentePolizaEC);

                                if (result.Result == ResultValue.NOK)
                                    return result;

                                #endregion
                                #region Actualiza el valor de recompra
                                valoresRecompra[creditoRecompra.NumeroDoc.Value.Value] = vlrAbonoCapital;
                                #endregion
                            }
                            else
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = DictionaryMessages.Err_Cc_NewSaldoRecompra + "&&" + creditoRecompra.Libranza.Value.Value.ToString();
                                return result;
                            }
                            #endregion
                            footerCompraInterna.Add(footerCompra);
                        }
                    }
                    else
                    {
                        #region Cartera Externa (Digitada)

                        if (compra.DocAnticipo.Value != null)
                        {
                            DTO_glDocumentoControl ctrlAnticipo = this._moduloGlobal.glDocumentoControl_GetByID(compra.DocAnticipo.Value.Value);
                            DTO_coPlanCuenta ctaAnticipo = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctrlAnticipo.CuentaID.Value, true, false);

                            decimal tc = ctrlAnticipo.TasaCambioCONT.Value.Value;
                            decimal vlrME = 0;
                            if (tc != 0)
                                vlrME = Math.Round(compra.VlrSaldo.Value.Value * tc, 2) * -1;

                            DTO_ComprobanteFooter detCompra = this.CrearComprobanteFooter(ctrlAnticipo, tc, concCargoXdef, lgXdef, lineaXdef, compra.VlrSaldo.Value.Value * -1, vlrME, false);
                            footerCompra.Add(detCompra);
                        }
                        else 
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Cc_AnticipoCompraEmpty + "&&" + solicitud.Libranza.Value;
                            return result;
                        }
                        #endregion
                        footerCompraExterna.Add(footerCompra);
                    }
                }
                #endregion                
                #region Genera Comprobante liquidacion
                // Ya se paso la información de la solicitud a los créditos
                DTO_ccAsesor asesor = (DTO_ccAsesor)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccAsesor, solicitud.AsesorID.Value, true, false);
                object compTemp = this.GenerarComprobanteLiquidacion(documentID, ctrlNew, coDoc, lineaCred.ClaseCredito.Value, ctaContraOrden, coDocReoperacion.CuentaLOC.Value, componenteSeguro,
                    footerCompraExterna, valorReoperacionTot, asesor.TerceroID.Value, concCargoXdef, lgXdef, lineaXdef);

                if (compTemp.GetType() == typeof(DTO_TxResult))
                {
                    result = (DTO_TxResult)compTemp;
                    return result;
                }
                else
                {
                    comprobante = (DTO_Comprobante)compTemp;
                    comp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, comprobante.Header.ComprobanteID.Value, true, false);
                    result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobante, periodo, ModulesPrefix.cc, 0, false);
                    if (result.Result == ResultValue.NOK)
                        return result;
                }

                #endregion                
                #region Revisa si se cancelaron la totalidad de los créditos de recompra

                foreach (DTO_ccCreditoDocu creditoRecompra in creditosRecomprados)
                {
                    bool hasSaldos = this._moduloContabilidad.Saldos_CreditoHasSaldo(periodo, creditoRecompra.NumeroDoc.Value.Value);
                    if (!hasSaldos)
                        creditoRecompra.CanceladoInd.Value = true;

                    //Si se quita esta linea afecta los pagos desde un EC ... ejemplo seguro en financieras, poliza continua
                    creditoRecompra.DocPrepago.Value = numDocNewReoperacion;
                    //creditoRecompra.DocEstadoCuenta.Value = null;
                    creditoRecompra.VlrPrepago.Value = valoresRecompra[creditoRecompra.NumeroDoc.Value.Value];

                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(creditoRecompra);
                }

                #endregion
                #region Actualiza el consecutivo del crédito

                consecutivoCredDTO.Data.Value = consecutivoCred.ToString();
                this._moduloGlobal.glControl_Update(consecutivoCredDTO);

                #endregion

                result.ExtraField = ctrlNew.NumeroDoc.Value.Value.ToString();
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "LiquidacionCredito_Aprobar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera el consecutivo
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        //Consecutivos de liquidación
                        ctrlNew.ComprobanteIDNro.Value = this.GenerarComprobanteNro(comp, ctrlNew.PrefijoID.Value, ctrlNew.PeriodoDoc.Value.Value, ctrlNew.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlNew, false, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlNew.NumeroDoc.Value.Value, ctrlNew.ComprobanteIDNro.Value.Value, false);

                        //Consecutivos de recompra
                        foreach (DTO_glDocumentoControl ctrlReop in listCtrlReoperacion)
                        {
                            ctrlReop.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlReop.DocumentoID.Value.Value,ctrlReop.PrefijoID.Value);
                            ctrlReop.ComprobanteIDNro.Value = this.GenerarComprobanteNro(compReoperacion, ctrlReop.PrefijoID.Value, ctrlReop.PeriodoDoc.Value.Value, ctrlReop.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlReop, true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlReop.NumeroDoc.Value.Value, ctrlReop.ComprobanteIDNro.Value.Value, false);
                        } 
                        #endregion
                    }
                    else if (documentID != AppDocuments.AprobacionSolicitudFin)
                        throw new Exception("ContabilizaLiquidacion - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Contabiliza la liquidacion de un credito
        /// </summary>
        /// <param name="documentID">Identificador del documento</param>
        /// <param name="ctrl">Documento para contabilizar</param>
        /// <param name="ctrlNew">Nuevo documento</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        private object GenerarComprobanteLiquidacion(int documentID, DTO_glDocumentoControl ctrl, DTO_coDocumento coDoc, string claseCredito, string ctaContraOrden, string ctaReoperacion, 
            string componenteSeguro, List<List<DTO_ComprobanteFooter>> footerCompraExterna, decimal vlrReoperacionInterno, string terceroAsesor, string concCargoXdef, string lgXdef, string lineaXdef)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            #region Variables generales
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)this.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoCompraCartera = (DAL_ccCreditoCompraCartera)base.GetInstance(typeof(DAL_ccCreditoCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccEstadoCuentaComponentes = (DAL_ccEstadoCuentaComponentes)base.GetInstance(typeof(DAL_ccEstadoCuentaComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccEstadoCuentaHistoria = (DAL_ccEstadoCuentaHistoria)this.GetInstance(typeof(DAL_ccEstadoCuentaHistoria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            #endregion
            try
            {
                #region Variables

                DTO_Comprobante comprobante = new DTO_Comprobante();
                DTO_ComprobanteHeader header = new DTO_ComprobanteHeader();
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> footerTemp = new List<DTO_ComprobanteFooter>();

                decimal tc = 0;
                bool distribuyeSeguro = false;
                string cliente = ctrl.TerceroID.Value;

                //Variables por defecto
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                string ctaIVAID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaIVAComponentes);

                //Otros
                string sectorCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);
                string periodoStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);

                DTO_coPlanCuenta cta;
                DTO_coPlanCuenta ctaIVA;
                DTO_glConceptoSaldo cSaldo;

                DTO_ccCreditoComponentes seguroCredComp = new DTO_ccCreditoComponentes();
                DTO_ccCarteraComponente seguroCarteraComp = new DTO_ccCarteraComponente();
                DTO_ccComponenteCuenta seguroCompCta = new DTO_ccComponenteCuenta();
                Dictionary<string, DTO_coPlanCuenta> cacheCtas = new Dictionary<string, DTO_coPlanCuenta>();
                Dictionary<string, DTO_glConceptoSaldo> cacheSaldos = new Dictionary<string, DTO_glConceptoSaldo>();
                List<DTO_ccComponenteCuenta> compCtas = new List<DTO_ccComponenteCuenta>();
                List<DTO_ccCreditoComponentes> creditoComps = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(ctrl.NumeroDoc.Value.Value);

                //Trae la tasa de cambio
                if (this.Multimoneda())
                    tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, ctrl.PeriodoDoc.Value.Value);

                #endregion
                #region Validaciones

                //Valida la cuenta de IVA
                if (string.IsNullOrWhiteSpace(ctaIVAID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaIVAComponentes + "&&" + string.Empty;

                    return result;
                }
                else
                {
                    ctaIVA = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaIVAID, true, false);
                    cacheCtas.Add(ctaIVAID, ctaIVA);

                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, ctaIVA.ConceptoSaldoID.Value, true, false);
                    cacheSaldos.Add(ctaIVA.ConceptoSaldoID.Value, cSaldo);
                }

                #endregion
                #region Carga la lista de cuentas
                DAL_MasterComplex dalComplex = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                dalComplex.DocumentID = AppMasters.ccComponenteCuenta;

                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("ComponenteCarteraID", "");
                pks.Add("TipoEstado", ((int)TipoEstadoCartera.Propia).ToString());
                pks.Add("ClaseCredito", claseCredito);

                foreach (DTO_ccCreditoComponentes c in creditoComps)
                {
                    pks["ComponenteCarteraID"] = c.ComponenteCarteraID.Value;
                    DTO_MasterComplex complex = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);
                    if (complex != null)
                    {
                        DTO_ccComponenteCuenta cc = (DTO_ccComponenteCuenta)complex;
                        compCtas.Add(cc);
                        #region Carga la cuentaID
                        if (!string.IsNullOrWhiteSpace(cc.CuentaID.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaID.Value, true, false);
                                cacheCtas.Add(cc.CuentaID.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                        #region Carga la cuenta de tercero (CtaRecursosTerceros)
                        if (!string.IsNullOrWhiteSpace(cc.CtaRecursosTerceros.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CtaRecursosTerceros.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CtaRecursosTerceros.Value, true, false);
                                cacheCtas.Add(cc.CtaRecursosTerceros.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                        #region Carga la cuenta de ingreso (CuentaIngreso)
                        if (!string.IsNullOrWhiteSpace(cc.CuentaIngreso.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CuentaIngreso.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaIngreso.Value, true, false);
                                cacheCtas.Add(cc.CuentaIngreso.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        DTO_ccCarteraComponente carteraComp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, c.ComponenteCarteraID.Value, true, false);
                        #region Carga la cuentaID
                        if (!string.IsNullOrWhiteSpace(carteraComp.CuentaID.Value))
                        {
                            if (!cacheCtas.ContainsKey(carteraComp.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, carteraComp.CuentaID.Value, true, false);
                                cacheCtas.Add(carteraComp.CuentaID.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                    }
                }

                //Agrega la cuenta de contrapartida a la lista de cuentas
                if (!cacheCtas.ContainsKey(ctaContraOrden))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraOrden, true, false);
                    cacheCtas.Add(ctaContraOrden, cta);

                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                    {
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                    }
                }

                #endregion
                #region Validaciones para la distribucion de seguro

                List<DTO_ccCreditoComponentes> seguroList = creditoComps.Where(x => x.ComponenteCarteraID.Value == componenteSeguro).ToList();
                if (seguroList.Count > 0)
                {
                    seguroCredComp = seguroList.First();
                    seguroCarteraComp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, seguroCredComp.ComponenteCarteraID.Value, true, false);
                    seguroCompCta = this.GetComponenteCuentaByComponenteCartera(compCtas, seguroCredComp.ComponenteCarteraID.Value);

                    if (sectorCartera == ((byte)SectorCartera.Financiero).ToString()
                        && seguroCarteraComp.TipoComponente.Value == (byte)TipoComponente.ComponenteCuota
                        && seguroCompCta.CuentaControl.Value.Value == (byte)CuentaControl.Balance
                        && !string.IsNullOrWhiteSpace(seguroCompCta.CuentaDistribuye.Value))
                    {
                        distribuyeSeguro = true;

                        if (string.IsNullOrWhiteSpace(seguroCompCta.CtaRecursosTerceros.Value))
                        {
                            DTO_TxResultDetail rd = new DTO_TxResultDetail();
                            rd.Message = DictionaryMessages.Err_Cc_InvalidCtaRecursosTerceros + "&&" + seguroCredComp.ComponenteCarteraID.Value +
                                "&&" + seguroCompCta.TipoEstado.Value.Value.ToString() + "&&" + seguroCompCta.ClaseCredito.Value;

                            result.Result = ResultValue.NOK;
                            result.Details.Add(rd);
                            return result;
                        }

                        if (!cacheCtas.ContainsKey(seguroCompCta.CuentaDistribuye.Value))
                        {
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, seguroCompCta.CuentaDistribuye.Value, true, false);
                            cacheCtas.Add(seguroCompCta.CuentaDistribuye.Value, cta);

                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }
                        }
                    }
                }
                #endregion
                #region Carga los registros sin DescuentoInd (Débitos y créditos - Revisa si maneja IVA)
                List<DTO_ccCreditoComponentes> cTemp = creditoComps.Where(x => !x.DescuentoInd.Value.Value).ToList();
                string terceroID = ctrl.TerceroID.Value;
                foreach (DTO_ccCreditoComponentes componente in cTemp)
                {
                    DTO_ccCarteraComponente carteraComp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, componente.ComponenteCarteraID.Value, true, false);
                    DTO_ccComponenteCuenta compCta = this.GetComponenteCuentaByComponenteCartera(compCtas, componente.ComponenteCarteraID.Value);
                    if (compCta != null)
                    {
                        if (compCta.AsesorInd.Value.Value)
                            ctrl.TerceroID.Value = terceroAsesor;
                        else if (!String.IsNullOrWhiteSpace(compCta.TerceroID.Value) && compCta.CuentaControl.Value != 2)
                            ctrl.TerceroID.Value = compCta.TerceroID.Value;
                        else
                            ctrl.TerceroID.Value = cliente;

                        if (!componente.CompInvisibleInd.Value.Value)
                        {
                            #region Crea los debitos
                            if (!string.IsNullOrWhiteSpace(compCta.CuentaID.Value))
                            {
                                cta = cacheCtas[compCta.CuentaID.Value];
                                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                                DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, componente.TotalValor.Value.Value, 0, false);
                                f.DatoAdd9.Value = AuxiliarDatoAdd9.Propia.ToString();
                                footerTemp.Add(f);
                            }
                            #endregion
                        }
                        else
                        {
                            #region Crea los créditos

                            cta = null;
                            bool validCta = true;
                            #region Valida que existan las cuentas
                       
                            if (!string.IsNullOrWhiteSpace(compCta.CtaRecursosTerceros.Value))
                            {
                                cta = cacheCtas[compCta.CtaRecursosTerceros.Value];
                            }
                            else
                            {
                                if (!string.IsNullOrWhiteSpace(compCta.CuentaIngreso.Value))
                                    cta = cacheCtas[compCta.CuentaIngreso.Value];
                                else
                                {
                                    validCta = false;
                                    DTO_TxResultDetail rd = new DTO_TxResultDetail();
                                    rd.Message = DictionaryMessages.Err_Cc_InvalidCtaIngreso + "&&" + componente.ComponenteCarteraID.Value +
                                        "&&" + compCta.TipoEstado.Value.Value.ToString() + "&&" + compCta.ClaseCredito.Value;

                                    result.Result = ResultValue.NOK;
                                    result.Details.Add(rd);
                                }
                            }

                            #endregion

                            if (validCta)
                            {
                                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                                if (carteraComp.IvaLiquida.Value.Value != (int)IVALiquida.NoAplica)
                                {
                                    #region Con IVA
                                    decimal porcIVA = ctaIVA.ImpuestoPorc.Value != null && ctaIVA.ImpuestoPorc.Value.HasValue ? ctaIVA.ImpuestoPorc.Value.Value : 0;
                                    decimal baseIVA = Convert.ToInt32(componente.TotalValor.Value.Value / (1 + porcIVA / 100));

                                    //Cuenta de ingreso
                                    decimal vlrIng = componente.TotalValor.Value.Value - baseIVA;

                                    if (vlrIng > 0)
                                        vlrIng *= -1;

                                    if (vlrIng != 0)
                                    {
                                        //Deben ser negativos
                                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                                        DTO_ComprobanteFooter ing = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, baseIVA * -1, 0, false);
                                        footerTemp.Add(ing);

                                        //Cuenta de IVA
                                        cSaldo = cacheSaldos[ctaIVA.ConceptoSaldoID.Value];
                                        DTO_ComprobanteFooter iva = this.CrearComprobanteFooter(ctrl, ctaIVA, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrIng, 0, false);
                                        iva.vlrBaseML.Value = baseIVA;
                                        footerTemp.Add(iva);
                                    }
                                    #endregion
                                }
                                else
                                {
                                    #region Sin IVA

                                    decimal valComp = componente.TotalValor.Value.Value * -1;
                                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                    if (componente.ComponenteCarteraID.Value != componenteSeguro || !distribuyeSeguro)
                                    {
                                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, valComp, 0, false);
                                        footerTemp.Add(f);
                                    }
                                    #endregion
                                }
                            }
                            #endregion
                        }
                    }
                    else
                    {
                        if (carteraComp.TerceroTipo.Value  == 1) {
                            ctrl.TerceroID.Value = cliente;                            
                        }
                        else if (carteraComp.TerceroTipo.Value == 2) {
                            ctrl.TerceroID.Value = carteraComp.TerceroID.Value;
                        }
                        else if (carteraComp.TerceroTipo.Value == 3) {
                            ctrl.TerceroID.Value = terceroAsesor;
                        }
                        if (!componente.CompInvisibleInd.Value.Value)
                        {
                            #region Crea los debitos
                            if (!string.IsNullOrWhiteSpace(carteraComp.CuentaID.Value))
                            {
                                cta = cacheCtas[carteraComp.CuentaID.Value];
                                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                                DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, componente.TotalValor.Value.Value, 0, false);
                                f.DatoAdd9.Value = AuxiliarDatoAdd9.Propia.ToString();
                                footerTemp.Add(f);
                            }
                            #endregion
                        }
                        else
                        {
                            #region Crea los créditos
                            cta = null;
                            if (!string.IsNullOrWhiteSpace(carteraComp.CuentaID.Value))
                            {
                                cta = cacheCtas[carteraComp.CuentaID.Value];
                                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                                if (carteraComp.IvaLiquida.Value.Value != (int)IVALiquida.NoAplica)
                                {
                                    #region Con IVA
                                    decimal porcIVA = ctaIVA.ImpuestoPorc.Value != null && ctaIVA.ImpuestoPorc.Value.HasValue ? ctaIVA.ImpuestoPorc.Value.Value : 0;
                                    decimal baseIVA = Convert.ToInt32(componente.TotalValor.Value.Value / (1 + porcIVA / 100));

                                    //Cuenta de ingreso
                                    decimal vlrIng = componente.TotalValor.Value.Value - baseIVA;

                                    if (vlrIng > 0)
                                        vlrIng *= -1;

                                    if (vlrIng != 0)
                                    {
                                        //Deben ser negativos
                                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                                        DTO_ComprobanteFooter ing = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, baseIVA * -1, 0, false);
                                        footerTemp.Add(ing);

                                        //Cuenta de IVA
                                        cSaldo = cacheSaldos[ctaIVA.ConceptoSaldoID.Value];
                                        DTO_ComprobanteFooter iva = this.CrearComprobanteFooter(ctrl, ctaIVA, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrIng, 0, false);
                                        iva.vlrBaseML.Value = baseIVA;
                                        footerTemp.Add(iva);
                                    }
                                    #endregion
                                }
                                else
                                {
                                    #region Sin IVA

                                    decimal valComp = componente.TotalValor.Value.Value * -1;
                                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                    if (componente.ComponenteCarteraID.Value != componenteSeguro || !distribuyeSeguro)
                                    {
                                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, valComp, 0, false);
                                        footerTemp.Add(f);
                                    }
                                    #endregion
                                }
                            }
                            #endregion
                        }
                        //result.Result = ResultValue.NOK;
                        //result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasCompNoData + "&&" + componente.Descripcion.Value;
                    }
                }

                ctrl.TerceroID.Value = terceroID;
                if (result.Result == ResultValue.NOK)
                    return result;

                #endregion
                #region Carga la distribución del seguro (Financieras - crédito)

                if(distribuyeSeguro)
                {
                    int libranza = Convert.ToInt32(ctrl.DocumentoTercero.Value);
                    DTO_ccSolicitudDocu sol = this.GetSolicitudByLibranza(libranza);
                    decimal valSeguro = sol.VlrPoliza.Value.Value;
                    decimal valComp = seguroCredComp.TotalValor.Value.Value;

                    //Valor seguro
                    cta = cacheCtas[seguroCompCta.CtaRecursosTerceros.Value];
                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                    DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, valSeguro * -1, 0, false);
                    footerTemp.Add(f);

                    //Valor de distribución
                    decimal valRestante = valComp - valSeguro;
                    DTO_coPlanCuenta ctaDistribuye = cacheCtas[seguroCompCta.CuentaDistribuye.Value];
                    DTO_glConceptoSaldo cSaldoDistribuye = cacheSaldos[ctaDistribuye.ConceptoSaldoID.Value];
                    DTO_ComprobanteFooter fDistribuye = this.CrearComprobanteFooter(ctrl, ctaDistribuye, cSaldoDistribuye, tc, concCargoXdef, lgXdef, lineaXdef, valRestante * -1, 0, false);
                    footerTemp.Add(fDistribuye);
                }

                #endregion
                #region Carga los registros con DescuentoInd (crédito)
                List<DTO_ccCreditoComponentes> cTemp1 = creditoComps.Where(x => x.DescuentoInd.Value.Value).ToList();
                foreach (DTO_ccCreditoComponentes credito in cTemp1)
                {
                    DTO_ccCarteraComponente carteraComp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, credito.ComponenteCarteraID.Value, true, false);
                    DTO_ccComponenteCuenta compCta = this.GetComponenteCuentaByComponenteCartera(compCtas, credito.ComponenteCarteraID.Value);

                    if (compCta.AsesorInd.Value.Value)
                        ctrl.TerceroID.Value = terceroAsesor;
                    else if (!String.IsNullOrWhiteSpace(compCta.TerceroID.Value))
                        ctrl.TerceroID.Value = compCta.TerceroID.Value;
                    else
                        ctrl.TerceroID.Value = cliente;

                    if (compCta != null && !string.IsNullOrWhiteSpace(compCta.CuentaID.Value))
                    {
                        cta = cacheCtas[compCta.CuentaID.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, (credito.TotalValor.Value.Value * -1), 0, false);
                        f.DatoAdd9.Value = AuxiliarDatoAdd9.Propia.ToString();
                        footerTemp.Add(f);
                    }
                }
                #endregion
                #region Carga la cuenta de reoperaciones internas

                if (vlrReoperacionInterno != 0)
                {
                    vlrReoperacionInterno = Math.Abs(vlrReoperacionInterno) * -1;

                    //Carga la info de la cuenta
                    if (!cacheCtas.ContainsKey(ctaReoperacion))
                    {
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaReoperacion, true, false);
                        cacheCtas.Add(ctaReoperacion, cta);
                    }
                    else
                        cta = cacheCtas[ctaReoperacion];

                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                    {
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                    }
                    else
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    DTO_ComprobanteFooter contraReoperacion = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrReoperacionInterno, 0, false);
                    contraReoperacion.Descriptivo.Value = "LIQUIDACION CREDITO";
                    footerTemp.Add(contraReoperacion);
                }
                #endregion
                #region Ordena los registros de order y balance
                List<DTO_ComprobanteFooter> fOrden = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> fBalance = new List<DTO_ComprobanteFooter>();

                #region Carga los detalles de orden y balance
                decimal vlrOrdenML = 0;
                decimal vlrBalanceML = 0;
                decimal vlrTotalML = 0;

                decimal vlrOrdenME = 0;
                decimal vlrBalanceME = 0;
                decimal vlrTotalME = 0;

                foreach (DTO_ComprobanteFooter det in footerTemp)
                {
                    cta = cacheCtas[det.CuentaID.Value];
                    det.vlrMdaExt.Value = tc != 0 ? Math.Round(det.vlrMdaLoc.Value.Value / tc, 2) : 0;
                    vlrTotalML += det.vlrMdaLoc.Value.Value;
                    vlrTotalME += det.vlrMdaExt.Value.Value;

                    if (cta.Tipo.Value == ((int)TipoCuenta.Orden).ToString())
                    {
                        vlrOrdenML += det.vlrMdaLoc.Value.Value;
                        vlrOrdenME += det.vlrMdaExt.Value.Value;
                        det.Descriptivo.Value = "LIQUIDACION CREDITO";
                        fOrden.Add(det);
                    }
                    else
                    {
                        vlrBalanceML += det.vlrMdaLoc.Value.Value;
                        vlrBalanceME += det.vlrMdaExt.Value.Value;
                        det.Descriptivo.Value = "LIQUIDACION CREDITO";
                        fBalance.Add(det);
                    }
                }
                #endregion
                #region Agregar las contrapartidas

                // Agrega la contra de balance
                footer.AddRange(fBalance);
                if (fBalance.Count > 0 && vlrBalanceML != 0)
                {
                    //Carga la info de la cuenta
                    if (!cacheCtas.ContainsKey(coDoc.CuentaLOC.Value))
                    {
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, coDoc.CuentaLOC.Value, true, false);
                        cacheCtas.Add(coDoc.CuentaLOC.Value, cta);
                    }
                    else
                        cta = cacheCtas[coDoc.CuentaLOC.Value];

                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                    {
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                    }
                    else
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    DTO_ComprobanteFooter bal = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrBalanceML * -1, vlrBalanceME * -1, true);
                    bal.Descriptivo.Value = "LIQUIDACION CREDITO";
                    footer.Add(bal);
                }

                // Agrega la contra de orden
                footer.AddRange(fOrden);
                if (fOrden.Count > 0 && vlrOrdenML != 0)
                {
                    if (!cacheCtas.ContainsKey(ctaContraOrden))
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraOrden, true, false);
                    else
                        cta = cacheCtas[ctaContraOrden];

                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    else
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    DTO_ComprobanteFooter orden = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrOrdenML * -1, vlrOrdenME * -1, true);
                    orden.Descriptivo.Value = "LIQUIDACION CREDITO";

                    footer.Add(orden);
                }

                #endregion

                #endregion
                #region Asigna la información de la compra de cartera (externa) al comprobante

                decimal vlrCompraBalance = 0;
                foreach (List<DTO_ComprobanteFooter> footerCompra in footerCompraExterna)
                {
                    footer.AddRange(footerCompra);

                    decimal vlrContraOrden = footerCompra.Where(f => f.DatoAdd4.Value == AuxiliarDatoAdd4.Contrapartida.ToString()).Sum(x => x.vlrMdaLoc.Value.Value) * -1;
                    decimal vlrVlrFooterAll = footerCompra.Where(f => f.DatoAdd4.Value != AuxiliarDatoAdd4.Contrapartida.ToString()).Sum(x => x.vlrMdaLoc.Value.Value);
                    vlrCompraBalance += (vlrVlrFooterAll - vlrContraOrden) * -1;
                }
                
                //Actualiza el valor de las cotrapartidas para las cuentas de balance
                footer.Where(x => x.CuentaID.Value == coDoc.CuentaLOC.Value && x.DatoAdd4.Value == AuxiliarDatoAdd4.Contrapartida.ToString()).ToList()
                    .ForEach(f => f.vlrMdaLoc.Value += vlrCompraBalance);

                #endregion
                #region Carga el cabezote
                if (footer.Count > 0)
                {
                    //De donde sale el comprobanteID
                    header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                    header.ComprobanteNro.Value = 0;
                    header.Fecha.Value = ctrl.FechaDoc.Value;
                    header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                    header.MdaTransacc.Value = mdaLoc;
                    header.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                    header.PeriodoID.Value = ctrl.PeriodoDoc.Value;
                    header.TasaCambioBase.Value = tc;
                    header.TasaCambioOtr.Value = tc;

                    comprobante.Header = header;
                    comprobante.Footer = footer;

                    return comprobante;
                }
                else
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_CompNoResults;
                }


                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ContabilizaLiquidacion");

                return result;
            }
        }

        /// <summary>
        /// Contabiliza lasreoperaciones de un credito
        /// </summary>
        /// <param name="documentID">Identificador del documento</param>
        /// <param name="ctrl">Documento para contabilizar</param>
        /// <param name="ctrlNew">Nuevo documento</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        private object GenerarComprobanteReoperacion(DTO_glDocumentoControl ctrl, DTO_coDocumento coDocRecompra, List<DTO_ComprobanteFooter> footerComprasInt, 
            string concCargoXdef, string lgXdef, string lineaXdef)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DTO_Comprobante comprobante = new DTO_Comprobante();
                DTO_ComprobanteHeader header = new DTO_ComprobanteHeader();

                decimal tc = 0;
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                string sectorCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);
                string periodoStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoStr);
                DateTime fecha = DateTime.Now;
                if (DateTime.Now > periodo)
                {
                    int day = DateTime.DaysInMonth(periodo.Year, periodo.Month);
                    fecha = new DateTime(periodo.Year, periodo.Month, day);
                }

                #endregion
                #region Asigna la información de la compra de cartera al comprobante
                if (footerComprasInt.Count == 0)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "No hay registros contables para reoperación";
                    return result;
                }

                decimal valML = footerComprasInt.Sum(c => c.vlrMdaLoc.Value.Value);
                decimal valME = footerComprasInt.Sum(c => c.vlrMdaExt.Value.Value);
                DTO_coPlanCuenta cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, coDocRecompra.CuentaLOC.Value, true, false);
                DTO_glConceptoSaldo cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);

                DTO_ComprobanteFooter contra = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, valML * -1, valME * -1, true);
                contra.Descriptivo.Value = footerComprasInt.First().Descriptivo.Value;
                footerComprasInt.Add(contra);
                #endregion
                #region Carga el cabezote
                if (footerComprasInt.Count > 0)
                {
                    //De donde sale el comprobanteID
                    header.ComprobanteID.Value = coDocRecompra.ComprobanteID.Value;
                    header.ComprobanteNro.Value = 0;
                    header.Fecha.Value = fecha;
                    header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                    header.MdaTransacc.Value = mdaLoc;
                    header.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                    header.PeriodoID.Value = periodo;
                    header.TasaCambioBase.Value = tc;
                    header.TasaCambioOtr.Value = tc;

                    comprobante.Header = header;
                    comprobante.Footer = footerComprasInt;

                    return comprobante;
                }
                else
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_CompNoResults;
                }

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ContabilizaLiquidacion");

                return result;
            }
        }

        #endregion

        #region Funciones Públicas

        /// <summary>
        /// Retorna el Listado de todos los creditos aprobados
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo</param>
        /// <param name="detalleBeneficiarios">Indicador para establecer si debe buscar los beneficiarios del credito</param>
        /// <param name="allEmpresas">Indica si trae la infomacion de todas las empresas</param>
        /// <returns></returns>     
        public List<DTO_ccCreditoDocu> LiquidacionCredito_GetAll(string actFlujoID, bool detalleBeneficiarios, bool allEmpresas)
        {
            try
            {
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccSolicitudDetallePago = (DAL_ccSolicitudDetallePago)base.GetInstance(typeof(DAL_ccSolicitudDetallePago), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));
                periodo = new DateTime(periodo.Year, periodo.Month, DateTime.DaysInMonth(periodo.Year, periodo.Month));
                DTO_seUsuario seUsuario = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);
                string usuarioID = seUsuario.ID.Value;

                List<DTO_ccCreditoDocu> creditos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetForAprobacion(actFlujoID, periodo, usuarioID, allEmpresas);
                foreach (DTO_ccCreditoDocu item in creditos)
                {
                    if (detalleBeneficiarios)
                    {
                        List<DTO_ccSolicitudDetallePago> detaBeneficiarios = this._dal_ccSolicitudDetallePago.DAL_ccSolicitudDetallePago_GetByID(item.NumSolicitud.Value.Value);
                        item.DetallePagosBeneficiarios = detaBeneficiarios;
                    }
                    item.FileUrl = base.GetFileRemotePath(item.NumeroDoc.Value.ToString(), TipoArchivo.Documentos);
                }
                return creditos;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "LiquidacionCredito_GetAll");
                throw ex;
            }
        }

        /// <summary>
        /// Verifica en la lista que documentos estan para aprobar y rechazar, Actualiza la tarea si es aprobado.
        /// </summary>
        /// <param name="documentID">Documento que ejecula la transaccion</param>
        /// <param name="solicitudes">Listado de documentos</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public List<DTO_SerializedObject> LiquidacionCredito_AprobarRechazar(int documentID, string actFlujoID, List<DTO_SolicitudAprobacionCartera> solicitudes, Dictionary<Tuple<int, int>, int> batchProgress, bool insideAnotherTx)
        {
            List<object> objs = null;
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;
            objs = new List<object>();

            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            try
            {
                int i = 0;
                foreach (DTO_SolicitudAprobacionCartera sol in solicitudes)
                {

                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / solicitudes.Count;
                    batchProgress[tupProgress] = percent;
                    i++;
                    if (!string.IsNullOrWhiteSpace(sol.Aprobado.Value.ToString()) || !string.IsNullOrWhiteSpace(sol.Rechazado.Value.ToString()))
                    {
                        if (sol.Aprobado.Value.Value)
                        {
                            try
                            {
                                DTO_ccSolicitudDocu soliDocu = this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByNumeroDoc(sol.NumeroDoc.Value.Value);
                                soliDocu.FechaLiquida.Value = sol.FechaAprobacion.Value;
                                result = this.LiquidacionCredito_Aprobar(documentID, actFlujoID, soliDocu, false);
                            }
                            catch (Exception exAprob)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exAprob, this.UserId.ToString(), "LiquidacionCredito_AprobarRechazar (Aprobar)");
                            }
                        }
                        else if (sol.Rechazado.Value.Value)
                        {
                            try
                            {
                                result = this.SolicitudLibranza_Rechazar(documentID, actFlujoID, sol, false, false);
                            }
                            catch (Exception exRech)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exRech, this.UserId.ToString(), "LiquidacionCredito_AprobarRechazar (Rechazar)");
                            }
                        }
                    }

                    if (result.Result == ResultValue.NOK)
                        results.Add(result);
                    else
                    {
                        base._mySqlConnectionTx = null;
                        DTO_Alarma alarma = this.GetFirstMailInfo(sol.NumeroDoc.Value.Value, false);
                        results.Add(alarma);
                    }
                }
            }
            catch (Exception ex)
            {
                results.Clear();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "LiquidacionCredito_AprobarRechazar");
                results.Add(result);
            }

            return results;
        }

        /// <summary>
        /// Revierte la liquidación de un crédito
        /// </summary>
        /// <param name="documentID">Documento que genera la reversión</param>
        /// <param name="numeroDoc">Numero doc del pago a revertir</param>
        /// <param name="consecutivoPos">Posicion del los documentos en la lista. Lleva el control de los consecutivos (Null si es el primero)</param>
        /// <param name="ctrls">Documento de reversion</param>
        /// <param name="coComps">Comprobante (maestra) de reversion (si existe)</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult LiquidacionCredito_Revertir(int documentID, int numeroDoc, int? consecutivoPos, ref List<DTO_glDocumentoControl> ctrls,
            ref List<DTO_coComprobante> coComps, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Inicia las variables globales

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;

            if (!consecutivoPos.HasValue)
            {
                ctrls = new List<DTO_glDocumentoControl>();
                coComps = new List<DTO_coComprobante>();
            }

            #endregion
            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)this.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)this.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoCompraCartera = (DAL_ccCreditoCompraCartera)base.GetInstance(typeof(DAL_ccCreditoCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)this.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                //Variables del credito
                DTO_ccCreditoDocu cred = this.GetCreditoByNumeroDoc(numeroDoc);
                DTO_glDocumentoControl ctrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(numeroDoc);
                DTO_ccLineaCredito lineaCred = (DTO_ccLineaCredito)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccLineaCredito, cred.LineaCreditoID.Value, true, false);
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                bool isML = mdaLoc == ctrlCredito.MonedaID.Value ? true : false;
                string periodoStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoStr);

                //Variables de componentes
                DAL_MasterComplex dalComplex = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                dalComplex.DocumentID = AppMasters.ccComponenteCuenta;
                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("TipoEstado", ((int)TipoEstadoCartera.Propia).ToString());
                pks.Add("ClaseCredito", lineaCred.ClaseCredito.Value);
                pks.Add("ComponenteCarteraID", "");

                List<DTO_ccSolicitudCompraCartera> compras = this._dal_ccCreditoCompraCartera.DAL_ccCreditoCompraCartera_GetByNumeroDoc(numeroDoc);

                #endregion
                #region Validaciones (Giro de plata al cliente: Pendiente)

                #region Valida que sea un crédito propio

                string codPropia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);
                if (!string.IsNullOrWhiteSpace(cred.CompradorCarteraID.Value) && cred.CompradorCarteraID.Value != codPropia)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_RevCrCarteraCedida + "&&" + cred.Libranza.Value.Value.ToString();
                    return result;
                }

                #endregion
                #region Valida que el saldo de la cta sea igual al valor de la CxP en la mda origen

                //Trae la cuenta de capital
                List<DTO_ccCreditoComponentes> comps = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(numeroDoc);
                List<DTO_ccCreditoComponentes> compSaldos = comps.Where(x => !x.CompInvisibleInd.Value.Value).ToList();
                foreach (DTO_ccCreditoComponentes comp in compSaldos)
                {
                    pks["ComponenteCarteraID"] = comp.ComponenteCarteraID.Value;
                    DTO_ccComponenteCuenta cc = (DTO_ccComponenteCuenta)this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true); ;

                    DTO_coPlanCuenta ctaComp = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaID.Value, true, false);
                    DTO_coCuentaSaldo saldoDTO = this._moduloContabilidad.Saldo_GetByDocumento(ctaComp.ID.Value, ctaComp.ConceptoSaldoID.Value, numeroDoc, string.Empty);

                    if (saldoDTO == null)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "No se pudo obtener o no existe el saldo contable";
                        return result;
                    }

                    //Saldo ML
                    decimal saldoML = saldoDTO.DbOrigenLocML.Value.Value + saldoDTO.DbOrigenExtML.Value.Value + saldoDTO.CrOrigenLocML.Value.Value + saldoDTO.CrOrigenExtML.Value.Value
                        + saldoDTO.DbSaldoIniLocML.Value.Value + saldoDTO.DbSaldoIniExtML.Value.Value + saldoDTO.CrSaldoIniLocML.Value.Value + saldoDTO.CrSaldoIniExtML.Value.Value;
                    saldoML = Math.Round(saldoML, 2);
                    //Saldo ME
                    decimal saldoME = saldoDTO.DbOrigenLocME.Value.Value + saldoDTO.DbOrigenExtME.Value.Value + saldoDTO.CrOrigenLocME.Value.Value + saldoDTO.CrOrigenExtME.Value.Value
                         + saldoDTO.DbSaldoIniLocME.Value.Value + saldoDTO.DbSaldoIniExtME.Value.Value + saldoDTO.CrSaldoIniLocME.Value.Value + saldoDTO.CrSaldoIniExtME.Value.Value;
                    saldoME = Math.Round(saldoME, 2);

                    decimal saldo = isML ? saldoML : saldoME;

                    if (comp.TotalValor.Value.Value != Math.Abs(saldo))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_InvalidSaldoDoc;
                        return result;
                    }
                }

                #endregion
                #region Valida que no tenga pagos
                long sumPagos = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_CountByNumDocCredito(numeroDoc, null);
                if (sumPagos > 0)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_RevCrPagos + "&&" + cred.Libranza.Value.Value.ToString();
                    return result;
                }
                #endregion
                #region Valida que no se le haya girado plata al cliente (pendiente)


                //
                //ccCreditoDocu: NumeroDocCxP .. numerodoc de la cxp que habilita el pago



                //DictionaryMessages.Err_Cc_RevCrGiro
                #endregion

                #endregion
                #region Revierte el documento

                result = this._moduloGlobal.glDocumentoControl_Revertir(documentID, numeroDoc, consecutivoPos, ref ctrls, ref coComps, true);
                if (result.Result == ResultValue.NOK)
                    return result;

                if (!consecutivoPos.HasValue)
                    consecutivoPos = 0;

                #endregion
                #region Revierte los movimientos de la cartera

                this.ccCarteraMvto_Revertir(numeroDoc, numeroDoc, ctrls[consecutivoPos.Value].NumeroDoc.Value.Value);

                #endregion
                List<DTO_ccCreditoPlanPagos> pagos = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(numeroDoc);
                foreach (DTO_ccCreditoPlanPagos pp in pagos)
                {
                    #region Actualiza el plan de pagos
                    pp.VlrPagadoCuota.Value = pp.VlrCuota.Value;
                    pp.VlrMoraPago.Value = 0;
                    pp.VlrPagadoExtras.Value = 0;
                    this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(pp);
                    #endregion                    
                }
                
                #region Revierte la información de las compras de cartera

                foreach (DTO_ccSolicitudCompraCartera compra in compras)
                {
                    if (compra.DocAnticipo.Value == null)
                    {
                        this._dal_ccSolicitudCompraCartera = (DAL_ccSolicitudCompraCartera)base.GetInstance(typeof(DAL_ccSolicitudCompraCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                        if (compra.DocCompra.Value.HasValue)
                        {
                            //Trae Credito comprado(viejo)
                            DTO_ccCreditoDocu creditoComprado = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(compra.DocCompra.Value.Value);

                            //Trae documentos relacionados de reoperacion para revertir pagos
                            DTO_glDocumentoControl filter = new DTO_glDocumentoControl();
                            filter.DocumentoID.Value = AppDocuments.RecaudoReoperacion;
                            filter.DocumentoPadre.Value = numeroDoc;
                            List<DTO_glDocumentoControl> ctrlsReop = this._moduloGlobal.glDocumentoControl_GetByParameter(filter);
                            foreach (DTO_glDocumentoControl reop in ctrlsReop)
                            {
                                // Valida no se hayan pagado cuotas despues de la cuota a revertir
                                long countPagosPost = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetByPagosForReversion(creditoComprado.NumeroDoc.Value.Value, reop.NumeroDoc.Value.Value);
                                if (countPagosPost > 0)
                                {
                                    result.Result = ResultValue.NOK;
                                    result.ResultMessage = DictionaryMessages.Err_Cc_RevRecCuotasPagadas;
                                    return result;
                                }

                                //Revierte los pagos de la reoperacion
                                int numDocAnula = ctrls[consecutivoPos.Value].NumeroDoc.Value.Value;
                                result = this.CarteraPagosPriv_Revertir(creditoComprado, numDocAnula, reop.NumeroDoc.Value.Value, periodo);
                                if (result.Result == ResultValue.NOK)                                
                                    return result;
                            }

                            //borra el registro de la solicitud compra
                            DTO_ccSolicitudCompraCartera solCompra = this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_GetByDocCompra(compra.DocCompra.Value.Value);
                            this._dal_ccSolicitudCompraCartera.DAL_ccSolicitudCompraCartera_Delete(solCompra.NumeroDoc.Value.Value);                     

                            //borra el registro de credito compra
                            this._dal_ccCreditoCompraCartera.DAL_ccCreditoCompraCartera_Delete(compra.NumeroDoc.Value.Value);

                            if (!consecutivoPos.HasValue)
                                consecutivoPos = 0;

                            // Borra la informacion del estado de cuenta si ya tenia uno asignado
                            if(creditoComprado.DocEstadoCuenta.Value.HasValue)
                            {
                                this._dal_ccEstadoCuentaCuotas = (DAL_ccEstadoCuentaCuotas)base.GetInstance(typeof(DAL_ccEstadoCuentaCuotas), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                                this._dal_ccEstadoCuentaComponentes = (DAL_ccEstadoCuentaComponentes)base.GetInstance(typeof(DAL_ccEstadoCuentaComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                                this._dal_ccEstadoCuentaHistoria = (DAL_ccEstadoCuentaHistoria)base.GetInstance(typeof(DAL_ccEstadoCuentaHistoria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                                int numDocEstadoCuenta = creditoComprado.DocEstadoCuenta.Value.Value;
                                this._dal_ccEstadoCuentaCuotas.DAL_ccEstadoCuentaCuotas_Delete(numDocEstadoCuenta);
                                this._dal_ccEstadoCuentaComponentes.DAL_ccEstadoCuentaComponentes_Delete(numDocEstadoCuenta);
                                this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_Delete(numDocEstadoCuenta);

                                result = this._moduloGlobal.glDocumentoControl_Revertir(documentID, numDocEstadoCuenta, consecutivoPos, ref ctrls, ref coComps, true);
                                if (result.Result == ResultValue.NOK)
                                    return result;
                            }                           
                        }
                    }
                }
                #endregion
                                         


                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "LiquidacionCredito_Revertir");

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Commit y consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        for (int i = 0; i < ctrls.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlAnula = ctrls[i];
                            DTO_coComprobante coCompAnula = coComps[i];

                            //Obtiene el consecutivo del comprobante (cuando existe)
                            ctrlAnula.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlAnula.DocumentoID.Value.Value, ctrlAnula.PrefijoID.Value);
                            if (coCompAnula != null)
                                ctrlAnula.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompAnula, ctrlAnula.PrefijoID.Value, ctrlAnula.PeriodoDoc.Value.Value, ctrlAnula.DocumentoNro.Value.Value);

                            this._moduloGlobal.ActualizaConsecutivos(ctrlAnula, true, coCompAnula != null, false);
                            if (coCompAnula != null)
                                this._moduloContabilidad.ActualizaComprobanteNro(ctrlAnula.NumeroDoc.Value.Value, ctrlAnula.ComprobanteIDNro.Value.Value, false);
                        }

                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #endregion

        #region Aprobar Giro

        #region Funciones Privadas

        /// <summary>
        /// Funcion para aprobar un giro
        /// </summary>
        /// <param name="documentID">Documento </param>
        /// <param name="actFlujoID">Identificador act flujo</param>
        /// <param name="coComp">maestra de comprobantes</param>
        /// <param name="coDoc">CoDocumento</param>
        /// <param name="concCxPID">Concepto de CxP para cartera</param>
        /// <param name="creditosDocu">Lista de creditos</param>
        /// <param name="ctaContraPartida">Cuenta de contrapartida</param>
        /// <returns></returns>
        internal DTO_TxResult Giro_Credito_Aprobar(int documentID, string actFlujoID, List<DTO_ccCreditoDocu> creditosDocu, string ctaBalanceID, string concCxPID,
            bool isMasivo, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)this.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloCxP = (ModuloCuentasXPagar)this.GetInstance(typeof(ModuloCuentasXPagar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_Comprobante = (DAL_Comprobante)base.GetInstance(typeof(DAL_Comprobante), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudDetallePago = (DAL_ccSolicitudDetallePago)base.GetInstance(typeof(DAL_ccSolicitudDetallePago), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            DTO_TxResult result = new DTO_TxResult();

            List<DTO_glDocumentoControl> ctrlsCxP = new List<DTO_glDocumentoControl>();
            DTO_coComprobante coComp = null;
            try
            {
                #region Variables
                List<int> numDocs = (from x in creditosDocu select x.NumeroDoc.Value.Value).ToList();

                DTO_glDocumentoControl ctrlCredito = new DTO_glDocumentoControl();
                string nitEmpresa = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TerceroXDefecto);
                //decimal vlrGiroTerceros = 0;
                #endregion
                #region Carga la info del footer y actualiza el estado del credito
                int j = 0;
                foreach (DTO_ccCreditoDocu item in creditosDocu)
                {
                    #region Trae el primer docCtrl
                    if (j == 0)
                    {
                        ctrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(item.NumeroDoc.Value.Value);
                        if (isMasivo)
                            ctrlCredito.TerceroID.Value = nitEmpresa;
                    }
                    j++;
                    #endregion
                    #region Asigna el nuevo flujo
                    int numDocItem = Convert.ToInt32(item.NumeroDoc.Value);
                    result = this.AsignarFlujo(documentID, numDocItem, actFlujoID, false, item.Observacion.Value);
                    if (result.Result == ResultValue.NOK)
                        return result;

                    #endregion
                    #region Actualiza el estado
                    if (documentID == AppDocuments.AprobacionGiros)
                        this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, numDocItem, EstadoDocControl.Aprobado, item.Observacion.Value, true);
                    #endregion
                    if (isMasivo)
                    {

                    }
                    else
                    {
                        bool cxpCreditoOK = false;
                        bool cxpBeneficiarios = true;
                        List<DTO_ComprobanteFooter> footerCredito = new List<DTO_ComprobanteFooter>();
                        #region Crea la CxP del credito (cuando no hay o hay solo 1 beneficiario)

                        //Trae el registro del crédito
                        footerCredito = this._dal_Comprobante.DAL_Comprobante_GetForAprobGiro(numDocs, ctaBalanceID);
                        footerCredito.First().Descriptivo.Value = "CXP CRÉDITO " + ctrlCredito.DocumentoTercero.Value;
                        footerCredito.First().DatoAdd4.Value = string.Empty;

                        //Crea la CxP del credito
                        if (item.DetallePagosBeneficiarios.Count == 0)
                        {
                            cxpBeneficiarios = false;
                            cxpCreditoOK = true;
                            footerCredito.First().vlrMdaLoc.Value *= -1;
                        }
                        else if (item.DetallePagosBeneficiarios.Count == 1
                            && footerCredito.First().vlrMdaLoc.Value == item.DetallePagosBeneficiarios.First().Valor.Value * -1)
                        {
                            cxpBeneficiarios = false;
                            cxpCreditoOK = true;
                            footerCredito.First().vlrMdaLoc.Value *= -1;
                            ctrlCredito.TerceroID.Value = item.DetallePagosBeneficiarios.First().TerceroID.Value;
                        }
                        else
                        {
                            decimal vlrBeneficiarios =
                                (from b in item.DetallePagosBeneficiarios where b.TerceroID.Value != footerCredito.First().TerceroID.Value select b.Valor.Value.Value).Sum();

                            if (vlrBeneficiarios != footerCredito.First().vlrMdaLoc.Value * -1)
                            {
                                cxpCreditoOK = true;
                                footerCredito.First().vlrMdaLoc.Value = ((footerCredito.First().vlrMdaLoc.Value * -1) - vlrBeneficiarios);
                            }
                        }

                        if (cxpCreditoOK)
                        {
                            #region Crea la CxP del crédito
                            decimal creditoML = footerCredito.First().vlrMdaLoc.Value.Value * -1;
                            object obj = this._moduloCxP.CuentasXPagar_Generar(ctrlCredito, concCxPID, creditoML, footerCredito, ModulesPrefix.cc, false, ctrlCredito.DocumentoTercero.Value);
                            if (obj.GetType() == typeof(DTO_TxResult))
                            {
                                result = (DTO_TxResult)obj;
                                return result;
                            }

                            //Actualiza la info del crédito
                            DTO_glDocumentoControl ctrlCxP_Credito = (DTO_glDocumentoControl)obj;
                            item.NumeroDocCXP.Value = ctrlCxP_Credito.NumeroDoc.Value;
                            this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(item);

                            //Agrega los documentos a la lista de CxP generadas
                            ctrlsCxP.Add(ctrlCxP_Credito);
                            if (coComp == null)
                                coComp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, ctrlCxP_Credito.ComprobanteID.Value, true, false);
                            #endregion
                        }
                        #endregion

                        if (cxpBeneficiarios)
                        {
                            List<DTO_ccSolicitudDetallePago> beneficiarios = item.DetallePagosBeneficiarios.Where(b => b.TerceroID.Value != footerCredito.First().TerceroID.Value).ToList();
                            foreach (DTO_ccSolicitudDetallePago det in beneficiarios)
                            {
                                List<DTO_ComprobanteFooter> footerPago = new List<DTO_ComprobanteFooter>();

                                #region Detalle del pago

                                DTO_ComprobanteFooter detPago = ObjectCopier.Clone(footerCredito[0]);
                                detPago.vlrMdaLoc.Value = det.Valor.Value;
                                detPago.vlrMdaExt.Value = 0;
                                detPago.vlrBaseML.Value = 0;
                                detPago.vlrBaseME.Value = 0;

                                footerPago.Add(detPago);

                                #endregion
                                #region Crea la CxP de los pagos

                                decimal pagoML = detPago.vlrMdaLoc.Value.Value * -1;
                                ctrlCredito.TerceroID.Value = det.TerceroID.Value;
                                object objPago = this._moduloCxP.CuentasXPagar_Generar(ctrlCredito, concCxPID, pagoML, footerPago, ModulesPrefix.cc, false);
                                if (objPago.GetType() == typeof(DTO_TxResult))
                                {
                                    result = (DTO_TxResult)objPago;
                                    return result;
                                }

                                //Agrega los documentos a la lista de CxP generadas
                                DTO_glDocumentoControl ctrlCxP_Pago = (DTO_glDocumentoControl)objPago;
                                ctrlsCxP.Add(ctrlCxP_Pago);

                                #endregion
                            }
                        }
                    }
                }

                #endregion
                #region Actualiza el credito con el numDoc de la CxP
                if (isMasivo)
                {
                    foreach (DTO_ccCreditoDocu item in creditosDocu)
                    {
                        item.NumeroDocCXP.Value = ctrlsCxP.First().NumeroDoc.Value;
                        this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(item);
                    }
                }
                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Giro_Credito_Aprobar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera el consecutivo
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        for (int i = 0; i < ctrlsCxP.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlCxP = ctrlsCxP[i];
                            ctrlCxP.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlCxP.PrefijoID.Value, ctrlCxP.PeriodoDoc.Value.Value, ctrlCxP.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlCxP, false, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlCxP.NumeroDoc.Value.Value, ctrlCxP.ComprobanteIDNro.Value.Value, false);
                        }
                        #endregion
                    }
                    else
                        throw new Exception("Giro_Credito_Aprobar - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Funcion para aprobar un giro
        /// </summary>
        /// <param name="documentID">Documento </param>
        /// <param name="actFlujoID">Identificador act flujo</param>
        /// <param name="coComp">maestra de comprobantes</param>
        /// <param name="coDoc">CoDocumento</param>
        /// <param name="concCxPID">Concepto de CxP para cartera</param>
        /// <param name="creditosDocu">Lista de creditos</param>
        /// <param name="ctaContraPartida">Cuenta de contrapartida</param>
        /// <returns></returns>
        internal DTO_TxResult AprobarGiro_Rechazo(int documentID, string actFlujoID, DTO_ccCreditoDocu credito, string concCxPID, string concCargoXdef, string lgXdef, 
            string lineaXdef, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)this.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloCxP = (ModuloCuentasXPagar)this.GetInstance(typeof(ModuloCuentasXPagar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            DTO_TxResult result = new DTO_TxResult();

            List<DTO_glDocumentoControl> ctrlsCxP = new List<DTO_glDocumentoControl>();
            DTO_coComprobante coComp = null;
            try
            {
                List<DTO_ComprobanteFooter> footerCredito = new List<DTO_ComprobanteFooter>();
                       
                //Trae el registro del rechazo
                DTO_glDocumentoControl ctrlRechazo = this._moduloGlobal.glDocumentoControl_GetByID(credito.DocRechazo.Value.Value);
                decimal tc = ctrlRechazo.TasaCambioDOCU.Value.Value;
                decimal vlrML = ctrlRechazo.Valor.Value.Value;
                decimal vlrME = 0;
                if(tc != 0)
                    vlrME = Math.Round(vlrML / tc, 2);

                //Partida del documento de rechazo
                DTO_ComprobanteFooter footerRechazo = this.CrearComprobanteFooter(ctrlRechazo, tc, concCargoXdef, lgXdef, lineaXdef, vlrML, vlrME, false);
                footerRechazo.Descriptivo.Value = "CXP CRÉDITO " + ctrlRechazo.DocumentoTercero.Value;
                footerCredito.Add(footerRechazo);

                //CxP
                decimal creditoML = footerCredito.First().vlrMdaLoc.Value.Value * -1;
                object obj = this._moduloCxP.CuentasXPagar_Generar(ctrlRechazo, concCxPID, creditoML, footerCredito, ModulesPrefix.cc, false);
                if (obj.GetType() == typeof(DTO_TxResult))
                {
                    result = (DTO_TxResult)obj;
                    return result;
                }

                //Actualiza la info del crédito
                DTO_glDocumentoControl ctrlCxP_Credito = (DTO_glDocumentoControl)obj;
                credito.NumeroDocCXP.Value = ctrlCxP_Credito.NumeroDoc.Value;
                credito.DocRechazo.Value = null;
                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);

                //Agrega los documentos a la lista de CxP generadas
                ctrlsCxP.Add(ctrlCxP_Credito);
                if (coComp == null)
                    coComp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, ctrlCxP_Credito.ComprobanteID.Value, true, false);
                
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Giro_Credito_Aprobar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera el consecutivo
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        for (int i = 0; i < ctrlsCxP.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlCxP = ctrlsCxP[i];
                            ctrlCxP.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlCxP.PrefijoID.Value, ctrlCxP.PeriodoDoc.Value.Value, ctrlCxP.DocumentoNro.Value.Value);
                            this._moduloGlobal.ActualizaConsecutivos(ctrlCxP, false, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlCxP.NumeroDoc.Value.Value, ctrlCxP.ComprobanteIDNro.Value.Value, false);
                        }
                        #endregion
                    }
                    else
                        throw new Exception("Giro_Credito_Aprobar - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Funcion que aprueba o rechaza un giro
        /// </summary>
        /// <param name="documentID">Documento ID</param>
        /// <param name="actFlujoID">Actividad Flujo ID</param>
        /// <param name="ccCreditos">Lista con los giros para aprobar o rechazar</param>
        /// <returns>Retorna una lista de objetos</returns>
        public List<DTO_TxResult> AprobarGiro_Credito_AprobarRechazar(int documentID, string actFlujoID, List<DTO_ccCreditoDocu> creditos, bool pagoMasivo, 
            Dictionary<Tuple<int, int>, int> batchProgress, bool insideAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.NOK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_TxResult> results = new List<DTO_TxResult>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            try
            {
                decimal porcTotal = 0;
                int count = 0;
                int i = 0;
                List<DTO_ccCreditoDocu> creditosAprob = creditos.Where(x => x.Aprobado.Value == true).ToList();
                List<DTO_ccCreditoDocu> creditosRechaza = creditos.Where(x => x.Rechazado.Value == true).ToList();

                count = creditosRechaza.Count;
                if (pagoMasivo)
                    count += 1;
                else
                    count += creditosAprob.Count;

                #region Variables
                string conceptoCXPID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ConceptoCxPCredito);
                DTO_coDocumento coDoc = new DTO_coDocumento();
                string coDocID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoDocumentoCredito);
                string ctaBalanceID;

                #endregion
                #region Validaciones
                //Valida el concepto de CxP
                if (string.IsNullOrWhiteSpace(conceptoCXPID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ConceptoCxPCredito + "&&" + string.Empty;
                    results.Add(result);
                    return results;
                }

                //Valida el documento para las contrapartidas de las cuemtas de balance
                if (string.IsNullOrWhiteSpace(coDocID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CodigoDocumentoCredito + "&&" + string.Empty;
                    results.Add(result);
                    return results;
                }
                else
                    coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocID, false, false);

                //Valida que el documento asociado tenga cuenta local
                if (string.IsNullOrWhiteSpace(coDoc.CuentaLOC.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocID;
                    results.Add(result);
                    return results;
                }

                coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocID, true, false);
                ctaBalanceID = coDoc.CuentaLOC.Value;
                #endregion
                #region Rechaza los giros

                foreach (DTO_ccCreditoDocu item in creditosRechaza)
                {
                    i++;
                    porcTotal = count * i / 100;
                    batchProgress[tupProgress] = (int)porcTotal;
                    try
                    {
                        DTO_SolicitudAprobacionCartera dtoSolAprobacionCartera = new DTO_SolicitudAprobacionCartera();
                        dtoSolAprobacionCartera.Rechazado.Value = true;
                        dtoSolAprobacionCartera.NumeroDoc.Value = item.NumeroDoc.Value;
                        dtoSolAprobacionCartera.Observacion.Value = item.Observacion.Value;

                        result = this.SolicitudLibranza_Rechazar(documentID, actFlujoID, dtoSolAprobacionCartera, true, false);
                    }
                    catch (Exception exRech)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exRech, this.UserId.ToString(), "AprobarGiro_Credito_AprobarRechazar (Rechazar)");
                    }

                }

                #endregion
                #region Aprueba los giros

                if (!pagoMasivo)
                {
                    foreach (DTO_ccCreditoDocu item in creditosAprob)
                    {
                        i++;
                        porcTotal = count * i / 100;
                        batchProgress[tupProgress] = (int)porcTotal;

                        List<DTO_ccCreditoDocu> aprobadoTemp = new List<DTO_ccCreditoDocu>();
                        aprobadoTemp.Add(item);
                        result = this.Giro_Credito_Aprobar(documentID, actFlujoID, aprobadoTemp, ctaBalanceID, conceptoCXPID, false, false);

                        results.Add(result);
                    }
                }
                else
                {
                    i++;
                    porcTotal = count * i / 100;
                    batchProgress[tupProgress] = (int)porcTotal;

                    result = this.Giro_Credito_Aprobar(documentID, actFlujoID, creditosAprob, ctaBalanceID, conceptoCXPID, true, false);

                    results.Add(result);
                }

                #endregion
            }
            catch (Exception ex)
            {
                results.Clear();
                result = new DTO_TxResult();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "AprobarGiro_Credito_AprobarRechazar");
                results.Add(result);

                return results;
            }

            return results;
        }

        /// <summary>
        /// Funcion que aprueba giros de créditos rechazados
        /// </summary>
        /// <param name="documentID">Documento ID</param>
        /// <param name="actFlujoID">Actividad Flujo ID</param>
        /// <param name="ccCreditos">Lista con los giros para aprobar o rechazar</param>
        /// <returns>Retorna una lista de objetos</returns>
        public List<DTO_TxResult> AprobarGiro_CreditoRechazo(int documentID, string actFlujoID, List<DTO_ccCreditoDocu> creditos, Dictionary<Tuple<int, int>, int> batchProgress, bool insideAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.NOK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_TxResult> results = new List<DTO_TxResult>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            try
            {
                #region Variables

                decimal porcTotal = 0;
                int count = 0;
                int i = 0;

                string conceptoCXPID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ConceptoCxPCredito);
                DTO_coDocumento coDoc = new DTO_coDocumento();
                string coDocID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoDocumentoCredito);

                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);

                #endregion
                #region Validaciones

                //Valida el concepto de CxP
                if (string.IsNullOrWhiteSpace(conceptoCXPID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ConceptoCxPCredito + "&&" + string.Empty;
                    results.Add(result);
                    return results;
                }

                //Valida el documento para las contrapartidas de las cuemtas de balance
                if (string.IsNullOrWhiteSpace(coDocID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CodigoDocumentoCredito + "&&" + string.Empty;
                    results.Add(result);
                    return results;
                }
                else
                    coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocID, false, false);

                //Valida que el documento asociado tenga cuenta local
                if (string.IsNullOrWhiteSpace(coDoc.CuentaLOC.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocID;
                    results.Add(result);
                    return results;
                }

                coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocID, true, false);
                #endregion
                #region Aprueba los giros

                foreach (DTO_ccCreditoDocu item in creditos)
                {
                    i++;
                    porcTotal = count * i / 100;
                    batchProgress[tupProgress] = (int)porcTotal;
                    result = this.AprobarGiro_Rechazo(documentID, actFlujoID, item, conceptoCXPID, concCargoXdef, lgXdef, lineaXdef, false);

                    results.Add(result);
                }

                #endregion
            }
            catch (Exception ex)
            {
                results.Clear();
                result = new DTO_TxResult();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "AprobarGiro_CreditoRechazo_Aprobar");
                results.Add(result);

                return results;
            }

            return results;
        }

        /// <summary>
        /// Retorna el Listado de todos los creditos rechazados
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo</param>
        /// <returns></returns>     
        public List<DTO_ccCreditoDocu> AprobarGiroRechazo_GetAll(string actFlujoID)
        {
            try
            {
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
              
                List<DTO_ccCreditoDocu> creditos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetForAprobacionGiroRechazo();
                foreach (DTO_ccCreditoDocu item in creditos)
                    item.FileUrl = base.GetFileRemotePath(item.NumeroDoc.Value.ToString(), TipoArchivo.Documentos);

                return creditos;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "AprobarGiroRechazo_GetAll");
                throw ex;
            }
        }

        #endregion

        #endregion

        #region Estados de Cuenta/Polizas

        /// <summary>
        /// Agrega un estado de cuenta
        /// </summary>
        /// <param name="documentoID">Documento que ejecuta la transaccione</param>
        /// <param name="actFlujoId">Actividad de flujo</param>
        /// <param name="inforCredito">Informacion Credito</param>
        /// <param name="saldosComponentes">Lista de los componentes</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult EstadoCuenta_Add(int documentoID, string actFlujoId, DTO_InfoCredito infoCredito, DTO_EstadoCuenta estadoCuenta, bool isAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccEstadoCuentaHistoria = (DAL_ccEstadoCuentaHistoria)base.GetInstance(typeof(DAL_ccEstadoCuentaHistoria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccEstadoCuentaComponentes = (DAL_ccEstadoCuentaComponentes)base.GetInstance(typeof(DAL_ccEstadoCuentaComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccEstadoCuentaCuotas = (DAL_ccEstadoCuentaCuotas)base.GetInstance(typeof(DAL_ccEstadoCuentaCuotas), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloAplicacion = (ModuloAplicacion)base.GetInstance(typeof(ModuloAplicacion), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            try
            {
                #region Variables
                int numDoc = infoCredito.PlanPagos.First().NumeroDoc.Value.Value;
                DTO_ccEstadoCuentaHistoria estadoCuentaHist = estadoCuenta.EstadoCuentaHistoria;
                List<DTO_ccEstadoCuentaComponentes> componentes = estadoCuenta.EstadoCuentaComponentes;
                DTO_glDocumentoControl ctrl = new DTO_glDocumentoControl();

                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                string compCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string compSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string compIntSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresSeguro);
                string compMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string compPrj = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);

                DTO_glDocumentoControl ctrlOld = this._moduloGlobal.glDocumentoControl_GetByID(numDoc);
                DTO_ccCreditoDocu credito = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(numDoc);

                #endregion
                #region Validaciones

                #region Validaciones para desistimiento
                if (estadoCuenta.EstadoCuentaHistoria.EC_Proposito.Value.Value == (byte)PropositoEstadoCuenta.Desistimiento)
                {
                    string libroFunc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TipoBalanceFuncional);
                    string coDocumentoRechazoID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocContableRechazos);

                    //Valida que exista el coDocumento de rechazo
                    if (string.IsNullOrWhiteSpace(coDocumentoRechazoID))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocContableRechazos + "&&" + string.Empty;

                        return result;
                    }

                    //Valida la cuenta del documento de rechazos
                    DTO_coDocumento docRechazo = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocumentoRechazoID, true, false);
                    if (string.IsNullOrWhiteSpace(docRechazo.CuentaLOC.Value))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocumentoRechazoID;

                        return result;
                    }

                    //Valida que no tenga otros movimientos
                    int libranza = credito.Libranza.Value.Value;
                    int countMvtos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetTotalMovimientos(libranza, new List<int> ());
                    if (countMvtos > 0)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_DesistimientoMvtos + "&&" + libranza.ToString();
                        return result;
                    }

                    //Valida el saldo de la cuenta de rechazos
                    DTO_coCuentaSaldo saldoFilter = new DTO_coCuentaSaldo();
                    saldoFilter.PeriodoID.Value = periodo;
                    saldoFilter.BalanceTipoID.Value = libroFunc;
                    saldoFilter.CuentaID.Value = docRechazo.CuentaLOC.Value;
                    saldoFilter.TerceroID.Value = ctrlOld.TerceroID.Value;
                    saldoFilter.IdentificadorTR.Value = ctrlOld.NumeroDoc.Value;
                    List<DTO_coCuentaSaldo> saldosRechazos = this._moduloContabilidad.Saldos_GetByParameter(saldoFilter);
                    decimal saldoRechazo = saldosRechazos.Sum(x => x.DbOrigenLocML.Value.Value + x.DbOrigenExtML.Value.Value + x.CrOrigenLocML.Value.Value +
                        x.CrOrigenExtML.Value.Value + x.DbSaldoIniLocML.Value.Value + x.DbSaldoIniExtML.Value.Value + x.CrSaldoIniLocML.Value.Value + x.CrSaldoIniExtML.Value.Value);

                    saldoRechazo *= -1;
                    if (saldoRechazo != credito.VlrGiro.Value.Value)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_DesistimientoRechazo + "&&" + credito.VlrGiro.Value.Value.ToString("c")
                            + "&&" + credito.Libranza.Value.Value.ToString() + "&&" + saldoRechazo.ToString("c");
                        return result;
                    }
                }
                #endregion

                #endregion
                #region Crea glDocumentoControl

                int numDocNew = 0;
                if (estadoCuenta.EstadoCuentaHistoria.EC_FijadoInd.Value.Value)
                {
                    ctrl = new DTO_glDocumentoControl();
                    ctrl.DocumentoNro.Value = 0;
                    ctrl.DocumentoID.Value = documentoID;
                    ctrl.LugarGeograficoID.Value = ctrlOld.LugarGeograficoID.Value;
                    ctrl.NumeroDoc.Value = 0;
                    ctrl.DocumentoTipo.Value = (int)DocumentoTipo.DocExterno;
                    ctrl.Fecha.Value = DateTime.Now;
                    ctrl.FechaDoc.Value = estadoCuenta.EstadoCuentaHistoria.EC_Fecha.Value;
                    ctrl.PeriodoDoc.Value = periodo;
                    ctrl.PeriodoUltMov.Value = periodo;
                    ctrl.CuentaID.Value = ctrlOld.CuentaID.Value;
                    ctrl.AreaFuncionalID.Value = ctrlOld.AreaFuncionalID.Value;
                    ctrl.PrefijoID.Value = ctrlOld.PrefijoID.Value;
                    ctrl.ProyectoID.Value = ctrlOld.ProyectoID.Value;
                    ctrl.CentroCostoID.Value = ctrlOld.CentroCostoID.Value;
                    ctrl.LineaPresupuestoID.Value = ctrlOld.LineaPresupuestoID.Value;
                    ctrl.TerceroID.Value = ctrlOld.TerceroID.Value;
                    ctrl.DocumentoTercero.Value = ctrlOld.DocumentoTercero.Value;
                    ctrl.PrefijoID.Value = ctrlOld.PrefijoID.Value;
                    ctrl.MonedaID.Value = ctrlOld.MonedaID.Value;
                    ctrl.TasaCambioCONT.Value = ctrlOld.TasaCambioCONT.Value;
                    ctrl.TasaCambioDOCU.Value = ctrlOld.TasaCambioDOCU.Value;
                    ctrl.Observacion.Value = string.Empty;
                    ctrl.Estado.Value = (byte)EstadoDocControl.Aprobado;
                    ctrl.seUsuarioID.Value = this.UserId;
                    ctrl.Valor.Value = estadoCuentaHist.EC_ValorPago.Value.Value;
                    ctrl.Iva.Value = 0;
                    ctrl.Descripcion.Value = "Estado de Cuenta - Crédito " + ctrlOld.DocumentoTercero.Value;

                    DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentoID, ctrl, true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);
                        return result;
                    }
                    numDocNew = Convert.ToInt32(resultGLDC.Key);
                    ctrl.NumeroDoc.Value = numDocNew;
                }

                #endregion
                #region Actualiza el credito y borra la info vieja del estado de cuenta
                
                // Borra la informacion del estado de cuenta si ya tenia uno asignado
                if (!String.IsNullOrWhiteSpace(credito.DocEstadoCuenta.Value.ToString()))
                {
                    int numDocEstadoCuenta = credito.DocEstadoCuenta.Value.Value;
                    this._dal_ccEstadoCuentaCuotas.DAL_ccEstadoCuentaCuotas_Delete(numDocEstadoCuenta);
                    this._dal_ccEstadoCuentaComponentes.DAL_ccEstadoCuentaComponentes_Delete(numDocEstadoCuenta);
                    this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_Delete(numDocEstadoCuenta);
                }

                if (!estadoCuentaHist.EC_FijadoInd.Value.Value)
                {
                    credito.DocEstadoCuenta.Value = null;
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                    return result;
                }

                credito.DocEstadoCuenta.Value = numDocNew;
                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);

                #endregion
                #region Agrega la informacion a ccEstadoCuentaHistoria

                estadoCuentaHist.NumeroDoc.Value = numDocNew;
                estadoCuentaHist.NumDocCredito.Value = numDoc;
                estadoCuentaHist.EC_EstadoDeuda.Value = credito.EstadoDeuda.Value;

                this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_Add(estadoCuentaHist);

                #endregion
                #region Agrega la informacion a ccEstadoCuentaComponentes
            
                foreach (DTO_ccEstadoCuentaComponentes item in componentes)
                {
                    DTO_ccEstadoCuentaComponentes estadoCuentaComp = new DTO_ccEstadoCuentaComponentes();
                    estadoCuentaComp.NumeroDoc.Value = numDocNew;
                    estadoCuentaComp.ComponenteCarteraID.Value = item.ComponenteCarteraID.Value;

                    //Se craga esta info de acuerdo a como se muesrta en el formulario de estados de cuenta
                    estadoCuentaComp.SaldoValor.Value = item.PagoValor.Value;
                    estadoCuentaComp.PagoValor.Value = item.AbonoValor.Value;
                    estadoCuentaComp.AbonoValor.Value = item.VlrPagar.Value;

                    this._dal_ccEstadoCuentaComponentes.DAL_ccEstadoCuentaComponentes_Add(estadoCuentaComp);
                }

                #endregion
                #region Agrega la informacion a ccEstadoCuentaCuotas
                List<DTO_ccCreditoPlanPagos> creditoPlanPagos = infoCredito.PlanPagos.Where(x => x.VlrPagadoCuota.Value != x.VlrCuota.Value).ToList();
                foreach (DTO_ccCreditoPlanPagos planPagos in creditoPlanPagos)
                {
                    DTO_ccEstadoCuentaCuotas estadoCuentaCta = new DTO_ccEstadoCuentaCuotas();
                    estadoCuentaCta.NumeroDoc.Value = numDocNew;
                    estadoCuentaCta.CuotaID.Value = planPagos.CuotaID.Value;
                    estadoCuentaCta.FechaCuota.Value = planPagos.FechaCuota.Value;
                    estadoCuentaCta.CompradorCarteraID.Value = planPagos.CompradorCarteraID.Value;
                    estadoCuentaCta.VlrCuota.Value = planPagos.VlrCuota.Value;
                    estadoCuentaCta.VlrPRJ.Value = 0;
                    estadoCuentaCta.VlrMoraSDO.Value = 0;
                    List<DTO_ccSaldosComponentes> saldoComp = infoCredito.SaldosComponentes.Where(x => x.CuotaID.Value == planPagos.CuotaID.Value).ToList();
                    #region Establece los valores de los componentes
                    foreach (DTO_ccSaldosComponentes comp in saldoComp)
                    {
                        if (comp.ComponenteCarteraID.Value == compCapital)
                        {
                            estadoCuentaCta.VlrCapitalSDO.Value = comp.CuotaSaldo.Value;
                            estadoCuentaCta.VlrCapitalPAG.Value = comp.AbonoValor.Value;
                            estadoCuentaCta.VlrCapitalABO.Value = 0;
                        }
                        else if (comp.ComponenteCarteraID.Value == compInteres)
                        {
                            estadoCuentaCta.VlrInteresSDO.Value = comp.CuotaSaldo.Value;
                            estadoCuentaCta.VlrInteresPAG.Value = comp.AbonoValor.Value;
                            estadoCuentaCta.VlrInteresABO.Value = 0;
                        }
                        else if (comp.ComponenteCarteraID.Value == compSeguro)
                        {
                            estadoCuentaCta.VlrSeguroSDO.Value = comp.CuotaSaldo.Value;
                            estadoCuentaCta.VlrSeguroPAG.Value = comp.AbonoValor.Value;
                            estadoCuentaCta.VlrSeguroABO.Value = 0;
                        }
                        else if (comp.ComponenteCarteraID.Value == compMora)
                        {
                            estadoCuentaCta.VlrMoraSDO.Value = comp.CuotaSaldo.Value;
                            estadoCuentaCta.VlrMora.Value = comp.CuotaSaldo.Value;
                            estadoCuentaCta.IndCuotaVencida.Value = true;
                        }
                        else if (comp.ComponenteCarteraID.Value == compPrj)
                        {
                            estadoCuentaCta.VlrPRJ.Value = comp.CuotaSaldo.Value;
                        }
                        else if (planPagos.VlrOtro1.Value != 0 && comp.ComponenteCarteraID.Value == compIntSeguro)
                        {
                            estadoCuentaCta.VlrOtro1SDO.Value = comp.CuotaSaldo.Value;
                            estadoCuentaCta.VlrOtro1PAG.Value = comp.AbonoValor.Value;
                            estadoCuentaCta.VlrOtro1ABO.Value = 0;
                        }
                        else if (planPagos.VlrOtro2.Value != 0)
                        {
                            estadoCuentaCta.VlrOtro2SDO.Value = comp.CuotaSaldo.Value;
                            estadoCuentaCta.VlrOtro2PAG.Value = comp.AbonoValor.Value;
                            estadoCuentaCta.VlrOtro2ABO.Value = 0;
                        }
                        else if (planPagos.VlrOtro3.Value != 0)
                        {
                            estadoCuentaCta.VlrOtro3SDO.Value = comp.CuotaSaldo.Value;
                            estadoCuentaCta.VlrOtro3PAG.Value = comp.AbonoValor.Value;
                            estadoCuentaCta.VlrOtro3ABO.Value = 0;
                        }
                        else if (comp.TipoComponente.Value == (byte)TipoComponente.ComponenteCuota)
                        {
                            estadoCuentaCta.VlrOtrosfijosSDO.Value = estadoCuentaCta.VlrOtrosfijosSDO.Value?? 0;
                            estadoCuentaCta.VlrOtrosfijosPAG.Value = estadoCuentaCta.VlrOtrosfijosPAG.Value ?? 0;
                            estadoCuentaCta.VlrOtrosfijosABO.Value = estadoCuentaCta.VlrOtrosfijosABO.Value ?? 0;
                            estadoCuentaCta.VlrOtrosfijosSDO.Value += comp.CuotaSaldo.Value;
                            estadoCuentaCta.VlrOtrosfijosPAG.Value += comp.AbonoValor.Value;
                            estadoCuentaCta.VlrOtrosfijosABO.Value += 0;
                        }
                    }
                    #endregion
                    this._dal_ccEstadoCuentaCuotas.DAL_ccEstadoCuentaCuotas_Add(estadoCuentaCta);
                }
                #endregion
                #region Asignar nuevo flujo
                result = this.AsignarFlujo(documentoID, numDoc, actFlujoId, false, string.Empty);
                #endregion
                #region Guarda en la bitacora
                int bId = this._moduloAplicacion.aplBitacora_Add(this.Empresa.ID.Value, documentoID, (int)FormsActions.Edit, DateTime.Now,
                    this.UserId, this.Empresa.ID.Value, numDocNew.ToString(), documentoID.ToString(), string.Empty,
                    string.Empty, string.Empty, 0, 0, 0);
                #endregion

                if (result.Result == ResultValue.OK)
                {
                    result.ResultMessage = string.Empty;
                    result.ExtraField = numDocNew.ToString();
                }

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "EstadoCuenta_Add");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Funcion que retorna los componentes del estado de cuenta
        /// </summary>
        /// <param name="numDoc">Numero Doc</param>
        /// <param name="isPagoTotal">Indicador para verificar si hay pagos parciales (Pagos Totales)</param>
        /// <returns>Retorna el listado de los componentes del estado de cuenta segun el numDoc</returns>
        public List<DTO_ccEstadoCuentaComponentes> EstadoCuenta_GetComponentesByNumeroDoc(int numDoc, bool isPagoTotal)
        {
            try
            {
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                this._dal_Cartera = (DAL_Cartera)base.GetInstance(typeof(DAL_Cartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccEstadoCuentaComponentes = (DAL_ccEstadoCuentaComponentes)base.GetInstance(typeof(DAL_ccEstadoCuentaComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                string componenteMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string componenteUsura = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteUsura);
                string componentePJ = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);
                DTO_glDocumentoControl docCtrlCredito = null;
                List<DTO_ccEstadoCuentaComponentes> estadoCuentaComp = new List<DTO_ccEstadoCuentaComponentes>();

                decimal vlrPagoParcial = 0;
                if (isPagoTotal)
                {
                    docCtrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(numDoc);
                    //vlrPagoParcial = this._dal_Cartera.DAL_Cartera_GetValorAbonoPagoTotal(docCtrlCredito.TerceroID.Value, docCtrlCredito.DocumentoTercero.Value);
                }

                estadoCuentaComp = this._dal_ccEstadoCuentaComponentes.DAL_ccEstadoCuentaComponentes_GetByNumeroDoc(numDoc, componenteMora, componentePJ, componenteUsura);
                if (estadoCuentaComp.Count > 0)
                    estadoCuentaComp[0].VlrAbonoPrevio.Value = vlrPagoParcial;

                return estadoCuentaComp;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "EstadoCuenta_GetComponentesByNumeroDoc");
                throw ex;
            }
        }

        /// <summary>
        /// Funcion que retorna los componentes del estado de cuenta para revocatoria
        /// </summary>
        /// <param name="aseguradora">Aseguradora</param>
        /// <returns>Retorna el listado de creditos para revocar </returns>
        public List<DTO_ccCreditoDocu> EstadoCuenta_GetForRevocatoria(string aseguradora)
        {
            try
            {
                this._dal_ccEstadoCuentaHistoria = (DAL_ccEstadoCuentaHistoria)base.GetInstance(typeof(DAL_ccEstadoCuentaHistoria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                string componenteSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);

                return  this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_GetForRevocatoria(aseguradora,componenteSeguro); 
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "EstadoCuenta_GetComponentesByNumeroDoc");
                throw ex;
            }
        }

        /// <summary>
        /// Funcion que retorna los componentes del estado de cuenta
        /// </summary>
        /// <param name="numDoc">Numero Doc</param>
        /// <returns>Retorna el listado de los componentes del estado de cuenta segun el numDoc</returns>
        public DTO_ccEstadoCuentaHistoria EstadoCuenta_GetHistoria(int numDoc)
        {
            try
            {
                this._dal_ccEstadoCuentaHistoria = (DAL_ccEstadoCuentaHistoria)base.GetInstance(typeof(DAL_ccEstadoCuentaHistoria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_ccEstadoCuentaHistoria estadoCuentaHistoria = this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_GetByNumeroDoc(numDoc);

                return estadoCuentaHistoria;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "EstadoCuenta_GetHistoria");
                throw ex;
            }
        }

        /// <summary>
        /// Funcion que retorna la información de un estado de cuenta
        /// </summary>
        /// <param name="numDoc">Numero Doc del estado de cuenta</param>
        /// <returns>Retorna la información asociada a un estado de cuenta</returns>
        public DTO_EstadoCuenta EstadoCuenta_GetAll(int numDocEC)
        {
            try
            {
                DTO_EstadoCuenta result = null;
                DTO_ccEstadoCuentaHistoria estadoCuentaHistoria = this.EstadoCuenta_GetHistoria(numDocEC);
                List<DTO_ccEstadoCuentaComponentes> componentes = this.EstadoCuenta_GetComponentesByNumeroDoc(numDocEC, false);

                if (estadoCuentaHistoria != null && componentes != null && componentes.Count() > 0)
                {
                    result = new DTO_EstadoCuenta();
                    result.AddData(estadoCuentaHistoria, componentes);
                }

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "EstadoCuenta_GetAll");
                throw ex;
            }
        }

       /// <summary>
       /// Agrega un documento de revocacion
       /// </summary>
       /// <param name="documentoID">ID</param>
       /// <param name="actFlujoId">flujo</param>
        /// <param name="aseguradoraID">ASeguradora</param>
       /// <param name="ctrl">doc control</param>
       /// <param name="creditosRevocar">lista de creditos a revocar</param>
        /// <returns>Retorna el resultado de la operacion</returns>
       public DTO_TxResult PolizaRevocatoria_Add(int documentoID,string aseguradoraID, DTO_glDocumentoControl ctrl, List<DTO_ccCreditoDocu> creditosRevocar,bool update, bool isAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            int numDocNew = 0;
            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Globales
            this._dal_ccPolizaEstado = (DAL_ccPolizaEstado)base.GetInstance(typeof(DAL_ccPolizaEstado), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccEstadoCuentaHistoria = (DAL_ccEstadoCuentaHistoria)base.GetInstance(typeof(DAL_ccEstadoCuentaHistoria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_Comprobante comprobante = null;
            DTO_coComprobante comp = null;
            #endregion
           try
            {
                if (!update)
                {
                    #region Variables
                    DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                    string compSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                    DTO_ccAseguradora aseguradora = (DTO_ccAseguradora)this.GetMasterDTO(AppMasters.MasterType.Simple,AppMasters.ccAseguradora,aseguradoraID,true,false);

                    string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                    string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                    string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                    string libroFunc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TipoBalanceFuncional);

                    string coDocumentoRevoc = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocContableRevocatoria);
                    Dictionary<string,string> pks = new Dictionary<string,string>();
                    pks.Add("ComponenteCarteraID", compSeguro);
                     pks.Add("TipoEstado", "1");
                    DTO_ccComponenteCuenta compCuentaSeguro = (DTO_ccComponenteCuenta)this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta,pks,true);
                    decimal tc = 0;

                    #endregion
                    #region Validaciones
                    //Valida que exista el coDocumento de revocatoria
                    if (string.IsNullOrWhiteSpace(coDocumentoRevoc))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocContableRechazos + "&&" + string.Empty;

                        return result;
                    }
                    //Valida la cuenta del documento de revocatoria
                    DTO_coDocumento coDocRevocatoria = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocumentoRevoc, true, false);
                    if (string.IsNullOrWhiteSpace(coDocRevocatoria.CuentaLOC.Value))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocumentoRevoc;
                        return result;
                    }

                    if (string.IsNullOrWhiteSpace(coDocRevocatoria.ComprobanteID.Value))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;
                        return result;
                    }
                    else
                        comp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, coDocRevocatoria.ComprobanteID.Value, true, false);
                 
                     //Valida que exista el componente Cuenta del Seguro
                    if (compCuentaSeguro == null)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "No existe parametrizacion del Seguro en Componente Cuenta ";
                        return result;
                    }
                    else
                    {
                        //Valida Cuentas del componente
                         if (string.IsNullOrWhiteSpace(compCuentaSeguro.CtaRecursosCesion.Value))
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.EmptyField_Col + "&&" + "Cuenta Recursos Cesión";
                            return result;
                        }
                        if (string.IsNullOrWhiteSpace(compCuentaSeguro.CtaRecursosTerceros.Value))
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.EmptyField_Col + "&&" + "Cuenta Recursos Terceros";
                            return result;
                        }
                    
                    }
                    //Valida la tasa de cambio
                    if (this.Multimoneda())
                        tc = this._moduloGlobal.TasaDeCambio_Get(ctrl.MonedaID.Value, ctrl.FechaDoc.Value.Value);
                    #endregion
                    #region Crea glDocumentoControl
                    ctrl.TerceroID.Value = aseguradora.TerceroID.Value;
                    ctrl.CuentaID.Value = coDocRevocatoria.CuentaLOC.Value;
                    ctrl.ComprobanteID.Value = coDocRevocatoria.ComprobanteID.Value;
                    ctrl.Valor.Value = creditosRevocar.Sum(x => x.VlrRevoca.Value);
                    DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentoID, ctrl, true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);
                        return result;
                    }
                    numDocNew = Convert.ToInt32(resultGLDC.Key);
                    ctrl.NumeroDoc.Value = numDocNew;

                    #endregion
                    #region Agrega la informacion a ccEstadoCuentaHistoria
                    foreach (DTO_ccCreditoDocu cred in creditosRevocar)
                    {
                        #region Actualiza Estado Cuenta Historia
                        DTO_ccEstadoCuentaHistoria hist = this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_GetByNumeroDoc(cred.NumDocHistoria.Value.Value);
                        if (hist != null)
                        {
                            hist.NumDocRevoca.Value = ctrl.NumeroDoc.Value;
                            this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_Update(hist);

                            #region Actualiza Poliza Estado
                            DTO_ccPolizaEstado filter = new DTO_ccPolizaEstado();
                            filter.AseguradoraID.Value = aseguradoraID;
                            filter.Poliza.Value = cred.Poliza.Value;
                            DTO_ccPolizaEstado pol = this._dal_ccPolizaEstado.DAL_ccPolizaEstado_GetByParameter(filter).FirstOrDefault();
                            pol.NumDocEstCuenta.Value = hist.NumeroDoc.Value;
                            pol.NumDocRevoca.Value = ctrl.NumeroDoc.Value;
                            pol.FechaRevoca.Value = ctrl.FechaDoc.Value;
                            pol.ValorRevoca.Value = cred.VlrRevoca.Value;
                            this._dal_ccPolizaEstado.DAL_ccPolizaEstado_Upd(pol);
                            #endregion
                        }
                        else
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_UpdateDocument;
                            return result;
                        }
                        #endregion
                        #region Genera el comprobante de cada Revocatoria
                        comprobante = new DTO_Comprobante();

                        //Header
                        DTO_ComprobanteHeader header = new DTO_ComprobanteHeader();
                        header.ComprobanteID.Value = coDocRevocatoria.ComprobanteID.Value;
                        header.ComprobanteNro.Value = 0;
                        header.Fecha.Value = ctrl.FechaDoc.Value;
                        header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                        header.MdaTransacc.Value = ctrl.MonedaID.Value;
                        header.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                        header.PeriodoID.Value = ctrl.PeriodoDoc.Value;
                        header.TasaCambioBase.Value = tc;
                        header.TasaCambioOtr.Value = tc;
                        comprobante.Header = header;

                        //Vlr Seguro DB
                        decimal vlrML = cred.VlrSaldoSeguro.Value.Value * -1;
                        decimal vlrME = (tc != 0) ? Math.Round(vlrML / tc, 2) : 0;
                        DTO_coPlanCuenta cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, compCuentaSeguro.CtaRecursosCesion.Value, true, false);
                        DTO_glConceptoSaldo cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrML, vlrME, false);
                        f.TerceroID.Value = cred.ClienteID.Value;
                        f.Descriptivo.Value = "Saldo Seguro Poliza";
                        comprobante.Footer.Add(f);

                        //Vlr Revocatoria CR
                        vlrML = cred.VlrRevoca.Value.Value;
                        vlrME = (tc != 0) ? Math.Round(vlrML / tc, 2) : 0;
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, compCuentaSeguro.CtaRecursosTerceros.Value, true, false);
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrML, vlrME, false);
                        f.TerceroID.Value = aseguradora.TerceroID.Value;
                        f.Descriptivo.Value = "Revocatoria Seguro Poliza";
                        comprobante.Footer.Add(f);

                        //Contrapartida
                        vlrML = comprobante.Footer.Sum(x => x.vlrMdaLoc.Value.Value) *-1;
                        vlrME = (tc != 0) ? Math.Round(vlrML / tc, 2) : 0;
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, coDocRevocatoria.CuentaLOC.Value, true, false);
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrML, vlrME, false);
                        f.TerceroID.Value = aseguradora.TerceroID.Value;
                        f.Descriptivo.Value = "Contrapartida";
                        comprobante.Footer.Add(f);

                        result = this._moduloContabilidad.ContabilizarComprobante(documentoID, comprobante, periodo, ModulesPrefix.cc, 0, false);
                        if(result.Result == ResultValue.NOK)                         
                           return result;
                        #endregion
                    }                   
                    #endregion                 
                    
                    #region Asignar nuevo flujo
                    //result = this.AsignarFlujo(documentoID, numDoc, actFlujoId, false, string.Empty);
                    #endregion                   
                }

                if (result.Result == ResultValue.OK)
                {
                    result.ExtraField = numDocNew.ToString();
                }

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "PolizaRevocatoria_Add");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;

                        ctrl.DocumentoNro.Value = this.GenerarDocumentoNro(documentoID, ctrl.PrefijoID.Value);
                        ctrl.ComprobanteIDNro.Value = this.GenerarComprobanteNro(comp, ctrl.PrefijoID.Value, ctrl.PeriodoDoc.Value.Value, ctrl.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrl, true, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrl.NumeroDoc.Value.Value, ctrl.ComprobanteIDNro.Value.Value, false);   
                        result.ResultMessage = DictionaryMessages.DocumentOK + "&&" + ctrl.PrefijoID.Value + "&&" + ctrl.DocumentoNro.Value.ToString();
                        #endregion                    
                    }
                       
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Pagos Creditos

        #region Funciones Privadas

        /// <summary>
        /// Genera un comprobante de un plan de pagos
        /// </summary>
        /// <param name="ctrlRecibo">Documento control del recibo de caja</param>
        /// <param name="ctrlCredito">Documento control del credito</param>
        /// <param name="planPagos">Plan de pagos</param>
        /// <param name="componentesSaldos">Lista de los componentes de cada cuota</param>
        /// <param name="coDoc">Documento contable</param>
        /// <param name="compCapital">Componente capital</param>
        /// <param name="compInteres">Componente interes</param>
        /// <param name="compSeguro">Componente seguro</param>
        /// <param name="AddContraBalance">Indica si se deben agregar las contrapartidas</param>
        /// <param name="desc">Documento que genera el comprobante (Ej: RECAUDO MANUAL)</param>
        /// <returns>Retorna el comprobante o un resultado con errores</returns>
        private object GenerarComprobante_PagosCartera(TipoRecaudo tipoRecaudo, DTO_glDocumentoControl ctrlRecibo, DTO_glDocumentoControl ctrlCredito,
            DTO_ccCreditoDocu credito, List<DTO_ccCreditoPlanPagos> planPagos, List<DTO_ccSaldosComponentes> componentesSaldos, List<DTO_ccSaldosComponentes> componentesPago, DTO_coDocumento coDoc,
            string compCapital, string compInteres, string compSeguro, bool AddContraBalance, string desc, int estadoDeuda, ref decimal vlrAbonoCapital)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            try
            {
                #region Variables
                this._dal_ccCJHistorico = (DAL_ccCJHistorico)base.GetInstance(typeof(DAL_ccCJHistorico), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_Comprobante comprobante = new DTO_Comprobante();

                //Info por defecto
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);

                //Variables Temporales
                string ctaCapital = string.Empty;
                decimal totalValorVendidoCapital = 0;
                decimal totalValorVendidoInteres = 0;
                decimal totalValorVendidoOtros = 0;
                decimal totalValorUtilidadVenta = 0; // Utilidad de Venta ()
                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                Dictionary<string, DTO_coPlanCuenta> cacheCtas = new Dictionary<string, DTO_coPlanCuenta>();
                Dictionary<string, DTO_glConceptoSaldo> cacheSaldos = new Dictionary<string, DTO_glConceptoSaldo>();
                List<string> ctasCapInt = new List<string>();
                decimal tc = ctrlRecibo.TasaCambioCONT.Value.Value;

                //Documento pago flujos (para pagos totales de cartera vendida)
                string docContablePagoFlujos = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocumentoContablePagoFlujos);
                DTO_coDocumento coDocPagoFlujos = null;

                //Cuentas 
                string codCarteraPropia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);
                string ctaContraOrden_Propia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterPropia);
                string ctaContraOrden_Cedida = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterCedida);
                string ctaContraBalance_Cedida = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaBalanceCarteraCedida);
                string ctaUtilidad_Venta = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaUtilidadCesion);
                string ctaEspecialPagosCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaEspecialPagosCartera);
                string indCausarInteresVencido = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_IndCausarProvisionarIntersesVencidos);
                string ctaPagosParciales = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaPagosAbonosDeuda);

                //Componentes
                List<DTO_ccCarteraComponente> componentes = new List<DTO_ccCarteraComponente>();
                string componenteSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string componenteInteresSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresSeguro);
                string compPagaduriaID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePagaduria);
                string compPrejuridico = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);

                //Resultado
                DTO_ComprobanteHeader header = new DTO_ComprobanteHeader();
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> footerPropia = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> footerCedida = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> fBalance = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> fOrden = new List<DTO_ComprobanteFooter>();

                //Comprador
                DTO_ccCompradorCartera comprador = null;
                List<DTO_ccCreditoPlanPagos> lstPagos = planPagos.Where(x => !string.IsNullOrWhiteSpace(x.CompradorCarteraID.Value)).ToList();
                if (lstPagos.Count > 0)
                {
                    comprador = (DTO_ccCompradorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCompradorCartera,
                        lstPagos.First().CompradorCarteraID.Value, true, false);
                }

                //Otras
                DTO_ccLineaCredito lineaCred = (DTO_ccLineaCredito)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccLineaCredito, credito.LineaCreditoID.Value, false, false);
                DTO_ccPagaduria pagaduria = null;
                string sectorCarteraStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);
                SectorCartera sectorCartera = (SectorCartera)Enum.Parse(typeof(SectorCartera), sectorCarteraStr.ToString());
                if (sectorCartera == SectorCartera.Solidario && !string.IsNullOrWhiteSpace(compPagaduriaID))
                {
                    pagaduria = (DTO_ccPagaduria)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccPagaduria, credito.PagaduriaID.Value, true, false);
                }

                #endregion
                #region Validaciones

                #region Contrapartidas

                //Valida la cuenta de contraP de orden
                if (string.IsNullOrWhiteSpace(ctaContraOrden_Propia))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenContraCarterPropia + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta de contraP de balance
                if (string.IsNullOrWhiteSpace(ctaContraOrden_Cedida))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenContraCarterCedida + "&&" + string.Empty;

                    return result;
                }

                //Valida el codigo de cartera propia
                if (string.IsNullOrWhiteSpace(codCarteraPropia))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CodigoCarteraPropia + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta de la cartera decida
                if (string.IsNullOrWhiteSpace(ctaContraBalance_Cedida))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaBalanceCarteraCedida + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta de la utilidad de la cesion
                if (string.IsNullOrWhiteSpace(ctaUtilidad_Venta))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaUtilidadCesion + "&&" + string.Empty;

                    return result;
                }
                //Valida la cuenta de Pagos parciales
                if (string.IsNullOrWhiteSpace(ctaPagosParciales))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaPagosAbonosDeuda + "&&" + string.Empty;

                    return result;
                }
                #endregion
                #region Comprador de todos los componentes
                if (comprador != null /*&& comprador.TipoLiquidacion.Value == (byte)TipoLiquidacionComprador.Total*/)
                {
                    if (!string.IsNullOrWhiteSpace(docContablePagoFlujos))
                    {
                        coDocPagoFlujos = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, docContablePagoFlujos, true, false);
                        if (string.IsNullOrWhiteSpace(coDocPagoFlujos.CuentaLOC.Value))
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocPagoFlujos.ID.Value;

                            return result;
                        }

                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, coDocPagoFlujos.CuentaLOC.Value, true, false);
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheCtas[cta.ID.Value] = cta;
                        cacheSaldos[cSaldo.ID.Value] = cSaldo;

                        //Cuenta Especial
                        if (tipoRecaudo == TipoRecaudo.PagoTotal && comprador.CtaPagosTotalesInd.Value.HasValue && comprador.CtaPagosTotalesInd.Value.Value)
                        {
                            if(string.IsNullOrWhiteSpace(ctaEspecialPagosCartera))
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaEspecialPagosCartera + "&&" + string.Empty;

                                return result;
                            }

                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaEspecialPagosCartera, true, false);
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            cacheCtas[cta.ID.Value] = cta;
                            cacheSaldos[cSaldo.ID.Value] = cSaldo;
                        }
                    }
                    else
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocumentoContablePagoFlujos + "&&" + string.Empty;

                        return result;
                    }
                }
                #endregion

                #endregion
                #region Asigna al dicionario de cuentas la informacion de las contrapartidas

                //Contrapartida cartera propia - Orden
                if (!cacheCtas.ContainsKey(ctaContraOrden_Propia))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraOrden_Propia, true, false);
                    cacheCtas.Add(ctaContraOrden_Propia, cta);

                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                    {
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                    }
                }

                //Contrapartida cartera cedida - Orden
                if (!cacheCtas.ContainsKey(ctaContraOrden_Cedida))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraOrden_Cedida, true, false);
                    cacheCtas.Add(ctaContraOrden_Cedida, cta);

                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                    {
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                    }
                }

                //Contrapartida cartera cedida - Balance
                if (!cacheCtas.ContainsKey(ctaContraBalance_Cedida))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraBalance_Cedida, true, false);
                    cacheCtas.Add(ctaContraBalance_Cedida, cta);

                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                    {
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                    }
                }

                //Contrapartida cuenta utilidad
                if (!cacheCtas.ContainsKey(ctaUtilidad_Venta))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaUtilidad_Venta, true, false);
                    cacheCtas.Add(ctaUtilidad_Venta, cta);

                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                    {
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                    }
                }

                //Cuenta de documento contable del recibo de caja
                if (AddContraBalance)
                {
                    if (!cacheCtas.ContainsKey(coDoc.CuentaLOC.Value))
                    {
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, coDoc.CuentaLOC.Value, true, false);
                        cacheCtas.Add(coDoc.CuentaLOC.Value, cta);

                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        {
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                        }
                    }
                }

                //Cuenta para pagos parciales
                if (!cacheCtas.ContainsKey(ctaPagosParciales))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaPagosParciales, true, false);
                    cacheCtas.Add(ctaPagosParciales, cta);

                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                    {
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                    }
                }

                #endregion
                #region Asigna la info de pagos totales a las cuotas para los recaudos parciales

                //Asigna el pago de los componentes autocalculados por el EC
                var componentesPagoEC = componentesSaldos.Where(x => x.AbonoValor.Value != 0 && x.AbonoSaldo.Value == 0);
                foreach (var cs in componentesPagoEC)
                    cs.AbonoSaldo.Value = cs.AbonoValor.Value;

                #endregion
                #region Carga la información de los componenetes

                List<string> componentesIds = componentesSaldos.Select(c => c.ComponenteCarteraID.Value).Distinct().ToList();
                foreach(var id in componentesIds)
                {
                    DTO_ccCarteraComponente comp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, id, true, false);
                    componentes.Add(comp);
                }

                #endregion
                #region Llena los detalles del comprobante por cada cuota
                int i = 0;
                foreach (DTO_ccCreditoPlanPagos cuota in planPagos)
                {
                    #region Carga el cabezote

                    int cuotaID = cuota.CuotaID.Value.Value;
                    if (i == 0)
                    {
                        if (AddContraBalance)
                        {
                            header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                            header.ComprobanteNro.Value = 0;
                            header.Fecha.Value = ctrlRecibo.FechaDoc.Value;
                            header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                            header.MdaTransacc.Value = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                            header.NumeroDoc.Value = ctrlRecibo.NumeroDoc.Value;
                            header.PeriodoID.Value = ctrlRecibo.PeriodoDoc.Value;
                            header.TasaCambioBase.Value = ctrlRecibo.TasaCambioCONT.Value;
                            header.TasaCambioOtr.Value = ctrlRecibo.TasaCambioCONT.Value;
                        }

                        comprobante = new DTO_Comprobante();
                        comprobante.Header = header;
                    }

                    #endregion
                    List<DTO_ccSaldosComponentes> componentesCuota = (from c in componentesSaldos where c.CuotaID.Value == cuotaID select c).ToList();
                    if (string.IsNullOrWhiteSpace(cuota.CompradorCarteraID.Value) || cuota.CompradorCarteraID.Value == codCarteraPropia)
                    {
                        #region Trae los registros para cartera propia (independiente el estado: Cobro jurídico, acurerdo de pago y acuerdo de pago incumplido)

                        object compTemp = null;
                        if (tipoRecaudo == TipoRecaudo.Normal || tipoRecaudo == TipoRecaudo.PagoTotal)
                        {
                            compTemp = this.GenerarComprobanteFooter_CarteraPropia(tipoRecaudo, sectorCartera, componentesCuota, componentes, ctrlCredito,
                                lineaCred.ClaseCredito.Value, concCargoXdef, lgXdef, lineaXdef, compCapital, compInteres, compSeguro, compPagaduriaID,compPrejuridico, pagaduria,
                                indCausarInteresVencido, tc, cacheCtas, cacheSaldos, ref ctaCapital, credito.EC_PolizaMvto.Value);
                        }
                        else 
                        {
                            compTemp = this.GenerarComprobanteFooter_CarteraCJ(tipoRecaudo, sectorCartera, componentesCuota, componentes, ctrlCredito,
                                lineaCred.ClaseCredito.Value, concCargoXdef, lgXdef, lineaXdef, compCapital, compInteres, compSeguro, compPagaduriaID, pagaduria,
                                indCausarInteresVencido, tc, cacheCtas, cacheSaldos, ref ctaCapital);
                        }

                        //Error
                        if (compTemp.GetType() == typeof(DTO_TxResult))
                        {
                            result = (DTO_TxResult)compTemp;
                            return result;
                        }

                        //Agrega los registros
                        foreach (DTO_ComprobanteFooter det in (List<DTO_ComprobanteFooter>)compTemp)
                        {
                            // Por cada registro reviso si existe en la lista de cartera propia
                            List<DTO_ComprobanteFooter> aux =
                            (
                                from p in footerPropia
                                where
                                    p.CuentaID.Value == det.CuentaID.Value &&
                                    p.ConceptoSaldoID.Value == det.ConceptoSaldoID.Value &&
                                    p.DocumentoCOM.Value == det.DocumentoCOM.Value &&
                                    p.IdentificadorTR.Value == det.IdentificadorTR.Value &&
                                    p.DatoAdd1.Value == det.DatoAdd1.Value
                                select p
                            ).ToList();

                            if (aux.Count > 0)
                            {
                                aux.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value;
                                aux.First().vlrMdaExt.Value += det.vlrMdaExt.Value;
                            }
                            else
                                footerPropia.Add(det);
                        }

                        #endregion
                    }
                    else
                    {
                        #region Trae los registros para la cartera cedida

                        object compTemp = this.GenerarComprobanteFooter_CarteraCedida(tipoRecaudo, sectorCartera, componentesCuota, componentes, ctrlCredito, 
                            lineaCred.ClaseCredito.Value, concCargoXdef, lgXdef, lineaXdef, compCapital, compInteres, compSeguro, compPagaduriaID,compPrejuridico, pagaduria, tc, 
                            comprador, ctaUtilidad_Venta, cacheCtas, cacheSaldos, ctasCapInt, ref totalValorVendidoCapital, ref totalValorVendidoInteres,
                            ref totalValorVendidoOtros, ref totalValorUtilidadVenta,ref ctaCapital, coDocPagoFlujos.CuentaLOC.Value, credito.EC_PolizaMvto.Value);

                        //Error
                        if (compTemp.GetType() == typeof(DTO_TxResult))
                        {
                            result = (DTO_TxResult)compTemp;
                            return result;
                        }

                        //Agrega los registros
                        foreach (DTO_ComprobanteFooter det in (List<DTO_ComprobanteFooter>)compTemp)
                        {
                            if (ctasCapInt.Contains(det.CuentaID.Value))
                            {
                                if (det.CuentaID.Value == ctaCapital)
                                    det.TerceroID.Value = comprador.TerceroID.Value;
                            }

                            // Por cada registro reviso si existe en la lista de cartera cedida
                            List<DTO_ComprobanteFooter> aux =
                            (
                                from p in footerCedida
                                where
                                    p.CuentaID.Value == det.CuentaID.Value &&
                                    p.ConceptoSaldoID.Value == det.ConceptoSaldoID.Value &&
                                    p.TerceroID.Value == det.TerceroID.Value &&
                                    p.DocumentoCOM.Value == det.DocumentoCOM.Value &&
                                    p.IdentificadorTR.Value == det.IdentificadorTR.Value &&
                                    p.DatoAdd1.Value == det.DatoAdd1.Value &&
                                    p.DatoAdd4.Value == det.DatoAdd4.Value
                                select p
                            ).ToList();

                            if (aux.Count > 0)
                            {
                                aux.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value;
                                aux.First().vlrMdaExt.Value += det.vlrMdaExt.Value;
                            }
                            else
                            {
                                footerCedida.Add(det);
                            }
                        }

                        #endregion
                    }

                    ++i;
                }
                #endregion
                #region Organiza los registros de la cartera propia

                //Valores de cartera propia
                decimal vlrBalancePropiaML = 0;
                decimal vlrBalancePropiaME = 0;
                decimal vlrOrdenPropiaML = 0;
                decimal vlrOrdenPropiaME = 0;
                footerPropia = footerPropia.Where(c => c.vlrMdaLoc.Value != 0).ToList();
                foreach (DTO_ComprobanteFooter det in footerPropia)
                {
                    cta = cacheCtas[det.CuentaID.Value];
                    det.vlrMdaExt.Value = tc != 0 ? Math.Round(det.vlrMdaLoc.Value.Value / tc, 2) : 0;

                    if (cta.Tipo.Value == ((int)TipoCuenta.Orden).ToString())
                    {
                        vlrOrdenPropiaML += det.vlrMdaLoc.Value.Value;
                        vlrOrdenPropiaME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> po_Temp = (from c in fOrden where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (po_Temp.Count == 0)
                        {
                            det.Descriptivo.Value = desc + credito.Libranza.Value.Value.ToString();
                            fOrden.Add(det);
                        }
                        else
                        {
                            po_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            po_Temp.First().vlrMdaLoc.Value += det.vlrMdaExt.Value.Value;
                        }
                    }
                    else
                    {
                        vlrBalancePropiaML += det.vlrMdaLoc.Value.Value;
                        vlrBalancePropiaME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> pb_Temp = (from c in fBalance where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (pb_Temp.Count == 0)
                        {
                            det.Descriptivo.Value = desc + " CREDITO";
                            fBalance.Add(det);
                        }
                        else
                        {
                            pb_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            pb_Temp.First().vlrMdaLoc.Value += det.vlrMdaExt.Value.Value;
                        }
                    }
                }

                #endregion
                #region Organiza los registros de la cartera cedida
               
                //Valores de cartera propia
                decimal vlrBalanceCedidaML = 0;
                decimal vlrBalanceCedidaME = 0;
                decimal vlrOrdenCedidaML = 0;
                decimal vlrOrdenCedidaME = 0;
               
                footerCedida = footerCedida.Where(c => c.vlrMdaLoc.Value != 0).ToList();
                foreach (DTO_ComprobanteFooter det in footerCedida)
                {
                    cta = cacheCtas[det.CuentaID.Value];
                    det.vlrMdaExt.Value = tc != 0 ? Math.Round(det.vlrMdaLoc.Value.Value / tc, 2) : 0;

                    if (cta.Tipo.Value == ((int)TipoCuenta.Orden).ToString())
                    {
                        vlrOrdenCedidaML += det.vlrMdaLoc.Value.Value;
                        vlrOrdenCedidaME += det.vlrMdaExt.Value.Value;
                        det.Descriptivo.Value = "Cartera Cedida - Recibo Caja (Cta Orden)";
                        fOrden.Add(det);
                    }
                    else
                    {
                        //Modificado 19 Enero por descuadre seguro
                        //if (comprador.TipoLiquidacion.Value == (byte)TipoLiquidacionComprador.CapitalInteres || !ctasCapInt.Contains(cta.ID.Value) || det.DatoAdd4.Value != AuxiliarDatoAdd4.Cuota.ToString())
                        //{
                            vlrBalanceCedidaML += det.vlrMdaLoc.Value.Value;
                            vlrBalanceCedidaME += det.vlrMdaExt.Value.Value;
                            det.Descriptivo.Value = "Cartera Cedida - Recibo Caja (Cta Balance)";
                            fBalance.Add(det);
                        //}
                    }
                }

                #region Agrega el registro de flujos cuando el crédito esta vendido
                if (comprador != null && comprador.ID.Value != codCarteraPropia && comprador.TipoLiquidacion.Value == (byte)TipoLiquidacionComprador.Total) //INCLUYE REGITROS ADICIONALES
                {
                    totalValorVendidoCapital *= -1;
                    totalValorVendidoInteres *= -1;
                    totalValorVendidoOtros *= -1;

                    //if (tipoRecaudo == TipoRecaudo.PagoTotal && comprador.CtaPagosTotalesInd.Value.HasValue && comprador.CtaPagosTotalesInd.Value.Value)
                    //    cta = cacheCtas[ctaEspecialPagosCartera];
                    //else
                    //    cta = cacheCtas[coDocPagoFlujos.CuentaLOC.Value];

                    cta = cacheCtas[coDocPagoFlujos.CuentaLOC.Value];
                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    DTO_glDocumentoControl ctrlAux = ObjectCopier.Clone(ctrlCredito);
                    decimal totML = totalValorVendidoCapital + totalValorVendidoInteres + totalValorVendidoOtros;
                    decimal totME = 0;

                    if (tc != 0)
                        totME = Math.Round(totML / tc, 2);

                    if (sectorCartera == SectorCartera.Solidario)
                    {
                        decimal vlrVenta = 0;
                        if (tipoRecaudo == TipoRecaudo.PagoTotal && comprador.CtaPagosTotalesInd.Value.HasValue && comprador.CtaPagosTotalesInd.Value.Value && totalValorUtilidadVenta != 0)
                        {
                            totalValorUtilidadVenta = totalValorUtilidadVenta > 0 ? totalValorUtilidadVenta * -1 : totalValorUtilidadVenta;
                            vlrVenta = totalValorUtilidadVenta; 
                            cta = cacheCtas[ctaEspecialPagosCartera];
                            #region Registro de utilidad venta cartera
                            DTO_ComprobanteFooter fAdic = this.CrearComprobanteFooter(ctrlAux, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, totalValorUtilidadVenta, totME, false);
                            fAdic.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                            fAdic.Descriptivo.Value = "Cartera Cedida - Utilidad Venta";
                            fAdic.TerceroID.Value = comprador.TerceroID.Value;
                            fBalance.Add(fAdic);
                            #endregion

                            vlrBalanceCedidaML += totalValorUtilidadVenta;
                            vlrBalanceCedidaME += totME;                            
                        }

                        decimal vlrComponente = totML - vlrVenta;
                        if (ctrlRecibo.DocumentoID.Value == AppDocuments.PagosTotales || ctrlRecibo.DocumentoID.Value == AppDocuments.RecaudoReoperacion)
                        {                                
                             string ctaPrepagosCartCed = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaPrepagosCartCed);//(530)
                             DTO_coPlanCuenta ctaPrep = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, ctaPrepagosCartCed, true, false);
                             DTO_glConceptoSaldo cSaldoPrep = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, ctaPrep != null? ctaPrep.ConceptoSaldoID.Value: string.Empty, true, false);
                             if (ctaPrep == null)
                             {
                                 result.Result = ResultValue.NOK;
                                 result.ResultMessage = "No existe la cuenta Prepago de Cartera Cedida, Control Nro. 16530";
                                 return result;
                             }
                             DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrlAux, ctaPrep, cSaldoPrep, tc, concCargoXdef, lgXdef, lineaXdef, vlrComponente, totME, false);
                             f.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                             f.Descriptivo.Value = "Cartera Cedida-Cont Saldo Compon Cuota "; // Cambios gabriel
                             f.TerceroID.Value = comprador.TerceroID.Value;
                             fBalance.Add(f);
                           
                        }
                        else
                        {
                            cta = cacheCtas[coDocPagoFlujos.CuentaLOC.Value];
                            #region Registro de flujos con la totalidad del valor vendido
                            DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrlAux, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrComponente, totME, false);
                            f.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                            f.Descriptivo.Value = "Cartera Cedida-Vlr Componentes (Cta Balance)"; // Cambios gabriel
                            f.TerceroID.Value = comprador.TerceroID.Value;
                            fBalance.Add(f);
                        }
                        
                        #endregion

                        vlrBalanceCedidaML += vlrComponente;
                        vlrBalanceCedidaME += totME;
                    }
                    else if(comprador.TipoControlRecursos.Value.Value == (byte)TipoControlRecursos.Flujo)
                    {
                        #region Flujo Capital

                        decimal totCapME = 0;

                        if (tc != 0)
                            totCapME = Math.Round(totalValorVendidoCapital / tc, 2);

                        if (totalValorVendidoCapital > 0)
                        {
                            DTO_ComprobanteFooter f_Capital = this.CrearComprobanteFooter(ctrlAux, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, totalValorVendidoCapital, totCapME, false);
                            f_Capital.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                            f_Capital.Descriptivo.Value = "Cartera Cedida - Recibo Caja (Cta Balance)";
                            f_Capital.TerceroID.Value = comprador.TerceroID.Value;
                            fBalance.Add(f_Capital);
                        }

                        #endregion
                        #region Flujo Interes

                        decimal totIntME = 0;

                        if (tc != 0)
                            totIntME = Math.Round(totalValorVendidoInteres / tc, 2);

                        if (totalValorVendidoInteres > 0)
                        {
                            DTO_ComprobanteFooter f_Interes = this.CrearComprobanteFooter(ctrlAux, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, totalValorVendidoInteres, totIntME, false);
                            f_Interes.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                            f_Interes.Descriptivo.Value = "Cartera Cedida - Recibo Caja (Cta Balance)";
                            f_Interes.TerceroID.Value = comprador.TerceroID.Value;
                            fBalance.Add(f_Interes);
                        }

                        #endregion
                        #region Flujo Otros

                        decimal totOtrosME = 0;

                        if (tc != 0)
                            totOtrosME = Math.Round(totalValorVendidoOtros / tc, 2);

                        if (totalValorVendidoOtros > 0)
                        {
                            DTO_ComprobanteFooter f_Otros = this.CrearComprobanteFooter(ctrlAux, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, totalValorVendidoOtros, totOtrosME, false);
                            f_Otros.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                            f_Otros.Descriptivo.Value = "Cartera Cedida - Recibo Caja (Cta Balance)";
                            f_Otros.TerceroID.Value = comprador.TerceroID.Value;
                            fBalance.Add(f_Otros);
                        }

                        #endregion

                        vlrBalanceCedidaML += totML;
                        vlrBalanceCedidaME += totME;
                    }
                }
                #endregion

                #region Agrega el registro de cuotas abonadas para pago Total
                if (sectorCartera == SectorCartera.Solidario && credito.VlrAbonado.Value != 0 && credito.VlrAbonado.Value.HasValue &&
                    comprador != null && comprador.ID.Value != codCarteraPropia && comprador.TipoLiquidacion.Value == (byte)TipoLiquidacionComprador.Total
                    && comprador.CtaPagosTotalesInd.Value.HasValue && comprador.CtaPagosTotalesInd.Value.Value)
                {
                    DTO_glDocumentoControl ctrlAux = ObjectCopier.Clone(ctrlCredito);
                    decimal totME = 0;
                    decimal totML = credito.VlrAbonado.Value.Value;
                    if (tc != 0)
                        totME = Math.Round(totML / tc, 2);

                    cta = cacheCtas[ctaPagosParciales];
                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                    #region Registro de pagos abonados
                    DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrlAux, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, totML, totME, false);
                    f.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                    f.Descriptivo.Value = "Cartera Cedida - Abonos de la libranza";
                    f.TerceroID.Value = comprador.TerceroID.Value;
                    fBalance.Add(f);
                    #endregion

                    vlrBalanceCedidaML += totML;
                    vlrBalanceCedidaME += totME;                  
                }
                #endregion
                #endregion
                #region Agrega registros Adicionales sin Saldo de componentes(Vlr Pago 0)
                if (tipoRecaudo == TipoRecaudo.PagoTotal && componentesPago != null)
                {
                    DTO_glDocumentoControl ctrlAux = ObjectCopier.Clone(ctrlCredito);
                    foreach (DTO_ccSaldosComponentes comp in componentesPago.FindAll(x => x.CuotaSaldo.Value != 0))
                    {
                        if (!componentesSaldos.Exists(x => x.ComponenteCarteraID.Value == comp.ComponenteCarteraID.Value))
                        {
                            decimal totME = 0;
                            decimal totML = comp.CuotaSaldo.Value.Value * -1;
                            if (tc != 0)
                                totME = Math.Round(totML / tc, 2);
                            DTO_ccCarteraComponente dtoComp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, comp.ComponenteCarteraID.Value, true, false);
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, dtoComp.CuentaID.Value, true, false);

                            if (cta == null)
                            {
                                Dictionary<string, string> pks = new Dictionary<string, string>();
                                pks.Add("ComponenteCarteraID", comp.ComponenteCarteraID.Value);
                                pks.Add("TipoEstado", credito.TipoEstado.Value.ToString());
                                pks.Add("ClaseCredito",lineaCred.ClaseCredito.Value);
                                DTO_ccComponenteCuenta complex = (DTO_ccComponenteCuenta)this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, complex.CuentaID.Value, true, false);
                                if (cta == null)
                                {
                                    result.Result = ResultValue.NOK;
                                    result.ResultMessage = "No existe la cuenta en el  Componente de Cartera  " + comp.ComponenteCarteraID.Value;
                                    return result; 
                                }
                            }
                            cSaldo = cacheSaldos.Any(x => x.Key == cta.ConceptoSaldoID.Value) ? cacheSaldos[cta.ConceptoSaldoID.Value] : (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            #region Registro
                            DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrlAux, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, totML, totME, false);
                            f.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                            f.Descriptivo.Value = dtoComp.Descriptivo.Value;
                            if (dtoComp.TerceroTipo.Value == 1)
                                f.TerceroID.Value = ctrlAux.TerceroID.Value;
                            else if (dtoComp.TerceroTipo.Value == 2)
                                f.TerceroID.Value = dtoComp.TerceroID.Value;
                            else if (dtoComp.TerceroTipo.Value == 3)
                            {
                                DTO_ccAsesor asesor = (DTO_ccAsesor)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccAsesor, credito.AsesorID.Value, true, false);
                                f.TerceroID.Value = asesor.TerceroID.Value;
                            }
                               
                            else if (dtoComp.TerceroTipo.Value == 4)
                            {
                                DTO_ccAbogado abogado = (DTO_ccAbogado)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccAsesor, credito.Abogado.Value, true, false);
                                f.TerceroID.Value = abogado.TerceroID.Value;
                            }
                            fBalance.Add(f);
                            #endregion

                            vlrBalanceCedidaML += totML;
                            vlrBalanceCedidaME += totME;
                        }

                    }
                }
                #endregion
                #region Carga las contrapartidas
                vlrAbonoCapital = fOrden.Where(f => f.CuentaID.Value == ctaCapital).Sum(s => s.vlrMdaLoc.Value.Value);
                vlrAbonoCapital += fBalance.Where(f => f.CuentaID.Value == ctaCapital).Sum(s => s.vlrMdaLoc.Value.Value);
                vlrAbonoCapital = Math.Abs(vlrAbonoCapital);
                decimal vlrTotalBalance = (from f in fBalance select f.vlrMdaLoc.Value.Value).Sum();
                //if (comprador == null || comprador.TipoLiquidacion.Value == (byte)TipoLiquidacionComprador.VPN)
                if (ctrlRecibo.DocumentoID.Value != AppDocuments.NotaCreditoCartera) 
                    vlrTotalBalance *= -1;

                if (ctrlRecibo.DocumentoID.Value != AppDocuments.Desistimiento && AddContraBalance && vlrTotalBalance != ctrlRecibo.Valor.Value)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_InvalidVlrBalance + "&&" + vlrTotalBalance.ToString("c") + "&&" + ctrlRecibo.Valor.Value.Value.ToString("c");

                    return result;
                }

                if (fBalance.Count > 0)
                {
                    footer.AddRange(fBalance);
                    if (AddContraBalance)
                    {
                        #region Agrega la contrapartida de balance
                        cta = new DTO_coPlanCuenta();
                        #region Cartera Propia
                        if (vlrBalancePropiaML != 0)
                        {
                            //Carga la info de la cuenta - cartera propia
                            if (!cacheCtas.ContainsKey(coDoc.CuentaLOC.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, coDoc.CuentaLOC.Value, true, false);
                                cacheCtas.Add(coDoc.CuentaLOC.Value, cta);
                            }
                            else
                                cta = cacheCtas[coDoc.CuentaLOC.Value];

                            //Carga la info del saldo
                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }
                            else
                                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                            DTO_ComprobanteFooter contraPropiaBalance = this.CrearComprobanteFooter(ctrlCredito, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrBalancePropiaML * -1, vlrBalanceCedidaME * -1, true);
                            contraPropiaBalance.Descriptivo.Value = desc + " CREDITO - CONTRAPARTIDA BALANCE - PROPIA";
                            contraPropiaBalance.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                            footer.Add(contraPropiaBalance);
                        }
                        #endregion
                        #region Cartera Cedida
                        if (vlrBalanceCedidaML != 0)
                        {
                            cta = cacheCtas[coDoc.CuentaLOC.Value];
                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }
                            else
                                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                            DTO_ComprobanteFooter contraCedidaBalance = this.CrearComprobanteFooter(ctrlRecibo, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrBalanceCedidaML * -1, vlrBalanceCedidaME * -1, true);
                            contraCedidaBalance.Descriptivo.Value = desc + " CREDITO - CONTRAPARTIDA BALANCE - CEDIDA";
                            contraCedidaBalance.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                            footer.Add(contraCedidaBalance);
                        }
                        #endregion
                        #endregion
                    }
                }
                #endregion
                #region Agrega la contrapartida de orden

                if (fOrden.Count > 0)
                {
                    footer.AddRange(fOrden);
                    #region cartera Propia

                    if (vlrOrdenPropiaML != 0)
                    {
                        cta = cacheCtas[ctaContraOrden_Propia];
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter contraPropiaOrden = this.CrearComprobanteFooter(ctrlRecibo, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrOrdenPropiaML * -1, vlrOrdenPropiaME * -1, true);
                        contraPropiaOrden.Descriptivo.Value = desc + " CREDITO - CONTRAPARTIDA ORDEN - PROPIA";
                        contraPropiaOrden.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                        footer.Add(contraPropiaOrden);
                    }

                    #endregion
                    #region cartera Cedida

                    if (vlrOrdenCedidaML != 0)
                    {
                        cta = cacheCtas[ctaContraOrden_Cedida];
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter contraCedidaOrden = this.CrearComprobanteFooter(ctrlRecibo, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrOrdenCedidaML * -1, vlrOrdenCedidaME * -1, true);
                        contraCedidaOrden.TerceroID.Value = comprador.TerceroID.Value;
                        contraCedidaOrden.Descriptivo.Value = desc + " CREDITO - CONTRAPARTIDA ORDEN - CEDIDA";
                        contraCedidaOrden.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                        footer.Add(contraCedidaOrden);
                    }

                    #endregion
                }
                #endregion
                comprobante.Footer = footer;

                //Asigna el cesionario al detalle del comprobante
                foreach (DTO_ComprobanteFooter f in  comprobante.Footer)
                    f.DatoAdd2.Value = comprador != null ? comprador.TerceroID.Value : string.Empty;

                return comprobante;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GenerarComprobante_PagosCartera");

                return result;
            }
        }

        /// <summary>
        /// Genera la lista de detalles del comprobante para una cuota de cartera propia
        /// </summary>
        /// <param name="saldosComponentes">Lista de componentes</param>
        /// <param name="ctrl">Documento control que genero la liquidacion</param>
        /// <param name="concCargoXdef">Concepto cargo por defecto</param>
        /// <param name="lgXdef">Lugar geografico por defecto</param>
        /// <param name="lineaXdef">Linea presusuestal por defecto</param>
        /// <param name="compCapital">Componente capital</param>
        /// <param name="compInteres">Componente interes</param>
        /// <param name="compSeguro">Componente seguro</param>
        /// <param name="tc">Tasa de cambio</param>
        /// <returns>Retorna los detallesde la cuota</returns>
        private object GenerarComprobanteFooter_CarteraPropia(TipoRecaudo tipoRecaudo, SectorCartera sector, List<DTO_ccSaldosComponentes> saldosComponentes,
            List<DTO_ccCarteraComponente> componentes, DTO_glDocumentoControl ctrl, string claseCredito, string concCargoXdef, string lgXdef, string lineaXdef, 
            string compCapital, string compInteres, string compSeguro, string compPagaduria, string compPrejuridico, DTO_ccPagaduria pagaduria, string indCausarInteresVencido, decimal tc,
            Dictionary<string, DTO_coPlanCuenta> cacheCtas, Dictionary<string, DTO_glConceptoSaldo> cacheSaldos, ref string ctaCapital, byte? polizaMvto)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            try
            {
                #region Variables

                //Variables de resultado
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();

                string ctrlTercero = ctrl.TerceroID.Value;
                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                List<string> comps = saldosComponentes.Select(x => x.ComponenteCarteraID.Value).Distinct().ToList();
                List<DTO_ccComponenteCuenta> compCtas = new List<DTO_ccComponenteCuenta>();
                DTO_ccCreditoDocu cred = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(ctrl.NumeroDoc.Value.Value);
                bool isPrejuridico = saldosComponentes.Exists(x => x.ComponenteCarteraID.Value == compPrejuridico);
                #endregion
                #region Carga la lista de cuentas
                DAL_MasterComplex dalComplex = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                dalComplex.DocumentID = AppMasters.ccComponenteCuenta;

                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("ComponenteCarteraID", "");
                pks.Add("TipoEstado", cred.TipoEstado.Value == (byte)TipoEstadoCartera.Cedida ? ((byte)TipoEstadoCartera.Propia).ToString() : cred.TipoEstado.Value.ToString());
                pks.Add("ClaseCredito", claseCredito);
                
                foreach (DTO_ccSaldosComponentes c in saldosComponentes)
                {
                    DTO_ccCarteraComponente comp = componentes.Where(x => x.ID.Value == c.ComponenteCarteraID.Value).First();

                    if (isPrejuridico && !string.IsNullOrEmpty(comp.CuentaAlternaPRJ.Value))
                    {
                        if (!cacheCtas.ContainsKey(comp.CuentaAlternaPRJ.Value))
                        {
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, comp.CuentaAlternaPRJ.Value, true, false);
                            cacheCtas.Add(comp.CuentaAlternaPRJ.Value, cta);

                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }
                        }
                    }
                    else if (!string.IsNullOrWhiteSpace(comp.CuentaID.Value))
                    {
                        #region Cuenta gasto

                        if (!cacheCtas.ContainsKey(comp.CuentaID.Value))
                        {
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, comp.CuentaID.Value, true, false);
                            cacheCtas.Add(comp.CuentaID.Value, cta);

                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }
                        }

                        #endregion
                    }

                    #region Cuenta Componente

                    pks["ComponenteCarteraID"] = c.ComponenteCarteraID.Value;
                    DTO_MasterComplex complex = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);

                    if (complex != null)
                    {
                        DTO_ccComponenteCuenta cc = (DTO_ccComponenteCuenta)complex;
                        compCtas.Add(cc);

                        #region Carga la cuentaID
                        if (!string.IsNullOrWhiteSpace(cc.CuentaID.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaID.Value, true, false);
                                cacheCtas.Add(cc.CuentaID.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                        #region Carga la cuenta de tercero (CtaRecursosTerceros)
                        if (!string.IsNullOrWhiteSpace(cc.CtaRecursosTerceros.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CtaRecursosTerceros.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CtaRecursosTerceros.Value, true, false);
                                cacheCtas.Add(cc.CtaRecursosTerceros.Value, cta);
                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                        #region Carga la cuenta de ingreso (CuentaIngreso)
                        if (!string.IsNullOrWhiteSpace(cc.CuentaIngreso.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CuentaIngreso.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaIngreso.Value, true, false);
                                cacheCtas.Add(cc.CuentaIngreso.Value, cta);
                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                        #region Carga la cuenta de cesion (CtaRecursosCesion)
                        if (!string.IsNullOrWhiteSpace(cc.CtaRecursosCesion.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CtaRecursosCesion.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CtaRecursosCesion.Value, true, false);
                                cacheCtas.Add(cc.CtaRecursosCesion.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                    }
                    else if (c.TipoComponente.Value.Value == (byte)TipoComponente.CapitalSolicitado || c.TipoComponente.Value.Value == (byte)TipoComponente.ComponenteCuota)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + c.ComponenteCarteraID.Value +
                            "&&" + (cred.TipoEstado.Value).ToString() + "&&" + claseCredito;

                        return result;
                    }
                    #endregion
                }
                #endregion
                #region Carga los registros del footer
                foreach (DTO_ccSaldosComponentes c in saldosComponentes)
                {
                    cta = null;
                    ctrl.TerceroID.Value = ctrlTercero;

                    decimal vlrAbonoML = c.AbonoValor.Value.Value * -1;
                    decimal vlrAbonoME = 0;
                    decimal vlrTotalML = c.AbonoSaldo.Value.Value * -1;
                    decimal vlrTotalME = 0;
                    decimal vlrRevocaML = c.AbonoSaldo.Value.Value - c.AbonoValor.Value.Value;
                    if (tc != 0)
                    {
                        vlrAbonoME = Math.Round(vlrAbonoML / tc, 2);
                        vlrTotalME = Math.Round(vlrTotalML / tc, 2);
                    }

                    DTO_ccCarteraComponente comp = componentes.Where(x => x.ID.Value == c.ComponenteCarteraID.Value).First();
                    DTO_ccComponenteCuenta compCta = this.GetComponenteCuentaByComponenteCartera(compCtas, c.ComponenteCarteraID.Value);
                    if (c.TipoComponente.Value.Value == (byte)TipoComponente.CapitalSolicitado || c.TipoComponente.Value.Value == (byte)TipoComponente.ComponenteCuota)
                    {
                        #region Trae la cuenta de la maestra de cuentas de componentes

                        if (c.ComponenteCarteraID.Value == compCapital)
                        {
                            ctaCapital = compCta.CtaRecursosTerceros.Value;
                        }
                        #region Pago total del componente (Cuenta ID y Rec Cesión DB para pagos totales)
                        if (Math.Abs(vlrTotalML) > 0)
                        {
                            #region CuentaID (CR)

                            if (!string.IsNullOrWhiteSpace(comp.CuentaID.Value) || !string.IsNullOrWhiteSpace(compCta.CuentaID.Value))
                            {
                                cta = !string.IsNullOrWhiteSpace(comp.CuentaID.Value) ? cacheCtas[comp.CuentaID.Value] : cacheCtas[compCta.CuentaID.Value];
                                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrTotalML, vlrTotalME, false);
                                f.DatoAdd1.Value = comp.Descriptivo.Value; 
                                f.DatoAdd9.Value = AuxiliarDatoAdd9.Propia.ToString();
                                footer.Add(f);

                                //Registro Seguro para Revocatoria
                                if (polizaMvto == 3 && tipoRecaudo == TipoRecaudo.PagoTotal && sector == SectorCartera.Financiero && c.ComponenteCarteraID.Value == compSeguro && !string.IsNullOrEmpty(compCta.CtaRecursosTerceros.Value))
                                {
                                    //cta = cacheCtas[compCta.CtaRecursosTerceros.Value];
                                    //cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                                    //DTO_ComprobanteFooter fSeguro = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrRevocaML * -1, 0, false);
                                    //fSeguro.DatoAdd1.Value = comp.Descriptivo.Value;
                                    //fSeguro.DatoAdd4.Value = AuxiliarDatoAdd4.Cuota.ToString();
                                    //fSeguro.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                                    //footer.Add(fSeguro);
                                }
                            }
                            #endregion
                            #region Contabilización de pagos totales (DB)
                            if (sector == SectorCartera.Financiero)
                            {
                                if (polizaMvto == 3 && tipoRecaudo != TipoRecaudo.Normal && compCta.CuentaControl.Value.Value == (byte)CuentaControl.Balance && !string.IsNullOrWhiteSpace(compCta.CtaRecursosCesion.Value))
                                {
                                    cta = cacheCtas[compCta.CtaRecursosCesion.Value];
                                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                    DTO_ComprobanteFooter f2 = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrRevocaML, 0, false);
                                    f2.DatoAdd1.Value = comp.Descriptivo.Value;
                                    footer.Add(f2);
                                }
                            }
                            #endregion
                        }
                        #endregion

                        //if (sector == SectorCartera.Financiero && tipoRecaudo == TipoRecaudo.PagoTotal && c.ComponenteCarteraID.Value == compSeguro)
                        //{
                        //    //if (!string.IsNullOrWhiteSpace(compCta.CtaRecursosTerceros.Value))
                        //    //{
                        //    //    cta = cacheCtas[compCta.CtaRecursosTerceros.Value];

                        //    //    if (compPagaduria != null && compPagaduria == c.ComponenteCarteraID.Value)
                        //    //        ctrl.TerceroID.Value = pagaduria.TerceroID.Value;
                        //    //    else if (!string.IsNullOrWhiteSpace(comp.TerceroID.Value))
                        //    //        ctrl.TerceroID.Value = comp.TerceroID.Value;
                        //    //}
                        //    //else
                        //    //{
                        //    //    result.Result = ResultValue.NOK;
                        //    //    result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtaRecursosTerceros + "&&" + c.ComponenteCarteraID.Value +
                        //    //        "&&" + compCta.TipoEstado.Value.Value.ToString() + "&&" + compCta.ClaseCredito.Value;

                        //    //    return result;
                        //    //}
                        //    //cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        //    //DTO_ComprobanteFooter f2 = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrRevocaML*-1, 0, false);
                        //    //f2.DatoAdd1.Value = comp.Descriptivo.Value;
                        //    //footer.Add(f2);
                        //}
                        //else
                        //{
                            if (c.ComponenteCarteraID.Value != compCapital && Math.Abs(vlrAbonoML) > 0 && compCta.CuentaControl.Value.Value == (byte)CuentaControl.Orden)
                            {
                                #region Cuenta recursos terceros / ingresos
                                if (c.ComponenteCarteraID.Value == compInteres)
                                {
                                    if (indCausarInteresVencido == "0")
                                    {
                                        if (!string.IsNullOrWhiteSpace(compCta.CuentaIngreso.Value))
                                            cta = cacheCtas[compCta.CuentaIngreso.Value];
                                        else
                                        {
                                            result.Result = ResultValue.NOK;
                                            result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtaIngreso + "&&" + c.ComponenteCarteraID.Value +
                                                "&&" + compCta.TipoEstado.Value.Value.ToString() + "&&" + compCta.ClaseCredito.Value;

                                            return result;
                                        }
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrWhiteSpace(compCta.CtaRecursosTerceros.Value))
                                        {
                                            cta = cacheCtas[compCta.CtaRecursosTerceros.Value];

                                            if (compPagaduria != null && compPagaduria == c.ComponenteCarteraID.Value)
                                                ctrl.TerceroID.Value = pagaduria.TerceroID.Value;
                                            else if (!string.IsNullOrWhiteSpace(comp.TerceroID.Value))
                                                ctrl.TerceroID.Value = comp.TerceroID.Value;
                                        }
                                        else
                                        {
                                            if (!string.IsNullOrWhiteSpace(compCta.CuentaIngreso.Value))
                                                cta = cacheCtas[compCta.CuentaIngreso.Value];
                                            else
                                            {
                                                result.Result = ResultValue.NOK;
                                                result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtaIngreso + "&&" + c.ComponenteCarteraID.Value +
                                                    "&&" + compCta.TipoEstado.Value.Value.ToString() + "&&" + compCta.ClaseCredito.Value;

                                                return result;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (!string.IsNullOrWhiteSpace(compCta.CtaRecursosTerceros.Value))
                                    {
                                        if (compPagaduria != null && compPagaduria == c.ComponenteCarteraID.Value)
                                            ctrl.TerceroID.Value = pagaduria.TerceroID.Value;
                                        else if (!string.IsNullOrWhiteSpace(comp.TerceroID.Value))
                                            ctrl.TerceroID.Value = comp.TerceroID.Value;

                                        cta = cacheCtas[compCta.CtaRecursosTerceros.Value];
                                    }
                                    else
                                    {
                                        if (!string.IsNullOrWhiteSpace(compCta.CuentaIngreso.Value))
                                            cta = cacheCtas[compCta.CuentaIngreso.Value];
                                        else
                                        {
                                            result.Result = ResultValue.NOK;
                                            result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtaIngreso + "&&" + c.ComponenteCarteraID.Value +
                                                "&&" + compCta.TipoEstado.Value.Value.ToString() + "&&" + compCta.ClaseCredito.Value;

                                            return result;
                                        }
                                    }
                                }

                                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                                DTO_ComprobanteFooter f1 = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML, vlrAbonoME, false);
                                f1.DatoAdd1.Value = comp.Descriptivo.Value;
                                footer.Add(f1);
                                #endregion
                                #region Recursos cesion
                                if (c.ComponenteCarteraID.Value == compCapital || c.ComponenteCarteraID.Value == compInteres)
                                {
                                    if (!string.IsNullOrWhiteSpace(compCta.CtaRecursosCesion.Value))
                                    {
                                        cta = cacheCtas[compCta.CtaRecursosCesion.Value];
                                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                        DTO_ComprobanteFooter f2 = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML * -1, vlrAbonoME * -1, false);
                                        f2.DatoAdd1.Value = comp.Descriptivo.Value;
                                        footer.Add(f2);
                                    }
                                }
                                #endregion
                            }
                        //}
                        #endregion
                    }
                    else if (!string.IsNullOrWhiteSpace(comp.CuentaID.Value))
                    {
                        #region Trae la cuenta del gasto del componente

                        cta = cacheCtas[comp.CuentaID.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML, vlrAbonoME, false);
                        f.DatoAdd1.Value = comp.Descriptivo.Value;
                        f.DatoAdd9.Value = AuxiliarDatoAdd9.Propia.ToString();
                        footer.Add(f);

                        #endregion
                    }
                    else if  (isPrejuridico && !string.IsNullOrEmpty(comp.CuentaAlternaPRJ.Value))
                    {
                        #region Trae la cuenta del prejuridico

                        cta = cacheCtas[comp.CuentaAlternaPRJ.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML, vlrAbonoME, false);
                        f.DatoAdd1.Value = comp.Descriptivo.Value;
                        f.DatoAdd9.Value = AuxiliarDatoAdd9.Propia.ToString();
                        footer.Add(f);

                        #endregion
                    }
                    else if (compCta != null && !string.IsNullOrWhiteSpace(compCta.CuentaID.Value))
                    {
                        #region Trae la cuenta de

                        cta = cacheCtas[compCta.CuentaID.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML, vlrAbonoME, false);
                        f.DatoAdd1.Value = comp.Descriptivo.Value;
                        f.DatoAdd9.Value = AuxiliarDatoAdd9.Propia.ToString();
                        footer.Add(f);

                        #endregion
                    }

                    //Asigna el tercero
                    if (footer.Count > 0 && comp.TerceroTipo.Value == 1)
                        footer.Last().TerceroID.Value = ctrl.TerceroID.Value;
                    else if (footer.Count > 0 && comp.TerceroTipo.Value == 2)
                        footer.Last().TerceroID.Value = comp.TerceroID.Value;
                }
                #endregion

                return footer;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GenerarComprobanteFooter_CarteraPropia");

                return result;
            }
        }

        /// <summary>
        /// Genera la lista de detalles del comprobante para una cuota de cartera cedida
        /// </summary>
        /// <param name="saldosComponentes">Lista de componentes</param>
        /// <param name="ctrl">Documento control que genero la liquidacion</param>
        /// <param name="concCargoXdef">Concepto cargo por defecto</param>
        /// <param name="lgXdef">Lugar geografico por defecto</param>
        /// <param name="lineaXdef">Linea presusuestal por defecto</param>
        /// <param name="compCapital">Componente capital</param>
        /// <param name="compInteres">Componente interes</param>
        /// <param name="compSeguro">Componente seguro</param>
        /// <param name="tc">Tasa de cambio</param>
        /// <returns>Retorna los detallesde la cuota</returns>
        private object GenerarComprobanteFooter_CarteraCedida(TipoRecaudo tipoRecaudo, SectorCartera sector, List<DTO_ccSaldosComponentes> saldosComponentes,
            List<DTO_ccCarteraComponente> componentes, DTO_glDocumentoControl ctrl, string claseCredito, string concCargoXdef, string lgXdef, string lineaXdef,
            string compCapital, string compInteres, string compSeguro, string compPagaduria, string compPrejuridico, DTO_ccPagaduria pagaduria, decimal tc, DTO_ccCompradorCartera comprador, 
            string ctaUtilidadId,Dictionary<string, DTO_coPlanCuenta> cacheCtas, Dictionary<string, DTO_glConceptoSaldo> cacheSaldos, List<string> ctasCapInt,
            ref decimal vlrVendidoCapital, ref decimal vlrVendidoInteres, ref decimal vlrVendidoOtros,ref decimal vlrUtilidadVenta, ref string ctaCapital, string ctaPagosFlujos, byte? polizaMvto)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            try
            {
                #region Variables

                //Variables de resultado
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();

                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                List<string> comps = saldosComponentes.Select(x => x.ComponenteCarteraID.Value).Distinct().ToList();
                List<DTO_ccComponenteCuenta> compCtas = new List<DTO_ccComponenteCuenta>();
                bool isPrejuridico = saldosComponentes.Exists(x => x.ComponenteCarteraID.Value == compPrejuridico);

                string ctrlTercero = ctrl.TerceroID.Value;

                #endregion
                #region Carga la lista de cuentas
                DAL_MasterComplex dalComplex = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                dalComplex.DocumentID = AppMasters.ccComponenteCuenta;

                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("ComponenteCarteraID", "");
                pks.Add("TipoEstado", ((int)TipoEstadoCartera.Cedida).ToString());
                pks.Add("ClaseCredito", claseCredito);

                foreach (DTO_ccSaldosComponentes c in saldosComponentes)
                {
                    DTO_ccCarteraComponente comp = componentes.Where(x => x.ID.Value == c.ComponenteCarteraID.Value).First();

                    if (isPrejuridico && !string.IsNullOrEmpty(comp.CuentaAlternaPRJ.Value))
                    {
                        if (!cacheCtas.ContainsKey(comp.CuentaAlternaPRJ.Value))
                        {
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, comp.CuentaAlternaPRJ.Value, true, false);
                            cacheCtas.Add(comp.CuentaAlternaPRJ.Value, cta);

                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }
                        }
                    }
                    else if (!string.IsNullOrWhiteSpace(comp.CuentaID.Value))
                    {
                        #region Cuenta gasto

                        if (!cacheCtas.ContainsKey(comp.CuentaID.Value))
                        {
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, comp.CuentaID.Value, true, false);
                            cacheCtas.Add(comp.CuentaID.Value, cta);

                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }
                        }

                        #endregion
                    }

                    #region Cuenta Componente

                    pks["ComponenteCarteraID"] = c.ComponenteCarteraID.Value;
                    DTO_MasterComplex complex = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);
                    if (complex != null)
                    {
                        DTO_ccComponenteCuenta cc = (DTO_ccComponenteCuenta)complex;
                        compCtas.Add(cc);
                        #region Carga la cuentaID
                        if (!string.IsNullOrWhiteSpace(cc.CuentaID.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaID.Value, true, false);
                                cacheCtas.Add(cc.CuentaID.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                        #region Carga la cuenta de tercero (CtaRecursosTerceros)
                        if (!string.IsNullOrWhiteSpace(cc.CtaRecursosTerceros.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CtaRecursosTerceros.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CtaRecursosTerceros.Value, true, false);
                                cacheCtas.Add(cc.CtaRecursosTerceros.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                        #region Carga la cuenta de cesion (CtaRecursosCesion)
                        if (!string.IsNullOrWhiteSpace(cc.CtaRecursosCesion.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CtaRecursosCesion.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CtaRecursosCesion.Value, true, false);
                                cacheCtas.Add(cc.CtaRecursosCesion.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                    }
                    else if (c.TipoComponente.Value.Value == (byte)TipoComponente.CapitalSolicitado || c.TipoComponente.Value.Value == (byte)TipoComponente.ComponenteCuota)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + c.ComponenteCarteraID.Value +
                            "&&" + ((int)TipoEstadoCartera.Cedida).ToString() + "&&" + claseCredito;

                        return result;
                    }
                    #endregion
                }

                #endregion
                #region Carga los registros del footer - ACUMULADO COMPONENTES
                foreach (DTO_ccSaldosComponentes c in saldosComponentes)
                {
                    ctrl.TerceroID.Value = ctrlTercero;

                    decimal vlrAbonoML = c.AbonoValor.Value.Value * -1;
                    decimal vlrAbonoME = 0;
                    decimal vlrTotalML = c.AbonoSaldo.Value.Value * -1;
                    decimal vlrTotalME = 0;
                    decimal vlrRevocaML = c.AbonoSaldo.Value.Value - c.AbonoValor.Value.Value;
                    if (tc != 0)
                    {
                        vlrAbonoME = Math.Round(vlrAbonoML / tc, 2);
                        vlrTotalME = Math.Round(vlrTotalML / tc, 2);
                    }

                    DTO_ccCarteraComponente comp = componentes.Where(x => x.ID.Value == c.ComponenteCarteraID.Value).First();
                    DTO_ccComponenteCuenta compCta = this.GetComponenteCuentaByComponenteCartera(compCtas, c.ComponenteCarteraID.Value);
                    if (c.TipoComponente.Value.Value == (byte)TipoComponente.CapitalSolicitado || c.TipoComponente.Value.Value == (byte)TipoComponente.ComponenteCuota)
                    {
                        #region Calcula el valor que se esta vendiendo 
                        if (c.ComponenteCarteraID.Value == compCapital)
                        {
                            ctaCapital = compCta.CtaRecursosTerceros.Value;
                            vlrVendidoCapital += c.AbonoValor.Value.Value;
                        }
                        else if (c.ComponenteCarteraID.Value == compInteres)
                        {
                            vlrVendidoInteres += c.AbonoValor.Value.Value;
                        }
                        //else if (comprador.TipoLiquidacion.Value == (byte)TipoLiquidacionComprador.Total && !string.IsNullOrWhiteSpace(compCta.CtaRecursosCesion.Value)
                        //    && (compCta.CtaRecursosCesion.Value == ctaPagosFlujos || !string.IsNullOrWhiteSpace(compCta.CtaRecursosTerceros.Value)))
                        else if (comprador.TipoLiquidacion.Value == (byte)TipoLiquidacionComprador.Total && c.TipoComponente.Value == (byte)TipoComponente.ComponenteCuota)
                        {
                            vlrVendidoOtros += c.AbonoValor.Value.Value;
                        }
                        #endregion
                        #region Trae la cuenta de la maestra de cuentas de componentes

                        #region Pago total del componente (Cuenta ID y Rec Cesión DB para pagos totales)
                        if (Math.Abs(vlrTotalML) > 0)
                        {
                            #region CuentaID (CR)

                            if (!string.IsNullOrWhiteSpace(comp.CuentaID.Value) || !string.IsNullOrWhiteSpace(compCta.CuentaID.Value))
                            {
                                //Cuentas de capital e interes
                                if (c.ComponenteCarteraID.Value == compCapital || c.ComponenteCarteraID.Value == compInteres)
                                {
                                    if (!ctasCapInt.Contains(compCta.CuentaID.Value))
                                        ctasCapInt.Add(compCta.CuentaID.Value);
                                }

                                cta = !string.IsNullOrWhiteSpace(comp.CuentaID.Value) ? cacheCtas[comp.CuentaID.Value] : cacheCtas[compCta.CuentaID.Value];
                                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrTotalML, vlrTotalME, false);
                                f.DatoAdd1.Value = comp.Descriptivo.Value;
                                f.DatoAdd4.Value = AuxiliarDatoAdd4.Cuota.ToString();
                                f.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                                footer.Add(f);

                                //Registro Seguro para Revocatoria
                                if (polizaMvto == 3 &&  tipoRecaudo == TipoRecaudo.PagoTotal && sector == SectorCartera.Financiero && c.ComponenteCarteraID.Value == compSeguro && !string.IsNullOrEmpty(compCta.CtaRecursosTerceros.Value))
                                { 
                                    //cta = cacheCtas[compCta.CtaRecursosTerceros.Value];
                                    //cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                                    //DTO_ComprobanteFooter fSeguro = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrRevocaML * -1, 0, false);
                                    //fSeguro.DatoAdd1.Value = comp.Descriptivo.Value;
                                    //fSeguro.DatoAdd4.Value = AuxiliarDatoAdd4.Cuota.ToString();
                                    //fSeguro.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                                    //footer.Add(fSeguro);
                                }
                            }
                            #endregion
                            #region Contabilización de pagos totales (DB)
                            if (sector == SectorCartera.Financiero)
                            {
                                if (polizaMvto == 3 && tipoRecaudo != TipoRecaudo.Normal && compCta.CuentaControl.Value.Value == (byte)CuentaControl.Balance && !string.IsNullOrWhiteSpace(compCta.CtaRecursosCesion.Value))
                                {
                                    cta = cacheCtas[compCta.CtaRecursosCesion.Value];
                                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                    DTO_ComprobanteFooter f2 = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrRevocaML, 0, false);
                                    f2.DatoAdd1.Value = comp.Descriptivo.Value;
                                    f2.DatoAdd4.Value = AuxiliarDatoAdd4.Cuota.ToString();
                                    f2.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                                    footer.Add(f2);
                                }
                            }
                            else if (sector == SectorCartera.Solidario)
                            {
                                if (tipoRecaudo != TipoRecaudo.Normal && compCta.CuentaControl.Value.Value == (byte)CuentaControl.Orden && !string.IsNullOrWhiteSpace(compCta.CtaRecursosCesion.Value))
                                {
                                    ////Créditos
                                    //decimal vlrDifML = vlrTotalML - vlrAbonoML; 
                                    //decimal vlrDifME = vlrTotalME - vlrAbonoME;

                                    ////DB Rec Cesión
                                    //cta = cacheCtas[compCta.CtaRecursosCesion.Value];
                                    //cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                                    //DTO_ComprobanteFooter recCesion = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrDifML * -1, vlrDifME * -1, false);
                                    //recCesion.DatoAdd1.Value = comp.Descriptivo.Value;
                                    //recCesion.DatoAdd4.Value = AuxiliarDatoAdd4.Cuota.ToString();
                                    //recCesion.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                                    //footer.Add(recCesion);

                                    ////CR Utilidad
                                    //cta = cacheCtas[ctaUtilidadId];
                                    //cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                                    //DTO_ComprobanteFooter utilidadVenta = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrDifML, vlrDifME, false);
                                    //utilidadVenta.DatoAdd1.Value = comp.Descriptivo.Value;
                                    //utilidadVenta.DatoAdd4.Value = AuxiliarDatoAdd4.Cuota.ToString();
                                    //utilidadVenta.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                                    //footer.Add(utilidadVenta);
                                }
                            }
                            #endregion
                        }
                        #endregion

                        if (Math.Abs(vlrAbonoML) > 0 && compCta.CuentaControl.Value.Value == (byte)CuentaControl.Orden)
                        {
                            if(comp.ID.Value == compSeguro && comprador.PagoSeguroInd.Value.HasValue && comprador.PagoSeguroInd.Value.Value)
                            {
                               // vlrVendidoOtros += c.AbonoValor.Value.Value;
                            }
                            else
                            {
                                #region Recursos terceros
                                if (!string.IsNullOrWhiteSpace(compCta.CtaRecursosTerceros.Value))
                                {
                                    //Cuentas de capital e interes
                                    if (c.ComponenteCarteraID.Value == compCapital || c.ComponenteCarteraID.Value == compInteres)
                                    {
                                        ctrl.TerceroID.Value = comprador.TerceroID.Value;
                                        if (!ctasCapInt.Contains(compCta.CtaRecursosTerceros.Value))
                                            ctasCapInt.Add(compCta.CtaRecursosTerceros.Value);
                                    }

                                    cta = cacheCtas[compCta.CtaRecursosTerceros.Value];
                                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                    if (compPagaduria != null && compPagaduria == c.ComponenteCarteraID.Value)
                                        ctrl.TerceroID.Value = pagaduria.TerceroID.Value;
                                    else if (!string.IsNullOrWhiteSpace(comp.TerceroID.Value))
                                        ctrl.TerceroID.Value = comp.TerceroID.Value;

                                    DTO_ComprobanteFooter f1 = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML, vlrAbonoME, false);
                                    f1.DatoAdd1.Value = comp.Descriptivo.Value;
                                    f1.DatoAdd4.Value = AuxiliarDatoAdd4.Cuota.ToString();
                                    f1.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                                    footer.Add(f1);
                                }
                                #endregion
                                #region Recursos cesion
                                if (comprador.TipoLiquidacion.Value == (byte)TipoLiquidacionComprador.Total ||
                                    c.ComponenteCarteraID.Value == compCapital || c.ComponenteCarteraID.Value == compInteres)
                                {
                                    if (!string.IsNullOrWhiteSpace(compCta.CtaRecursosCesion.Value))
                                    {
                                        //Cuentas de capital e interes
                                        ctrl.TerceroID.Value = comprador.TerceroID.Value;
                                        if (c.ComponenteCarteraID.Value == compCapital || c.ComponenteCarteraID.Value == compInteres)
                                        {
                                            if (!ctasCapInt.Contains(compCta.CtaRecursosCesion.Value))
                                                ctasCapInt.Add(compCta.CtaRecursosCesion.Value);
                                        }

                                        cta = cacheCtas[compCta.CtaRecursosCesion.Value];
                                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                        DTO_ComprobanteFooter f2 = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML * -1, vlrAbonoME * -1, false);
                                        f2.DatoAdd1.Value = comp.Descriptivo.Value;
                                        f2.DatoAdd4.Value = AuxiliarDatoAdd4.Cuota.ToString();
                                        f2.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                                        footer.Add(f2);
                                    }
                                }
                                #endregion
                                if (!string.IsNullOrWhiteSpace(compCta.CtaRecursosTerceros.Value) && !string.IsNullOrWhiteSpace(compCta.CtaRecursosCesion.Value))
                                    vlrUtilidadVenta += vlrAbonoML;
                            }
                        }

                        #endregion
                    }
                    else if (!string.IsNullOrWhiteSpace(comp.CuentaID.Value))
                    {
                        #region Trae la cuenta del gasto del componente

                        cta = cacheCtas[comp.CuentaID.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML, vlrAbonoME, false);
                        f.DatoAdd1.Value = comp.Descriptivo.Value;
                        f.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                        footer.Add(f);

                        #endregion
                    }
                    else if (isPrejuridico && !string.IsNullOrEmpty(comp.CuentaAlternaPRJ.Value))
                    {
                        #region Trae la cuenta del prejuridico

                        cta = cacheCtas[comp.CuentaAlternaPRJ.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML, vlrAbonoME, false);
                        f.DatoAdd1.Value = comp.Descriptivo.Value;
                        f.DatoAdd9.Value = AuxiliarDatoAdd9.Propia.ToString();
                        footer.Add(f);

                        #endregion
                    }
                    else if (compCta != null && !string.IsNullOrWhiteSpace(compCta.CuentaID.Value))
                    {
                        #region Trae la cuenta del gasto del componente

                        cta = cacheCtas[compCta.CuentaID.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML, vlrAbonoME, false);
                        f.DatoAdd1.Value = comp.Descriptivo.Value;
                        f.DatoAdd9.Value = AuxiliarDatoAdd9.Cedida.ToString();
                        footer.Add(f);

                        #endregion
                    }

                    //Asigna el tercero
                    if (footer.Count > 0 && comp.TerceroTipo.Value == 1)
                        footer.Last().TerceroID.Value = ctrl.TerceroID.Value;
                    else if (footer.Count > 0 && comp.TerceroTipo.Value == 2)
                        footer.Last().TerceroID.Value = comp.TerceroID.Value;
                }
                #endregion

                ctrl.TerceroID.Value = ctrlTercero;
                return footer;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GenerarComprobanteCuota_CarteraCedida");

                return result;
            }
        }

        /// <summary>
        /// Genera la lista de detalles del comprobante para una cuota de cartera propia
        /// </summary>
        /// <param name="saldosComponentes">Lista de componentes</param>
        /// <param name="ctrl">Documento control que genero la liquidacion</param>
        /// <param name="concCargoXdef">Concepto cargo por defecto</param>
        /// <param name="lgXdef">Lugar geografico por defecto</param>
        /// <param name="lineaXdef">Linea presusuestal por defecto</param>
        /// <param name="compCapital">Componente capital</param>
        /// <param name="compInteres">Componente interes</param>
        /// <param name="compSeguro">Componente seguro</param>
        /// <param name="tc">Tasa de cambio</param>
        /// <returns>Retorna los detallesde la cuota</returns>
        private object GenerarComprobanteFooter_CarteraCJ(TipoRecaudo tipoRecaudo, SectorCartera sector, List<DTO_ccSaldosComponentes> saldosComponentes,
            List<DTO_ccCarteraComponente> componentes, DTO_glDocumentoControl ctrl, string claseCredito, string concCargoXdef, string lgXdef, string lineaXdef,
            string compCapital, string compInteres, string compSeguro, string compPagaduria, DTO_ccPagaduria pagaduria, string indCausarInteresVencido, decimal tc,
            Dictionary<string, DTO_coPlanCuenta> cacheCtas, Dictionary<string, DTO_glConceptoSaldo> cacheSaldos, ref string ctaCapital)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            try
            {
                #region Variables

                //Variables de resultado
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();

                string ctrlTercero = ctrl.TerceroID.Value;
                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                List<string> comps = saldosComponentes.Select(x => x.ComponenteCarteraID.Value).Distinct().ToList();
                List<DTO_ccComponenteCuenta> compCtas = new List<DTO_ccComponenteCuenta>();

                #endregion
                #region Carga la lista de cuentas
                DAL_MasterComplex dalComplex = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                dalComplex.DocumentID = AppMasters.ccComponenteCuenta;

                string tipoEstado = string.Empty;
                if (tipoRecaudo == TipoRecaudo.CobroJuridico)
                {
                    tipoEstado = ((int)TipoEstadoCartera.CobroJuridico).ToString();
                }
                else if (tipoRecaudo == TipoRecaudo.AcuerdoPago)
                {
                    tipoEstado = ((int)TipoEstadoCartera.AcuerdoPago).ToString();
                }
                else
                {
                    tipoEstado = ((int)TipoEstadoCartera.AcuerdoPagoIncumplido).ToString(); 
                }

                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("TipoEstado", tipoEstado);
                pks.Add("ClaseCredito", claseCredito);
                pks.Add("ComponenteCarteraID", "");

                foreach (DTO_ccSaldosComponentes c in saldosComponentes)
                {
                    DTO_ccCarteraComponente comp = componentes.Where(x => x.ID.Value == c.ComponenteCarteraID.Value).First();

                    if (!string.IsNullOrWhiteSpace(comp.CuentaID.Value))
                    {
                        #region Cuenta gasto

                        if (!cacheCtas.ContainsKey(comp.CuentaID.Value))
                        {
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, comp.CuentaID.Value, true, false);
                            cacheCtas.Add(comp.CuentaID.Value, cta);

                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }
                        }

                        #endregion
                    }

                    #region Cuenta Componente

                    pks["ComponenteCarteraID"] = c.ComponenteCarteraID.Value;
                    DTO_MasterComplex complex = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);

                    if (complex == null)
                    {
                    }

                    if (complex != null)
                    {
                        DTO_ccComponenteCuenta cc = (DTO_ccComponenteCuenta)complex;
                        compCtas.Add(cc);

                        #region Carga la cuentaID
                        if (!string.IsNullOrWhiteSpace(cc.CuentaID.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaID.Value, true, false);
                                cacheCtas.Add(cc.CuentaID.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                        #region Carga la cuenta de tercero (CtaRecursosTerceros)
                        if (!string.IsNullOrWhiteSpace(cc.CtaRecursosTerceros.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CtaRecursosTerceros.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CtaRecursosTerceros.Value, true, false);
                                cacheCtas.Add(cc.CtaRecursosTerceros.Value, cta);
                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                        #region Carga la cuenta de ingreso (CuentaIngreso)
                        if (!string.IsNullOrWhiteSpace(cc.CuentaIngreso.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CuentaIngreso.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaIngreso.Value, true, false);
                                cacheCtas.Add(cc.CuentaIngreso.Value, cta);
                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                        #region Carga la cuenta de cesion (CtaRecursosCesion)
                        if (!string.IsNullOrWhiteSpace(cc.CtaRecursosCesion.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CtaRecursosCesion.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CtaRecursosCesion.Value, true, false);
                                cacheCtas.Add(cc.CtaRecursosCesion.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                    }
                    else if (c.TipoComponente.Value.Value == (byte)TipoComponente.CapitalSolicitado || c.TipoComponente.Value.Value == (byte)TipoComponente.ComponenteCuota)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + c.ComponenteCarteraID.Value +
                            "&&" + tipoEstado + "&&" + claseCredito;

                        return result;
                    }

                    #endregion
                }
                #endregion
                #region Carga los registros del footer
                foreach (DTO_ccSaldosComponentes c in saldosComponentes)
                {
                    cta = null;

                    decimal vlrAbonoML = c.AbonoValor.Value.Value * -1;
                    decimal vlrAbonoME = 0;
                    decimal vlrTotalML = c.AbonoSaldo.Value.Value * -1;
                    decimal vlrTotalME = 0;

                    if (tc != 0)
                    {
                        vlrAbonoME = Math.Round(vlrAbonoML / tc, 2);
                        vlrTotalME = Math.Round(vlrTotalML / tc, 2);
                    }

                    DTO_ccCarteraComponente comp = componentes.Where(x => x.ID.Value == c.ComponenteCarteraID.Value).First();
                    DTO_ccComponenteCuenta compCta = this.GetComponenteCuentaByComponenteCartera(compCtas, c.ComponenteCarteraID.Value);
                    if (c.TipoComponente.Value.Value == (byte)TipoComponente.CapitalSolicitado || c.TipoComponente.Value.Value == (byte)TipoComponente.ComponenteCuota)
                    {
                        #region Trae la cuenta de la maestra de cuentas de componentes

                        if (c.ComponenteCarteraID.Value == compCapital)
                        {
                            ctaCapital = compCta.CtaRecursosTerceros.Value;
                        }
                        #region Pago total del componente (Cuenta ID y Rec Cesión DB para pagos totales)
                        if (Math.Abs(vlrTotalML) > 0)
                        {
                            #region CuentaID (CR)

                            if (!string.IsNullOrWhiteSpace(comp.CuentaID.Value) || !string.IsNullOrWhiteSpace(compCta.CuentaID.Value))
                            {
                                cta = !string.IsNullOrWhiteSpace(comp.CuentaID.Value) ? cacheCtas[comp.CuentaID.Value] : cacheCtas[compCta.CuentaID.Value];
                                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrTotalML, vlrTotalME, false);
                                f.DatoAdd1.Value = comp.Descriptivo.Value;
                                f.DatoAdd9.Value = tipoRecaudo.ToString();
                                footer.Add(f);
                            }
                            #endregion
                            #region Contabilización de pagos totales (DB)
                            if (sector == SectorCartera.Financiero)
                            {
                                if (compCta.CuentaControl.Value.Value == (byte)CuentaControl.Balance && !string.IsNullOrWhiteSpace(compCta.CtaRecursosCesion.Value))
                                {
                                    cta = cacheCtas[compCta.CtaRecursosCesion.Value];
                                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                    DTO_ComprobanteFooter f2 = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrTotalML * -1, vlrTotalME * -1, false);
                                    f2.DatoAdd1.Value = comp.Descriptivo.Value;
                                    footer.Add(f2);
                                }
                            }
                            #endregion
                        }
                        #endregion

                        if (c.ComponenteCarteraID.Value != compCapital && Math.Abs(vlrAbonoML) > 0 && compCta.CuentaControl.Value.Value == (byte)CuentaControl.Orden)
                        {
                            #region Cuenta recursos terceros / ingresos
                            
                            if (!string.IsNullOrWhiteSpace(compCta.CtaRecursosTerceros.Value))
                            {
                                if (compPagaduria != null && compPagaduria == c.ComponenteCarteraID.Value)
                                    ctrl.TerceroID.Value = pagaduria.TerceroID.Value;
                                else if (!string.IsNullOrWhiteSpace(comp.TerceroID.Value))
                                    ctrl.TerceroID.Value = comp.TerceroID.Value;

                                cta = cacheCtas[compCta.CtaRecursosTerceros.Value];
                            }
                            else
                            {
                                if (!string.IsNullOrWhiteSpace(compCta.CuentaIngreso.Value))
                                    cta = cacheCtas[compCta.CuentaIngreso.Value];
                                else
                                {
                                    result.Result = ResultValue.NOK;
                                    result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtaIngreso + "&&" + c.ComponenteCarteraID.Value +
                                        "&&" + compCta.TipoEstado.Value.Value.ToString() + "&&" + compCta.ClaseCredito.Value;

                                    return result;
                                }
                            }

                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                            DTO_ComprobanteFooter f1 = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML, vlrAbonoME, false);
                            f1.DatoAdd1.Value = comp.Descriptivo.Value;
                            footer.Add(f1); 

                            #endregion
                            #region Recursos cesion
                            if (c.ComponenteCarteraID.Value == compCapital)
                            {
                                if (!string.IsNullOrWhiteSpace(compCta.CtaRecursosCesion.Value))
                                {
                                    cta = cacheCtas[compCta.CtaRecursosCesion.Value];
                                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                                    DTO_ComprobanteFooter f2 = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrAbonoML * -1, vlrAbonoME * -1, false);
                                    f2.DatoAdd1.Value = comp.Descriptivo.Value;
                                    footer.Add(f2);
                                }
                            }
                            #endregion
                        }
                        #endregion
                    }
                    else if (!string.IsNullOrWhiteSpace(comp.CuentaID.Value))
                    {
                        #region Trae la cuenta del gasto del componente

                        cta = cacheCtas[comp.CuentaID.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrTotalML, vlrTotalME, false);
                        f.DatoAdd1.Value = comp.Descriptivo.Value;
                        f.DatoAdd9.Value = tipoRecaudo.ToString();
                        footer.Add(f);

                        #endregion
                    }
                    else if (compCta != null && !string.IsNullOrWhiteSpace(compCta.CuentaID.Value))
                    {
                        #region Trae la cuenta del gasto del componente

                        cta = cacheCtas[compCta.CuentaID.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrTotalML, vlrTotalME, false);
                        f.DatoAdd1.Value = comp.Descriptivo.Value;
                        f.DatoAdd9.Value = tipoRecaudo.ToString();
                        footer.Add(f);

                        #endregion
                    }
                    //Asigna el tercero
                    if (footer.Count > 0 && comp.TerceroTipo.Value == 1)
                        footer.Last().TerceroID.Value = ctrl.TerceroID.Value;
                    else if (footer.Count > 0 && comp.TerceroTipo.Value == 2)
                        footer.Last().TerceroID.Value = comp.TerceroID.Value;
                }
                #endregion

                return footer;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GenerarComprobanteFooter_CarteraCJ");

                return result;
            }
        }

        /// <summary>
        /// Carga la informacion de todo el plan de pagos segun la info de un pago total
        /// </summary>
        /// <param name="credito">Credito</param>
        /// <param name="componentesPago">Info de los componentes a pagar</param>
        /// <param name="saldosAll">Saldos de resultado</param>
        /// <returns>Retorna el plan de pagos</returns>
        private List<DTO_ccCreditoPlanPagos> LoadCreditoInfo_Pago(TipoRecaudo tipoRecaudo, DTO_ccCreditoDocu credito, DTO_ccEstadoCuentaHistoria estadoCuentaHistoria,
            List<DTO_ccSaldosComponentes> componentesPago, List<DTO_ccSaldosComponentes> saldosAll)
        {
            try
            {
                string componenteSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string componenteInteresSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresSeguro);
                string componenteMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string componentePJ = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);
                string componentePolizaEC = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePolizaEC);

                //Informacion de los saldos del credito
                bool asignaMora = true;
                bool asignaUsura = true;
                bool asignaPJ = true;
                if(tipoRecaudo == TipoRecaudo.CobroJuridico)
                {
                    asignaMora = false;
                    asignaUsura = false;
                    asignaPJ = false;
                }
                DTO_InfoCredito infoCredito = this.GetSaldoCredito(credito.NumeroDoc.Value.Value, estadoCuentaHistoria.EC_Fecha.Value.Value, asignaMora, asignaUsura, asignaPJ);

                //Plan de pagos
                List<DTO_ccCreditoPlanPagos> planPagos = infoCredito.PlanPagos;
                planPagos = planPagos.Where(x => x.CuotaID.Value >= estadoCuentaHistoria.EC_PrimeraCtaPagada.Value).ToList();

                #region Llena la info de los pagos por componente
                foreach (DTO_ccCreditoPlanPagos cuota in planPagos)
                {
                    cuota.VlrPagadoCuota.Value = 0;

                    //Componentes de la cuota
                    List<DTO_ccSaldosComponentes> saldosCuota = (from c in infoCredito.SaldosComponentes where c.CuotaID.Value == cuota.CuotaID.Value select c).ToList();
                    foreach (DTO_ccSaldosComponentes pagoComp in componentesPago)
                    {
                        bool found = false;
                        foreach (DTO_ccSaldosComponentes saldoComponente in saldosCuota)
                        {
                            decimal saldoCuota = saldoComponente.CuotaSaldo.Value.Value;

                            #region Validaciones particulares financieras (propósito: porpago / Poliza: Continua)
                            if (estadoCuentaHistoria != null && estadoCuentaHistoria.EC_Proposito.Value == 2 && estadoCuentaHistoria.EC_PolizaMvto.Value == 1)
                            {
                                //Componente Seguro
                                if ((pagoComp.ComponenteCarteraID.Value == componenteSeguro && saldoComponente.ComponenteCarteraID.Value == componenteSeguro)
                                    || (pagoComp.ComponenteCarteraID.Value == componenteInteresSeguro && saldoComponente.ComponenteCarteraID.Value == componenteInteresSeguro))
                                {
                                    if (pagoComp.TotalSaldo.Value > saldoComponente.CuotaSaldo.Value)
                                    {
                                        saldoCuota = saldoComponente.CuotaSaldo.Value.Value;
                                        pagoComp.TotalSaldo.Value -= saldoComponente.CuotaSaldo.Value;
                                    }
                                    else
                                    {
                                        saldoCuota = pagoComp.TotalSaldo.Value.Value;
                                        pagoComp.TotalSaldo.Value = 0;
                                    }
                                }
                            }
                            #endregion
                            #region Paga el valor abonado
                            if (pagoComp.ComponenteCarteraID.Value == saldoComponente.ComponenteCarteraID.Value)
                            {
                                //Asigna el valor de pago (Valor abonado al componente)
                                saldoComponente.AbonoSaldo.Value = saldoCuota;

                                found = true;
                                cuota.VlrPagadoCuota.Value += saldoCuota;
                                if (pagoComp.AbonoValor.Value != 0)
                                {
                                    if (pagoComp.AbonoValor.Value > saldoComponente.CuotaSaldo.Value)
                                    {
                                        //cuota.VlrPagadoCuota.Value += saldoCuota.CuotaSaldo.Value;
                                        saldoComponente.AbonoValor.Value = saldoComponente.CuotaSaldo.Value;
                                        pagoComp.AbonoValor.Value -= saldoComponente.CuotaSaldo.Value;
                                    }
                                    else
                                    {
                                        //cuota.VlrPagadoCuota.Value += pagoComp.AbonoValor.Value;
                                        saldoComponente.AbonoValor.Value = pagoComp.AbonoValor.Value;
                                        pagoComp.AbonoValor.Value = 0;
                                    }
                                }

                                saldosAll.Add(saldoComponente);
                            } 
                            #endregion
                        }

                        if (cuota.CuotaID.Value == credito.Plazo.Value )//&& pagoComp.ComponenteCarteraID.Value != componenteMora && pagoComp.ComponenteCarteraID.Value != componentePJ)
                        {
                            if (!found)
                            {
                                #region Agrega los componentes extras
                                DTO_ccCarteraComponente c = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, pagoComp.ComponenteCarteraID.Value, true, false);
                                pagoComp.CuotaID.Value = cuota.CuotaID.Value;
                                pagoComp.TipoComponente.Value = c.TipoComponente.Value;
                                saldosAll.Add(pagoComp);

                                if (pagoComp.ComponenteCarteraID.Value != componentePolizaEC)
                                    cuota.VlrPagadoCuota.Value += pagoComp.CuotaSaldo.Value;

                                #endregion
                            }
                            else if (pagoComp.AbonoValor.Value.Value > 0)
                            {
                                #region Revisa si hay saldo pendiente de pago de algún componente y lo asigna a la última cuota

                                saldosAll.FirstOrDefault(s => s.CuotaID.Value == credito.Plazo.Value && s.ComponenteCarteraID.Value == pagoComp.ComponenteCarteraID.Value)
                                    .AbonoValor.Value +=  pagoComp.AbonoValor.Value.Value;

                                pagoComp.AbonoValor.Value = 0;

                                #endregion
                            }
                        }                            
                    }
                }
                #endregion

                //Validación del cobro jurídico
                if (tipoRecaudo == TipoRecaudo.CobroJuridico)
                {
                    saldosAll.RemoveAll(c => c.TipoComponente.Value.Value == (byte)TipoComponente.ComponenteGasto);
                }

                return planPagos;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "LoadCreditoInfo_Pago");
                throw ex;
            }
        }

        /// <summary>
        /// Actualiza la información de un crédito despues de un pago
        /// </summary>
        /// <param name="tipoRecaudo">Tipo de recaudo</param>
        /// <param name="numDocNew">Identificador del documento que origina la transacción</param>
        /// <param name="credito">Crédito que se esta pagando</param>
        /// <param name="periodo">Periodo</param>
        /// <param name="fechaPago">Fecha de pago</param>
        /// <param name="planPagos">Plan de pagos</param>
        /// <param name="componentesSaldos">Saldos de componentes</param>
        /// <param name="componenteCapital">Componente capital</param>
        /// <param name="componenteInteres">Componente interes</param>
        /// <param name="componenteSeguro">Componente seguro</param>
        /// <param name="componenteInteresMora">Componente interes de mora</param>
        /// <param name="componenteUsura">Componente usuara</param>
        /// <param name="componentePJ">Componente prejurídico</param>
        /// <param name="componentePolizaEC">Componente poliza EC (para pagos totales)</param>
        /// <returns></returns>
        private DTO_TxResult UpdateInfoCredito_Pagos(TipoRecaudo tipoRecaudo, int numDocNew, DTO_ccCreditoDocu credito, DateTime periodo, DateTime fechaPago, 
            List<DTO_ccCreditoPlanPagos> planPagos, List<DTO_ccSaldosComponentes> componentesSaldos, string compradorPropio, string componenteCapital, 
            string componenteInteres, string componenteSeguro, string componenteInteresMora, string componenteUsura, string componentePJ, string componentePolizaEC)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            try
            {
                #region Filtra las cuotas si Cancela Poliza
                if (credito.DocEstadoCuenta.Value.HasValue)
                {
                    DTO_ccEstadoCuentaHistoria ec = this.EstadoCuenta_GetHistoria(credito.DocEstadoCuenta.Value.Value);
                    if (ec != null && ec.EC_Proposito.Value == (byte)PropositoEstadoCuenta.CancelaPoliza && tipoRecaudo == TipoRecaudo.PagoTotal)
                    {
                        componentesSaldos = componentesSaldos.FindAll(x => x.AbonoValor.Value > 0).OrderBy(x=>x.CuotaID.Value).ToList();
                        planPagos = planPagos.FindAll(x =>x.CuotaID.Value >= componentesSaldos.First().CuotaID.Value && x.CuotaID.Value <= componentesSaldos.Last().CuotaID.Value);                        
                    }
                }
                #endregion
                #region Actualiza los pagos y el plan de pagos
                foreach (DTO_ccCreditoPlanPagos cuota in planPagos)
                {
                    decimal vlrMoraPago = 0;
                    #region Asigna el registro de pago de credito
                    DTO_ccCreditoPagos pagoCredito = new DTO_ccCreditoPagos();
                    List<DTO_ccSaldosComponentes> componentesCuota = (from c in componentesSaldos where c.CuotaID.Value == cuota.CuotaID.Value select c).ToList();

                    if (!cuota.NuevoVlrMoraLiquida.Value.HasValue)
                        cuota.NuevoVlrMoraLiquida.Value = 0;

                    #region Valores generales
                    pagoCredito.CreditoCuotaNum.Value = cuota.Consecutivo.Value;
                    pagoCredito.NumeroDoc.Value = credito.NumeroDoc.Value;
                    pagoCredito.PagoDocu.Value = numDocNew;
                    pagoCredito.Valor.Value = cuota.VlrPagadoCuota.Value;
                    pagoCredito.DiasMora.Value = 0;
                    pagoCredito.VlrCapital.Value = 0;
                    pagoCredito.VlrInteres.Value = 0;
                    pagoCredito.VlrSeguro.Value = 0;
                    pagoCredito.VlrOtro1.Value = 0;
                    pagoCredito.VlrOtro2.Value = 0;
                    pagoCredito.VlrOtro3.Value = 0;
                    pagoCredito.VlrOtrosFijos.Value = 0;
                    pagoCredito.VlrMoraPago.Value = 0;
                    pagoCredito.VlrMoraliquida.Value = cuota.NuevoVlrMoraLiquida.Value ;
                    pagoCredito.VlrAjusteUsura.Value = 0;
                    pagoCredito.VlrOtrosComponentes.Value = 0;
                    pagoCredito.VlrPrejuridicoPago.Value = 0;
                    pagoCredito.DocVenta.Value = cuota.DocVenta.Value;
                    pagoCredito.VlrCapitalCesion.Value = 0;
                    pagoCredito.VlrDerechosCesion.Value = 0;
                    pagoCredito.VlrMoraPagoANT.Value = cuota.VlrMoraPagoANT.Value;
                    pagoCredito.VlrMoraLiquidaANT.Value = cuota.VlrMoraLiquidaANT.Value;
                    pagoCredito.FechaLiquidaMoraANT.Value = cuota.FechaLiquidaMoraANT.Value;
                    #endregion
                    #region Tipo pago
                    if (tipoRecaudo == TipoRecaudo.Normal)
                    {
                        if (cuota.NuevoVlrMoraLiquida.Value == 0)
                            pagoCredito.TipoPago.Value = (byte)TipoPago.Normal;
                        else
                            pagoCredito.TipoPago.Value = (byte)TipoPago.Mora;
                    }
                    else if (tipoRecaudo == TipoRecaudo.PagoTotal)
                    {
                        pagoCredito.TipoPago.Value = (byte)TipoPago.Prepago;
                    }
                    else if (tipoRecaudo == TipoRecaudo.CobroJuridico || tipoRecaudo == TipoRecaudo.AcuerdoPago || tipoRecaudo == TipoRecaudo.AcuerdoPagoIncumplido)
                    {
                        pagoCredito.TipoPago.Value = (byte)TipoPago.Juridico;
                    }

                    if (cuota.VlrMoraLiquida.Value == 0)
                        pagoCredito.VlrMoraPago.Value = 0;
                    #endregion
                    #region Asigna el valor de los componentes

                    Dictionary<string, bool> compExtras = new Dictionary<string, bool>();
                    foreach (var item in componentesCuota)
                    {
                        if (item.ComponenteCarteraID.Value != componentePolizaEC)
                        {
                            if (item.ComponenteCarteraID.Value == componenteCapital)
                                pagoCredito.VlrCapital.Value = item.AbonoSaldo.Value;
                            else if (item.ComponenteCarteraID.Value == componenteInteres)
                                pagoCredito.VlrInteres.Value = item.AbonoSaldo.Value;
                            else if (item.ComponenteCarteraID.Value == componenteSeguro)
                                pagoCredito.VlrSeguro.Value = item.AbonoSaldo.Value;
                            else if (item.ComponenteCarteraID.Value == componenteUsura)
                                pagoCredito.VlrAjusteUsura.Value = item.AbonoSaldo.Value;
                            else if (item.ComponenteCarteraID.Value == componentePJ)
                                pagoCredito.VlrPrejuridicoPago.Value = item.AbonoSaldo.Value;
                            else if (item.ComponenteCarteraID.Value == componenteInteresMora && item.AbonoSaldo.Value.Value > 0)
                            {
                                vlrMoraPago = item.AbonoSaldo.Value.Value;
                                pagoCredito.DiasMora.Value = Convert.ToInt32((fechaPago - cuota.FechaCuota.Value.Value).TotalDays);
                                pagoCredito.VlrMoraPago.Value = vlrMoraPago;
                                pagoCredito.VlrMoraliquida.Value = cuota.VlrMoraLiquida.Value;                               
                            }
                            else
                            {
                                //Revisa si es un componente extra
                                if (!compExtras.ContainsKey(item.ComponenteCarteraID.Value))
                                {
                                    DTO_ccCarteraComponente cTemp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, item.ComponenteCarteraID.Value, true, false);
                                    bool isExtra = cTemp.TipoComponente.Value.Value == 5 || cTemp.TipoComponente.Value.Value == 6 ? true : false;
                                    compExtras.Add(item.ComponenteCarteraID.Value, isExtra);
                                }

                                //Componente extra
                                if (compExtras[item.ComponenteCarteraID.Value])
                                {
                                    pagoCredito.VlrOtrosComponentes.Value += item.AbonoSaldo.Value;
                                }
                                else if (item.ComponenteFijo.Value.HasValue  && item.ComponenteFijo.Value.Value)
                                    pagoCredito.VlrOtrosFijos.Value += item.AbonoSaldo.Value;
                                else
                                {
                                    if (cuota.VlrOtro1.Value.Value != 0 && pagoCredito.VlrOtro1.Value == 0)
                                        pagoCredito.VlrOtro1.Value = item.AbonoSaldo.Value;
                                    else if (cuota.VlrOtro2.Value.Value != 0 && pagoCredito.VlrOtro2.Value == 0)
                                        pagoCredito.VlrOtro2.Value = item.AbonoSaldo.Value;
                                    else if (cuota.VlrOtro3.Value.Value != 0 && pagoCredito.VlrOtro3.Value == 0)
                                        pagoCredito.VlrOtro3.Value = item.AbonoSaldo.Value;
                                }
                            }
                        }
                    }
                    #endregion
                    #region Asigna la información de la cesión

                    if (!string.IsNullOrWhiteSpace(cuota.CompradorCarteraID.Value) && cuota.CompradorCarteraID.Value != compradorPropio)
                    {
                        decimal cuotaSaldo = componentesCuota.Sum(c => c.CuotaSaldo.Value.Value);
                        decimal cuotaAbono = componentesCuota.Sum(c => c.AbonoSaldo.Value.Value);

                        if (cuotaSaldo == cuotaAbono && componentesCuota.Exists(x=>x.ComponenteCarteraID.Value == componenteCapital))
                        {
                            //Paga la totalidad de la cuota
                            List<DTO_ccCreditoPagos> pagosCuota = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetByCuotaNum(cuota.Consecutivo.Value.Value);
                            decimal pagosCesion = pagosCuota.Sum(p => p.VlrCapitalCesion.Value.Value);
                            pagoCredito.VlrCapitalCesion.Value = Math.Round(cuota.VlrCapitalCesion.Value.Value - pagosCesion,0);
                        }
                        else if (pagoCredito.VlrCapital.Value > 0 || pagoCredito.VlrInteres.Value > 0)
                        {
                            //Pago parcial
                            decimal factor = (cuota.VlrCapital.Value.Value + cuota.VlrInteres.Value.Value) != 0 ? 
                                             cuota.VlrCapitalCesion.Value.Value / (cuota.VlrCapital.Value.Value) : 0;
                            
                            pagoCredito.VlrCapitalCesion.Value = Math.Round((pagoCredito.VlrCapital.Value.Value)* factor,0);
                        }
                        else
                            pagoCredito.VlrCapitalCesion.Value = 0;

                        pagoCredito.VlrDerechosCesion.Value = Math.Round(pagoCredito.VlrCapitalCesion.Value.Value - pagoCredito.VlrCapital.Value.Value,0);
                    }

                    #endregion

                    this._dal_ccCreditoPagos.DAL_ccCreditoPagos_Add(pagoCredito);

                    #endregion
                    #region Actualiza el plan de pagos

                    decimal vlrPagoCuota =
                    (
                        from c in componentesSaldos
                        where c.CuotaID.Value == cuota.CuotaID.Value && (c.TipoComponente.Value.Value == (byte)TipoComponente.CapitalSolicitado || c.TipoComponente.Value.Value == (byte)TipoComponente.ComponenteCuota)
                        select c.AbonoSaldo.Value.Value
                    ).Sum();

                    cuota.VlrMoraPago.Value = vlrMoraPago;
                    cuota.VlrPagadoExtras.Value = cuota.VlrPagadoCuota.Value.Value - vlrPagoCuota;
                    cuota.VlrPagadoCuota.Value = vlrPagoCuota;

                    this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(cuota);
                    #endregion
                }

                #endregion
                #region Guarda los movimientos de cartera

                //List<DTO_ccSaldosComponentes> componentesPagos = componentesSaldos.Where(x => x.AbonoValor.Value.Value != 0).ToList();
                //List<string> credComps = componentesPagos.Select(x => x.ComponenteCarteraID.Value).Distinct().ToList();
                List<string> credComps = componentesSaldos.Select(x => x.ComponenteCarteraID.Value).Distinct().ToList();
                foreach (string c in credComps)
                {
                    DTO_ccCarteraComponente componente = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, c, true, false);
                    DTO_ccCarteraMvto mvto = new DTO_ccCarteraMvto();
                    mvto.NumCredito.Value = credito.NumeroDoc.Value.Value;
                    mvto.NumeroDoc.Value = numDocNew;
                    mvto.ComponenteCarteraID.Value = c;
                    mvto.CompradorCarteraID.Value = credito.CompradorCarteraID.Value;
                    mvto.Tasa.Value = 0;

                    if (tipoRecaudo == TipoRecaudo.PagoTotal)
                    {
                        mvto.VlrAbono.Value = componentesSaldos.Where(cp => cp.ComponenteCarteraID.Value == c).Sum(s => s.AbonoValor.Value.Value) * -1;
                        mvto.VlrComponente.Value = componentesSaldos.Where(cp => cp.ComponenteCarteraID.Value == c).Sum(s => s.AbonoSaldo.Value.Value) * -1;
                    }
                    else
                    {
                        mvto.VlrAbono.Value = componentesSaldos.Where(cp => cp.ComponenteCarteraID.Value == c).Sum(s => s.AbonoValor.Value.Value) * -1;
                        mvto.VlrComponente.Value = componentesSaldos.Where(cp =>
                                cp.ComponenteCarteraID.Value == c &&
                                (
                                    componente.TipoComponente.Value == (byte)TipoComponente.CapitalSolicitado ||
                                    componente.TipoComponente.Value == (byte)TipoComponente.ComponenteCuota
                                )
                            ).Sum(s => s.AbonoValor.Value.Value) * -1;;
                    }

                    this.ccCarteraMvto_Add(mvto);
                }

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "PagosCreditos_Parcial");
                return result;
            }
        }

        /// <summary>
        /// Revierte un pago de cartera
        /// </summary>
        /// <param name="credito">Credito</param>
        /// <param name="numDocAnula">Numero doc anulación</param>
        /// <param name="numDocPago">Número doc del pago</param>
        /// <param name="periodo">Perido de la operación</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        private DTO_TxResult CarteraPagosPriv_Revertir(DTO_ccCreditoDocu credito, int numDocAnula, int numDocPago, DateTime periodo)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            try
            {
                if (credito.Libranza.Value != null && credito.Libranza.Value.HasValue && credito.Libranza.Value.Value != 0)
                {
                    this._dal_ccCJHistorico = (DAL_ccCJHistorico)this.GetInstance(typeof(DAL_ccCJHistorico), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                    #region Actualiza la info del credito

                    if (credito.CanceladoInd.Value.Value)
                    {
                        bool hasSaldos = this._moduloContabilidad.Saldos_CreditoHasSaldo(periodo, credito.NumeroDoc.Value.Value);
                        if (hasSaldos)
                            credito.CanceladoInd.Value = false;
                        this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                    }

                    DTO_glDocumentoControl ctrl = this._moduloGlobal.glDocumentoControl_GetByID(numDocPago);
                    if (ctrl.DocumentoID.Value == AppDocuments.Desistimiento)
                        credito.DocDesestimiento.Value = null;

                    if (ctrl.DocumentoID.Value == AppDocuments.PagosTotales)
                    {
                        credito.DocPrepago.Value = null;
                        credito.VlrPrepago.Value = null;
                    }

                    #endregion
                    #region Guarda los movimientos de cartera

                    this.ccCarteraMvto_Revertir(credito.NumeroDoc.Value.Value, numDocPago, numDocAnula);

                    #endregion
                    #region Elimina la información de ccCJHistorico

                    this._dal_ccCJHistorico.DAL_ccCJHistorico_DeleteFromNumeroDocMvto(numDocPago);

                    #endregion
                    List<DTO_ccCreditoPagos> pagos = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetByPagoID(numDocPago);
                    foreach (DTO_ccCreditoPagos pagoCuota in pagos)
                    {
                        #region Actualiza el plan de pagos

                        DTO_ccCreditoPlanPagos planPago = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanpagos_GetByID(pagoCuota.CreditoCuotaNum.Value.Value);

                        //Trae los valores antiguos
                        decimal vlrCuota = pagoCuota.VlrCapital.Value.Value + pagoCuota.VlrInteres.Value.Value + pagoCuota.VlrSeguro.Value.Value + pagoCuota.VlrOtro1.Value.Value +
                            pagoCuota.VlrOtro2.Value.Value + pagoCuota.VlrOtro3.Value.Value + pagoCuota.VlrOtrosFijos.Value.Value;

                        decimal vlrExtras = pagoCuota.VlrMoraPago.Value.Value + pagoCuota.VlrAjusteUsura.Value.Value + pagoCuota.VlrOtrosComponentes.Value.Value;
                        if (pagoCuota.VlrPrejuridicoPago.Value != null)
                            vlrExtras += pagoCuota.VlrPrejuridicoPago.Value.Value;

                        planPago.VlrPagadoCuota.Value = vlrCuota * -1;
                        planPago.VlrMoraPago.Value = pagoCuota.VlrMoraPagoANT.Value;
                        planPago.VlrPagadoExtras.Value = vlrExtras * -1;

                        //Calcula la información previa de la mora
                        decimal vlrMoraLiquida = 0;
                        decimal vlrMoraPago = 0;
                        DateTime? fechaMoraLiquida = null;

                        this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetInfoPagoAnterior(pagoCuota.NumeroDoc.Value.Value, pagoCuota.PagoDocu.Value.Value,
                            pagoCuota.CreditoCuotaNum.Value.Value, ref vlrMoraLiquida, ref vlrMoraPago, ref fechaMoraLiquida);

                        planPago.VlrMoraLiquida.Value = pagoCuota.VlrMoraLiquidaANT.Value.HasValue ? pagoCuota.VlrMoraLiquidaANT.Value : 0;// vlrMoraLiquida * -1;
                        if (vlrMoraLiquida > 0)
                            planPago.FechaLiquidaMora.Value =  pagoCuota.FechaLiquidaMoraANT.Value.HasValue ? pagoCuota.FechaLiquidaMoraANT.Value :  planPago.FechaCuota.Value;// fechaMoraLiquida.Value;
                        else
                            planPago.FechaLiquidaMora.Value = planPago.FechaCuota.Value;

                        this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(planPago);

                        #endregion
                        #region Crea la reversión del pago

                        //Actiualiza el documento de anulación
                        this._dal_ccCreditoPagos.DAL_ccCreditoPagos_UpdateDocAnula(pagoCuota.Consecutivo.Value.Value, numDocAnula);

                        DTO_ccCreditoPagos pago = ObjectCopier.Clone(pagoCuota);
                        pago.PagoDocu.Value = numDocAnula;
                        pago.Valor.Value *= -1;
                        pago.VlrOtro1.Value *= -1;
                        pago.VlrOtro2.Value *= -1;
                        pago.VlrOtro3.Value *= -1;
                        pago.VlrOtrosFijos.Value *= -1;
                        pago.VlrMoraliquida.Value *= -1;
                        pago.VlrAjusteUsura.Value *= -1;
                        pago.VlrOtrosComponentes.Value *= -1;
                        pago.VlrMoraPago.Value *= -1;
                        pago.VlrCapital.Value *= -1;
                        pago.VlrInteres.Value *= -1;
                        pago.VlrSeguro.Value *= -1;
                        pago.VlrAjusteUsura.Value *= -1;
                        pago.VlrPrejuridicoPago.Value *= -1;
                        pago.VlrCapitalCesion.Value *= -1;
                        pago.VlrUtilidadCesion.Value *= -1;
                        pago.VlrDerechosCesion.Value *= -1;

                        this._dal_ccCreditoPagos.DAL_ccCreditoPagos_Add(pago);

                        #endregion
                    }
                }
                else
                {
                    //Validacion de pagos masivos con el registro de la pagaduria
                }

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "CarteraPagosPriv_Revertir");

                return result;
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Funcion que agrega un racaudo manual a la tabla ccCreditoPagos
        /// </summary>
        /// <param name="documentoID">Documento que ejecuta la transaccione</param>
        /// <param name="actFlujoId">Actividad de flujo</param>
        /// <param name="reciboCaja">Recibo de caja</param>
        /// <param name="coDocumentoID">Id del documento contable, cuando el recibo de caja viene vacio</param>
        /// <param name="credito">Informacion basica del credito</param>
        /// <param name="planPagos">Lista del plan de pagos</param>
        /// <param name="componentesSaldos">Lista de los componentes de cada cuota</param> List<DTO_ccCreditoComponentes> componentes
        /// <param name="desc">Documento que genera el comprobante (Ej: RECAUDO MANUAL)</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult PagosCreditos_Parcial(TipoRecaudo tipoRecaudo, int documentID, string actFlujoID, string coDocumentoID, DateTime fechaDoc,
            DateTime fechaPago, DTO_tsReciboCajaDocu reciboCaja, DTO_ccCreditoDocu credito, List<DTO_ccCreditoPlanPagos> planPagos, List<DTO_ccSaldosComponentes> componentesPago,
            List<DTO_ccSaldosComponentes> componentesSaldos, string desc, bool isAnotherTx, List<DTO_ComprobanteFooter> compFooter = null)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Globales
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCJHistorico = (DAL_ccCJHistorico)base.GetInstance(typeof(DAL_ccCJHistorico), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloTesoreria = (ModuloTesoreria)base.GetInstance(typeof(ModuloTesoreria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            DTO_glDocumentoControl ctrlNew = null;
            DTO_Comprobante comprobante = null;
            DTO_coComprobante comp = null;
            #endregion
            try
            {
                #region Variables

                //Variables de documento
                int numDocNew = 0;
                DTO_glDocumentoControl ctrlOld = this._moduloGlobal.glDocumentoControl_GetByID(credito.NumeroDoc.Value.Value);
                decimal tc = 0;

                //Variables del comprobante
                if (string.IsNullOrWhiteSpace(coDocumentoID))
                {
                    DTO_tsCaja caja = (DTO_tsCaja)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.tsCaja, reciboCaja.CajaID.Value, true, false);
                    coDocumentoID = caja.coDocumentoID.Value;
                }
                DTO_coDocumento coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocumentoID, true, false);

                //Periodo
                string periodoStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoStr);

                //Info por defecto
                string componenteCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string componenteInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string componenteSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string componenteInteresMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string componenteUsura = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteUsura);
                string componentePJ = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);
                string componentePolizaEC = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePolizaEC);

                string compradorPropio = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);

                //Sector 
                string sector = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);

                #endregion
                #region Validaciones

                //Revisa el estado del crédito
                if (credito.DocDesestimiento.Value.HasValue)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_CreditoDesestido + "&&" + credito.Libranza.Value.Value.ToString();

                    return result;
                }

                //Valida que tenga comprobante
                if (string.IsNullOrWhiteSpace(coDoc.ComprobanteID.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;

                    return result;
                }
                else
                    comp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, coDoc.ComprobanteID.Value, true, false);

                if (!string.IsNullOrEmpty(reciboCaja.BancoCuentaID.Value))
                {
                    DTO_tsBancosCuenta banco = (DTO_tsBancosCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.tsBancosCuenta, reciboCaja.BancoCuentaID.Value, true, false);
                    DTO_coDocumento coDocBanco = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, banco.coDocumentoID.Value, true, false);
                    if (string.IsNullOrWhiteSpace(coDocBanco.CuentaLOC.Value))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocBanco.ID.Value;

                        return result;
                    }
                    coDoc.CuentaLOC.Value = coDocBanco.CuentaLOC.Value;
                }

                //Valida que el documento asociado tenga cuenta local
                if (string.IsNullOrWhiteSpace(coDoc.CuentaLOC.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocumentoID;

                    return result;
                }

                //Valida la tasa de cambio
                if (this.Multimoneda())
                    tc = this._moduloGlobal.TasaDeCambio_Get(ctrlOld.MonedaID.Value, DateTime.Now);

                #endregion
                #region Asignar nuevo flujo
                if (!string.IsNullOrWhiteSpace(actFlujoID))
                    result = this.AsignarFlujo(documentID, credito.NumeroDoc.Value.Value, actFlujoID, false, string.Empty);
                #endregion
                #region Crea glDocumentoControl

                ctrlNew = new DTO_glDocumentoControl();
                ctrlNew.DocumentoNro.Value = 0;
                ctrlNew.DocumentoID.Value = documentID;
                ctrlNew.LugarGeograficoID.Value = ctrlOld.LugarGeograficoID.Value;
                ctrlNew.NumeroDoc.Value = 0;
                ctrlNew.DocumentoTipo.Value = (int)DocumentoTipo.DocInterno;
                ctrlNew.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                ctrlNew.Fecha.Value = DateTime.Now;
                ctrlNew.FechaDoc.Value = fechaDoc;
                ctrlNew.PeriodoDoc.Value = periodo;
                ctrlNew.PeriodoUltMov.Value = periodo;
                ctrlNew.CuentaID.Value = coDoc.CuentaLOC.Value;
                ctrlNew.AreaFuncionalID.Value = ctrlOld.AreaFuncionalID.Value;
                ctrlNew.PrefijoID.Value = ctrlOld.PrefijoID.Value;
                ctrlNew.ProyectoID.Value = ctrlOld.ProyectoID.Value;
                ctrlNew.CentroCostoID.Value = ctrlOld.CentroCostoID.Value;
                ctrlNew.LineaPresupuestoID.Value = ctrlOld.LineaPresupuestoID.Value;
                ctrlNew.TerceroID.Value = credito.ClienteID.Value;
                ctrlNew.DocumentoTercero.Value = credito.Libranza.Value.ToString();
                ctrlNew.MonedaID.Value = ctrlOld.MonedaID.Value;
                ctrlNew.TasaCambioCONT.Value = tc;
                ctrlNew.TasaCambioDOCU.Value = tc;
                ctrlNew.Observacion.Value = (tipoRecaudo == TipoRecaudo.Normal? "Abono Obl:  ":"Pago Total Obl:  ") + credito.Libranza.Value.ToString(); 
                ctrlNew.Descripcion.Value = desc + credito.Libranza.Value;
                ctrlNew.Iva.Value = 0;
                ctrlNew.Valor.Value = reciboCaja != null ? reciboCaja.Valor.Value : 0;
                ctrlNew.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrlNew.seUsuarioID.Value = this.UserId;

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlNew, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);

                    return result;
                }
                numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrlNew.NumeroDoc.Value = numDocNew;

                #endregion
                #region Crea el recibo de caja

                if (reciboCaja != null)
                {
                    reciboCaja.NumeroDoc.Value = ctrlNew.NumeroDoc.Value;
                    result = this._moduloTesoreria.ReciboCaja_Add(reciboCaja);
                    if (result.Result == ResultValue.NOK)
                        return result;
                }

                #endregion
                #region Crea los registros de CJHistorico para financieras

                if (sector == ((byte)SectorCartera.Financiero).ToString() && reciboCaja != null)
                {
                    //Interes
                    if (reciboCaja.ccCJHistoricoInteres != null)
                    {
                        reciboCaja.ccCJHistoricoInteres.NumeroDocMvto.Value = numDocNew;
                        this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(reciboCaja.ccCJHistoricoInteres);
                    }

                    //Pago
                    if (reciboCaja.ccCJHistoricoPago != null)
                    {
                        reciboCaja.ccCJHistoricoPago.NumeroDocMvto.Value = numDocNew;
                        this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(reciboCaja.ccCJHistoricoPago);
                    }
                }

                #endregion
                #region Genera el comprobante

                decimal vlrAbonoCapital = 0;
                object compRes = this.GenerarComprobante_PagosCartera(tipoRecaudo, ctrlNew, ctrlOld, credito, planPagos, componentesSaldos,componentesPago, coDoc,
                                                                      componenteCapital, componenteInteres, componenteSeguro, true, desc, (int)EstadoDeuda.Normal, ref vlrAbonoCapital);

                if (compRes.GetType() == typeof(DTO_TxResult))
                {
                    result = (DTO_TxResult)compRes;
                    return result;
                }
                else
                {
                    comprobante = (DTO_Comprobante)compRes;
                    if (comprobante.Footer.Count == 0)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Co_CompNoResults;

                        return result;
                    }
                    if (compFooter != null)
                        comprobante.Footer.AddRange(compFooter);

                    comprobante.Footer = comprobante.Footer.FindAll(x => x.vlrMdaLoc.Value != 0);
                    result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobante, periodo, ModulesPrefix.cc, 0, false);
                    if (result.Result == ResultValue.NOK)
                        return result;
                }
                #endregion
                #region Actualiza la info de los pagos y plan de pagos

                result = this.UpdateInfoCredito_Pagos(tipoRecaudo, numDocNew, credito, periodo, fechaPago, planPagos, componentesSaldos, compradorPropio, 
                    componenteCapital, componenteInteres, componenteSeguro, componenteInteresMora, componenteUsura, componentePJ, componentePolizaEC);

                if (result.Result == ResultValue.NOK)
                    return result;

                #endregion
                #region Actualiza la info del credito
               
                bool hasSaldos = this._moduloContabilidad.Saldos_CreditoHasSaldo(periodo, credito.NumeroDoc.Value.Value);
                if (!hasSaldos)
                    credito.CanceladoInd.Value = true;

                if (documentID == AppDocuments.Desistimiento)
                    credito.DocDesestimiento.Value = ctrlNew.NumeroDoc.Value;

                if (documentID == AppDocuments.RecaudosManuales)
                    credito.DocUltNomina.Value = ctrlNew.NumeroDoc.Value;

                if (tipoRecaudo == TipoRecaudo.PagoTotal)
                {
                    credito.DocPrepago.Value = ctrlNew.NumeroDoc.Value;
                    credito.VlrPrepago.Value = vlrAbonoCapital;
                }
                
                //Si se quita esta linea afecta los pagos desde un EC ... ejemplo seguro en financieras, poliza continua
                credito.DocEstadoCuenta.Value = null;

                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                #endregion
                #region Guarda la info en el histórico de CJ
                if (credito.TipoEstado.Value == (byte)TipoEstadoCartera.CobroJuridico || credito.TipoEstado.Value == (byte)TipoEstadoCartera.AcuerdoPago ||
                    credito.TipoEstado.Value == (byte)TipoEstadoCartera.AcuerdoPagoIncumplido)
                {
                    decimal vlrAbonoCapitalCJ = componentesSaldos.Where(s => s.ComponenteCarteraID.Value == componenteCapital).Sum(s => s.AbonoValor.Value.Value);
                    decimal vlrAbonoPolizaCJ = componentesSaldos.Where(s => s.ComponenteCarteraID.Value == componenteSeguro).Sum(s => s.AbonoValor.Value.Value);
                    decimal vlrAbonoInteresCJ = componentesSaldos.Where(s => s.ComponenteCarteraID.Value == componenteInteresMora).Sum(s => s.AbonoValor.Value.Value);
                    decimal vlrAbonoGastosCJ = componentesSaldos.Where(s => s.TipoComponente.Value == (byte)TipoComponente.ComponenteGasto).Sum(s => s.AbonoValor.Value.Value);

                    #region Ingreso a CJ deuda - Capital
                    DTO_ccCJHistorico ingresoCJDeuda = new DTO_ccCJHistorico();
                    ingresoCJDeuda.NumeroDoc.Value = credito.NumeroDoc.Value;
                    ingresoCJDeuda.NumeroDocMvto.Value = ctrlNew.NumeroDoc.Value.Value;
                    ingresoCJDeuda.NumDocEstadoCta.Value = null;
                    ingresoCJDeuda.PeriodoID.Value = ctrlNew.PeriodoDoc.Value;
                    ingresoCJDeuda.ClaseDeuda.Value = (byte)ClaseDeuda.Principal;
                    ingresoCJDeuda.EstadoDeuda.Value = (byte)credito.EstadoDeuda.Value;
                    ingresoCJDeuda.TipoMvto.Value = (byte)TipoMovimiento_CJHistorico.Abono;
                    ingresoCJDeuda.FechaMvto.Value = reciboCaja.FechaConsignacion.Value;
                    ingresoCJDeuda.FechaInicial.Value = reciboCaja.FechaConsignacion.Value;
                    ingresoCJDeuda.FechaFinal.Value = reciboCaja.FechaConsignacion.Value;
                    ingresoCJDeuda.Observacion.Value = "Abono";
                    ingresoCJDeuda.PorInteres.Value = 0;
                    ingresoCJDeuda.SaldoCapital.Value = 0;
                    
                    ingresoCJDeuda.SaldoInteres.Value = 0;
                    ingresoCJDeuda.SaldoGastos.Value = 0;
                    ingresoCJDeuda.VlrCuota.Value = 0;
                    ingresoCJDeuda.VlrPendiente.Value = 0;
                    ingresoCJDeuda.VlrPagado.Value = reciboCaja.Valor.Value;
                    ingresoCJDeuda.MvtoCapital.Value = vlrAbonoCapitalCJ;
                    ingresoCJDeuda.MvtoGastos.Value = vlrAbonoGastosCJ;
                    ingresoCJDeuda.MvtoInteres.Value = vlrAbonoInteresCJ;
                    this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(ingresoCJDeuda);
                    #endregion
                    #region Ingreso a CJ deuda - Póliza
                    if (vlrAbonoPolizaCJ > 0)
                    {
                        DTO_ccCJHistorico ingresoCJPoliza = new DTO_ccCJHistorico();
                        ingresoCJPoliza.NumeroDoc.Value = credito.NumeroDoc.Value;
                        ingresoCJPoliza.NumeroDocMvto.Value = ctrlNew.NumeroDoc.Value.Value;
                        ingresoCJPoliza.NumDocEstadoCta.Value = null;
                        ingresoCJPoliza.PeriodoID.Value = ctrlNew.PeriodoDoc.Value;
                        ingresoCJPoliza.ClaseDeuda.Value = (byte)ClaseDeuda.Adicional;
                        ingresoCJPoliza.EstadoDeuda.Value = (byte)credito.EstadoDeuda.Value;
                        ingresoCJPoliza.TipoMvto.Value = (byte)TipoMovimiento_CJHistorico.Abono;
                        ingresoCJPoliza.FechaMvto.Value = reciboCaja.FechaConsignacion.Value; 
                        ingresoCJPoliza.FechaInicial.Value = reciboCaja.FechaConsignacion.Value;
                        ingresoCJPoliza.FechaFinal.Value = reciboCaja.FechaConsignacion.Value;
                        ingresoCJPoliza.Observacion.Value = "Abono";
                        ingresoCJPoliza.PorInteres.Value = 0;
                        ingresoCJPoliza.SaldoCapital.Value = 0;
                       
                        ingresoCJPoliza.SaldoInteres.Value = 0;
                        ingresoCJDeuda.SaldoGastos.Value = 0;

                        ingresoCJDeuda.VlrCuota.Value = 0;
                        ingresoCJDeuda.VlrPendiente.Value = 0;
                        ingresoCJDeuda.VlrPagado.Value = 0;
                        ingresoCJDeuda.FijadoInd.Value = true;

                        ingresoCJPoliza.MvtoCapital.Value = vlrAbonoPolizaCJ;
                        ingresoCJPoliza.MvtoGastos.Value = 0;
                        ingresoCJPoliza.MvtoInteres.Value = vlrAbonoInteresCJ;
                        this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(ingresoCJPoliza);
                    }
                    #endregion
                }
                #endregion
                result.ExtraField = numDocNew.ToString();              
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "PagosCreditos_Parcial");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrlNew.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlNew.PrefijoID.Value);
                        ctrlNew.ComprobanteIDNro.Value = this.GenerarComprobanteNro(comp, ctrlNew.PrefijoID.Value, ctrlNew.PeriodoDoc.Value.Value, ctrlNew.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlNew, true, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlNew.NumeroDoc.Value.Value, ctrlNew.ComprobanteIDNro.Value.Value, false);
                        #endregion
                    }
                    else if (documentID == AppDocuments.RecaudosManuales)
                        throw new Exception("PagosCreditos_Parcial - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }

            return result;
        }

        /// <summary>
        /// Funcion que realiza el pago parcial o total de un credito para pago total
        /// </summary>
        /// <param name="documentID">Documento que ejecuta la transaccione</param>
        /// <param name="actFlujoID">Actividad de flujo</param>
        /// <param name="reciboCaja">Recibo de caja</param>
        /// <param name="credito">Informacion basica del credito</param>
        /// <param name="componentesPago">Lista de los componentes de cada cuota</param> List<DTO_ccCreditoComponentes> componentes
        /// <param name="isPagoParcial">Indica si se esta realizando un pago parcial</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult PagosCreditos_Total(int documentID, string actFlujoID, DateTime fechaDoc, DateTime fechaPago, DTO_tsReciboCajaDocu reciboCaja, 
            DTO_ccCreditoDocu credito, List<DTO_ccEstadoCuentaComponentes> ec_componentes, List<DTO_ccSaldosComponentes> componentesPago, bool isPagoParcial)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            #region Variables Globales

            this._dal_ccEstadoCuentaComponentes = (DAL_ccEstadoCuentaComponentes)this.GetInstance(typeof(DAL_ccEstadoCuentaComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccEstadoCuentaHistoria = (DAL_ccEstadoCuentaHistoria)this.GetInstance(typeof(DAL_ccEstadoCuentaHistoria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloTesoreria = (ModuloTesoreria)base.GetInstance(typeof(ModuloTesoreria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
           
            DTO_coPlanCuenta coPlanCta = null;
            DTO_glDocumentoControl ctrl = null;
            DTO_Comprobante comprobante = null;
            List<DTO_ComprobanteFooter> compFooter = new List<DTO_ComprobanteFooter>();
            bool pagoTotalmente = false;
            decimal vlrDeuda = (from c in componentesPago select c.AbonoValor.Value.Value).Sum();

            #endregion
            try
            {
                if (isPagoParcial)
                {
                    #region Variables
                    //Variables de documento
                    ctrl = this._moduloGlobal.glDocumentoControl_GetExternalDoc(documentID, credito.ClienteID.Value, credito.NumeroDoc.Value.ToString());

                    //Variables del comprobante
                    DTO_tsCaja caja = (DTO_tsCaja)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.tsCaja, reciboCaja.CajaID.Value, true, false);
                    string coDocID = caja.coDocumentoID.Value;
                    DTO_coDocumento coDoc;
                    decimal totalML = reciboCaja.Valor.Value.Value;

                    //Variables por defecto
                    string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                    string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                    string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                    string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                    string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                    string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                    string defConceptoCargo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                    string cuentaID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaPagosAbonosDeuda);

                    //Vairables de valores y fechas
                    DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                    DateTime fecha = credito.FechaPagoParcial.Value.Value;
                    string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                    decimal tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, periodo);

                    #endregion
                    #region Validaciones

                    //Valida que la cuenta si exista
                    if (string.IsNullOrWhiteSpace(cuentaID))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaPagosAbonosDeuda + "&&" + string.Empty;

                        return result;
                    }
                    else
                        coPlanCta = (DTO_coPlanCuenta)GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cuentaID, true, false);

                    //Valida el coDocumento
                    if (string.IsNullOrWhiteSpace(coDocID))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CodigoDocumentoCredito + "&&" + string.Empty;

                        return result;
                    }
                    else
                        coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocID, true, false);


                    if (!string.IsNullOrEmpty(reciboCaja.BancoCuentaID.Value))
                    {
                        DTO_tsBancosCuenta banco = (DTO_tsBancosCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.tsBancosCuenta, reciboCaja.BancoCuentaID.Value, true, false);
                        DTO_coDocumento coDocBanco = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, banco.coDocumentoID.Value, true, false);
                        if (string.IsNullOrWhiteSpace(coDocBanco.CuentaLOC.Value))
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocBanco.ID.Value;

                            return result;
                        }
                        coDoc.CuentaLOC.Value = coDocBanco.CuentaLOC.Value;
                    }

                    //Valida que tenga comprobante
                    if (string.IsNullOrWhiteSpace(coDoc.ComprobanteID.Value))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;

                        return result;
                    }
                    //Valida que tenga comprobante
                    if (string.IsNullOrWhiteSpace(coDoc.CuentaLOC.Value))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Co_CuentaInvalid;

                        return result;
                    }

                    #endregion
                    #region Valida si ya existe un glDocumento, si ya existe actualiza el valor para el nuevo recibo de caja
                    if (ctrl != null)
                    {
                        decimal vlrAbonoOld = ctrl.Valor.Value.Value;
                        decimal vlrAbonoNew = reciboCaja.Valor.Value.Value;
                       
                        if (vlrAbonoNew + vlrAbonoOld == vlrDeuda)
                            pagoTotalmente = true;
                        
                        ctrl.Valor.Value = vlrAbonoNew;
                        comprobante = this._moduloContabilidad.Comprobante_Get(true, false, periodo, ctrl.ComprobanteID.Value, ctrl.ComprobanteIDNro.Value.Value, null, null);
                        if (comprobante != null)
                            compFooter = comprobante.Footer;
                    }
                    else
                    {
                        #region Crea glDocumentoControl
                        ctrl = new DTO_glDocumentoControl();
                        ctrl.DocumentoNro.Value = 0;
                        ctrl.DocumentoID.Value = documentID;
                        ctrl.LugarGeograficoID.Value = defLugarGeografico;
                        ctrl.NumeroDoc.Value = 0;
                        ctrl.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                        ctrl.DocumentoTipo.Value = (int)DocumentoTipo.DocExterno;
                        ctrl.Fecha.Value = DateTime.Now;
                        ctrl.FechaDoc.Value = fecha;
                        ctrl.PeriodoDoc.Value = periodo;
                        ctrl.PeriodoUltMov.Value = periodo;
                        ctrl.CuentaID.Value = cuentaID;
                        ctrl.AreaFuncionalID.Value = defArealFuncional;
                        ctrl.PrefijoID.Value = defPrefijo;
                        ctrl.ProyectoID.Value = defProyecto;
                        ctrl.CentroCostoID.Value = defCentroCosto;
                        ctrl.LineaPresupuestoID.Value = defLineaPresupuesto;
                        ctrl.TerceroID.Value = credito.ClienteID.Value;
                        ctrl.DocumentoTercero.Value = credito.Libranza.Value.ToString();
                        ctrl.MonedaID.Value = mdaLoc;
                        ctrl.TasaCambioCONT.Value = tc;
                        ctrl.TasaCambioDOCU.Value = tc;
                        ctrl.Observacion.Value = string.Empty;
                        ctrl.Descripcion.Value = "Pago Parcial - Crédito " + credito.Libranza.Value;
                        ctrl.Iva.Value = 0;
                        ctrl.Valor.Value = reciboCaja.Valor.Value;
                        ctrl.Estado.Value = (byte)EstadoDocControl.Aprobado;
                        ctrl.seUsuarioID.Value = this.UserId;
                        #endregion
                    }
                    #endregion
                    #region Carga el cabezote del comprobante
                    if (comprobante == null)
                    {
                        comprobante = new DTO_Comprobante();

                        DTO_ComprobanteHeader compHeader = new DTO_ComprobanteHeader();
                        compHeader.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                        compHeader.ComprobanteNro.Value = 0;
                        compHeader.EmpresaID.Value = this.Empresa.ID.Value;
                        compHeader.Fecha.Value = fecha;
                        compHeader.NumeroDoc.Value = 0;
                        compHeader.MdaOrigen.Value = (byte)TipoMoneda_LocExt.Local;
                        compHeader.MdaTransacc.Value = ctrl.MonedaID.Value;
                        compHeader.PeriodoID.Value = periodo;
                        compHeader.TasaCambioBase.Value = 0;
                        compHeader.TasaCambioOtr.Value = 0;

                        comprobante.Header = compHeader;
                    }
                    #endregion
                    #region Carga el footer del comprobante
                    #region Detalle Footer
                    DTO_ComprobanteFooter detalle = new DTO_ComprobanteFooter();
                    detalle.CuentaID.Value = coDoc.CuentaLOC.Value;
                    detalle.ProyectoID.Value = defProyecto;
                    detalle.CentroCostoID.Value = defCentroCosto;
                    detalle.LineaPresupuestoID.Value = defLineaPresupuesto;
                    detalle.LugarGeograficoID.Value = defLugarGeografico;
                    detalle.PrefijoCOM.Value = defPrefijo;
                    detalle.TerceroID.Value = credito.ClienteID.Value;
                    detalle.ConceptoCargoID.Value = defConceptoCargo;
                    detalle.ConceptoSaldoID.Value = coPlanCta.ConceptoSaldoID.Value;
                    detalle.TasaCambio.Value = tc;
                    detalle.Descriptivo.Value = "Abono Parcial a Prepago";
                    detalle.DocumentoCOM.Value = credito.NumeroDoc.Value.ToString();
                    detalle.vlrMdaLoc.Value = totalML;
                    detalle.vlrMdaExt.Value = 0;
                    detalle.vlrMdaOtr.Value = 0;
                    detalle.vlrBaseML.Value = 0;
                    detalle.vlrBaseME.Value = 0;
                    detalle.IdentificadorTR.Value = credito.NumeroDoc.Value.Value;
                    compFooter.Add(detalle);
                    #endregion
                    #region Detalle Contrapartida
                    DTO_ComprobanteFooter contrapartida = new DTO_ComprobanteFooter();
                    contrapartida.CuentaID.Value = cuentaID;
                    contrapartida.ProyectoID.Value = defProyecto;
                    contrapartida.CentroCostoID.Value = defCentroCosto;
                    contrapartida.LineaPresupuestoID.Value = defLineaPresupuesto;
                    contrapartida.LugarGeograficoID.Value = defLugarGeografico;
                    contrapartida.PrefijoCOM.Value = defPrefijo;
                    contrapartida.TerceroID.Value = credito.ClienteID.Value;
                    contrapartida.ConceptoCargoID.Value = defConceptoCargo;
                    contrapartida.ConceptoSaldoID.Value = coPlanCta.ConceptoSaldoID.Value;
                    contrapartida.TasaCambio.Value = tc;
                    contrapartida.DocumentoCOM.Value = credito.NumeroDoc.Value.ToString();
                    contrapartida.vlrMdaLoc.Value = totalML * -1;
                    contrapartida.vlrMdaExt.Value = 0;
                    contrapartida.vlrMdaOtr.Value = 0;
                    contrapartida.vlrBaseML.Value = 0;
                    contrapartida.vlrBaseME.Value = 0;
                    contrapartida.IdentificadorTR.Value = credito.NumeroDoc.Value.Value;
                    contrapartida.Descriptivo.Value = "Contra Partida Pago Parcial";
                    detalle.DatoAdd4.Value = AuxiliarDatoAdd4.Contrapartida.ToString();
                    compFooter.Add(contrapartida);
                    #endregion
                    //Valida que no existan mas de 2 registros (Primera Vez)
                    if (compFooter.Count == 2)
                        comprobante.Footer = compFooter;
                    #endregion
                    #region Guarda el recibo de caja

                    int numDocReciboCaja = 0;
                    if (!pagoTotalmente)
                        result = this._moduloTesoreria.ReciboCaja_Guardar(documentID, actFlujoID, ctrl, reciboCaja, comprobante, out numDocReciboCaja, DictionaryProgress.BatchProgress, false);
                    
                    #endregion
                }

                if (pagoTotalmente || !isPagoParcial)
                {
                    List<DTO_ccSaldosComponentes> saldosAll = new List<DTO_ccSaldosComponentes>();
                    credito.VlrAbonado.Value = ec_componentes.Sum(x => x.VlrAbonoPrevio.Value);
                    decimal? tmep = ec_componentes.Sum(x => x.AbonoValor.Value);

                    DTO_ccEstadoCuentaHistoria estadoCuentaHistoria = this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_GetByNumeroDoc(credito.DocEstadoCuenta.Value.Value);
                    credito.EC_PolizaMvto.Value = estadoCuentaHistoria.EC_PolizaMvto.Value;
                    List<DTO_ccCreditoPlanPagos> planPagos = this.LoadCreditoInfo_Pago(TipoRecaudo.PagoTotal, credito, estadoCuentaHistoria, componentesPago, saldosAll);
                    result = this.PagosCreditos_Parcial(TipoRecaudo.PagoTotal, documentID, actFlujoID, string.Empty, fechaDoc, fechaPago, reciboCaja, credito, planPagos,
                        componentesPago,saldosAll, "PAGO TOTAL CARTERA - CRE: ", false, compFooter);
                }

                if (result.Result == ResultValue.OK && isPagoParcial)
                {
                    // Actualiza los nuevos valores del estado de cuenta
                    int numDocEC = credito.DocEstadoCuenta.Value.Value;
                    result.ExtraField = numDocEC.ToString();
                    this._dal_ccEstadoCuentaComponentes.DAL_ccEstadoCuentaComponentes_Delete(numDocEC);
                    foreach (DTO_ccEstadoCuentaComponentes item in ec_componentes)
                        this._dal_ccEstadoCuentaComponentes.DAL_ccEstadoCuentaComponentes_Add(item);
                }
                else if (result.Result == ResultValue.OK && !isPagoParcial) 
                {
                    
                    result.ExtraField = credito.DocEstadoCuenta.Value.HasValue ? credito.DocEstadoCuenta.Value.ToString() : result.ExtraField;                  
                }

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "PagosCreditos_Total");
                return result;
            }
        }

        /// <summary>
        /// Revierte un pago de cartera
        /// </summary>
        /// <param name="documentID">Documento que genera la reversión</param>
        /// <param name="numeroDoc">Numero doc del pago a revertir</param>
        /// <param name="consecutivoPos">Posicion del los documentos en la lista. Lleva el control de los consecutivos (Null si es el primero)</param>
        /// <param name="ctrls">Documento de reversion</param>
        /// <param name="coComps">Comprobante (maestra) de reversion (si existe)</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult CarteraPagos_Revertir(int documentID, int numeroDoc, int? consecutivoPos, ref List<DTO_glDocumentoControl> ctrls,
            ref List<DTO_coComprobante> coComps, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Inicia las variables globales

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;

            if (!consecutivoPos.HasValue)
            {
                ctrls = new List<DTO_glDocumentoControl>();
                coComps = new List<DTO_coComprobante>();
            }

            #endregion
            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)this.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)this.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)this.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCJHistorico = (DAL_ccCJHistorico)base.GetInstance(typeof(DAL_ccCJHistorico), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                string periodoStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoStr);

                //Variables del credito
                DTO_glDocumentoControl ctrlPago = this._moduloGlobal.glDocumentoControl_GetByID(numeroDoc);
                int libranza = Convert.ToInt32(ctrlPago.DocumentoTercero.Value);
                DTO_ccCreditoDocu credito = this.GetCreditoByLibranza(libranza);

                #endregion
                #region Validaciones

                // Valida no se hayan pagado cuotas despues de la cuota a revertir
                long countPagosPost = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetByPagosForReversion(credito.NumeroDoc.Value.Value,numeroDoc);
                if (countPagosPost > 0)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_RevRecCuotasPagadas;
                    return result;
                }

                //Valida que no tenga otros movimientos
                int countMvtos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetTotalMovimientosPosteriores(libranza, ctrlPago.FechaDoc.Value.Value);
                if (countMvtos > 0)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_RevRecMvtos;
                    return result;
                }

                #endregion
                #region Revierte el documento

                result = this._moduloGlobal.glDocumentoControl_Revertir(documentID, numeroDoc, consecutivoPos, ref ctrls, ref coComps, true);
                if (result.Result == ResultValue.NOK)
                    return result;

                #endregion

                if (!consecutivoPos.HasValue)
                    consecutivoPos = 0;

                int numDocAnula = ctrls[consecutivoPos.Value].NumeroDoc.Value.Value;
                result = this.CarteraPagosPriv_Revertir(credito, numDocAnula, numeroDoc , periodo);

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "CarteraPagos_Revertir");

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Commit y consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        for (int i = 0; i < ctrls.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlAnula = ctrls[i];
                            DTO_coComprobante coCompAnula = coComps[i];

                            //Obtiene el consecutivo del comprobante (cuando existe)
                            ctrlAnula.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlAnula.DocumentoID.Value.Value, ctrlAnula.PrefijoID.Value);
                            if (coCompAnula != null)
                                ctrlAnula.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompAnula, ctrlAnula.PrefijoID.Value, ctrlAnula.PeriodoDoc.Value.Value, ctrlAnula.DocumentoNro.Value.Value);

                            this._moduloGlobal.ActualizaConsecutivos(ctrlAnula, true, coCompAnula != null, false);
                            if (coCompAnula != null)
                                this._moduloContabilidad.ActualizaComprobanteNro(ctrlAnula.NumeroDoc.Value.Value, ctrlAnula.ComprobanteIDNro.Value.Value, false);
                        }

                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #region Otras Operaciones Créditos

        /// <summary>
        /// Funcion que realiza el rechazo de un crédito
        /// </summary>
        /// <param name="documentID">Documento que ejecuta la transaccion</param>
        /// <param name="actFlujoID">Actividad de flujo</param>
        /// <param name="credito">Informacion basica del credito</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult Credito_Rechazo(int documentID, string actFlujoID, DTO_ccCreditoDocu credito, DateTime fecha, string bancoID, bool isAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Globales

            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            DTO_glDocumentoControl ctrlNew = null;
            DTO_Comprobante comprobante = null;
            DTO_coComprobante comp = null;
            #endregion
            try
            {
                #region Variables

                string periodoStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoStr);

                DTO_glDocumentoControl ctrlOld = this._moduloGlobal.glDocumentoControl_GetByID(credito.NumeroDoc.Value.Value);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string libroFunc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TipoBalanceFuncional);

                string coDocumentoRechazoID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocContableRechazos);
                int numDocNew = 0;
                decimal tc = 0;

                #endregion
                #region Validaciones

                //Valida que exista el coDocumento de rechazo
                if (string.IsNullOrWhiteSpace(coDocumentoRechazoID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocContableRechazos + "&&" + string.Empty;

                    return result;
                }

                //Valida la cuenta del documento de rechazos
                DTO_coDocumento docRechazo = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocumentoRechazoID, true, false);
                if(string.IsNullOrWhiteSpace(docRechazo.CuentaLOC.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocumentoRechazoID;

                    return result;
                }

                if (string.IsNullOrWhiteSpace(docRechazo.ComprobanteID.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;

                    return result;
                }
                else
                    comp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, docRechazo.ComprobanteID.Value, true, false);

                //Valida que no tenga otros movimientos
                List<int> docsMvtoBusqueda = new List<int>();
                docsMvtoBusqueda.Add(AppDocuments.Desistimiento);
                docsMvtoBusqueda.Add(AppDocuments.RecaudosManuales);
                docsMvtoBusqueda.Add(AppDocuments.RecaudosMasivos);
                docsMvtoBusqueda.Add(AppDocuments.PagosTotales);
                docsMvtoBusqueda.Add(AppDocuments.RechazoCredito);
                int countMvtos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetTotalMovimientos(credito.Libranza.Value.Value, docsMvtoBusqueda);
                if (countMvtos > 0)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_DesistimientoMvtos + "&&" + credito.Libranza.Value.Value.ToString();
                    return result;
                }

                #region Valida que el credito no tenga saldos
                DTO_ccCliente cliente = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, credito.ClienteID.Value, true, false);

                //Trae la CxP del credito
                DTO_glDocumentoControl filter = new DTO_glDocumentoControl();
                filter.DocumentoID.Value = AppDocuments.CausarFacturas;
                filter.TerceroID.Value = cliente.TerceroID.Value;
                filter.DocumentoPadre.Value = credito.NumeroDoc.Value;
                List<DTO_glDocumentoControl> docsCxP = this._moduloGlobal.glDocumentoControl_GetByParameter(filter);
                if (docsCxP.Count > 0)
                {
                    //Trae el saldo
                    List<DTO_SaldosVista> saldos = this._moduloContabilidad.Saldo_GetSaldosResumen(periodo, libroFunc, docsCxP.First().CuentaID.Value, cliente.TerceroID.Value, string.Empty,
                                                     string.Empty, string.Empty, string.Empty, string.Empty, docsCxP.First().NumeroDoc.Value);

                    decimal saldoML = saldos.Sum(s => s.SaldoIniML.Value.Value + s.CreditoML.Value.Value + s.DebitoML.Value.Value);
                    decimal saldoME = saldos.Sum(s => s.SaldoIniME.Value.Value + s.CreditoME.Value.Value + s.DebitoME.Value.Value);
                    if (saldoML != 0 || saldoME != 0)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_CreditoNoPagado;
                        return result;
                    }
                }
                else
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_CreditoNoCxP;
                    return result;
                }

                #endregion

                //Valida la tasa de cambio
                if (this.Multimoneda())
                    tc = this._moduloGlobal.TasaDeCambio_Get(ctrlOld.MonedaID.Value, fecha);

                #endregion
                #region Crea glDocumentoControl

                ctrlNew = new DTO_glDocumentoControl();
                ctrlNew.DocumentoNro.Value = 0;
                ctrlNew.DocumentoID.Value = documentID;
                ctrlNew.LugarGeograficoID.Value = ctrlOld.LugarGeograficoID.Value;
                ctrlNew.NumeroDoc.Value = 0;
                ctrlNew.DocumentoTipo.Value = (int)DocumentoTipo.DocInterno;
                ctrlNew.ComprobanteID.Value = docRechazo.ComprobanteID.Value;
                ctrlNew.Fecha.Value = DateTime.Now;
                ctrlNew.FechaDoc.Value = fecha;
                ctrlNew.PeriodoDoc.Value = periodo;
                ctrlNew.PeriodoUltMov.Value = periodo;
                ctrlNew.CuentaID.Value = docRechazo.CuentaLOC.Value;
                ctrlNew.AreaFuncionalID.Value = ctrlOld.AreaFuncionalID.Value;
                ctrlNew.PrefijoID.Value = ctrlOld.PrefijoID.Value;
                ctrlNew.ProyectoID.Value = ctrlOld.ProyectoID.Value;
                ctrlNew.CentroCostoID.Value = ctrlOld.CentroCostoID.Value;
                ctrlNew.LineaPresupuestoID.Value = ctrlOld.LineaPresupuestoID.Value;
                ctrlNew.TerceroID.Value = credito.ClienteID.Value;
                ctrlNew.DocumentoTercero.Value = credito.Libranza.Value.ToString();
                ctrlNew.MonedaID.Value = ctrlOld.MonedaID.Value;
                ctrlNew.TasaCambioCONT.Value = tc;
                ctrlNew.TasaCambioDOCU.Value = tc;
                ctrlNew.Observacion.Value = string.Empty;
                ctrlNew.Descripcion.Value = "RECHAZO CRE: " + credito.Libranza.Value;
                ctrlNew.Iva.Value = 0;
                ctrlNew.Valor.Value = credito.VlrGiro.Value;
                ctrlNew.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrlNew.seUsuarioID.Value = this.UserId;

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlNew, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);

                    return result;
                }
                numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrlNew.NumeroDoc.Value = numDocNew;

                #endregion
                #region Actualiza el crédito

                credito.DocRechazo.Value = numDocNew;
                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);

                #endregion
                #region Genera el comprobante

                comprobante = new DTO_Comprobante();

                //Header
                DTO_ComprobanteHeader header = new DTO_ComprobanteHeader();
                header.ComprobanteID.Value = docRechazo.ComprobanteID.Value;
                header.ComprobanteNro.Value = 0;
                header.Fecha.Value = fecha;
                header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                header.MdaTransacc.Value = ctrlNew.MonedaID.Value;
                header.NumeroDoc.Value = ctrlNew.NumeroDoc.Value;
                header.PeriodoID.Value = periodo;
                header.TasaCambioBase.Value = tc;
                header.TasaCambioOtr.Value = tc;
                comprobante.Header = header;

                //Valores
                decimal vlrML = credito.VlrGiro.Value.Value;
                decimal vlrME = 0;
                if(tc != 0)
                    vlrME = Math.Round(vlrML / tc, 2);

                //DB
                DTO_tsBancosCuenta banco = (DTO_tsBancosCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.tsBancosCuenta, bancoID, true, false);
                DTO_coDocumento docBanco = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, banco.coDocumentoID.Value, true, false);
                DTO_coPlanCuenta ctaDB = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, docBanco.CuentaLOC.Value, true, false);
                DTO_glConceptoSaldo cSaldoDB = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, ctaDB.ConceptoSaldoID.Value, true, false);
                DTO_ComprobanteFooter partida = this.CrearComprobanteFooter(ctrlNew, ctaDB, cSaldoDB, tc, concCargoXdef, lgXdef, lineaXdef, vlrML, vlrME, false);
                partida.Descriptivo.Value = "RECHAZO CREDITO";
                comprobante.Footer.Add(partida);

                //CR
                DTO_coPlanCuenta ctaCR = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, docRechazo.CuentaLOC.Value, true, false);
                DTO_glConceptoSaldo cSaldoCR = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, ctaCR.ConceptoSaldoID.Value, true, false);
                DTO_ComprobanteFooter contra = this.CrearComprobanteFooter(ctrlOld, ctaCR, cSaldoCR, tc, concCargoXdef, lgXdef, lineaXdef, vlrML * -1, vlrME * -1, false);
                contra.Descriptivo.Value = "RECHAZO CREDITO";
                comprobante.Footer.Add(contra);

                result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobante, periodo, ModulesPrefix.cc, 0, false);

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Credito_Rechazo");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrlNew.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlNew.PrefijoID.Value);
                        ctrlNew.ComprobanteIDNro.Value = this.GenerarComprobanteNro(comp, ctrlNew.PrefijoID.Value, ctrlNew.PeriodoDoc.Value.Value, ctrlNew.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlNew, true, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlNew.NumeroDoc.Value.Value, ctrlNew.ComprobanteIDNro.Value.Value, false);
                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Funcion que realiza el desistimiento de un crédito
        /// </summary>
        /// <param name="documentID">Documento que ejecuta la transaccione</param>
        /// <param name="actFlujoID">Actividad de flujo</param>
        /// <param name="reciboCaja">Recibo de caja</param>
        /// <param name="credito">Informacion basica del credito</param>
        /// <param name="componentesPago">Lista de los componentes de cada cuota</param> List<DTO_ccCreditoComponentes> componentes
        /// <param name="isPagoParcial">Indica si se esta realizando un pago parcial</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult Credito_Desistimiento(int documentID, string actFlujoID, DTO_ccCreditoDocu credito, DateTime fecha, bool isAnotherTx) //List<DTO_ccSaldosComponentes> componentesPago)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Globales
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            DTO_glDocumentoControl ctrlNew = null;
            DTO_Comprobante comprobante = null;
            DTO_coComprobante comp = null;
            #endregion
            try
            {
                #region Variables
                string periodoStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoStr);

                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string libroFunc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TipoBalanceFuncional);

                string coDocumentoDesistimientoID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocContableDesistimiento);
                string coDocumentoRechazoID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocContableRechazos);
                string coDocumentoLiquidac = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoDocumentoCredito);

                DTO_glDocumentoControl ctrlOld = this._moduloGlobal.glDocumentoControl_GetByID(credito.NumeroDoc.Value.Value);

                #endregion
                #region Validaciones

                //Valida que exista el coDocumento
                if (string.IsNullOrWhiteSpace(coDocumentoDesistimientoID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocContableDesistimiento + "&&" + string.Empty;

                    return result;
                }

                //Valida que exista el coDocumento de rechazo
                if (string.IsNullOrWhiteSpace(coDocumentoRechazoID))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocContableRechazos + "&&" + string.Empty;

                    return result;
                }

                //Valida que exista el coDocumento de Liqquidacion
                if (string.IsNullOrWhiteSpace(coDocumentoLiquidac))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CodigoDocumentoCredito + "&&" + string.Empty;

                    return result;
                }
                //Valida la cuenta del documento de rechazos
                DTO_coDocumento docRechazo = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocumentoRechazoID, true, false);
                if (string.IsNullOrWhiteSpace(docRechazo.CuentaLOC.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocumentoRechazoID;

                    return result;
                }

                //Valida que tenga el comprobante
                if (string.IsNullOrWhiteSpace(docRechazo.ComprobanteID.Value))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;

                    return result;
                }
                else
                    comp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, docRechazo.ComprobanteID.Value, true, false);

                ////Valida que no tenga otros movimientos
                //bool hasRechazo = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_HasMovimiento(credito.Libranza.Value.Value, AppDocuments.RechazoCredito);
                //if (! > 0)
                //{
                //    result.Result = ResultValue.NOK;
                //    result.ResultMessage = DictionaryMessages.Err_Cc_DesistimientoNoRechazo;
                //    return result;
                //}

                //Valida el saldo de la cuenta de rechazos
                DTO_ccCliente cliente = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, credito.ClienteID.Value, true, false);

                DTO_coCuentaSaldo saldoFilter = new DTO_coCuentaSaldo();
                saldoFilter.PeriodoID.Value = periodo;
                saldoFilter.BalanceTipoID.Value = libroFunc;
                saldoFilter.CuentaID.Value = docRechazo.CuentaLOC.Value;
                saldoFilter.TerceroID.Value = cliente.TerceroID.Value;
                saldoFilter.IdentificadorTR.Value = credito.NumeroDoc.Value;
                List<DTO_coCuentaSaldo> saldosRechazos = this._moduloContabilidad.Saldos_GetByParameter(saldoFilter);
                decimal saldoRechazo = saldosRechazos.Sum(x => x.DbOrigenLocML.Value.Value + x.DbOrigenExtML.Value.Value + x.CrOrigenLocML.Value.Value +
                    x.CrOrigenExtML.Value.Value + x.DbSaldoIniLocML.Value.Value + x.DbSaldoIniExtML.Value.Value + x.CrSaldoIniLocML.Value.Value + x.CrSaldoIniExtML.Value.Value);

                saldoRechazo *= -1;
                if (saldoRechazo != credito.VlrGiro.Value.Value)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_DesistimientoRechazo + "&&" + credito.VlrGiro.Value.Value.ToString("c")
                        + "&&" + credito.Libranza.Value.Value.ToString() + "&&" + saldoRechazo.ToString("c");
                    return result;
                }

                #endregion
                #region Crea glDocumentoControl

                ctrlNew = ObjectCopier.Clone(ctrlOld);
                ctrlNew.DocumentoNro.Value = 0;
                ctrlNew.DocumentoID.Value = documentID;
                ctrlNew.NumeroDoc.Value = 0;
                ctrlNew.DocumentoTipo.Value = (int)DocumentoTipo.DocInterno;
                ctrlNew.ComprobanteID.Value = docRechazo.ComprobanteID.Value;
                ctrlNew.ComprobanteIDNro.Value = 0;
                ctrlNew.Fecha.Value = DateTime.Now;
                ctrlNew.FechaDoc.Value = fecha;
                ctrlNew.PeriodoDoc.Value = periodo;
                ctrlNew.PeriodoUltMov.Value = periodo;
                ctrlNew.CuentaID.Value = docRechazo.CuentaLOC.Value;
                ctrlNew.Observacion.Value = string.Empty;
                ctrlNew.Descripcion.Value = "DESISTIMIENTO CRE: " + credito.Libranza.Value;
                ctrlNew.Valor.Value = credito.VlrGiro.Value;
                ctrlNew.seUsuarioID.Value = this.UserId;

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlNew, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);

                    return result;
                }
                int numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrlNew.NumeroDoc.Value = numDocNew;

                #endregion
                #region Guarda los movimientos de cartera

                List<DTO_ccCreditoComponentes> credComps = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(numDocNew);
                foreach (DTO_ccCreditoComponentes c in credComps)
                {
                    DTO_ccCarteraComponente componente = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, c.ComponenteCarteraID.Value, true, false);
                    DTO_ccCarteraMvto mvto = new DTO_ccCarteraMvto();
                    mvto.NumCredito.Value = numDocNew;
                    mvto.NumeroDoc.Value = numDocNew;
                    mvto.ComponenteCarteraID.Value = c.ComponenteCarteraID.Value;
                    mvto.Tasa.Value = 0;
                    mvto.VlrAbono.Value = 0;
                    mvto.VlrComponente.Value = (componente.TipoComponente.Value == (byte)TipoComponente.CapitalSolicitado || componente.TipoComponente.Value == (byte)TipoComponente.ComponenteCuota) ? c.TotalValor.Value : 0;
                    mvto.VlrComponente.Value *= -1;

                    this.ccCarteraMvto_Add(mvto);
                }

                #endregion
                #region Genera el comprobante
                DTO_coDocumento coDocLiquida = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocumentoLiquidac, true, false);

                //Comprobante original
                DTO_Comprobante compOld = this._moduloContabilidad.Comprobante_Get(true, false, ctrlOld.PeriodoDoc.Value.Value, ctrlOld.ComprobanteID.Value,
                    ctrlOld.ComprobanteIDNro.Value.Value, null, null);

                comprobante = ObjectCopier.Clone(compOld);
                comprobante.Header.NumeroDoc.Value = numDocNew;
                comprobante.Header.ComprobanteID.Value = comp.ID.Value;
                comprobante.Header.ComprobanteNro.Value = 0;
                comprobante.Header.PeriodoID.Value = periodo;
                comprobante.Header.Fecha.Value = fecha;

                foreach (DTO_ComprobanteFooter det in comprobante.Footer)
                {
                    det.vlrBaseML.Value = det.vlrBaseML.Value * -1;
                    det.vlrBaseME.Value = det.vlrBaseME.Value * -1;
                    det.vlrMdaLoc.Value = det.vlrMdaLoc.Value * -1;
                    det.vlrMdaExt.Value = det.vlrMdaExt.Value * -1;
                    det.vlrMdaOtr.Value = det.vlrMdaOtr.Value * -1;

                    string prefDesc = "Desistimiento Comp - ";

                    det.Descriptivo.Value = prefDesc + det.Descriptivo.Value;
                    if (det.CuentaID.Value == coDocLiquida.CuentaLOC.Value)
                        det.CuentaID.Value = docRechazo.CuentaLOC.Value;
                }

                //Busca y actualiza la cuenta de balance
                DTO_ComprobanteFooter detContraBalance = comprobante.Footer.FirstOrDefault(c => c.CuentaID.Value == docRechazo.CuentaLOC.Value);
                if(detContraBalance != null)
                {
                    DTO_coPlanCuenta cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctrlNew.CuentaID.Value, true, false);
                    DTO_glConceptoSaldo cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);

                    DTO_ComprobanteFooter nuevaContra = this.CrearComprobanteFooter(ctrlNew, cta, cSaldo, ctrlNew.TasaCambioDOCU.Value.Value, concCargoXdef, lgXdef, lineaXdef,
                        detContraBalance.vlrMdaLoc.Value.Value, detContraBalance.vlrMdaExt.Value.Value, false);

                    detContraBalance = nuevaContra;
                }

                result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobante, periodo, ModulesPrefix.cc, 0, false);

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Credito_Desistimiento");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrlNew.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlNew.PrefijoID.Value);
                        ctrlNew.ComprobanteIDNro.Value = this.GenerarComprobanteNro(comp, ctrlNew.PrefijoID.Value, ctrlNew.PeriodoDoc.Value.Value, ctrlNew.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlNew, true, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlNew.NumeroDoc.Value.Value, ctrlNew.ComprobanteIDNro.Value.Value, false);
                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }
        
        /// <summary>
        /// Funcion que realiza el desistimiento de un crédito
        /// </summary>
        /// <param name="documentID">Documento que ejecuta la transaccione</param>
        /// <param name="credito">Informacion basica del credito</param>
        /// <param name="centroPagoID">Identificador del nuevo centro de pago</param>
        /// <param name="ciudadID">Identificador de la ciudad</param>
        /// <param name="pagaduriaID">Identificador de la pagaduría</param>
        /// <param name="zonaID">Identificador de la zona</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult Credito_CambioDatos(int documentID, DTO_ccCreditoDocu credito, string centroPagoID, string pagaduriaID, string zonaID, string ciudadID, 
            string cooperativaID, string novedad, string estadoCobranza, string gestionCobranza, string estadoSinisestro, string obs, bool isAnotherTx)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            try
            {
                #region Variables

                this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                string componentePagaduriaID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePagaduria);

                #endregion
                #region Actualiza el crédito

                credito.CentroPagoID.Value = centroPagoID;
                credito.PagaduriaID.Value = pagaduriaID;
                credito.ZonaID.Value = zonaID;
                credito.Ciudad.Value = ciudadID;
                credito.CooperativaID.Value = cooperativaID;
                credito.NovedadIncorporaID.Value = novedad;
                credito.CobranzaEstadoID.Value = estadoCobranza;
                credito.CobranzaGestionID.Value = gestionCobranza;
                credito.SiniestroEstadoID.Value = estadoSinisestro;
                credito.Observacion.Value = credito.Observacion.Value + "\n" + obs;

                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);

                #endregion
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Credito_Desistimiento");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Revierte el desistimiento de un crédito
        /// </summary>
        /// <param name="documentID">Documento que genera la reversión</param>
        /// <param name="numeroDoc">Numero doc del pago a revertir</param>
        /// <param name="consecutivoPos">Posicion del los documentos en la lista. Lleva el control de los consecutivos (Null si es el primero)</param>
        /// <param name="ctrls">Documento de reversion</param>
        /// <param name="coComps">Comprobante (maestra) de reversion (si existe)</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult Credito_Desistimiento_Revertir(int documentID, int numeroDoc, int? consecutivoPos, ref List<DTO_glDocumentoControl> ctrls,
            ref List<DTO_coComprobante> coComps, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Inicia las variables globales

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;

            if (!consecutivoPos.HasValue)
            {
                ctrls = new List<DTO_glDocumentoControl>();
                coComps = new List<DTO_coComprobante>();
            }

            #endregion
            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DTO_glDocumentoControl ctrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(numeroDoc);

                #endregion
                #region Revierte el documento

                result = this._moduloGlobal.glDocumentoControl_Revertir(documentID, numeroDoc, consecutivoPos, ref ctrls, ref coComps, true);
                if (result.Result == ResultValue.NOK)
                    return result;

                if (!consecutivoPos.HasValue)
                    consecutivoPos = 0;

                #endregion
                #region Revierte los movimientos de la cartera

                this.ccCarteraMvto_Revertir(ctrlCredito.NumeroDoc.Value.Value, numeroDoc, ctrls[consecutivoPos.Value].NumeroDoc.Value.Value);

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "LiquidacionCredito_Revertir");

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Commit y consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        for (int i = 0; i < ctrls.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlAnula = ctrls[i];
                            DTO_coComprobante coCompAnula = coComps[i];

                            //Obtiene el consecutivo del comprobante (cuando existe)
                            ctrlAnula.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlAnula.DocumentoID.Value.Value, ctrlAnula.PrefijoID.Value);
                            if (coCompAnula != null)
                                ctrlAnula.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompAnula, ctrlAnula.PrefijoID.Value, ctrlAnula.PeriodoDoc.Value.Value, ctrlAnula.DocumentoNro.Value.Value);

                            this._moduloGlobal.ActualizaConsecutivos(ctrlAnula, true, coCompAnula != null, false);
                            if (coCompAnula != null)
                                this._moduloContabilidad.ActualizaComprobanteNro(ctrlAnula.NumeroDoc.Value.Value, ctrlAnula.ComprobanteIDNro.Value.Value, false);
                        }

                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Trae el saldo de un crédito
        /// </summary>
        /// <returns>retorna una el saldo de un crédito</returns>
        public decimal Credito_GetSaldoFlujos(int numeroDoc, out int flujosPagados)
        {
            this._dal_ccFlujoCesionDeta = (DAL_ccFlujoCesionDeta)base.GetInstance(typeof(DAL_ccFlujoCesionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccFlujoCesionDeta.DAL_ccFlujoCesionDeta_GetSaldo(numeroDoc, out flujosPagados);
        }

        #endregion

        #region Incorporaciones

        #region Incorporacion

        #region Funciones Privadas

        /// <summary>
        /// Trae todos los registros de DTO_ccIncorporacionDeta
        /// </summary>
        /// <param name="numDocCredito">Identificador unico del credito</param>
        /// <returns>retorna una lista de DTO_ccIncorporacionDeta</returns>
        private bool IncorporacionCredito_HasIncorporaciones(int numDocCredito)
        {
            try
            {
                this._dal_ccIncorporacionDeta = (DAL_ccIncorporacionDeta)this.GetInstance(typeof(DAL_ccIncorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return _dal_ccIncorporacionDeta.DAL_ccIncorporacionDeta_HasIncorporaciones(numDocCredito);
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "IncorporacionCredito_HasIncorporaciones");
                throw exception;
            }
        }

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="documentID"></param>
        /// <param name="sol"></param>
        /// <param name="docCtrl"></param>
        private DTO_TxResult Incorporacion_AprobarPriv(int documentID, string actFlujoID, int libranza, DateTime fechaIncorpora, decimal vlrCuota, byte? numeroInc,
            Int16 plazoInc, string novedadIncorporaID, byte? tipoNovedad, byte origenDato, int numDocNew, bool isCredito, bool insideAnotherTx, int consecReinc = 0)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccIncorporacionDeta = (DAL_ccIncorporacionDeta)base.GetInstance(typeof(DAL_ccIncorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccReincorporacionDeta = (DAL_ccReincorporacionDeta)base.GetInstance(typeof(DAL_ccReincorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();

            try
            {
                #region Variables

                int numDoc;
                string observacion = string.Empty;
                string cliente = string.Empty;
                string centroPagoID = string.Empty;
                string pagaduriaID = string.Empty;
                DateTime fechaCuota1;
                decimal vlrLibranza = 0;

                #endregion
                #region Actualiza la solicitud o el credito
                if (isCredito)
                {
                    //Trae el crédito
                    DTO_ccCreditoDocu credito = this.GetCreditoByLibranza(libranza);

                    //Carga las variables
                    numDoc = credito.NumeroDoc.Value.Value;
                    observacion = credito.Observacion.Value;
                    cliente = credito.ClienteID.Value;
                    centroPagoID = credito.CentroPagoID.Value;
                    pagaduriaID = credito.PagaduriaID.Value;
                    fechaCuota1 = credito.FechaCuota1.Value.Value;
                    vlrCuota = credito.VlrCuota.Value.Value;
                    vlrLibranza = credito.VlrLibranza.Value.Value;

                    //Actualiza el crédito
                    credito.NumIncorporaDoc.Value = numDocNew;
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                }
                else
                {
                    //Trae la solicitud
                    DTO_ccSolicitudDocu solicitud = this.GetSolicitudByLibranza(libranza);

                    //Carga las variables
                    numDoc = solicitud.NumeroDoc.Value.Value;
                    observacion = solicitud.Observacion.Value;
                    cliente = solicitud.ClienteID.Value;
                    centroPagoID = solicitud.CentroPagoID.Value;
                    pagaduriaID = solicitud.PagaduriaID.Value;
                    fechaCuota1 = solicitud.FechaCuota1.Value.Value;
                    vlrCuota = solicitud.VlrCuota.Value.Value;
                    vlrLibranza = solicitud.VlrLibranza.Value.Value;

                    //Actualiza la
                    solicitud.NumDocIncorporacion.Value = numDocNew;
                    this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_Update(solicitud);
                }
                #endregion
                #region Asigna el nuevo flujo y actualiza el estado del documento
                result = this.AsignarFlujo(documentID, numDoc, actFlujoID, false, observacion);
                if (result.Result == ResultValue.NOK)
                    return result;
                #endregion
                #region Crear el registo en ccIncorporacionDeta
                
                DTO_ccIncorporacionDeta incorpDeta = new DTO_ccIncorporacionDeta();
                incorpDeta.NumeroDoc.Value = numDocNew;
                incorpDeta.CentroPagoID.Value = centroPagoID;
                incorpDeta.PagaduriaID.Value = pagaduriaID;
                incorpDeta.FechaNovedad.Value = fechaIncorpora;
                incorpDeta.FechaCuota1.Value = fechaCuota1;
                incorpDeta.ValorCuota.Value = vlrCuota;
                incorpDeta.NumDocNomina.Value = 0;
                incorpDeta.ValorNomina.Value = vlrLibranza;
                incorpDeta.Observacion.Value = observacion;
                incorpDeta.TipoNovedad.Value = tipoNovedad;
                incorpDeta.NumeroINC.Value = numeroInc;
                incorpDeta.PlazoINC.Value = plazoInc;
                incorpDeta.NovedadIncorporaID.Value = novedadIncorporaID;
                incorpDeta.OrigenDato.Value = origenDato;

                if (isCredito)
                {
                    incorpDeta.NumDocCredito.Value = numDoc;
                    incorpDeta.IncPreviaInd.Value = false;

                    if (consecReinc != 0)
                    {
                        DTO_ccReincorporacionDeta reinc = this._dal_ccReincorporacionDeta.DAL_ccReincorporacionDeta_GetByConsec(consecReinc);
                        if (reinc != null)
                        {
                            reinc.ConsIncorpora.Value = numDocNew;
                            this._dal_ccReincorporacionDeta.DAL_ccReincorporacionDeta_Update(reinc);
                        }  
                    }                  
                }
                else
                {
                    incorpDeta.NumDocSolicitud.Value = numDoc;
                    incorpDeta.IncPreviaInd.Value = true;
                }

                this._dal_ccIncorporacionDeta.DAL_ccIncorporacionDeta_Add(incorpDeta);
                #endregion
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Incorporacion_Aprobar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Rertorna los pagaduria inválidas en una fechade incorporación
        /// </summary>
        /// <returns></returns>
        public List<string> IncorporacionCredito_GetInvalidPagadurias(DateTime fechaIncorpora)
        {
            this._dal_ccIncorporacionDeta = (DAL_ccIncorporacionDeta)this.GetInstance(typeof(DAL_ccIncorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return _dal_ccIncorporacionDeta.DAL_ccIncorporacionDeta_GetInvalidPagadurias(fechaIncorpora);
        }

        /// <summary>
        /// Funcion que consulta las solicitudes que estan en estado de incorporacion previa activado
        /// </summary>
        /// <param name="centroPago">Centro de pago que se usa para consultar</param>
        /// <param name="isVerificacion">Indica si la operacion es la de verificacion o no</param>
        /// <param name="tipoVerificacion">Indica el tipo de verificacion</param>
        /// <returns>Retorna una lista con las solicitudes de credito para incorporacion segun la pagaduria</returns>
        public List<DTO_ccSolicitudDocu> IncorporacionSolicitud_GetByCentroPago(string centroPago, DateTime fechaIncorpora, string actFlujoID)
        {
            try
            {
                //Carga la actividad de la entraga de libranzas
                if (String.IsNullOrWhiteSpace(actFlujoID))
                {
                    this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.EntregaLibranza);
                    if (actividades.Count == 0)
                        return new List<DTO_ccSolicitudDocu>();

                    actFlujoID = actividades[0];
                }

                this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)this.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return _dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetForIncorporacionPrevia(actFlujoID, centroPago, fechaIncorpora);
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "IncorporacionSolicitud_GetByCentroPago");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que consulta las solicitudes que estan en estado de incorporacion previa activado
        /// </summary>
        /// <param name="centroPago">Centro de pago que se usa para consultar</param>
        /// <param name="isVerificacion">Indica si la operacion es la de verificacion o no</param>
        /// <param name="tipoVerificacion">Indica el tipo de verificacion</param>
        /// <returns>Retorna una lista con las solicitudes de credito para incorporacion segun la pagaduria</returns>
        public List<DTO_ccSolicitudDocu> IncorporacionSolicitudVerificacion_GetByCentroPago(string centroPago, string actFlujoID, int tipoVerificacion)
        {
            try
            {
                //Carga la actividad de la entraga de libranzas
                if (String.IsNullOrWhiteSpace(actFlujoID))
                {
                    this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.EntregaLibranza);
                    if (actividades.Count == 0)
                        return new List<DTO_ccSolicitudDocu>();

                    actFlujoID = actividades[0];
                }

                this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)this.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return _dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetForIncorporacionVerificacion(actFlujoID, centroPago, tipoVerificacion);
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "IncorporacionSolicitud_GetByCentroPago");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que consulta los creditos para incorporacion segun una pagaduria
        /// </summary>
        /// <param name="centroPago">Centro de pago que se usa para consultar</param>
        /// <param name="isVerificacion">Indica si la operacion es la de verificacion o no</param>
        /// <returns>Retorna una lista con los creditos para incorporacion segun la pagaduria</returns>
        public List<DTO_ccCreditoDocu> IncorporacionCredito_GetByCentroPago(string centroPago, DateTime fechaIncorpora, string actFlujoID, bool getPendientes)
        {
            try
            {
                //Carga la actividad de la entraga de libranzas
                if (String.IsNullOrWhiteSpace(actFlujoID))
                {
                    this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.EntregaLibranza);
                    if (actividades.Count == 0)
                        return new List<DTO_ccCreditoDocu>();

                    actFlujoID = actividades[0];
                }

                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                var results =  _dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosForIncorporacion(periodo, centroPago, fechaIncorpora, actFlujoID, getPendientes);
                return results;
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "IncorporacionCredito_GetByCentroPago");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que consulta los creditos para incorporacion segun una pagaduria
        /// </summary>
        /// <param name="centroPago">Centro de pago que se usa para consultar</param>
        /// <param name="isVerificacion">Indica si la operacion es la de verificacion o no</param>
        /// <returns>Retorna una lista con los creditos para incorporacion segun la pagaduria</returns>
        public List<DTO_ccCreditoDocu> IncorporacionCreditoVerificacion_GetByCentroPago(string centroPago, string actFlujoID)
        {
            try
            {
                //Carga la actividad de la entraga de libranzas
                if (String.IsNullOrWhiteSpace(actFlujoID))
                {
                    this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.EntregaLibranza);
                    if (actividades.Count == 0)
                        return new List<DTO_ccCreditoDocu>();

                    actFlujoID = actividades[0];
                }

                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return _dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosForIncorporacionVerificacion(periodo, centroPago, actFlujoID);
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "IncorporacionCredito_GetByCentroPago");
                throw exception;
            }
        }

        /// <summary>
        /// Retorna las incorporaciones por credito
        /// </summary>
        /// <returns></returns>
        public List<DTO_ccIncorporacionDeta> IncorporacionCredito_GetByNumDocCred(int numDocCredito)
        {
            this._dal_ccIncorporacionDeta = (DAL_ccIncorporacionDeta)this.GetInstance(typeof(DAL_ccIncorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return _dal_ccIncorporacionDeta.DAL_ccIncorporacionDeta_GetByNumDocCred(numDocCredito);
        }

        /// <summary>
        /// Realiza la incorporacion de los creditos o las solicitudes
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="documentID">Documento que ejecuta la transaccion</param>
        /// <param name="CentroPago">Id del centro de pago</param>
        /// <param name="fechaIncorpora">Fecha en la que se incorporan los creditos</param>
        /// <param name="vlrIncorporacion"> Valor total de la incorporacion</param>
        /// <param name="creditos">Lista de creditos que se estan incorporando</param>
        /// <param name="solicitudes">Lista de solicitudes que se estan incorporando</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public Tuple<int, List<DTO_SerializedObject>> IncorporacionCredito_Aprobar(int documentID, string actFlujoID, string centroPago, DateTime fechaIncorpora, 
            Decimal vlrIncorporacion, List<DTO_ccCreditoDocu> creditos, List<DTO_ccSolicitudDocu> solicitudes, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();
            Tuple<int, List<DTO_SerializedObject>> resultTuple;
            bool isValid = true;

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            try
            {
                #region Variables
                DTO_ccCentroPagoPAG centroPag = (DTO_ccCentroPagoPAG)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCentroPagoPAG, centroPago, true, false);
                DTO_ccPagaduria pagaduria = (DTO_ccPagaduria)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccPagaduria, centroPag.PagaduriaID.Value, true, false);
                string terceroID = pagaduria.TerceroID.Value;
                string documentoTercero = pagaduria.ID.Value;

                //Variables por defecto
                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string periodoCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoCartera);
                string monedaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);

                int i = 0;
                #endregion
                #region Crea glDocumentoControl
                DTO_glDocumentoControl ctrl = new DTO_glDocumentoControl();
                ctrl.DocumentoNro.Value = 0;
                ctrl.DocumentoID.Value = AppDocuments.Incorporacion;
                ctrl.LugarGeograficoID.Value = defLugarGeografico;
                ctrl.NumeroDoc.Value = 0;
                ctrl.DocumentoTipo.Value = (byte)DocumentoTipo.DocExterno;
                ctrl.FechaDoc.Value = fechaIncorpora;
                ctrl.Fecha.Value = DateTime.Now;
                ctrl.PeriodoDoc.Value = periodo;
                ctrl.PeriodoUltMov.Value = periodo;
                ctrl.AreaFuncionalID.Value = defArealFuncional;
                ctrl.PrefijoID.Value = defPrefijo;
                ctrl.ProyectoID.Value = defProyecto;
                ctrl.CentroCostoID.Value = defCentroCosto;
                ctrl.LineaPresupuestoID.Value = defLineaPresupuesto;
                ctrl.TerceroID.Value = terceroID;
                ctrl.DocumentoTercero.Value = documentoTercero;
                ctrl.MonedaID.Value = monedaLoc;
                ctrl.TasaCambioCONT.Value = 0;
                ctrl.TasaCambioDOCU.Value = 0;
                ctrl.Observacion.Value = String.Empty;
                ctrl.Descripcion.Value = "Incorporación a la pagaduria " + documentoTercero;
                ctrl.Iva.Value = 0;
                ctrl.Valor.Value = vlrIncorporacion;
                ctrl.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrl.seUsuarioID.Value = this.UserId;
                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.Incorporacion, ctrl, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }
                int numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrl.NumeroDoc.Value = numDocNew;
                #endregion
                #region Aprueba las solicitudes para incorporacion
                int libranza;
                decimal vlrCuota;
                byte? numeroInc;
                Int16 plazoInc;
                string novedadIncorporaID;
                byte? tipoNovedad;
                byte origenDato;
                foreach (DTO_ccSolicitudDocu solicitud in solicitudes)
                {
                    isValid = true;
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / solicitudes.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    try
                    {
                        if (solicitud.Aprobado.Value.Value)
                        {
                            libranza = solicitud.Libranza.Value.Value; 
                            vlrCuota = solicitud.VlrCuota.Value.Value; 
                            plazoInc = solicitud.Plazo.Value.Value; 
                            novedadIncorporaID = string.Empty;
                            origenDato = Convert.ToByte(OrigenDatoIncorporacion.Automatica);
                            numeroInc = null;
                            tipoNovedad = null;
                            result = this.Incorporacion_AprobarPriv(documentID, actFlujoID, libranza, fechaIncorpora, vlrCuota, numeroInc, plazoInc, novedadIncorporaID, 
                                tipoNovedad, origenDato,numDocNew, false, true);

                            if (result.Result == ResultValue.NOK)
                            {
                                isValid = false;
                                results.Add(result);
                            }
                            else
                            {
                                DTO_Alarma alarma = this.GetFirstMailInfo(solicitud.NumeroDoc.Value.Value, false);
                                results.Add(alarma);
                            }
                        }
                    }
                    catch (Exception exRech)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exRech, this.UserId.ToString(), "Incorporacion_AprobarRechazar (Rechazar)");
                        results.Add(result);
                    }
                }
                #endregion
                #region Aprueba o Rechaza los creditos para incorporacion
                foreach (DTO_ccCreditoDocu credito in creditos)
                {
                    isValid = true;
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / creditos.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    result.Result = ResultValue.NOK;

                    try
                    {
                        if (credito.Aprobado.Value.Value)
                        {
                            libranza = credito.Libranza.Value.Value;
                            vlrCuota = credito.VlrCuota.Value.Value;
                            numeroInc = credito.NumeroINC.Value;
                            plazoInc = credito.Plazo.Value.Value;
                            novedadIncorporaID = credito.NovedadIncorporaID.Value;
                            tipoNovedad = Convert.ToByte(credito.Otro.Value);
                            origenDato = Convert.ToByte(credito.Otro2.Value);
                            result = this.Incorporacion_AprobarPriv(documentID, actFlujoID, libranza, fechaIncorpora, vlrCuota, numeroInc, plazoInc, novedadIncorporaID,
                                tipoNovedad, origenDato, numDocNew, true, true,credito.ConsReinc.Value.Value);

                            if (result.Result == ResultValue.NOK)
                            {
                                isValid = false;
                                results.Add(result);
                            }
                            else
                            {
                                DTO_Alarma alarma = this.GetFirstMailInfo(credito.NumeroDoc.Value.Value, false);
                                results.Add(alarma);
                            }
                        }
                    }
                    catch (Exception exAprob)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exAprob, this.UserId.ToString(), "Incorporacion_AprobarRechazar (Aprobar)");
                        results.Add(result);
                    }
                }
                #endregion

                isValid = results.Any(c => c.GetType() == typeof(DTO_Alarma));

                if (isValid)
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(numDocNew, results);
                else
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                return resultTuple;
            }
            catch (Exception ex)
            {
                results.Clear();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Incorporacion_AprobarRechazar");
                results.Add(result);
                resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                return resultTuple;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Revierte una incorporación
        /// </summary>
        /// <param name="documentID">Documento que genera la reversión</param>
        /// <param name="numeroDoc">Numero doc del pago a revertir</param>
        /// <param name="consecutivoPos">Posicion del los documentos en la lista. Lleva el control de los consecutivos (Null si es el primero)</param>
        /// <param name="ctrls">Documento de reversion</param>
        /// <param name="coComps">Comprobante (maestra) de reversion (si existe)</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult IncorporacionCredito_Revertir(int documentID, int numeroDoc, int? consecutivoPos, ref List<DTO_glDocumentoControl> ctrls,
            ref List<DTO_coComprobante> coComps, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Inicia las variables globales

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;

            if (!consecutivoPos.HasValue)
            {
                ctrls = new List<DTO_glDocumentoControl>();
                coComps = new List<DTO_coComprobante>();
            }

            #endregion
            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)this.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                #endregion
                #region Revierte el documento

                result = this._moduloGlobal.glDocumentoControl_Revertir(documentID, numeroDoc, consecutivoPos, ref ctrls, ref coComps, true);
                if (result.Result == ResultValue.NOK)
                    return result;

                int numDocAnula = ctrls[consecutivoPos.Value].NumeroDoc.Value.Value;
                if (!consecutivoPos.HasValue)
                    consecutivoPos = 0;

                #endregion
                #region Actualiza el crédito o la solicitud

                DTO_ccCreditoDocu credito = this.GetCreditoByNumeroDoc(numeroDoc);
                if (credito != null)
                {
                    credito.NumDesIncorporaDoc.Value = null;
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                }
                else
                {
                    DTO_ccSolicitudDocu solicitud = this.GetSolicitudByNumeroDoc(numeroDoc);
                    solicitud.NumDocIncorporacion.Value = null;
                    this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_Update(solicitud);
                }

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DesIncorporacion_Revertir");

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Commit y consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        for (int i = 0; i < ctrls.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlAnula = ctrls[i];
                            DTO_coComprobante coCompAnula = coComps[i];

                            //Obtiene el consecutivo del comprobante (cuando existe)
                            ctrlAnula.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlAnula.DocumentoID.Value.Value, ctrlAnula.PrefijoID.Value);
                            if (coCompAnula != null)
                                ctrlAnula.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompAnula, ctrlAnula.PrefijoID.Value, ctrlAnula.PeriodoDoc.Value.Value, ctrlAnula.DocumentoNro.Value.Value);

                            this._moduloGlobal.ActualizaConsecutivos(ctrlAnula, true, coCompAnula != null, false);
                            if (coCompAnula != null)
                                this._moduloContabilidad.ActualizaComprobanteNro(ctrlAnula.NumeroDoc.Value.Value, ctrlAnula.ComprobanteIDNro.Value.Value, false);
                        }

                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #region Verificación Incorporación

        #region Funciones Privadas

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="documentID"></param>
        /// <param name="sol"></param>
        /// <param name="docCtrl"></param>
        private DTO_TxResult Verificacion_Aprobar(int documentID, string actFlujoID, int numDocNew, DTO_ccSolicitudDocu solicitud, DTO_ccCreditoDocu credito, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccIncorporacionDeta = (DAL_ccIncorporacionDeta)base.GetInstance(typeof(DAL_ccIncorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            DTO_TxResult result = new DTO_TxResult();

            try
            {
                #region Variables

                int numDoc = 0;
                string observacion = string.Empty;

                if (credito != null)
                {
                    numDoc = credito.NumeroDoc.Value.Value;
                    observacion = credito.Observacion.Value;
                }
                else
                {
                    numDoc = solicitud.NumeroDoc.Value.Value;
                    observacion = solicitud.Observacion.Value;
                }
                #endregion
                #region Asigna el nuevo flujo y actualiza el estado del documento
                this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, numDoc, EstadoDocControl.Aprobado, observacion, true);
                result = this.AsignarFlujo(documentID, numDoc, actFlujoID, false, observacion);
                if (result.Result == ResultValue.NOK)
                    return result;
                #endregion
                #region Actualiza la solicitud o el credito
                if (credito != null)
                {
                    credito.NumDocVerificado.Value = numDocNew;
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                }
                else
                {
                    solicitud.NumDocVerificado.Value = numDocNew;
                    this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_Update(solicitud);
                }
                #endregion
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Verificacion_Aprobar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="documentID"></param>
        /// <param name="sol"></param>
        /// <param name="docCtrl"></param>
        private DTO_TxResult Verificacion_Rechazar(int documentID, string actFlujoID, DTO_ccSolicitudDocu solicitud, DTO_ccCreditoDocu credito, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            try
            {
                #region Variables

                int numDoc = 0;
                string observacion = string.Empty;

                if (credito != null)
                {
                    numDoc = credito.NumeroDoc.Value.Value;
                    observacion = credito.Observacion.Value;
                }
                else
                {
                    numDoc = solicitud.NumeroDoc.Value.Value;
                    observacion = solicitud.Observacion.Value;
                }
                #endregion
                #region Cambia el estado del documento
                this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, numDoc, EstadoDocControl.Cerrado, observacion, true);
                #endregion
                #region Actualiza la solicitud o el credito
                if (credito != null)
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                else
                    this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_Update(solicitud);
                #endregion
                #region Asigna el nuevo flujo (cancela las alarmas)
                result = this.AsignarFlujo(documentID, numDoc, actFlujoID, true, observacion);
                #endregion
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Verificacion_Rechazar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Realiza la incorporacion de los creditos o las solicitudes
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="documentID">Documento que ejecuta la transaccion</param>
        /// <param name="CentroPago">Id del centro de pago</param>
        /// <param name="fechaVerificacion">Fecha en la que se verifica la incorporacion</param>
        /// <param name="vlrVerificacion"> Valor total de la verificacion</param>
        /// <param name="creditos">Lista de creditos que se estan incorporando</param>
        /// <param name="solicitudes">Lista de solicitudes que se estan incorporando</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public List<DTO_SerializedObject> VerificacionIncorporacion_AprobarRechazar(int documentID, string actFlujoID, string centroPago, DateTime fechaVerificacion, Decimal vlrVerificacion, List<DTO_ccCreditoDocu> creditos, List<DTO_ccSolicitudDocu> solicitudes, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();
            bool isValid = true;

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            try
            {
                #region Variables
                DTO_ccCentroPagoPAG centroPag = (DTO_ccCentroPagoPAG)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCentroPagoPAG, centroPago, true, false);
                DTO_ccPagaduria pagaduria = (DTO_ccPagaduria)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccPagaduria, centroPag.PagaduriaID.Value, true, false);
                string terceroID = pagaduria.TerceroID.Value;
                string documentoTercero = pagaduria.ID.Value;

                //Variables por defecto
                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string periodoCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoCartera);
                string monedaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                #endregion
                #region Crea glDocumentoControl
                DTO_glDocumentoControl ctrl = new DTO_glDocumentoControl();
                ctrl.DocumentoNro.Value = 0;
                ctrl.DocumentoID.Value = documentID;
                ctrl.LugarGeograficoID.Value = defLugarGeografico;
                ctrl.NumeroDoc.Value = 0;
                ctrl.DocumentoTipo.Value = (byte)DocumentoTipo.DocExterno;
                ctrl.FechaDoc.Value = fechaVerificacion;
                ctrl.Fecha.Value = DateTime.Now;
                ctrl.PeriodoDoc.Value = periodo;
                ctrl.PeriodoUltMov.Value = periodo;
                ctrl.AreaFuncionalID.Value = defArealFuncional;
                ctrl.PrefijoID.Value = defPrefijo;
                ctrl.ProyectoID.Value = defProyecto;
                ctrl.CentroCostoID.Value = defCentroCosto;
                ctrl.LineaPresupuestoID.Value = defLineaPresupuesto;
                ctrl.TerceroID.Value = terceroID;
                ctrl.DocumentoTercero.Value = documentoTercero;
                ctrl.MonedaID.Value = monedaLoc;
                ctrl.TasaCambioCONT.Value = 0;
                ctrl.TasaCambioDOCU.Value = 0;
                ctrl.Observacion.Value = String.Empty;
                ctrl.Descripcion.Value = "Verificación de incorporación a la pagaduria " + documentoTercero;
                ctrl.Iva.Value = 0;
                ctrl.Valor.Value = vlrVerificacion;
                ctrl.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrl.seUsuarioID.Value = this.UserId;
                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrl, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    return results;
                }
                int numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrl.NumeroDoc.Value = numDocNew;
                #endregion
                int i = 0;
                #region Aprueba o Rechaza las solicitudes para incorporacion
                foreach (DTO_ccSolicitudDocu solicitud in solicitudes)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / solicitudes.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    result.Result = ResultValue.NOK;
                    result.ResultMessage = string.Empty;

                    if (solicitud.Aprobado.Value.Value)
                    {
                        #region Aprobado
                        try
                        {
                            DTO_ccCreditoDocu credito = null;
                            result = this.Verificacion_Aprobar(documentID, actFlujoID, numDocNew, solicitud, credito, true);
                        }
                        catch (Exception exAprob)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exAprob, this.UserId.ToString(), "Verificacion_AprobarRechazar (Aprobar)");
                        }
                        #endregion
                    }
                    else if (solicitud.Rechazado.Value.Value)
                    {
                        #region Rechazado
                        try
                        {
                            DTO_ccCreditoDocu credito = null;
                            result = this.Verificacion_Rechazar(documentID, actFlujoID, solicitud, credito, true);
                        }
                        catch (Exception exRech)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exRech, this.UserId.ToString(), "Verificacion_AprobarRechazar (Rechazar)");
                        }
                        #endregion
                    }

                    if (result.Result == ResultValue.NOK)
                        results.Add(result);
                    else
                    {
                        DTO_Alarma alarma = this.GetFirstMailInfo(solicitud.NumeroDoc.Value.Value, false);
                        results.Add(alarma);
                    }
                }
                #endregion
                #region Aprueba o Rechaza los creditos para incorporacion
                foreach (DTO_ccCreditoDocu credito in creditos)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / creditos.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    result.Result = ResultValue.OK;
                    result.ResultMessage = string.Empty;

                    if (credito.Aprobado.Value.Value)
                    {
                        #region Aprobado
                        try
                        {
                            DTO_ccSolicitudDocu solicitud = null;
                            result = this.Verificacion_Aprobar(documentID, actFlujoID, numDocNew, solicitud, credito, true);
                        }
                        catch (Exception exAprob)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exAprob, this.UserId.ToString(), "Verificacion_AprobarRechazar (Aprobar)");
                        }
                        #endregion
                    }
                    else if (credito.Rechazado.Value.Value)
                    {
                        #region Rechazado
                        try
                        {
                            DTO_ccSolicitudDocu solicitud = null;
                            result = this.Verificacion_Rechazar(documentID, actFlujoID, solicitud, credito, true);
                        }
                        catch (Exception exRech)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exRech, this.UserId.ToString(), "Verificacion_AprobarRechazar (Rechazar)");
                        }
                        #endregion
                    }

                    if (result.Result == ResultValue.NOK)
                        results.Add(result);
                    else
                    {
                        DTO_Alarma alarma = this.GetFirstMailInfo(credito.NumeroDoc.Value.Value, false);
                        results.Add(alarma);
                    }
                }
                #endregion
                isValid = results.Any(c => c.GetType() == typeof(DTO_Alarma));
                return results;
            }
            catch (Exception ex)
            {
                results.Clear();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Verificacion_AprobarRechazar");
                results.Add(result);
                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }



        #endregion

        #endregion

        #region DesIncorporacion

        #region Funciones Privadas

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="documentID"></param>
        /// <param name="sol"></param>
        /// <param name="docCtrl"></param>
        private DTO_TxResult DesIncorporacion_Aprobar(int documentID, string actFlujoID, DTO_ccCreditoDocu credito, DateTime fechaNovedad, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccIncorporacionDeta = (DAL_ccIncorporacionDeta)base.GetInstance(typeof(DAL_ccIncorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            DTO_TxResult result = new DTO_TxResult();

            try
            {
                #region Variables

                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                int numDoc = credito.NumeroDoc.Value.Value;
                string observacion = credito.Observacion.Value;
                string cliente = credito.ClienteID.Value;
                string libranza = credito.Libranza.Value.ToString();
                decimal vlrLibranza = credito.VlrLibranza.Value.Value;

                #endregion

                DTO_glDocumentoControl ctrlOld = this._moduloGlobal.glDocumentoControl_GetByID(numDoc);

                #region Asigna el nuevo flujo y actualiza el estado del documento
                result = this.AsignarFlujo(documentID, numDoc, actFlujoID, false, observacion);
                if (result.Result == ResultValue.NOK)
                    return result;
                #endregion
                #region Crea glDocumentoControl
                DTO_glDocumentoControl ctrl = new DTO_glDocumentoControl();
                ctrl.DocumentoNro.Value = 0;
                ctrl.DocumentoID.Value = AppDocuments.DesIncorporacion;
                ctrl.LugarGeograficoID.Value = ctrlOld.LugarGeograficoID.Value;
                ctrl.NumeroDoc.Value = numDoc;
                ctrl.DocumentoTipo.Value = 0;
                ctrl.FechaDoc.Value = fechaNovedad;
                ctrl.Fecha.Value = credito.FechaDesIncorpora.Value;
                ctrl.PeriodoDoc.Value = periodo;
                ctrl.PeriodoUltMov.Value = periodo;
                ctrl.AreaFuncionalID.Value = ctrlOld.AreaFuncionalID.Value;
                ctrl.PrefijoID.Value = ctrlOld.PrefijoID.Value;
                ctrl.ProyectoID.Value = ctrlOld.ProyectoID.Value;
                ctrl.CentroCostoID.Value = ctrlOld.CentroCostoID.Value;
                ctrl.LineaPresupuestoID.Value = ctrlOld.LineaPresupuestoID.Value;
                ctrl.TerceroID.Value = cliente;
                ctrl.DocumentoTercero.Value = libranza;
                ctrl.PrefijoID.Value = ctrlOld.PrefijoID.Value;
                ctrl.MonedaID.Value = ctrlOld.MonedaID.Value;
                ctrl.TasaCambioCONT.Value = ctrlOld.TasaCambioCONT.Value;
                ctrl.TasaCambioDOCU.Value = ctrlOld.TasaCambioDOCU.Value;
                ctrl.Observacion.Value = observacion;
                ctrl.Descripcion.Value = "Des-Incorporación - Crédito " + libranza;
                ctrl.Valor.Value = vlrLibranza;
                ctrl.Iva.Value = 0;
                ctrl.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrl.seUsuarioID.Value = this.UserId;
                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.Incorporacion, ctrl, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    return result;
                }
                int numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrl.NumeroDoc.Value = numDocNew;
                #endregion
                #region Actualiza el credito
                credito.NumDesIncorporaDoc.Value = numDocNew;
                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                #endregion
                #region Crear el registo en ccIncorporacionDeta
                DTO_ccIncorporacionDeta incorpDeta = new DTO_ccIncorporacionDeta();
                incorpDeta.NumeroDoc.Value = numDocNew;
                incorpDeta.CentroPagoID.Value = credito.CentroPagoID.Value;
                incorpDeta.PagaduriaID.Value = credito.PagaduriaID.Value;
                incorpDeta.NumDocCredito.Value = numDoc;
                incorpDeta.FechaNovedad.Value = fechaNovedad;
                incorpDeta.FechaCuota1.Value = credito.FechaCuota1.Value;
                incorpDeta.ValorCuota.Value = credito.VlrCuota.Value;
                incorpDeta.NumDocNomina.Value = 0;
                incorpDeta.ValorNomina.Value = credito.VlrLibranza.Value;
                incorpDeta.TipoNovedad.Value = Convert.ToByte(credito.Otro1.Value);
                incorpDeta.Observacion.Value = observacion;
                incorpDeta.IncPreviaInd.Value = false;
                incorpDeta.NumeroINC.Value = 0;
                incorpDeta.PlazoINC.Value = credito.Plazo.Value;
                incorpDeta.NovedadIncorporaID.Value = credito.NovedadIncorporaID.Value;
                incorpDeta.OrigenDato.Value = Convert.ToByte(credito.Otro2.Value);

                this._dal_ccIncorporacionDeta.DAL_ccIncorporacionDeta_Add(incorpDeta);
                #endregion
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DesIncorporacion_Aprobar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Funcion que consulta los creditos para desincorporar que pertenecen a un centro de pago
        /// </summary>
        /// <param name="centroPago">Centro de pago que se usa para consultar</param>
        /// <returns>Retorna una lista con los creditos para incorporacion segun la pagaduria</returns>
        public List<DTO_ccCreditoDocu> DesIncorporacionCredito_Get()
        {
            try
            {
                //Carga la actividad de la entraga de libranzas
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.EntregaLibranza);
                if (actividades.Count == 0)
                    return new List<DTO_ccCreditoDocu>();

                string actFlujoEntregaLibranza = actividades[0];

                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));

                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return _dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosForDesIncorporacion(periodo, actFlujoEntregaLibranza);
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "DesIncorporacionCredito_Get");
                throw exception;
            }
        }

        /// <summary>
        /// Verifica en la lista que documentos estan para aprobar y rechazar, Actualiza la tarea si es aprobado.
        /// </summary>
        /// <param name="documentID">Documento que ejecula la transaccion</param>
        /// <param name="creditos">Listado de documentos</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public List<DTO_SerializedObject> DesIncorporacion_AprobarRechazar(int documentID, string actFlujoID, List<DTO_ccCreditoDocu> creditos, DateTime fechaNovedad, 
            Dictionary<Tuple<int, int>, int> batchProgress)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            try
            {
                int i = 0;
                #region Aprueba o Rechaza los creditos para incorporacion
                foreach (DTO_ccCreditoDocu credito in creditos)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / creditos.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    if (credito.Aprobado.Value.Value)
                    {
                        try
                        {
                            result = this.DesIncorporacion_Aprobar(documentID, actFlujoID, credito, fechaNovedad, false);
                        }
                        catch (Exception exAprob)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exAprob, this.UserId.ToString(), "DesIncorporacion_AprobarRechazar (Aprobar)");
                        }
                    }
                    else if (credito.Rechazado.Value.Value)
                    {
                        try
                        {
                            result = this.PantallaCredito_Rechazar(documentID, actFlujoID, credito, false, false);
                        }
                        catch (Exception exRech)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exRech, this.UserId.ToString(), "DesIncorporacion_AprobarRechazar (Rechazar)");
                        }
                    }

                    if (result.Result == ResultValue.NOK)
                        results.Add(result);
                    else
                    {
                        base._mySqlConnectionTx = null;
                        DTO_Alarma alarma = this.GetFirstMailInfo(credito.NumeroDoc.Value.Value, false);
                        results.Add(alarma);
                    }
                }
                #endregion
                return results;
            }
            catch (Exception ex)
            {
                results.Clear();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DesIncorporacion_AprobarRechazar");
                results.Add(result);
                return results;
            }
        }

        /// <summary>
        /// Revierte una desincorporacion
        /// </summary>
        /// <param name="documentID">Documento que genera la reversión</param>
        /// <param name="numeroDoc">Numero doc del pago a revertir</param>
        /// <param name="consecutivoPos">Posicion del los documentos en la lista. Lleva el control de los consecutivos (Null si es el primero)</param>
        /// <param name="ctrls">Documento de reversion</param>
        /// <param name="coComps">Comprobante (maestra) de reversion (si existe)</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult DesIncorporacion_Revertir(int documentID, int numeroDoc, int? consecutivoPos, ref List<DTO_glDocumentoControl> ctrls,
            ref List<DTO_coComprobante> coComps, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Inicia las variables globales

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;

            if (!consecutivoPos.HasValue)
            {
                ctrls = new List<DTO_glDocumentoControl>();
                coComps = new List<DTO_coComprobante>();
            }

            #endregion
            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)this.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
       
                DTO_ccCreditoDocu credito = this.GetCreditoByNumeroDoc(numeroDoc);

                #endregion
                #region Revierte el documento

                result = this._moduloGlobal.glDocumentoControl_Revertir(documentID, numeroDoc, consecutivoPos, ref ctrls, ref coComps, true);
                if (result.Result == ResultValue.NOK)
                    return result;

                int numDocAnula = ctrls[consecutivoPos.Value].NumeroDoc.Value.Value;
                if (!consecutivoPos.HasValue)
                    consecutivoPos = 0;

                #endregion
                #region Actualiza el crédito
                credito.NumDesIncorporaDoc.Value = null;
                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DesIncorporacion_Revertir");

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Commit y consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        for (int i = 0; i < ctrls.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlAnula = ctrls[i];
                            DTO_coComprobante coCompAnula = coComps[i];

                            //Obtiene el consecutivo del comprobante (cuando existe)
                            ctrlAnula.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlAnula.DocumentoID.Value.Value, ctrlAnula.PrefijoID.Value);
                            if (coCompAnula != null)
                                ctrlAnula.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompAnula, ctrlAnula.PrefijoID.Value, ctrlAnula.PeriodoDoc.Value.Value, ctrlAnula.DocumentoNro.Value.Value);

                            this._moduloGlobal.ActualizaConsecutivos(ctrlAnula, true, coCompAnula != null, false);
                            if (coCompAnula != null)
                                this._moduloContabilidad.ActualizaComprobanteNro(ctrlAnula.NumeroDoc.Value.Value, ctrlAnula.ComprobanteIDNro.Value.Value, false);
                        }

                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #region Reincorporacion

        /// <summary>
        /// Trae la información para hacer reincorporaciones
        /// </summary>
        /// <returns></returns>
        public List<DTO_ccReincorporacionDeta> Reincorporacion_GetForReincorporacion(DateTime periodo, string centroPagoID)
        {
            this._dal_ccReincorporacionDeta = (DAL_ccReincorporacionDeta)this.GetInstance(typeof(DAL_ccReincorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return _dal_ccReincorporacionDeta.DAL_ccReincorporacionDeta_GetForReincorporacion(periodo, centroPagoID);
        }

        /// <summary>
        /// Agrega reincorporaciones
        /// </summary>
        /// <returns></returns>
        public DTO_TxResult Reincorporacion_Aprobar(int documentID, string actFlujoID, DateTime periodo, DateTime fecha, List<DTO_ccReincorporacionDeta> data, 
            Dictionary<Tuple<int, int>, int> batchProgress, bool insideAnotherTx)
        {
           if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            DTO_glDocumentoControl ctrl = null;
            try
            {
                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccReincorporacionDeta = (DAL_ccReincorporacionDeta)this.GetInstance(typeof(DAL_ccReincorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                
                #region Validaciones

                int i = 1;
                foreach (DTO_ccReincorporacionDeta reincorporacion in data)
                {
                    if (reincorporacion.Aprobado.Value.Value)
                    {
                        //Valida que no se haya creado el registro en reincorpora deta
                        DTO_ccReincorporacionDeta aux = this._dal_ccReincorporacionDeta.DAL_ccReincorporacionDeta_GetByPK(reincorporacion.NumDocCredito.Value.Value, 
                            reincorporacion.PeriodoNomina.Value.Value, reincorporacion.CentroPagoID.Value, reincorporacion.CentroPagoModificaID.Value);
                        if (aux != null)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = "NOK";

                            DTO_TxResultDetail rd = new DTO_TxResultDetail();
                            rd.line = i;
                            rd.Message = DictionaryMessages.Err_Cc_ReincorporaAdded + "&&" + periodo.ToString(FormatString.Period) + "&&" +
                                reincorporacion.Libranza.Value.ToString() + "&&" + reincorporacion.CentroPagoID.Value.Trim() + "&&" +
                                reincorporacion.CentroPagoModificaID.Value.Trim();
                            result.Details.Add(rd);
                        }

                        if (!string.IsNullOrWhiteSpace(reincorporacion.CentroPagoModificaID.Value))
                        {
                            ////Region Valida que el cliente tenga asignada la pagaduria
                            //DTO_ccCliente cliente = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, reincorporacion.ClienteID.Value, true, false);
                            //if (reincorporacion.CentroPagoID.Value != reincorporacion.CentroPagoModificaID.Value
                            //    && reincorporacion.CentroPagoModificaID.Value != cliente.CentroPago1.Value
                            //    && reincorporacion.CentroPagoModificaID.Value != cliente.CentroPago2.Value
                            //    && reincorporacion.CentroPagoModificaID.Value != cliente.CentroPago3.Value)
                            //{
                            //    result.Result = ResultValue.NOK;
                            //    result.ResultMessage = "NOK";

                            //    DTO_TxResultDetail rd = new DTO_TxResultDetail();
                            //    rd.line = i;
                            //    rd.Message = DictionaryMessages.Err_Cc_ReincorporaInvalidCP;
                            //    result.Details.Add(rd);
                            //}
                        }
                    }
                    ++i;
                }

                if (result.Result == ResultValue.NOK)
                    return result;

                #endregion
                #region Crea glDocumentoControl

                ctrl = new DTO_glDocumentoControl();
                ctrl.DocumentoNro.Value = 0;
                ctrl.DocumentoID.Value = documentID;
                ctrl.DocumentoTipo.Value = (byte)DocumentoTipo.DocInterno;
                ctrl.FechaDoc.Value = DateTime.Now;
                ctrl.Fecha.Value = fecha;
                ctrl.PeriodoDoc.Value = periodo;
                ctrl.PeriodoUltMov.Value = periodo;
                ctrl.AreaFuncionalID.Value = this.GetAreaFuncionalByUser();
                ctrl.PrefijoID.Value = this.GetPrefijoByDocumento(documentID);
                ctrl.MonedaID.Value = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                ctrl.TasaCambioCONT.Value = 0;
                ctrl.TasaCambioDOCU.Value = 0;
                ctrl.Observacion.Value = "Reincorporación";
                ctrl.Descripcion.Value = "Reincorporación";
                ctrl.Valor.Value = 0;
                ctrl.Iva.Value = 0;
                ctrl.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrl.seUsuarioID.Value = this.UserId;
                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrl, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    return result;
                }
                int numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrl.NumeroDoc.Value = numDocNew;
                #endregion
             
                i = 0;
                foreach (DTO_ccReincorporacionDeta reincorporacion in data)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / data.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    //Agrega la reincorporacion
                    if (reincorporacion.Aprobado.Value.Value)
                    {
                        reincorporacion.NumeroDoc.Value = numDocNew;
                        this._dal_ccReincorporacionDeta.DAL_ccReincorporacionDeta_Add(reincorporacion);

                        if(!string.IsNullOrWhiteSpace(reincorporacion.NovedadIncorporaID.Value))
                        {
                            DTO_ccCreditoDocu cred = this.GetCreditoByLibranza(reincorporacion.Libranza.Value.Value);
                            cred.NovedadIncorporaID.Value = reincorporacion.NovedadIncorporaID.Value;

                            this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(cred);
                        }
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DesIncorporacion_AprobarRechazar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera el consecutivo
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;

                        //Consecutivos de liquidación
                        ctrl.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrl.PrefijoID.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrl, true, false, false);

                        #endregion
                    }
                    else if (documentID != AppDocuments.AprobacionSolicitudFin)
                        throw new Exception("Reincorporación - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Revierte una reincorporación
        /// </summary>
        /// <param name="documentID">Documento que genera la reversión</param>
        /// <param name="numeroDoc">Numero doc del pago a revertir</param>
        /// <param name="consecutivoPos">Posicion del los documentos en la lista. Lleva el control de los consecutivos (Null si es el primero)</param>
        /// <param name="ctrls">Documento de reversion</param>
        /// <param name="coComps">Comprobante (maestra) de reversion (si existe)</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult Reincorporacion_Revertir(int documentID, int numeroDoc, int? consecutivoPos, ref List<DTO_glDocumentoControl> ctrls,
            ref List<DTO_coComprobante> coComps, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Inicia las variables globales

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;

            if (!consecutivoPos.HasValue)
            {
                ctrls = new List<DTO_glDocumentoControl>();
                coComps = new List<DTO_coComprobante>();
            }

            #endregion
            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)this.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccReincorporacionDeta = (DAL_ccReincorporacionDeta)this.GetInstance(typeof(DAL_ccReincorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                #endregion
                #region Validaciones

                // Valida no se hayan pagado cuotas despues de la cuota a revertir
                List<DTO_ccReincorporacionDeta> reincorporaciones = this._dal_ccReincorporacionDeta.DAL_ccReincorporacionDeta_GetByNumeroDoc(numeroDoc);
                if (reincorporaciones.Any(r => r.ConsIncorpora.Value.HasValue && r.ConsIncorpora.Value.Value > 0))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_RevReIncConsIncorpora;
                    return result;
                }

                #endregion                
                #region Revierte el documento

                result = this._moduloGlobal.glDocumentoControl_Revertir(documentID, numeroDoc, consecutivoPos, ref ctrls, ref coComps, true);
                if (result.Result == ResultValue.NOK)
                    return result;

                int numDocAnula = ctrls[consecutivoPos.Value].NumeroDoc.Value.Value;
                if (!consecutivoPos.HasValue)
                    consecutivoPos = 0;

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DesIncorporacion_Revertir");

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Commit y consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        for (int i = 0; i < ctrls.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlAnula = ctrls[i];
                            DTO_coComprobante coCompAnula = coComps[i];

                            //Obtiene el consecutivo del comprobante (cuando existe)
                            ctrlAnula.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlAnula.DocumentoID.Value.Value, ctrlAnula.PrefijoID.Value);
                            if (coCompAnula != null)
                                ctrlAnula.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompAnula, ctrlAnula.PrefijoID.Value, ctrlAnula.PeriodoDoc.Value.Value, ctrlAnula.DocumentoNro.Value.Value);

                            this._moduloGlobal.ActualizaConsecutivos(ctrlAnula, true, coCompAnula != null, false);
                            if (coCompAnula != null)
                                this._moduloContabilidad.ActualizaComprobanteNro(ctrlAnula.NumeroDoc.Value.Value, ctrlAnula.ComprobanteIDNro.Value.Value, false);
                        }

                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Archivos Incorporacion

        /// <summary>
        /// Carga los creditos Incoporados
        /// </summary>
        /// <param name="fechaIncorpora">Fecha de Incoporacion</param>
        /// <param name="centroPago">Centro de pago para incorporacion</param>
        /// <param name="isLiquidacion">Revisa si es incoporacion Previa</param>
        /// <returns>Listado de creditos Incorporados</returns>
        public List<DTO_ccArchivoIncorporaciones> GetArchivosIncorporacion(DateTime fechaIncorpora, string centroPago)
        {
            string terceroCoop = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TerceroXDefecto);

            this._dal_ccIncorporacionDeta = (DAL_ccIncorporacionDeta)this.GetInstance(typeof(DAL_ccIncorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            List<DTO_ccArchivoIncorporaciones> incorporados = _dal_ccIncorporacionDeta.DAL_CreditosIncorporados(fechaIncorpora, centroPago, terceroCoop);

            return incorporados;
        }

        /// <summary>
        /// Actualiza los campos de la tabla ccIncorporacionDeta
        /// </summary>
        public void UpdateIncorporacionFechaTransmite(DateTime fechaTransmite, List<int> consecutivos, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccIncorporacionDeta = (DAL_ccIncorporacionDeta)base.GetInstance(typeof(DAL_ccIncorporacionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            bool isOK = true;
            try
            {
                foreach(int consecutivo in consecutivos)
                {
                    this._dal_ccIncorporacionDeta.DAL_ccIncorporacionDeta_UpdateFechaTransmite(consecutivo, fechaTransmite);
                }
            }
            catch (Exception ex)
            {
                isOK = false;
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "UpdateIncorporacionFechaTransmite");
            }
            finally
            {
                if (isOK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #region Venta Cartera

        #region Endoso Libranzas

        #region Funciones Privadas

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="documentID">Documento ID</param>
        /// <param name="ventaCredito">DTO con la informacion de ventaDeta</param>
        private DTO_TxResult EndosoLibranzaVendida_Aprobar(int documentID, string actFlujoID, DTO_ccVentaDeta ventaCredito, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();

            try
            {
                #region Actualiza Venta Docu
                if (!string.IsNullOrEmpty(ventaCredito.Observacion.Value))
                {
                    #region Actualiza el estado
                    this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, ventaCredito.NumeroDoc.Value.Value, EstadoDocControl.Aprobado, ventaCredito.Observacion.Value, true);
                    #endregion
                    //Actualiza ccVentaDocu
                    DTO_ccVentaDocu ventaDocu = this._dal_ccVentaDocu.DAL_ccVentaDocu_GetByID(ventaCredito.NumeroDoc.Value.Value);
                    ventaDocu.Observacion.Value = ventaCredito.Observacion.Value;
                    this._dal_ccVentaDocu.DAL_ccVentaDocu_Update(ventaDocu);
                }
                #endregion
                #region Asigna el nuevo flujo
                result = this.AsignarFlujo(documentID, ventaCredito.NumDocCredito.Value.Value, actFlujoID, false, ventaCredito.Observacion.Value);
                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "EndosoLibranzaVendida_Aprobar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Verifica en la lista que documentos estan para aprobar y rechazar, Actualiza la tarea si es aprobado.
        /// </summary>
        /// <param name="documentID">Documento que ejecula la transaccion</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="creditosVendidos">Lista de creditos para aprobar/rechazar</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public List<DTO_SerializedObject> EndosoLibranzasVendidas_AprobarRechazar(int documentID, string actFlujoID, List<DTO_ccVentaDeta> creditosVendidos, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            try
            {
                int i = 0;
                foreach (DTO_ccVentaDeta ventaDeta in creditosVendidos)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / creditosVendidos.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    if (ventaDeta.Aprobado.Value.Value)
                    {
                        try
                        {
                            result = this.EndosoLibranzaVendida_Aprobar(documentID, actFlujoID, ventaDeta, false);
                        }
                        catch (Exception exAprob)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exAprob, this.UserId.ToString(), "EndosoLibranzasVendidas_AprobarRechazar (Aprobar)");
                        }
                    }
                    else if (ventaDeta.Rechazado.Value.Value)
                    {
                        try
                        {
                            DTO_ccCreditoDocu crediTemp = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(ventaDeta.NumDocCredito.Value.Value);
                            result = this.PantallaCredito_Rechazar(documentID, actFlujoID, crediTemp, true, false);
                        }
                        catch (Exception exRech)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exRech, this.UserId.ToString(), "EndosoLibranzasVendidas_AprobarRechazar (Rechazar)");
                        }
                    }

                    if (result.Result == ResultValue.NOK)
                        results.Add(result);
                    else
                    {
                        base._mySqlConnectionTx = null;
                        DTO_Alarma alarma = this.GetFirstMailInfo(ventaDeta.NumeroDoc.Value.Value, false);
                        results.Add(alarma);
                    }
                }
                return results;
            }
            catch (Exception ex)
            {
                results.Clear();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "EndosoLibranzasVendidas_AprobarRechazar");
                results.Add(result);
                return results;
            }
        }

        #endregion

        #endregion

        #region Preventa Cartera

        /// <summary>
        /// Trae todos las ofertas de preventa y venta
        /// </summary>
        /// <param name="compradorCarteraID">Comprador a consultar</param>
        /// <param name="isVenta">Indicador para establecer si trae las ofertas de preventas ode ventas</param>
        /// <returns>retorna una lista de ccCreditoDocu</returns>
        public List<string> PreventaCartera_GetOfertas(string compradorCarteraID, bool isVenta)
        {
            try
            {
                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                
                DTO_seUsuario seUsuario = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);
                List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.VentaCartera);
                string actFlujoVenta = actividades[0];

                this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return this._dal_ccVentaDocu.DAL_ccVentaDocu_GetOfertasForPreventa(actFlujoVenta, compradorCarteraID, isVenta, seUsuario.ID.Value);
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "PreventaCartera_GetOfertas");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que obtiene los creditos que fueron preseleccionados para la venta
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="compradorCarteraID">Comprador de cartera</param>
        /// <param name="oferta">Oferta de la compra</param>
        /// <param name="tasaMensual">Factor que se aplica a la venta</param>
        /// <returns></returns> 
        public DTO_VentaCartera PreventaCartera_GetCreditos(string actFlujoID, string compradorCarteraID, string oferta, DateTime fechaIni, DateTime fechaFin)
        {
            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DTO_VentaCartera venta = new DTO_VentaCartera();
                venta.VentaDocu = null;

                List<DTO_ccCreditoDocu> creditosInPreventa = new List<DTO_ccCreditoDocu>();
                List<DTO_ccCreditoDocu> creditosForPreventa = new List<DTO_ccCreditoDocu>();
                DTO_seUsuario seUsuario = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);
                List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.AprobacionGiros);
                if (actividades.Count == 0)
                {
                    venta.Creditos = new List<DTO_ccCreditoDocu>();
                    return venta;
                }              

                string actFlujoPreventa = actividades[0];
                string usuarioID = seUsuario.ID.Value;
                string compradorPropio = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);
                string sectorCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);               

                #endregion

                //Valida la oferta
                List<DTO_ccVentaDocu> listVentaDocu = this._dal_ccVentaDocu.DAL_ccVentaDocu_GetByFilter(string.Empty, oferta, null, null);
                if(listVentaDocu.Count > 0)
                {
                    venta.VentaDocu = listVentaDocu.First();
                    return venta;
                }

                //Creditos para preventa
                creditosInPreventa = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosInPreventa(actFlujoPreventa, oferta, usuarioID, fechaIni, fechaFin);
                if (creditosInPreventa.Count > 0)
                {
                    if(creditosInPreventa.Any(p => p.CompradorCarteraID.Value != compradorCarteraID))
                    {
                        venta.VentaDocu = new DTO_ccVentaDocu();
                        return venta;
                    }

                    venta.VentaDocu = this._dal_ccVentaDocu.DAL_ccVentaDocu_GetByID(creditosInPreventa.First().DocVenta.Value.Value);
                }

                //Créditos nuevos
                DTO_ccCompradorCartera comprador = (DTO_ccCompradorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCompradorCartera, compradorCarteraID, true, false);
                creditosForPreventa = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosForPreventa(actFlujoID, actFlujoPreventa, compradorPropio, usuarioID, fechaIni, fechaFin);
                foreach(DTO_ccCreditoDocu credito in creditosForPreventa)
                {
                    //Trae el plan de pagos
                    decimal sumVlrCuota = 0;
                    List<DTO_ccCreditoPlanPagos> pp = this.GetPlanPagos(credito.NumeroDoc.Value.Value);
                    //Valida si el credito tiene pagos parciales para bloquearlo
                    credito.BloqueaVentaInd.Value = pp.Any(x => x.VlrPagadoCuota.Value > 0 && x.VlrPagadoCuota.Value != x.VlrCuota.Value);
                    //Filtra las cuotas no pagadas
                    pp = pp.Where(x => x.VlrPagadoCuota.Value == 0).ToList();
                    for (int i = 0; i < pp.Count; ++i)
                    {
                        sumVlrCuota += comprador.TipoLiquidacion.Value.Value == (byte)TipoLiquidacionComprador.CapitalInteres ?
                            pp[i].VlrCapital.Value.Value + pp[i].VlrInteres.Value.Value : pp[i].VlrCuota.Value.Value;

                        //Calcula los dias de mora si tiene
                        credito.DiasMora.Value =pp[i].FechaCuota.Value < DateTime.Today.Date?  DateTime.Compare(DateTime.Today.Date, pp[i].FechaCuota.Value.Value) : 0;
                    }

                    if (pp.Count > 0)
                    {
                        credito.PrimeraCuota.Value = pp[0].CuotaID.Value.Value;
                        credito.VlrCuota.Value = Convert.ToInt32(sumVlrCuota / pp.Count);
                        credito.VlrLibranza.Value = sumVlrCuota;
                        credito.NumCuotas.Value = pp.Count(); 
                    }
                    credito.Detalle = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(credito.NumeroDoc.Value.Value);
                }

                //Filtra los creditos con pagos parciales
                if (sectorCartera == ((byte)SectorCartera.Financiero).ToString()) 
                    creditosForPreventa = creditosForPreventa.FindAll(x => !x.BloqueaVentaInd.Value.Value).ToList();

                //Filtra los creditos que tienen cuotas vencidas
                creditosForPreventa = creditosForPreventa.FindAll(x => x.DiasMora.Value == 0).ToList();

                venta.Creditos.AddRange(creditosInPreventa);
                venta.Creditos.AddRange(creditosForPreventa.FindAll(x=>x.PrimeraCuota.Value != null).ToList());
                return venta;
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "PreventaCartera_GetCreditos");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que genera un nuevo documento de venta de cartera
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="ventaDocu">DTO que contiene la informacion de la venta docu</param>
        /// <param name="creditos">Lista de creditos pre vendidos</param>
        /// <param name="insideAnotherTx">Indicador para establecer si se encuentra dentor de otra transaccion</param>
        /// <returns></returns>
        public Tuple<int, List<DTO_SerializedObject>> PreventaCartera_Add(int documentID, string actFlujoID, bool sendToApprove, DateTime fechaVenta, DTO_VentaCartera ventaCartera,
            bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Generales
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();
            Tuple<int, List<DTO_SerializedObject>> resultTuple;

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccVentaDeta = (DAL_ccVentaDeta)base.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            bool isValid = true;
            DTO_glDocumentoControl ctrlNew = null;
            #endregion
            try
            {
                int i = 0;
                #region Variables
                //Variables por defecto
                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);

                //Vairables de valores y fechas
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                decimal tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, periodo);

                //Atividades de flujo
                DAL_MasterComplex complexDAL = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                complexDAL.DocumentID = AppMasters.glProcedimientoFlujo;

                DTO_glConsulta q = new DTO_glConsulta();
                List<DTO_glConsultaFiltro> filtros = new List<DTO_glConsultaFiltro>();
                DTO_glConsultaFiltro filtro = new DTO_glConsultaFiltro()
                {
                    CampoFisico = "ActividadPadre",
                    ValorFiltro = actFlujoID,
                    OperadorFiltro = OperadorFiltro.Igual,
                    OperadorSentencia = "OR"
                };
                filtros.Add(filtro);
                q.Filtros = filtros;
                long count = complexDAL.DAL_MasterComplex_Count(q, true);
                List<DTO_MasterComplex> list = complexDAL.DAL_MasterComplex_GetPaged(count, 1, q, true).ToList();
                List<DTO_glProcedimientoFlujo> nuevasAct = list.Cast<DTO_glProcedimientoFlujo>().ToList();

                int numDocNew = 0;
                #endregion
                if (String.IsNullOrWhiteSpace(ventaCartera.VentaDocu.NumeroDoc.Value.ToString()))
                {
                    #region Crea glDocumentoControl
                    ctrlNew = new DTO_glDocumentoControl();
                    ctrlNew.DocumentoNro.Value = 0;
                    ctrlNew.DocumentoID.Value = AppDocuments.VentaCartera;
                    ctrlNew.LugarGeograficoID.Value = defLugarGeografico;
                    ctrlNew.NumeroDoc.Value = 0;
                    ctrlNew.DocumentoTipo.Value = (byte)DocumentoTipo.DocExterno;
                    ctrlNew.Fecha.Value = DateTime.Now;
                    ctrlNew.FechaDoc.Value = fechaVenta;
                    ctrlNew.PeriodoDoc.Value = periodo;
                    ctrlNew.PeriodoUltMov.Value = periodo;
                    ctrlNew.AreaFuncionalID.Value = defArealFuncional;
                    ctrlNew.PrefijoID.Value = defPrefijo;
                    ctrlNew.ProyectoID.Value = defProyecto;
                    ctrlNew.CentroCostoID.Value = defCentroCosto;
                    ctrlNew.LineaPresupuestoID.Value = defLineaPresupuesto;
                    ctrlNew.TerceroID.Value = ventaCartera.VentaDocu.TerceroID.Value;
                    ctrlNew.DocumentoTercero.Value = ventaCartera.VentaDocu.Oferta.Value;
                    ctrlNew.MonedaID.Value = mdaLoc;
                    ctrlNew.TasaCambioCONT.Value = tc;
                    ctrlNew.TasaCambioDOCU.Value = tc;
                    ctrlNew.Observacion.Value = string.Empty;
                    ctrlNew.Estado.Value = (byte)EstadoDocControl.ParaAprobacion;
                    ctrlNew.seUsuarioID.Value = this.UserId;
                    ctrlNew.Descripcion.Value = "Venta Cartera - Comprador Cartera " + ventaCartera.VentaDocu.CompradorCarteraID.Value;
                    ctrlNew.Valor.Value = ventaCartera.VentaDocu.VlrVenta.Value;
                    ctrlNew.Iva.Value = 0;

                    DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.Preventa, ctrlNew, true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);
                        results.Add(result);
                        resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                        return resultTuple;
                    }
                    numDocNew = Convert.ToInt32(resultGLDC.Key);
                    ctrlNew.NumeroDoc.Value = numDocNew;
                    #endregion
                    #region Agrega la info a ccVentaDocu
                    ventaCartera.VentaDocu.NumeroDoc.Value = numDocNew;
                    this._dal_ccVentaDocu.DAL_ccVentaDocu_Add(ventaCartera.VentaDocu);
                    #endregion
                    #region Carga la info de los creditos de venta

                    foreach (DTO_ccVentaDeta venta in ventaCartera.VentaDeta)
                    {
                        //Manejo de porcentajes para la aprobacion
                        int percent = ((i + 1) * 100) / ventaCartera.VentaDeta.Count;
                        batchProgress[tupProgress] = percent;
                        i++;

                        if (venta.AsignaCarteraInd.Value.Value)
                        {
                            #region Agrega la info en ccVentaDeta
                            venta.NumeroDoc.Value = numDocNew;
                            venta.VlrTotalDerechos.Value = venta.VlrUtilidad.Value;
                            this._dal_ccVentaDeta.DAL_ccVentaDeta_Add(venta);
                            #endregion
                        }
                    }
                    #endregion
                }
                else
                {
                    numDocNew = ventaCartera.VentaDocu.NumeroDoc.Value.Value;
                    #region Actualiza la fecha del glDocumentoCtrl
                    DTO_glDocumentoControl docCtrl = this._moduloGlobal.glDocumentoControl_GetByID(numDocNew);
                    docCtrl.FechaDoc.Value = fechaVenta;
                    DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Update(docCtrl, false, true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);
                        results.Add(result);
                        resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                        return resultTuple;
                    }
                    #endregion
                    #region Actualiza ccVentaDocu 
                   
                    this._dal_ccVentaDocu.DAL_ccVentaDocu_Update(ventaCartera.VentaDocu);

                    #endregion
                    #region Actualiza ccVentaDeta

                    //Venta Deta
                    foreach (DTO_ccVentaDeta venDeta in ventaCartera.VentaDeta)
                    {
                        //Elimina los flujos
                        foreach (DTO_glProcedimientoFlujo act in nuevasAct)
                        {
                            this.AsignarFlujo(documentID, venDeta.NumDocCredito.Value.Value, act.ActividadHija.Value, true, string.Empty);
                            this.AsignarFlujo(documentID, venDeta.NumDocCredito.Value.Value, act.ActividadHijaRechazo.Value, true, string.Empty);
                        }

                        venDeta.NumeroDoc.Value = numDocNew;
                        if (!venDeta.IsPreventa.Value.Value)
                        {
                            this._dal_ccVentaDeta.DAL_ccVentaDeta_Add(venDeta);
                        }
                        else if (venDeta.Aprobado.Value.Value)
                        {
                            this._dal_ccVentaDeta.DAL_ccVentaDeta_Update(venDeta);
                        }
                        else
                        {
                            this._dal_ccVentaDeta.DAL_ccVentaDeta_Delete(venDeta);
                        }
                    }

                    #endregion
                }

                #region Actualiza los credito
                foreach (DTO_ccVentaDeta venDeta in ventaCartera.VentaDeta)
                {
                    //Manejo de porcentajes
                    int percent = ((i + 1) * 100) / ventaCartera.VentaDeta.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    DTO_ccCreditoDocu credito = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(venDeta.NumDocCredito.Value.Value);
                    if (!venDeta.IsPreventa.Value.Value || venDeta.Aprobado.Value.Value)
                    {
                        credito.TasaEfectivaVenta.Value = credito.TasaEfectivaVenta.Value;
                        credito.DocVenta.Value = numDocNew;
                        credito.CompradorCarteraID.Value = ventaCartera.VentaDocu.CompradorCarteraID.Value;
                        this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);

                        if (sendToApprove)
                        {
                            #region Asigna el nuevo flujo
                            result = this.AsignarFlujo(documentID, credito.NumeroDoc.Value.Value, actFlujoID, false, string.Empty);
                            if (result.Result == ResultValue.NOK)
                            {
                                isValid = false;
                                resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                                return resultTuple;
                            }
                            else
                            {
                                DTO_Alarma alarma = this.GetFirstMailInfo(venDeta.NumDocCredito.Value.Value, false);
                                results.Add(alarma);
                            }
                            #endregion
                        }
                    }
                    else
                    {
                        credito.TasaEfectivaVenta.Value = null;
                        credito.DocVenta.Value = null;
                        credito.CompradorCarteraID.Value = null;
                        this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);

                        //Elimina alarmas existentes
                        this.AsignarAlarma(credito.NumeroDoc.Value.Value, actFlujoID, true);
                    }
                }
                #endregion

                //isValid = results.Any(c => c.GetType() == typeof(DTO_Alarma));
                if (isValid)
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(numDocNew, results);
                else
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);

                return resultTuple;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "PreventaCartera_Add");
                results.Add(result);
                resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                return resultTuple;
            }
            finally
            {
                if (isValid)
                {
                    base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Venta Cartera

        #region Funciones Privadas

        /// <summary>
        /// Genera el comprobante de la venta de cartera
        /// </summary>
        /// <param name="numDocCredito">NumeroDoc del credito</param>
        /// <param name="periodo">Periodo del documento</param>
        /// <param name="tc">Tasa de cambio</param>
        /// <param name="coDoc">Documento contable</param>
        /// <param name="ctaUtilidadID">Identificador de la cuoenta para la cesion de itulidad</param>
        /// <param name="codCarteraPropia">Codigo de comprador cartera propia</param>
        /// <param name="vlrUtilidadCxC">Vlr de utilidad</param>
        /// <returns>Retorna el resultado de la contabilizazion del comprobante</returns>
        private object VentaCartera_GenerarComprobante(int numDocCredito, List<DTO_ccCreditoPlanPagos> planPagos, decimal tc, DTO_coDocumento coDoc,
            string oferta, string ctaUtilidadID, string codCarteraPropia, string concCargoXdef, string lgXdef, string lineaXdef, string compCapital,
            string compInteres, string ctaContraOrden_Propia, string ctaContraOrden_Cedida, string ctaContraBalance_Cedida, string ctaOrdenCapitalCesion,
            string ctaOrdenUtilidadCesion, string ctaOrdenCesionContra, string ctaProvisionUtilidad, string ctaReservaVenta, decimal tasaReservaUtilidad,
            string contabilizaOrdCesion, decimal vlrVenta, decimal vlrUtilidadCxC, decimal saldoCapital, decimal vlrProvGeneral, decimal vlrProvCompra,
            decimal vlrSdoAsistencias, decimal vlrSdoCapital, DateTime fechaCorte, DTO_ccCompradorCartera comprador, string nitFiduciaria, ref decimal contraBalML, ref decimal contraBalME)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            try
            {
                //Variables
                decimal vlrCapitalCesionTotal = 0;
                decimal vlrUtilidadCesionTotal = 0;
                vlrUtilidadCxC *= -1;

                #region Variables
                DTO_glDocumentoControl ctrl = this._moduloGlobal.glDocumentoControl_GetByID(numDocCredito);
                DTO_ccCreditoDocu credito = this.GetCreditoByNumeroDoc(numDocCredito);
                DTO_ccLineaCredito lineaCred = (DTO_ccLineaCredito)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccLineaCredito, credito.LineaCreditoID.Value, true, false);
                string compIntAntici = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresAnticipado);
                string compSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string compIntSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresSeguro);

                //Variables Temporales                
                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                List<string> ctasRecCesion = new List<string>();

                //Variables de operación
                string sectorCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);
                bool validateRecCesion = false;
                if (sectorCartera == ((byte)SectorCartera.Solidario).ToString())
                    validateRecCesion = true;

                //Variables de componentes
                DTO_ccCarteraComponente dtoCompSeguro = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple,AppMasters.ccCarteraComponente,compSeguro,true,false); 
                DTO_ccCarteraComponente dtoCompIntSeguro = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple,AppMasters.ccCarteraComponente,compIntSeguro,true,false); 


                Dictionary<string, DTO_coPlanCuenta> cacheCtas = new Dictionary<string,DTO_coPlanCuenta>(); 
                Dictionary<string, DTO_glConceptoSaldo> cacheSaldos = new Dictionary<string,DTO_glConceptoSaldo>();
                Dictionary<string, DTO_coCuentaGrupo> cacheGrupos = new Dictionary<string, DTO_coCuentaGrupo>();

                //Resultado
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> footerPropia = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> footerCedida = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> fBalance = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> fOrden = new List<DTO_ComprobanteFooter>();

                #endregion
                #region Asigna al dicionario de cuentas la informacion de las contrapartidas

                #region Cuentas de contrapartida

                //Cuenta utilidad
                if (!cacheCtas.ContainsKey(ctaUtilidadID))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaUtilidadID, true, false);
                    cacheCtas.Add(ctaUtilidadID, cta);
                }

                //Contrapartida cartera propia - Orden
                if (!cacheCtas.ContainsKey(ctaContraOrden_Propia))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraOrden_Propia, true, false);
                    cacheCtas.Add(ctaContraOrden_Propia, cta);
                }

                //Contrapartida cartera cedida - Orden
                if (!cacheCtas.ContainsKey(ctaContraOrden_Cedida))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraOrden_Cedida, true, false);
                    cacheCtas.Add(ctaContraOrden_Cedida, cta);
                }

                //Contrapartida cartera cedida - Balance
                if (!cacheCtas.ContainsKey(ctaContraBalance_Cedida))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraBalance_Cedida, true, false);
                    cacheCtas.Add(ctaContraBalance_Cedida, cta);
                }
                #endregion

                if (contabilizaOrdCesion == "1")
                {
                    #region Cuentas para contabilizar capital y utilidad
                    //Cuenta Capital Cesion - Orden
                    if (!cacheCtas.ContainsKey(ctaOrdenCapitalCesion))
                    {
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenCapitalCesion, true, false);
                        cacheCtas.Add(ctaOrdenCapitalCesion, cta);
                    }

                    //Cuenta Utilidad(Intereses) Cesion - Orden
                    if (!cacheCtas.ContainsKey(ctaOrdenUtilidadCesion))
                    {
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenUtilidadCesion, true, false);
                        cacheCtas.Add(ctaOrdenUtilidadCesion, cta);
                    }

                    //Contrapartida cesion - Orden
                    if (!cacheCtas.ContainsKey(ctaOrdenCesionContra))
                    {
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenCesionContra, true, false);
                        cacheCtas.Add(ctaOrdenCesionContra, cta);
                    }
                    #endregion
                }

                #endregion
                #region Trae los saldos de componentes para la cartera propia

                DTO_InfoCredito saldosCredito = this.GetSaldoCredito(numDocCredito, fechaCorte, false, false, false);
                if (saldosCredito.SaldosComponentes.Count == 0)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_LibranzaNoSaldo + "&&" + ctrl.DocumentoTercero.Value + "&&" + fechaCorte.ToString("yyyy/MM");
                    return result;
                }
                List<DTO_ccSaldosComponentes> componentesSaldos = new List<DTO_ccSaldosComponentes>();

                foreach (DTO_ccCreditoPlanPagos cuota in planPagos)
                {
                    List<DTO_ccSaldosComponentes> componentesCuota = (from c in saldosCredito.SaldosComponentes where c.CuotaID.Value == cuota.CuotaID.Value &&
                                                                           (c.TipoComponente.Value == (byte)TipoComponente.CapitalSolicitado || c.TipoComponente.Value == (byte)TipoComponente.ComponenteCuota)
                                                                      select c).ToList();
                    componentesSaldos.AddRange(componentesCuota);
                    vlrCapitalCesionTotal += cuota.VlrCapitalCesion.Value.Value;
                    vlrUtilidadCesionTotal += cuota.VlrUtilidadCesion.Value.Value;
                }

                #endregion
                #region Llena los detalles del comprobante por cada cuota

                foreach (DTO_ccCreditoPlanPagos cuota in planPagos)
                {
                    int cuotaID = cuota.CuotaID.Value.Value;
                    List<DTO_ccSaldosComponentes> componentesCuota = (from c in componentesSaldos where c.CuotaID.Value == cuotaID select c).ToList();
                    #region Cartera Propia
                    object compPropia = this.VentaCartera_GenerarComprobanteCuota_Propia(componentesCuota, ctrl, lineaCred.ClaseCredito.Value, concCargoXdef, lgXdef, 
                        lineaXdef, tc, cacheCtas, cacheSaldos);

                    //Error
                    if (compPropia.GetType() == typeof(DTO_TxResult))
                    {
                        result = (DTO_TxResult)compPropia;
                        return result;
                    }

                    //Agrega los registros
                    foreach (DTO_ComprobanteFooter det in (List<DTO_ComprobanteFooter>)compPropia)
                    {
                        // Por cada registro reviso si existe en la lista de cartera propia
                        List<DTO_ComprobanteFooter> aux =
                        (
                            from p in footerPropia
                            where
                                p.CuentaID.Value == det.CuentaID.Value &&
                                p.ConceptoSaldoID.Value == det.ConceptoSaldoID.Value &&
                                p.DocumentoCOM.Value == det.DocumentoCOM.Value &&
                                p.IdentificadorTR.Value == det.IdentificadorTR.Value
                            select p
                        ).ToList();

                        if (aux.Count > 0)
                        {
                            aux.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value;
                            aux.First().vlrMdaExt.Value += det.vlrMdaExt.Value;
                        }
                        else
                            footerPropia.Add(det);
                    }
                    #endregion
                    #region Cartera Cedida

                    object compCedida = this.VentaCartera_GenerarComprobanteCuota_Cedida(componentesCuota, ctrl, lineaCred.ClaseCredito.Value, concCargoXdef, lgXdef, lineaXdef,
                        compCapital, compInteres, tc, comprador, cacheCtas, cacheSaldos, cacheGrupos, ctasRecCesion);

                    //Error
                    if (compCedida.GetType() == typeof(DTO_TxResult))
                    {
                        result = (DTO_TxResult)compCedida;
                        return result;
                    }

                    //Agrega los registros
                    foreach (DTO_ComprobanteFooter det in (List<DTO_ComprobanteFooter>)compCedida)
                    {
                        // Por cada registro reviso si existe en la lista de cartera Cedida
                        List<DTO_ComprobanteFooter> aux =
                        (
                            from p in footerCedida
                            where
                                p.CuentaID.Value == det.CuentaID.Value &&
                                p.TerceroID.Value == det.TerceroID.Value &&
                                p.ConceptoSaldoID.Value == det.ConceptoSaldoID.Value &&
                                p.DocumentoCOM.Value == det.DocumentoCOM.Value &&
                                p.IdentificadorTR.Value == det.IdentificadorTR.Value
                            select p
                        ).ToList();

                        if (aux.Count > 0)
                        {
                            aux.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value;
                            aux.First().vlrMdaExt.Value += det.vlrMdaExt.Value;
                        }
                        else
                            footerCedida.Add(det);
                    }
                    #endregion
                }
                #endregion
                #region Organiza los registros de la cartera propia

                //Valores de cartera propia
                decimal vlrBalancePropiaML = 0;
                decimal vlrBalancePropiaME = 0;
                decimal vlrOrdenPropiaML = 0;
                decimal vlrOrdenPropiaME = 0;
                if (sectorCartera == ((byte)SectorCartera.Financiero).ToString() && dtoCompSeguro != null && dtoCompIntSeguro != null)
                    footerPropia = footerPropia.FindAll(x => x.ConceptoSaldoID.Value != dtoCompSeguro.ConceptoSaldoID.Value && x.ConceptoSaldoID.Value != dtoCompIntSeguro.ConceptoSaldoID.Value).ToList();

                foreach (DTO_ComprobanteFooter det in footerPropia)
                {
                    cta = cacheCtas[det.CuentaID.Value];
                    det.vlrMdaExt.Value = tc != 0 ? Math.Round(det.vlrMdaLoc.Value.Value / tc, 2) : 0;

                    if (cta.Tipo.Value == ((int)TipoCuenta.Orden).ToString())
                    {
                        #region Ctas Orden
                        vlrOrdenPropiaML += det.vlrMdaLoc.Value.Value;
                        vlrOrdenPropiaME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> po_Temp = (from c in fOrden where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (po_Temp.Count == 0)
                        {
                            det.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                            fOrden.Add(det);
                        }
                        else
                        {
                            po_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            po_Temp.First().vlrMdaExt.Value += det.vlrMdaExt.Value.Value;
                        }
                        #endregion
                    }
                    else
                    {
                        #region Ctas Balance
                        vlrBalancePropiaML += det.vlrMdaLoc.Value.Value;
                        vlrBalancePropiaME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> pb_Temp = (from c in fBalance where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (pb_Temp.Count == 0)
                        {
                            det.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                            fBalance.Add(det);
                        }
                        else
                        {
                            pb_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            pb_Temp.First().vlrMdaExt.Value += det.vlrMdaExt.Value.Value;
                        }
                        #endregion
                    }
                }

                #endregion
                #region Organiza los registros de la cartera cedida

                decimal vlrBalanceCedidaML = 0;
                decimal vlrBalanceCedidaME = 0;
                decimal vlrOrdenCedidaML = 0;
                decimal vlrOrdenCedidaME = 0;

                if (sectorCartera == ((byte)SectorCartera.Financiero).ToString() && dtoCompSeguro != null && dtoCompIntSeguro != null)
                    footerCedida = footerCedida.FindAll(x => x.ConceptoSaldoID.Value != dtoCompSeguro.ConceptoSaldoID.Value && x.ConceptoSaldoID.Value != dtoCompIntSeguro.ConceptoSaldoID.Value).ToList();

                foreach (DTO_ComprobanteFooter det in footerCedida)
                {
                    cta = cacheCtas[det.CuentaID.Value];
                    det.vlrMdaExt.Value = tc != 0 ? Math.Round(det.vlrMdaLoc.Value.Value / tc, 2) : 0;

                    if (cta.Tipo.Value == ((int)TipoCuenta.Orden).ToString())
                    {
                        #region Ctas Orden
                        vlrOrdenCedidaML += det.vlrMdaLoc.Value.Value;
                        vlrOrdenCedidaME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> po_Temp = (from c in fOrden where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (po_Temp.Count == 0)
                        {
                            det.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                            fOrden.Add(det);
                        }
                        else
                        {
                            po_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            po_Temp.First().vlrMdaExt.Value += det.vlrMdaExt.Value.Value;
                        }
                        #endregion
                    }
                    else
                    {
                        //Nota: Validación que se incluyó para financieras y no se tiene claro en que pueda afectar a la cooperativas

                        bool assignCtaBal = true;
                        if (validateRecCesion)
                            assignCtaBal = ctasRecCesion.Contains(cta.ID.Value) ? true : false;

                        if (assignCtaBal)
                        {
                            #region Ctas Balance

                            vlrBalanceCedidaML += det.vlrMdaLoc.Value.Value;
                            vlrBalanceCedidaME += det.vlrMdaExt.Value.Value;

                            List<DTO_ComprobanteFooter> pb_Temp = (from c in fBalance where c.CuentaID.Value == cta.ID.Value select c).ToList();
                            if (pb_Temp.Count == 0)
                            {
                                det.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                                fBalance.Add(det);
                            }
                            else
                            {
                                pb_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                                pb_Temp.First().vlrMdaExt.Value += det.vlrMdaExt.Value.Value;
                            }
                            #endregion
                        }
                    }
                }

                #endregion
                #region Agrega los registros de balance, Colateral/Reserva Venta/Utilidad/Interes Antic.
                fBalance.RemoveAll(f => f.vlrMdaLoc.Value == 0);
                footer.AddRange(fBalance);
                if (comprador.TipoLiquidacion.Value == (byte)TipoLiquidacionComprador.Total)
                {
                    #region Agrega registro de Colateral
                    if (!string.IsNullOrWhiteSpace(ctaProvisionUtilidad) && vlrProvCompra > 0)
                    {
                        decimal vlrProvML = vlrProvCompra;// Convert.ToInt32(vlrVenta * comprador.PorReservaVta.Value.Value / 100);
                        decimal vlrProvME = 0;
                        if (tc != 0)
                            vlrProvME = Math.Round(vlrProvML / tc, 2);

                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaProvisionUtilidad, true, false);
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        {
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                        }
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter provUtilDet = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrProvML, vlrProvME, false);
                        provUtilDet.TerceroID.Value = comprador.TerceroID.Value;
                        provUtilDet.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                        footer.Add(provUtilDet);

                        //vlrUtilidad -= vlrProvML;
                        vlrBalancePropiaML += vlrProvML;
                        vlrBalancePropiaME += vlrProvME;
                    }
                    #endregion
                    #region Agrega registro de Reserva Venta
                    if (!string.IsNullOrWhiteSpace(ctaReservaVenta) && vlrProvGeneral > 0)
                    {
                        //Valida que exista el nit de la fiduciaria
                        if (string.IsNullOrWhiteSpace(nitFiduciaria))
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_TerceroFiduciaria + "&&" + string.Empty;

                            return result;
                        }

                        decimal vlrReservaML = vlrProvGeneral;// Convert.ToInt32(saldoCapital * tasaReservaUtilidad / 100);
                        decimal vlrReservaME = 0;
                        if (tc != 0)
                            vlrReservaME = Math.Round(vlrReservaML / tc, 2);

                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaReservaVenta, true, false);
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        {
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                        }
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter reservaDet = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrReservaML, vlrReservaME, false);
                        reservaDet.TerceroID.Value = comprador.TerceroID.Value;// nitFiduciaria;//comprador.TerceroID.Value;
                        reservaDet.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                        footer.Add(reservaDet);

                        //vlrUtilidad -= vlrReservaML;
                        vlrBalancePropiaML += vlrReservaML;
                        vlrBalancePropiaME += vlrReservaME;
                    }
                    #endregion                    
                    #region Agrega registro de Utilidad
                    string coDocVenta = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocumentoVentaCartera);
                    decimal vlrUtilCobroCarteraCed = vlrVenta - vlrSdoCapital - vlrSdoAsistencias - vlrProvGeneral - vlrProvCompra;
                    decimal vlrCobroME = 0;
                    //if (tc != 0)
                    //    vlrCobroME = Math.Round(vlrUtilCobroCarteraCed / tc, 2);

                    //if (vlrUtilCobroCarteraCed != 0)
                    //{
                    //    DTO_coDocumento dtocoDocVenta = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocVenta, true, false);
                    //    cta = dtocoDocVenta != null ? (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, dtocoDocVenta.CuentaLOC.Value, true, false) : null;
                    //    if (cta == null)
                    //    {
                    //        result.Result = ResultValue.NOK;
                    //        result.ResultMessage = "El documento contable " + coDocVenta + " no tiene registrada una Cuenta";
                    //        return result;
                    //    }
                    //    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                    //    {
                    //        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    //        cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                    //    }
                    //    else
                    //        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    //    DTO_ComprobanteFooter cobroCartera = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrUtilCobroCarteraCed, vlrCobroME, false);
                    //    cobroCartera.TerceroID.Value = comprador.TerceroID.Value;
                    //    cobroCartera.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                    //    footer.Add(cobroCartera);
                    //}

                    //vlrBalancePropiaML += vlrCobroCarteraCed;
                    //vlrBalancePropiaME += vlrCobroME;
                    #endregion
                    #region Agrega registro de Interes Anticipado
                    List<DTO_ccCreditoComponentes> credComps = this.ccCreditoComponentes_GetByNumDocCred(numDocCredito);
                    decimal vlrInteresAnticip = credComps.FindAll(x => x.ComponenteCarteraID.Value == compIntAntici).ToList().Sum(y => y.TotalValor.Value.Value);

                    decimal vlrInteresME = 0;
                    if (tc != 0)
                        vlrInteresME = Math.Round(vlrInteresAnticip / tc, 2);

                    if (vlrInteresAnticip != 0)
                    {
                        DTO_ccCarteraComponente dtoCompInt = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, compIntAntici, true, false);
                        cta = dtoCompInt != null ? (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, dtoCompInt.CuentaID.Value, true, false) : null;
                        if (cta == null)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = "El componente " + compIntAntici + " no tiene registrada una Cuenta";
                            return result;
                        }
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        {
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                        }
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter interesAntic = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrInteresAnticip, vlrInteresME, false);
                        interesAntic.TerceroID.Value =ctrl.TerceroID.Value;
                        interesAntic.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                        footer.Add(interesAntic);
                    }
                    vlrBalancePropiaML += vlrInteresAnticip;
                    vlrBalancePropiaME += vlrInteresME;
                    #endregion
                    #region Agrega registro de Utilidad Cesion
                    string ctaUtilidadCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaUtilidadCesion);
                    decimal vlrUtilidadCartCed = (footer.Sum(x => x.vlrMdaLoc.Value.Value) + vlrUtilCobroCarteraCed + vlrSdoCapital + vlrSdoAsistencias) * -1;
                    decimal vlrUtilidadME = 0;
                    if (tc != 0)
                        vlrCobroME = Math.Round(vlrUtilidadCartCed / tc, 2);

                    if (vlrUtilidadCartCed != 0)
                    {
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, ctaUtilidadCesion, true, false);
                        if (cta == null)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = "La cuenta de Utilidad Venta no existe en el control  " + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaUtilidadCesion;
                            return result;
                        }
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        {
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                        }
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter utilidCartera = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrUtilidadCartCed, vlrUtilidadME, false);
                        utilidCartera.TerceroID.Value = comprador.TerceroID.Value;
                        utilidCartera.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                        footer.Add(utilidCartera);
                    }
                    vlrBalancePropiaML += vlrUtilidadCartCed;
                    vlrBalancePropiaME += vlrUtilidadME;
                    #endregion
                }
                else
                {
                    #region Agrega registro de UtilidadCxC
                    if (vlrUtilidadCxC != 0)
                    {
                        cta = cacheCtas[ctaUtilidadID];
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        {
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                        }
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        decimal vlrUtilidadME = 0;
                        if (tc != 0)
                            vlrUtilidadME = Math.Round(vlrUtilidadCxC / tc, 2);

                        DTO_ComprobanteFooter utilidadDet = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrUtilidadCxC, vlrUtilidadME, false);
                        utilidadDet.TerceroID.Value = comprador.TerceroID.Value;
                        utilidadDet.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                        footer.Add(utilidadDet);

                        vlrBalancePropiaML += vlrUtilidadCxC;
                        vlrBalancePropiaME += vlrUtilidadME;
                    }
                    #endregion
                }
                #region Cartera Propia y ctas recursos cesion

                if (vlrBalancePropiaML != 0 || vlrBalanceCedidaML != 0)
                {
                    contraBalML += vlrBalancePropiaML + vlrBalanceCedidaML;
                    contraBalME += vlrBalancePropiaME + vlrBalanceCedidaME;                   
                }
                #endregion                    
                #endregion             
                
                #region Agrega los registros de orden

                fOrden.RemoveAll(f => f.vlrMdaLoc.Value == 0);
                if (fOrden.Count > 0)
                {
                    footer.AddRange(fOrden);
                    #region cartera Propia

                    if (vlrOrdenPropiaML != 0)
                    {
                        cta = cacheCtas[ctaContraOrden_Propia];
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter contraPropiaOrden = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrOrdenPropiaML * -1, vlrOrdenPropiaME * -1, true);
                        contraPropiaOrden.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                        contraPropiaOrden.DocumentoCOM.Value = ctrl.DocumentoTercero.Value;

                        footer.Add(contraPropiaOrden);
                    }

                    #endregion
                    #region cartera Cedida

                    if (vlrOrdenCedidaML != 0)
                    {
                        cta = cacheCtas[ctaContraOrden_Cedida];
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter contraCedidaOrden = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrOrdenCedidaML * -1, vlrOrdenCedidaME * -1, true);
                        contraCedidaOrden.TerceroID.Value = comprador.TerceroID.Value;
                        contraCedidaOrden.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                        contraCedidaOrden.DocumentoCOM.Value = ctrl.DocumentoTercero.Value;

                        footer.Add(contraCedidaOrden);
                    }

                    #endregion
                }
                #endregion
                #region Agrega los registros de capital, interes y la contra de la cesion(capital + interes)
                if (contabilizaOrdCesion == "1" && (vlrCapitalCesionTotal != 0 || vlrUtilidadCesionTotal != 0)) // debe ser credito
                {
                    #region Crea el registro del capital (Debito)

                    //Cuenta
                    cta = cacheCtas[ctaOrdenCapitalCesion];
                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    else
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    //Valor
                    vlrCapitalCesionTotal = Math.Abs(vlrCapitalCesionTotal);
                    decimal vlrCapitalME = 0;
                    if (tc != 0)
                        vlrCapitalME = Math.Round(vlrCapitalCesionTotal / tc, 2);

                    //Crea el registro
                    DTO_ComprobanteFooter capitalDet = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrCapitalCesionTotal, vlrCapitalME, false);
                    capitalDet.TerceroID.Value = comprador.TerceroID.Value;
                    capitalDet.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                    footer.Add(capitalDet);

                    #endregion
                    #region Crea el registro de la utilidad (Debito)

                    //Cuenta
                    cta = cacheCtas[ctaOrdenUtilidadCesion];
                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    else
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    //Valor
                    vlrUtilidadCesionTotal = Math.Abs(vlrUtilidadCesionTotal);
                    decimal vlrUtilidadME = 0;
                    if (tc != 0)
                        vlrUtilidadME = Math.Round(vlrUtilidadCesionTotal / tc, 2);

                    //Crea el registro
                    DTO_ComprobanteFooter interesDet = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrUtilidadCesionTotal, vlrUtilidadME, false);
                    interesDet.TerceroID.Value = comprador.TerceroID.Value;
                    interesDet.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                    footer.Add(interesDet);

                    #endregion
                    #region Crea el registro de la contrapartida de cesion (Capital + Utilidad) (Credito)

                    //Cuenta
                    cta = cacheCtas[ctaOrdenCesionContra];
                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    else
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    //Valor
                    decimal vlrTotalCesionML = (vlrCapitalCesionTotal + vlrUtilidadCesionTotal) * -1;
                    decimal vlrContraCesionME = 0;
                    if (tc != 0)
                        vlrContraCesionME = Math.Round(vlrTotalCesionML / tc, 2);

                    //Crea el registro
                    DTO_ComprobanteFooter cesionDet = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrTotalCesionML, vlrContraCesionME, false);
                    cesionDet.TerceroID.Value = comprador.TerceroID.Value;
                    cesionDet.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + oferta;
                    footer.Add(cesionDet);

                    #endregion
                }
                #endregion

                foreach (var f in footer)
                    f.DatoAdd2.Value = comprador != null ? comprador.TerceroID.Value : string.Empty;

                return footer;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "VentaCartera_GenerarComprobante");
                return result;
            }
        }

        /// <summary>
        /// Genera la lista de detalles del comprobante para una cuota de cartera propia
        /// </summary>
        /// <param name="componentes">Lista de componentes</param>
        /// <param name="ctrl">Documento control que genero la liquidacion</param>
        /// <param name="concCargoXdef">Concepto cargo por defecto</param>
        /// <param name="lgXdef">Lugar geografico por defecto</param>
        /// <param name="lineaXdef">Linea presusuestal por defecto</param>
        /// <param name="tc">Tasa de cambio</param>
        /// <returns>Retorna los detallesde la cuota</returns>
        private object VentaCartera_GenerarComprobanteCuota_Propia(List<DTO_ccSaldosComponentes> componentes, DTO_glDocumentoControl ctrl, string claseCredito,
            string concCargoXdef, string lgXdef, string lineaXdef, decimal tc, Dictionary<string, DTO_coPlanCuenta> cacheCtas,
            Dictionary<string, DTO_glConceptoSaldo> cacheSaldos)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            try
            {
                #region Variables

                //Variables de resultado
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();

                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                DTO_ccComponenteCuenta compCta;
                List<DTO_ccComponenteCuenta> compCtasPropia = new List<DTO_ccComponenteCuenta>();
                #endregion
                #region Carga la lista de cuentas

                DAL_MasterComplex dalComplex = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                dalComplex.DocumentID = AppMasters.ccComponenteCuenta;

                DTO_MasterComplex complex = null;
                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("ComponenteCarteraID", "");
                pks.Add("TipoEstado", ((int)TipoEstadoCartera.Propia).ToString());
                pks.Add("ClaseCredito", claseCredito);

                foreach (DTO_ccSaldosComponentes c in componentes)
                {
                    pks["ComponenteCarteraID"] = c.ComponenteCarteraID.Value;
                    complex = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);

                    if (complex == null)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + c.ComponenteCarteraID.Value +
                            "&&" + ((int)TipoEstadoCartera.Propia).ToString() + "&&" + claseCredito;

                        return result;
                    }

                    DTO_ccComponenteCuenta cc = (DTO_ccComponenteCuenta)complex;
                    compCtasPropia.Add(cc);

                    // cuentaID
                    if (!string.IsNullOrWhiteSpace(cc.CuentaID.Value))
                    {
                        if (!cacheCtas.ContainsKey(cc.CuentaID.Value))
                        {
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaID.Value, true, false);
                            cacheCtas.Add(cc.CuentaID.Value, cta);
                        }
                        else
                            cta = cacheCtas[cc.CuentaID.Value];

                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        {
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                        }
                    }
                }

                #endregion
                #region Carga los registros del footer
                foreach (DTO_ccSaldosComponentes c in componentes)
                {
                    decimal vlrML = c.CuotaSaldo.Value.Value;
                    decimal vlrME = 0;

                    if (tc != 0)
                        vlrME = Math.Round(vlrML / tc, 2);

                    #region Cartera Propia
                    compCta = this.GetComponenteCuentaByComponenteCartera(compCtasPropia, c.ComponenteCarteraID.Value);

                    //CuentaID
                    if (!string.IsNullOrWhiteSpace(compCta.CuentaID.Value) && Math.Abs(vlrML) > 0)
                    {
                        cta = cacheCtas[compCta.CuentaID.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrML * -1, vlrME * -1, false);
                        footer.Add(f);
                    }
                    #endregion
                }
                #endregion

                return footer;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "VentaCartera_GenerarComprobanteCuota_Propia");

                return result;
            }
        }

        /// <summary>
        /// Genera la lista de detalles del comprobante para una cuota de cartera cedida
        /// </summary>
        /// <param name="componentes">Lista de componentes</param>
        /// <param name="ctrl">Documento control que genero la liquidacion</param>
        /// <param name="concCargoXdef">Concepto cargo por defecto</param>
        /// <param name="lgXdef">Lugar geografico por defecto</param>
        /// <param name="lineaXdef">Linea presusuestal por defecto</param>
        /// <param name="tc">Tasa de cambio</param>
        /// <returns>Retorna los detallesde la cuota</returns>
        private object VentaCartera_GenerarComprobanteCuota_Cedida(List<DTO_ccSaldosComponentes> componentes, DTO_glDocumentoControl ctrl, string claseCredito,
            string concCargoXdef, string lgXdef, string lineaXdef, string compCapital, string compInteres, decimal tc, DTO_ccCompradorCartera comprador,
            Dictionary<string, DTO_coPlanCuenta> cacheCtas, Dictionary<string, DTO_glConceptoSaldo> cacheSaldos, Dictionary<string, DTO_coCuentaGrupo> cacheGrupos,
            List<string> ctasRecCesion)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            try
            {
                #region Variables

                //Variables de resultado
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();
                string compSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);

                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                DTO_coCuentaGrupo grupo;
                DTO_ccComponenteCuenta compCta;
                List<DTO_ccComponenteCuenta> compCtasCedida = new List<DTO_ccComponenteCuenta>();

                string ctrlTercero = ctrl.TerceroID.Value;

                #endregion
                #region Carga la lista de cuentas

                DAL_MasterComplex dalComplex = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                dalComplex.DocumentID = AppMasters.ccComponenteCuenta;

                DTO_MasterComplex complex = null;
                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("ComponenteCarteraID", "");
                pks.Add("TipoEstado", ((int)TipoEstadoCartera.Cedida).ToString());
                pks.Add("ClaseCredito", claseCredito);

                foreach (DTO_ccSaldosComponentes c in componentes)
                {
                    pks["ComponenteCarteraID"] = c.ComponenteCarteraID.Value;
                    complex = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);

                    if (complex == null)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + c.ComponenteCarteraID.Value +
                                "&&" + ((int)TipoEstadoCartera.Cedida).ToString() + "&&" + claseCredito;

                        return result;
                    }

                    DTO_ccComponenteCuenta cc = (DTO_ccComponenteCuenta)complex;
                    compCtasCedida.Add(cc);

                    #region Carga la cuentaID (CuentaID)
                    if (!string.IsNullOrWhiteSpace(cc.CuentaID.Value))
                    {
                        if (!cacheCtas.ContainsKey(cc.CuentaID.Value))
                        {
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaID.Value, true, false);
                            cacheCtas.Add(cc.CuentaID.Value, cta);

                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }

                            if (!cacheGrupos.ContainsKey(cta.CuentaGrupoID.Value))
                            {
                                grupo = (DTO_coCuentaGrupo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coCuentaGrupo, cta.CuentaGrupoID.Value, true, false);
                                cacheGrupos.Add(cta.CuentaGrupoID.Value, grupo);
                            }
                        }
                    }
                    #endregion
                    #region Carga la cuenta de cesion (CtaRecursosCesion)
                    if (!string.IsNullOrWhiteSpace(cc.CtaRecursosCesion.Value) && (c.ComponenteCarteraID.Value != compSeguro || (c.ComponenteCarteraID.Value == compSeguro && !comprador.PagoSeguroInd.Value.Value)))
                    {
                        if (!cacheCtas.ContainsKey(cc.CtaRecursosCesion.Value))
                        {
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CtaRecursosCesion.Value, true, false);
                            cacheCtas.Add(cc.CtaRecursosCesion.Value, cta);

                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }

                            if (!cacheGrupos.ContainsKey(cta.CuentaGrupoID.Value))
                            {
                                grupo = (DTO_coCuentaGrupo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coCuentaGrupo, cta.CuentaGrupoID.Value, true, false);
                                cacheGrupos.Add(cta.CuentaGrupoID.Value, grupo);
                            }
                        }
                    }
                    #endregion

                }

                #endregion
                #region Carga los registros del footer
                foreach (DTO_ccSaldosComponentes c in componentes)
                {
                    ctrl.TerceroID.Value = ctrlTercero;

                    if (Math.Abs(c.CuotaSaldo.Value.Value) > 0)
                    {
                        decimal vlrML = c.CuotaSaldo.Value.Value;
                        decimal vlrME = 0;

                        if (tc != 0)
                            vlrME = Math.Round(vlrML / tc, 2);

                        compCta = this.GetComponenteCuentaByComponenteCartera(compCtasCedida, c.ComponenteCarteraID.Value);

                        //CuentaID
                        if (!string.IsNullOrWhiteSpace(compCta.CuentaID.Value))
                        {
                            cta = cacheCtas[compCta.CuentaID.Value];
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                            DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrML, vlrME, false);
                            footer.Add(f);
                        }

                        //Cuenta recursos cesion
                        if (comprador.TipoLiquidacion.Value == (byte)TipoLiquidacionComprador.Total && !string.IsNullOrWhiteSpace(compCta.CtaRecursosCesion.Value) && 
                           (c.ComponenteCarteraID.Value != compSeguro || (c.ComponenteCarteraID.Value == compSeguro && !comprador.PagoSeguroInd.Value.Value)))
                        {
                            cta = cacheCtas[compCta.CtaRecursosCesion.Value];
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                            grupo = cacheGrupos[cta.CuentaGrupoID.Value];
                            if (!grupo.CostoInd.Value.Value)
                            {
                                if (!ctasRecCesion.Contains(compCta.CtaRecursosCesion.Value))
                                    ctasRecCesion.Add(compCta.CtaRecursosCesion.Value);

                                ctrl.TerceroID.Value = comprador.TerceroID.Value;
                                DTO_ComprobanteFooter f1 = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrML * -1, vlrME * -1, false);
                                footer.Add(f1);
                            }
                        }
                    }
                }
                #endregion

                ctrl.TerceroID.Value = ctrlTercero;
                return footer;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "VentaCartera_GenerarComprobanteCuota_Cedida");

                return result;
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Trae todos los registros de DTO_ccNominaDeta
        /// </summary>
        /// <returns>retorna una lista de DTO_ccNominaDeta</returns>
        public DTO_ccVentaDocu ccVentaDocu_GetByID(int NumeroDoc)
        {
            this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccVentaDocu.DAL_ccVentaDocu_GetByID(NumeroDoc);
        }

        /// <summary>
        /// Funcion que trae los creditos para la venta de cartera
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="compradorCarteraID">Comprador de la venta de cartera</param>
        /// <param name="oferta">Oferta de la compra de cartera</param>
        /// <returns></returns>
        public DTO_VentaCartera VentaCartera_GetForVenta(string actFlujoID, string compradorCarteraID, string oferta)
        {
            try
            {
                #region Variables

                //Variables generales
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccVentaDeta = (DAL_ccVentaDeta)base.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                
                //Variables de resultados
                DTO_VentaCartera ventaCartera = new DTO_VentaCartera();

                //Variables de operación
                List<DTO_ccCreditoPlanPagos> planPagosAll = new List<DTO_ccCreditoPlanPagos>();
                List<DTO_ccVentaDeta> ventasDeta = new List<DTO_ccVentaDeta>();
                DTO_ccVentaDocu ventaDocu = null;
                DTO_glDocumentoControl docCtrl = new DTO_glDocumentoControl();

                //Variables de los créditos
                DTO_seUsuario seUsuario = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);
                string usuarioID = seUsuario.ID.Value;

                #endregion

                List<DTO_ccCreditoDocu> preventa = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosVenta(actFlujoID, compradorCarteraID, oferta, usuarioID);
                foreach (DTO_ccCreditoDocu credito in preventa)
                {
                    if (ventaDocu == null)
                    {
                        DTO_glDocumentoControl ctrl = this._moduloGlobal.glDocumentoControl_GetByID(credito.DocVenta.Value.Value);
                        ventaDocu = this._dal_ccVentaDocu.DAL_ccVentaDocu_GetByID(credito.DocVenta.Value.Value);
                    }
                }

                ventaCartera.AddData(preventa, planPagosAll, ventasDeta, ventaDocu);
                return ventaCartera;

            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "VentaCartera_GetForVenta");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que trae los creditos vendidos
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <returns></returns>
        public DTO_VentaCartera VentaCartera_GetByActividadFlujo(string actFlujoID)
        {
            try
            {
                this._dal_ccVentaDeta = (DAL_ccVentaDeta)base.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_VentaCartera ventaCartera = new DTO_VentaCartera();

                List<DTO_ccVentaDeta> ventasDeta = new List<DTO_ccVentaDeta>();
                DTO_ccVentaDocu ventaDocu = new DTO_ccVentaDocu();

                ventasDeta = this._dal_ccVentaDeta.DAL_ccVentaDeta_GetByActividadFlujo(actFlujoID);

                ventaCartera.AddData(ventasDeta, ventaDocu);
                return ventaCartera;

            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "VentaCartera_GetByActividadFlujo");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que trae los creditos para la venta de cartera
        /// </summary>
        /// <param name="compradorCarteraID">Comprador de la venta de cartera</param>
        /// <param name="oferta">oferta del credito</param>
        /// <param name="mesINI">Mes Inicial de la consulta</param>
        /// <param name="mesFIN">Mes Final de la consulta</param>
        /// <param name="Tipo">Tipo de Consulta</param>
        /// <returns>Lista de Ventas</returns>        
        public List<DTO_QueryVentaCartera> VentaCartera_GetForCompradorCart(string compradorCarteraID, string oferta, DateTime mesINI, DateTime mesFIN, TipoVentaCartera tipo)
        {
            try
            {
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccVentaDeta = (DAL_ccVentaDeta)base.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCierreMes = (DAL_ccCierreMes)base.GetInstance(typeof(DAL_ccCierreMes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_QueryVentaCartera> listVentaCartera = new List<DTO_QueryVentaCartera>();
                DTO_ccCreditoDocu creditoDocu = new DTO_ccCreditoDocu();
                List<DTO_ccVentaDeta> ventasDeta = new List<DTO_ccVentaDeta>();
               
                //Obtiene lista de Ventas con el comprador cartera y/o oferta                
                List<DTO_ccVentaDocu> listVentaDocu = this._dal_ccVentaDocu.DAL_ccVentaDocu_GetByFilter(compradorCarteraID, oferta, mesINI, mesFIN);
                foreach (DTO_ccVentaDocu ventaDocu in listVentaDocu)
                {
                    //Asigna datos
                    DTO_QueryVentaCartera queryVenta = new DTO_QueryVentaCartera();
                    DTO_glDocumentoControl docCtrl = this._moduloGlobal.glDocumentoControl_GetByID(ventaDocu.NumeroDoc.Value.Value);
                    queryVenta.FechaDoc.Value = docCtrl.FechaDoc.Value;
                    queryVenta.Oferta.Value = ventaDocu.Oferta.Value;
                    queryVenta.FactorCesion.Value = ventaDocu.FactorCesion.Value;
                    queryVenta.FechaPago1.Value = ventaDocu.FechaPago1.Value;
                    queryVenta.FechaPagoUlt.Value = ventaDocu.FechaPago1.Value;
                    queryVenta.Observacion.Value = ventaDocu.Observacion.Value;
                   
                    //Obtiene el detalle de la venta
                    ventasDeta = this._dal_ccVentaDeta.DAL_ccVentaDeta_GetByNumeroDoc(ventaDocu.NumeroDoc.Value.Value);
                    foreach (DTO_ccVentaDeta vtaDeta in ventasDeta)
                    {
                        //Obtiene el Credito
                        DTO_QueryVentaCarteraDet queryVentaDet = new DTO_QueryVentaCarteraDet();
                        creditoDocu = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(vtaDeta.NumDocCredito.Value.Value);
                        queryVentaDet.Libranza.Value = creditoDocu.Libranza.Value;
                        queryVentaDet.Plazo.Value = creditoDocu.Plazo.Value;
                        queryVentaDet.ClienteID.Value = creditoDocu.ClienteID.Value != null ? creditoDocu.ClienteID.Value : null;
                        DTO_ccCliente cliente = queryVentaDet.ClienteID.Value != null ? (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, queryVentaDet.ClienteID.Value, true, false) : null;
                        queryVentaDet.Descriptivo.Value = cliente != null ? cliente.Descriptivo.Value : null;
                        //queryVentaDet.EC_Fecha.Value = creditoDocu.CanceladoInd.Value.Value &&
                        //                              (creditoDocu.EC_Proposito.Value == 2 || creditoDocu.EC_Proposito.Value == 3 ||
                        //                               creditoDocu.EC_Proposito.Value == 4 || creditoDocu.EC_Proposito.Value == 5) ? creditoDocu.EC_Fecha.Value : null;
                       
                        //Obtiene Recompra si existe
                        if (vtaDeta.NumDocRecompra.Value != null)
                        {
                            DTO_glDocumentoControl docRecompra = this._moduloGlobal.glDocumentoControl_GetByID(vtaDeta.NumDocRecompra.Value.Value);
                            queryVentaDet.FechaDocRecompra.Value = docRecompra != null ? docRecompra.FechaDoc.Value : null;
                        }

                        //Obtiene cierre si existe
                        DTO_ccCierreMesCartera cierre = this._dal_ccCierreMes.DAL_ccCierreMesCartera_GetByCreditoMes(vtaDeta.NumDocCredito.Value.Value, mesFIN);
                        if (cierre != null)
                        {
                            queryVentaDet.CuotasFlujo.Value = cierre.CuotasFlujo.Value;
                            queryVentaDet.AlturaFlujo.Value = cierre.AlturaFlujo.Value;
                            queryVentaDet.CuotasVEN.Value = cierre.CuotasVEN.Value;
                            queryVentaDet.SaldoFlujo.Value = cierre.SaldoFlujo.Value;
                            queryVentaDet.SaldoFlujoCAP.Value = cierre.SaldoFlujoCAP.Value;
                            queryVentaDet.CapitalVEN.Value = cierre.CapitalVEN.Value + cierre.InteresVEN.Value;
                            //Obtiene Prepago si existe
                            if (cierre.NumeroDocPrepago.Value != null)
                            {
                                DTO_glDocumentoControl docPrepago = this._moduloGlobal.glDocumentoControl_GetByID(cierre.NumeroDocPrepago.Value.Value);
                                queryVentaDet.FechaDocPrepago.Value = docPrepago != null ? docPrepago.FechaDoc.Value : null;
                            }
                        }
                       
                        queryVentaDet.VlrCuota.Value = vtaDeta.VlrCuota.Value;
                        queryVentaDet.CuotasVend.Value = vtaDeta.CuotasVend.Value;
                        queryVentaDet.FactorCesion.Value = vtaDeta.FactorCesion.Value;
                        queryVentaDet.VlrVenta.Value = vtaDeta.VlrVenta.Value;
                        queryVentaDet.VlrLibranza.Value = vtaDeta.VlrLibranza.Value;
                        queryVenta.Detalle.Add(queryVentaDet);
                    }
                  
                    queryVenta.VlrVenta.Value = ventaDocu.Valor.Value;// queryVenta.Detalle.Sum(x => x.VlrVenta.Value);
                    queryVenta.VlrLibranza.Value = queryVenta.Detalle.Sum(x => x.VlrLibranza.Value);
                    queryVenta.SaldoFlujo.Value = queryVenta.Detalle.Sum(x => x.SaldoFlujo.Value);
                    queryVenta.TotalLibranza.Value = queryVenta.Detalle.Count();
                    queryVenta.CredPendientes.Value = queryVenta.Detalle.Count(x => x.SaldoFlujo.Value > 0);
                    queryVenta.CredMora.Value = queryVenta.Detalle.Count(x => x.CuotasVEN.Value > 0);
                    queryVenta.CredPrepagados.Value = queryVenta.Detalle.Count(x => x.FechaDocPrepago.Value != null);
                    queryVenta.CredRecompra.Value = queryVenta.Detalle.Count(x => x.FechaDocRecompra.Value != null);
                    listVentaCartera.Add(queryVenta);
                }

                //Filtra los resultados
                if (tipo == TipoVentaCartera.EnMora)
                    listVentaCartera = listVentaCartera.FindAll(x => x.CredMora.Value.Value > 0).ToList();
                else if (tipo == TipoVentaCartera.Pendiente)
                    listVentaCartera = listVentaCartera.FindAll(x => x.CredPendientes.Value.Value > 0).ToList();
                else if (tipo == TipoVentaCartera.Prepagada)
                    listVentaCartera = listVentaCartera.FindAll(x => x.CredPrepagados.Value.Value > 0).ToList();
                else if (tipo == TipoVentaCartera.Recomprada)
                    listVentaCartera = listVentaCartera.FindAll(x => x.CredRecompra.Value.Value > 0).ToList();

                return listVentaCartera;

            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "VentaCartera_GetForCompradorCart");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que genera un nuevo documento de recompra de cartera con sus detalles
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="recompraCartera">Dto que contiene el documento y el detalle de la recompra de cartera</param>
        /// <param name="insideAnotherTx">Indicador para establecer si se encuentra dentor de otra transaccion</param>
        /// <returns></returns>
        public Tuple<int, List<DTO_SerializedObject>> VentaCartera_Add(int documentID, string actFlujoID, DTO_VentaCartera ventaCartera, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Generales
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();
            Tuple<int, List<DTO_SerializedObject>> resultTuple;
            bool isValid = true;

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccVentaDeta = (DAL_ccVentaDeta)base.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloFacturacion = (ModuloFacturacion)this.GetInstance(typeof(ModuloFacturacion), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_glDocumentoControl ctrlNew = null;
            DTO_glDocumentoControl ctrlFact = null;
            DTO_Comprobante comprobante = null;
            DTO_coComprobante comp = null;
            #endregion
            try
            {
                #region Variables

                //Variables por defecto
                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string sectorCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);

                //Vairables de valores y fechas
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                decimal tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, periodo);

                //Variables del comprobante
                DTO_coDocumento coDoc = new DTO_coDocumento();
                string coDocID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocumentoVentaCartera);
                string codCarteraPropia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);
                string contabilizaOrdCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ContabilizacionCtasOrdCesion);

                //variables de componentes
                string compCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);

                //Comprador
                DTO_ccCompradorCartera comprador = (DTO_ccCompradorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCompradorCartera, ventaCartera.VentaDocu.CompradorCarteraID.Value, true, false);
                byte tipoRecursos = comprador.TipoControlRecursos.Value.Value;

                //Cuentas Contabilidad
                string ctaUtilidadID_Ganancias = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaUtilidadCesion);
                string ctaUtilidadID_Perdidas = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaCostoRecompraCartera);
                string ctaContraOrden_Propia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterPropia);
                string ctaContraOrden_Cedida = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterCedida);
                string ctaContraBalance_Cedida = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaBalanceCarteraCedida);
                string ctaOrdenCapitalCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenCapitalCesion);
                string ctaOrdenUtilidadCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenUtilidadCesion);
                string ctaOrdenCesionContra = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenCesionXContra);
                string ctaProvisionUtilidad = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaProvisionUtilidadVenta);
                string ctaReservaVenta = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaReservaVenta);
                string porcReservaUtilidadStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ReservaUtilidad);
                decimal tasaReservaUtilidad = !string.IsNullOrWhiteSpace(porcReservaUtilidadStr) ? Convert.ToDecimal(porcReservaUtilidadStr) : 0;

                //Variables de operación
                string nitFiduciaria = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_TerceroFiduciaria);

                //Variable de archivo csv
                string fileName;
                string str = this.GetCvsName(ExportType.Csv, out fileName);
                List<DTO_MigrarVentaCartera> migracionVentaCartera = new List<DTO_MigrarVentaCartera>();

                #endregion
                #region Validaciones

                #region Cuentas generales
        
                //Valida el coDocumento
                if (string.IsNullOrWhiteSpace(coDocID))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocumentoVentaCartera + "&&" + string.Empty;
                    results.Add(result);
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }
                else
                    coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocID, true, false);

                //Valida que tenga comprobante
                if (string.IsNullOrWhiteSpace(coDoc.ComprobanteID.Value))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;
                    results.Add(result);
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }
                else
                    comp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, coDoc.ComprobanteID.Value, true, false);

                //Valida que el documento asociado tenga cuenta local
                if (string.IsNullOrWhiteSpace(coDoc.CuentaLOC.Value))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocID;
                    results.Add(result);
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }

                //Valida la cuenta de la utilidad de la cesion
                if (string.IsNullOrWhiteSpace(ctaUtilidadID_Ganancias))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaUtilidadCesion + "&&" + string.Empty;
                    results.Add(result);
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }

                //Valida la cuenta de la utilidad de la cesion
                if (string.IsNullOrWhiteSpace(ctaUtilidadID_Perdidas))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaCostoRecompraCartera + "&&" + string.Empty;
                    results.Add(result);
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }

                //Valida la cuenta de contra orden (propia)
                if (string.IsNullOrWhiteSpace(ctaContraOrden_Propia))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenContraCarterPropia + "&&" + string.Empty;
                    results.Add(result);
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }

                //Valida la cuenta de contra orden (cedida)
                if (string.IsNullOrWhiteSpace(ctaContraOrden_Cedida))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenContraCarterCedida + "&&" + string.Empty;
                    results.Add(result);
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }

                //Valida la cuenta de contra balance
                if (string.IsNullOrWhiteSpace(ctaContraBalance_Cedida))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaBalanceCarteraCedida + "&&" + string.Empty;
                    results.Add(result);
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }
                #endregion
                if (contabilizaOrdCesion == "1")
                {
                    #region Cuentas de orden para la cesion

                    //Valida la cuenta de orden de capital cesion
                    if (string.IsNullOrWhiteSpace(ctaOrdenCapitalCesion))
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenCapitalCesion + "&&" + string.Empty;
                        results.Add(result);
                        resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                        return resultTuple;
                    }

                    //Valida la cuenta de orden de utilidad cesion
                    if (string.IsNullOrWhiteSpace(ctaOrdenUtilidadCesion))
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenUtilidadCesion + "&&" + string.Empty;
                        results.Add(result);
                        resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                        return resultTuple;
                    }

                    //Valida la cuenta de contrapartida de la cesion
                    if (string.IsNullOrWhiteSpace(ctaOrdenCesionContra))
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenCesionXContra + "&&" + string.Empty;
                        results.Add(result);
                        resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                        return resultTuple;
                    }

                    #endregion
                }

                #endregion
                #region Carga el glDocumentoControl
                ctrlNew = this._moduloGlobal.glDocumentoControl_GetByID(ventaCartera.VentaDocu.NumeroDoc.Value.Value);
                ctrlNew.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                ctrlNew.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrlNew.FechaDoc.Value = ventaCartera.VentaDocu.FechaAceptacion.Value.Value;

                this._moduloGlobal.glDocumentoControl_Update(ctrlNew, false, true);
                int numDoc = ctrlNew.NumeroDoc.Value.Value;
                #endregion
                #region Actualiza la info a ccVentaDocu
                this._dal_ccVentaDocu.DAL_ccVentaDocu_Update(ventaCartera.VentaDocu);
                #endregion
                #region Actualiza el estado del documento
                this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, ventaCartera.VentaDocu.NumeroDoc.Value.Value, EstadoDocControl.Aprobado, string.Empty, true);
                #endregion
                #region Carga el header del comprobante

                comprobante = new DTO_Comprobante();
                DTO_ComprobanteHeader header = new DTO_ComprobanteHeader();
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();

                //header
                header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                header.ComprobanteNro.Value = 0;
                header.Fecha.Value = ctrlNew.FechaDoc.Value;
                header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                header.MdaTransacc.Value = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                header.NumeroDoc.Value = numDoc;
                header.PeriodoID.Value = periodo;
                header.TasaCambioBase.Value = tc;
                header.TasaCambioOtr.Value = tc;

                comprobante.Header = header;
                #endregion
                #region Recorre las ventas, actualiza créditos, plan de pagos y contabiliza la venta
                int i = 0;
                decimal contraBalML = 0;
                decimal contraBalME = 0;
                foreach (DTO_ccCreditoDocu creditoVenta in ventaCartera.Creditos)
                {
                    DTO_ccCreditoDocu credito = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(creditoVenta.NumeroDoc.Value.Value);
                    DTO_ccVentaDeta venta = this._dal_ccVentaDeta.DAL_ccVentaDeta_GetByNumDocLibranza(creditoVenta.NumeroDoc.Value.Value);

                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / ventaCartera.Creditos.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    #region Actualiza el plan de pagos

                    decimal tasa = venta.FactorCesion.Value.Value / 100;
                    decimal saldoCapital = 0;
                    decimal vlrTotalPago = 0;
                    decimal vlrUtilidadCesion = 0;
                    decimal vlrCapitalCesion = 0;
                    decimal vlrDerechosCesion = 0;
                    List<DTO_ccCreditoPlanPagos> ppCesion = this.GetPlanPagos(venta.NumDocCredito.Value.Value);
                    ppCesion = ppCesion.Where(x => x.CuotaID.Value.Value >= venta.CuotaID.Value.Value).ToList();
                    for (int k = 0; k < ppCesion.Count; ++k)
                    {
                        DTO_ccCreditoPlanPagos cuota = ppCesion[k];
                        saldoCapital += cuota.VlrCapital.Value.Value;
                        decimal vlrCuota = comprador.TipoLiquidacion.Value.Value == (byte)TipoLiquidacionComprador.CapitalInteres ?
                                cuota.VlrCapital.Value.Value + cuota.VlrInteres.Value.Value : cuota.VlrCuota.Value.Value;
                        vlrTotalPago += vlrCuota;

                        //VlrSaldoCapitalCesion, VlrUtilidadCesion, VlrCapitalCesion, VlrDerechosCesion
                        if (k == 0)
                        {
                            #region Primera cuota de la venta
                            vlrUtilidadCesion = venta.VlrVenta.Value.Value * tasa;
                            vlrCapitalCesion = vlrCuota - vlrUtilidadCesion;
                            vlrDerechosCesion = vlrCapitalCesion - cuota.VlrCapital.Value.Value;

                            cuota.VlrSaldoCapitalCesion.Value = venta.VlrVenta.Value.Value;
                            cuota.VlrUtilidadCesion.Value = vlrUtilidadCesion;
                            cuota.VlrCapitalCesion.Value = vlrCapitalCesion;
                            cuota.VlrDerechosCesion.Value = vlrDerechosCesion;
                            #endregion
                        }
                        else if (k == ppCesion.Count - 1)
                        {
                            #region Última cuota de la venta
                            decimal vlrSaldoCapital = ppCesion[k - 1].VlrSaldoCapitalCesion.Value.Value - ppCesion[k - 1].VlrCapitalCesion.Value.Value;
                            vlrCapitalCesion = vlrSaldoCapital;
                            vlrUtilidadCesion = vlrCuota - vlrCapitalCesion;
                            vlrDerechosCesion = vlrCapitalCesion - cuota.VlrCapital.Value.Value;

                            cuota.VlrSaldoCapitalCesion.Value = vlrSaldoCapital;
                            cuota.VlrUtilidadCesion.Value = vlrUtilidadCesion;
                            cuota.VlrCapitalCesion.Value = vlrCapitalCesion;
                            cuota.VlrDerechosCesion.Value = vlrDerechosCesion;
                            #endregion
                        }
                        else
                        {
                            #region Otras cuotas
                            decimal vlrSaldoCapital = ppCesion[k - 1].VlrSaldoCapitalCesion.Value.Value - ppCesion[k - 1].VlrCapitalCesion.Value.Value;
                            vlrUtilidadCesion = vlrSaldoCapital * tasa;
                            vlrCapitalCesion = vlrCuota - vlrUtilidadCesion;
                            vlrDerechosCesion = vlrCapitalCesion - cuota.VlrCapital.Value.Value;
                            
                            cuota.VlrSaldoCapitalCesion.Value = vlrSaldoCapital;
                            cuota.VlrUtilidadCesion.Value = vlrUtilidadCesion;
                            cuota.VlrCapitalCesion.Value = vlrCapitalCesion;
                            cuota.VlrDerechosCesion.Value = vlrDerechosCesion;
                            #endregion
                        }

                        cuota.CompradorCarteraID.Value = ventaCartera.VentaDocu.CompradorCarteraID.Value;
                        cuota.FechaFlujo.Value = tipoRecursos == (byte)TipoControlRecursos.Flujo ? ventaCartera.VentaDocu.FechaPago1.Value.Value.AddMonths(k) : cuota.FechaCuota.Value;
                        cuota.DocVenta.Value = numDoc;

                        this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(cuota);
                    }

                    #endregion
                    #region Actualiza la info del crédito

                    venta.VlrUtilidad.Value = venta.VlrTotalDerechos.Value;// venta.VlrVenta.Value.Value - saldoCapital;

                    credito.TipoEstado.Value = (byte)TipoEstadoCartera.Cedida;
                    credito.VendidaInd.Value = true;
                    credito.DocVenta.Value = numDoc;
                    credito.CompradorFinalID.Value = ventaCartera.VentaDocu.CompradorCarteraID.Value;
                    //credito.VlrVenta.Value = venta.VlrVenta.Value;
                    //credito.VlrUtilidad.Value = venta.VlrUtilidad.Value;
                    //credito.VlrLibranza.Value = venta.VlrLibranza.Value;

                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                    #endregion
                    #region Asigna el nuevo flujo
                    result = this.AsignarFlujo(documentID, credito.NumeroDoc.Value.Value, actFlujoID, false, string.Empty);
                    if (result.Result == ResultValue.NOK)
                    {
                        isValid = false;
                        results.Add(result);
                    }
                    #endregion

                    #region Genera los detalles del comprobante
                 
                    decimal vlrVenta = venta.VlrVenta.Value.Value;
                    decimal vlrSaldoCap = ppCesion.Sum(x => x.VlrCapitalCesion.Value.Value);
                    decimal vlrUtilidad = venta.VlrUtilidad.Value.Value;
                    decimal vlrProvGral = venta.VlrProvGeneral.Value.Value;
                    decimal vlrProvCompra = venta.VlrProvComprador.Value.Value;
                    decimal vlrSdoAsistencias = venta.VlrSdoAsistencias.Value.Value;
                    decimal vlrSdoCapital = venta.VlrSdoCapital.Value.Value;
                    DateTime fecha1 = ventaCartera.VentaDocu.FechaLiquida.Value.Value;
                    string ctaUtilidadID = vlrUtilidad >= 0 ? ctaUtilidadID_Ganancias : ctaUtilidadID_Perdidas;
                    object compDet = this.VentaCartera_GenerarComprobante(venta.NumDocCredito.Value.Value, ppCesion, tc, coDoc,
                        ventaCartera.VentaDocu.Oferta.Value, ctaUtilidadID, codCarteraPropia, concCargoXdef, lgXdef, lineaXdef, compCapital, compInteres,
                        ctaContraOrden_Propia, ctaContraOrden_Cedida, ctaContraBalance_Cedida, ctaOrdenCapitalCesion, ctaOrdenUtilidadCesion,
                        ctaOrdenCesionContra, ctaProvisionUtilidad, ctaReservaVenta, tasaReservaUtilidad, contabilizaOrdCesion, vlrVenta, vlrUtilidad, vlrSaldoCap,
                        vlrProvGral, vlrProvCompra, vlrSdoAsistencias,vlrSdoCapital,fecha1, comprador, nitFiduciaria, ref contraBalML, ref contraBalME);

                    if (compDet.GetType() == typeof(DTO_TxResult))
                        result = (DTO_TxResult)compDet;
                    else
                    {
                        List<DTO_ComprobanteFooter> footerTemp = (List<DTO_ComprobanteFooter>)compDet;
                        footer.AddRange(footerTemp);
                    }
                    #endregion
                    if (result.Result == ResultValue.NOK)
                    {
                        isValid = false;
                        results.Add(result);
                    }
                    else
                    {
                        #region Crea el registro del archivo a generar
                        DTO_ccCliente cliente = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, credito.ClienteID.Value, true, false);
                        DTO_coTercero coTercero = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, cliente.TerceroID.Value, true, false);
                        DTO_MigrarVentaCartera infoMigraVenta = new DTO_MigrarVentaCartera();
                        #region Venta Cartera
                        infoMigraVenta.Libranza.Value = venta.Libranza.Value;
                        infoMigraVenta.ClienteID.Value = venta.ClienteID.Value;
                        infoMigraVenta.Nombre.Value = venta.Nombre.Value;
                        infoMigraVenta.CompradorCartera.Value = venta.CompradorFinal.Value;
                        infoMigraVenta.CuotasVendidas.Value = venta.CuotasVend.Value;
                        infoMigraVenta.TasaVenta.Value = venta.FactorCesion.Value;
                        infoMigraVenta.VlrCuota.Value = venta.VlrCuota.Value;
                        infoMigraVenta.VlrLibranza.Value = venta.VlrLibranza.Value;
                        infoMigraVenta.VlrVenta.Value = venta.VlrVenta.Value;
                        infoMigraVenta.FechaCuota1.Value = venta.FechaCuota1.Value;
                        #endregion
                        #region coTecero
                        infoMigraVenta.Apellido1.Value = coTercero.ApellidoPri.Value;
                        infoMigraVenta.Apellido2.Value = coTercero.ApellidoSdo.Value;
                        infoMigraVenta.Nombre1.Value = coTercero.NombrePri.Value;
                        infoMigraVenta.Nombre2.Value = coTercero.NombreSdo.Value;
                        infoMigraVenta.Ciudad.Value = coTercero.LugarGeograficoID.Value;
                        infoMigraVenta.RegFiscal.Value = coTercero.ReferenciaID.Value;
                        infoMigraVenta.ActEconomicaID.Value = coTercero.ActEconomicaID.Value;
                        infoMigraVenta.TipoDocumento.Value = coTercero.TerceroDocTipoID.Value;
                        infoMigraVenta.Telefono.Value = coTercero.Tel1.Value;
                        infoMigraVenta.Direccion.Value = coTercero.Direccion.Value;
                        infoMigraVenta.CorreoElectronico.Value = coTercero.CECorporativo.Value;
                        infoMigraVenta.AutoRetenedorIVAInd.Value = coTercero.AutoRetIVAInd.Value;
                        infoMigraVenta.AutoRetenedorInd.Value = coTercero.AutoRetRentaInd.Value;
                        infoMigraVenta.DeclaraIVAInd.Value = coTercero.DeclaraIVAInd.Value;
                        infoMigraVenta.DeclaraRentaInd.Value = coTercero.DeclaraRentaInd.Value;
                        infoMigraVenta.RadicaDirectoInd.Value = coTercero.RadicaDirectoInd.Value;
                        infoMigraVenta.IndependienteEMPInd.Value = coTercero.IndependienteEMPInd.Value;
                        infoMigraVenta.ExcluyeCREEInd.Value = coTercero.ExcluyeCREEInd.Value;
                        #endregion
                        #region ccCliente
                        infoMigraVenta.FechaExpDoc.Value = cliente.FechaExpDoc.Value;
                        infoMigraVenta.FechaNacimiento.Value = cliente.FechaNacimiento.Value;
                        infoMigraVenta.NacimientoCiudad.Value = cliente.NacimientoCiudad.Value;
                        infoMigraVenta.Sexo.Value = cliente.Sexo.Value;
                        infoMigraVenta.EstadoCivil.Value = cliente.EstadoCivil.Value;
                        infoMigraVenta.ResidenciaDir.Value = cliente.ResidenciaDir.Value;
                        infoMigraVenta.ResidenciaTipo.Value = cliente.ResidenciaTipo.Value;
                        infoMigraVenta.ZonaID.Value = cliente.ZonaID.Value;
                        infoMigraVenta.LaboralDireccion.Value = cliente.LaboralDireccion.Value;
                        infoMigraVenta.Cargo.Value = cliente.Cargo.Value;
                        infoMigraVenta.ProfesionID.Value = cliente.ProfesionID.Value;
                        infoMigraVenta.LaboralEntidad.Value = cliente.LaboralEntidad.Value;
                        infoMigraVenta.Antiguedad.Value = cliente.Antiguedad.Value;
                        infoMigraVenta.ClienteTipo.Value = cliente.ClienteTipo.Value;
                        infoMigraVenta.Estrato.Value = cliente.Estrato.Value;
                        infoMigraVenta.EscolaridadNivel.Value = cliente.EscolaridadNivel.Value;
                        infoMigraVenta.JornadaLaboral.Value = cliente.JornadaLaboral.Value;
                        infoMigraVenta.Ocupacion.Value = cliente.Ocupacion.Value;
                        infoMigraVenta.AsesorID.Value = cliente.AsesorID.Value;
                        infoMigraVenta.VlrDevengado.Value = cliente.VlrDevengado.Value;
                        infoMigraVenta.VlrDeducido.Value = cliente.VlrDeducido.Value;
                        infoMigraVenta.VlrActivos.Value = cliente.VlrActivos.Value;
                        infoMigraVenta.VlrPasivos.Value = cliente.VlrPasivos.Value;
                        infoMigraVenta.VlrMesada.Value = cliente.VlrMesada.Value;
                        infoMigraVenta.VlrConsultado.Value = cliente.VlrConsultado.Value;
                        infoMigraVenta.VlrOpera.Value = cliente.VlrOpera.Value;
                        infoMigraVenta.FechaIngreso.Value = cliente.FechaIngreso.Value;
                        #endregion
                        migracionVentaCartera.Add(infoMigraVenta);
                        #endregion
                        DTO_Alarma alarma = this.GetFirstMailInfo(venta.NumDocCredito.Value.Value, false);
                        alarma.FileName = fileName;
                        results.Add(alarma);
                    }
                }
                if (!isValid)
                {
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }
                #endregion             
                #region Actualiza el glDocumentoControl de la venta
                ctrlNew.Valor.Value = (ctrlNew.MonedaID.Value == mdaLoc ? (contraBalML) : (contraBalME)) * -1; 
                this._moduloGlobal.glDocumentoControl_Update(ctrlNew, false, true);
                #endregion
                #region Crea ContrapartidaGral
                DTO_coPlanCuenta ctaContra = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, coDoc.CuentaLOC.Value, true, false);
                DTO_glConceptoSaldo cSaldo = new DTO_glConceptoSaldo();
                //Carga la info del saldo
                if (!string.IsNullOrEmpty(ctaContra.ConceptoSaldoID.Value))
                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, ctaContra.ConceptoSaldoID.Value, true, false);
                DTO_ComprobanteFooter contraGral = this.CrearComprobanteFooter(ctrlNew, ctaContra, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, contraBalML * -1, contraBalME * -1, true);
                contraGral.TerceroID.Value = comprador.TerceroID.Value;
                contraGral.DocumentoCOM.Value = ventaCartera.VentaDocu.Oferta.Value;
                contraGral.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " + ventaCartera.VentaDocu.Oferta.Value;
                footer.Add(contraGral); 
                #endregion

               
                #region Contabiliza el comprobante

                if (footer.Count == 0)
                {
                    isValid = false;
                    results.Clear();
                    result = new DTO_TxResult();
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_CompNoResults;
                    results.Add(result);
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }

                comprobante.Footer = footer;
                result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobante, periodo, ModulesPrefix.cc, 0, false);
                if (result.Result == ResultValue.NOK)
                {
                    isValid = false;
                    results.Clear();
                    results.Add(result);
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                    return resultTuple;
                }
                #endregion

                isValid = results.Any(c => c.GetType() == typeof(DTO_Alarma));
                if (isValid)
                {
                    if (Convert.ToByte(sectorCartera) == (byte)SectorCartera.Solidario) //Realiza la factura de venta segun el tipo de cartera
                    {
                        resultTuple = new Tuple<int, List<DTO_SerializedObject>>(numDoc, results);

                        CsvExport<DTO_MigrarVentaCartera> csv = new CsvExport<DTO_MigrarVentaCartera>(migracionVentaCartera);
                        csv.ExportToFile(str, ExportType.Csv, true, string.Empty);

                        #region Crea la factura de la venta

                        #region Variables por defecto
                        string zona = this.GetControlValueByCompany(ModulesPrefix.fa, AppControl.fa_ZonaxDefecto);
                        string listaPrecio = this.GetControlValueByCompany(ModulesPrefix.fa, AppControl.fa_ListaPreciosxdefecto);
                        string lineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                        string asesor = this.GetControlValueByCompany(ModulesPrefix.fa, AppControl.fa_AsesorPorDefecto);
                        string monedaLocal = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                        string tipoFactura = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_TipoFacturaVenta);
                        string prefijoFactura = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_PrefijoVenta);
                        string servicioFact = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ServicioFactVenta);
                        DTO_faServicios servicio = (DTO_faServicios)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.faServicios, servicioFact, true, false);
                        #endregion

                        if (string.IsNullOrEmpty(tipoFactura))
                        {
                            isValid = false;
                            results.Clear();
                            result.ResultMessage = DictionaryMessages.Err_CodeInvalid + "&&" + "Tipo Factura Venta Cart. " + "&&" + tipoFactura;
                            result.Result = ResultValue.NOK;
                            results.Add(result);
                            resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                            return resultTuple;
                        }
                        if (string.IsNullOrEmpty(prefijoFactura))
                        {
                            isValid = false;
                            results.Clear();
                            result.ResultMessage = DictionaryMessages.Err_CodeInvalid + "&&" + "Prefijo Venta Cart. " + "&&" + prefijoFactura;
                            result.Result = ResultValue.NOK;
                            results.Add(result);
                            resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                            return resultTuple;
                        }
                        if (servicio == null)
                        {
                            isValid = false;
                            results.Clear();
                            result.ResultMessage = DictionaryMessages.Err_CodeInvalid + "&&" + "Servicio Fact. Venta Cart. " + "&&" + servicioFact;
                            result.Result = ResultValue.NOK;
                            results.Add(result);
                            resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                            return resultTuple;
                        }

                        #region Valida la Cuenta del Tipo de factura
                        string cta = string.Empty;
                        string comprobanteID = string.Empty;
                        DTO_faFacturaTipo facTipo = (DTO_faFacturaTipo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.faFacturaTipo, tipoFactura, true, false);
                        if (facTipo != null)
                        {
                            DTO_coDocumento coDocumento = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, facTipo.coDocumentoID.Value, true, false);
                            if (coDocumento != null)
                            {
                                comprobanteID = coDocumento.ComprobanteID.Value;
                                cta = ctrlNew.MonedaID.Value == monedaLocal ? coDocumento.CuentaLOC.Value : coDocumento.CuentaEXT.Value;
                                DTO_coPlanCuenta dtoCuenta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, cta, true, false);
                                if (dtoCuenta != null)
                                {
                                    DTO_glConceptoSaldo concSaldoDoc = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, dtoCuenta.ConceptoSaldoID.Value, true, false);
                                    if (concSaldoDoc.coSaldoControl.Value.Value != (int)SaldoControl.Doc_Interno)
                                    {
                                        isValid = false;
                                        results.Clear();
                                        result.ResultMessage = DictionaryMessages.Err_InvalidCuentaTipoFact;
                                        result.Result = ResultValue.NOK;
                                        results.Add(result);
                                        resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                                        return resultTuple;
                                    }
                                    else if (coDocumento.DocumentoID.Value != AppDocuments.FacturaVenta.ToString())
                                    {
                                        isValid = false;
                                        results.Clear();
                                        result.ResultMessage = DictionaryMessages.Err_InvalidDocFact;
                                        result.Result = ResultValue.NOK;
                                        results.Add(result);
                                        resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                                        return resultTuple;
                                    }
                                }
                            }
                        }
                        else
                        {
                            isValid = false;
                            results.Clear();
                            result.ResultMessage = DictionaryMessages.Err_CodeInvalid + "&&" + "Tipo de Factura de Venta" + "&&" + tipoFactura;
                            result.Result = ResultValue.NOK;
                            results.Add(result);
                            resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                            return resultTuple;
                        }

                        #endregion

                        if (result.Result == ResultValue.OK)
                        {
                            int numeroDocFact = 0;
                            ctrlFact = new DTO_glDocumentoControl();
                            DTO_faFacturaDocu headerFact = new DTO_faFacturaDocu();
                            List<DTO_faFacturacionFooter> listItemsFact = new List<DTO_faFacturacionFooter>();
                            #region Asigna Documento Control
                            ctrlFact.EmpresaID.Value = this.Empresa.ID.Value;
                            ctrlFact.DocumentoID.Value = AppDocuments.FacturaVenta;
                            ctrlFact.DocumentoTipo.Value = (byte)DocumentoTipo.DocInterno;
                            ctrlFact.PeriodoDoc.Value = ctrlNew.PeriodoDoc.Value;
                            ctrlFact.Fecha.Value = ctrlNew.Fecha.Value;
                            ctrlFact.FechaDoc.Value = ctrlNew.FechaDoc.Value;
                            ctrlFact.PeriodoUltMov.Value = ctrlNew.PeriodoDoc.Value;
                            ctrlFact.MonedaID.Value = ctrlNew.MonedaID.Value;
                            ctrlFact.AreaFuncionalID.Value = this.GetAreaFuncionalByUser();
                            ctrlFact.PrefijoID.Value = prefijoFactura;
                            ctrlFact.TerceroID.Value = comprador.TerceroID.Value;
                            ctrlFact.TasaCambioCONT.Value = ctrlNew.TasaCambioCONT.Value;
                            ctrlFact.TasaCambioDOCU.Value = ctrlNew.TasaCambioDOCU.Value;
                            ctrlFact.LugarGeograficoID.Value = ctrlNew.LugarGeograficoID.Value;
                            ctrlFact.LineaPresupuestoID.Value = ctrlNew.LineaPresupuestoID.Value;
                            ctrlFact.Estado.Value = (byte)EstadoDocControl.Aprobado;
                            ctrlFact.seUsuarioID.Value = this.UserId;
                            ctrlFact.Descripcion.Value = ctrlNew.Descripcion.Value;
                            ctrlFact.ProyectoID.Value = ctrlNew.ProyectoID.Value;
                            ctrlFact.CentroCostoID.Value = ctrlNew.CentroCostoID.Value;
                            ctrlFact.Observacion.Value = "Venta Cartera";
                            ctrlFact.CuentaID.Value = cta;
                            ctrlFact.ComprobanteID.Value = ctrlNew.ComprobanteID.Value;
                            ctrlFact.ComprobanteIDNro.Value = 0;
                            ctrlFact.DocumentoNro.Value = 0;
                            ctrlFact.ConsSaldo.Value = 0;
                            ctrlFact.DocumentoTercero.Value = ctrlNew.DocumentoTercero.Value;
                            ctrlFact.CuentaID.Value = ctrlNew.CuentaID.Value;
                            ctrlFact.DocumentoPadre.Value = ctrlNew.NumeroDoc.Value;
                            ctrlFact.Observacion.Value = ctrlNew.Observacion.Value;
                            #endregion
                            #region Asigna faFacturaDocu
                            DTO_faCliente cliente = (DTO_faCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.faCliente, comprador.TerceroID.Value, true, false);
                            if (cliente == null)
                            {
                                isValid = false;
                                results.Clear();
                                result.ResultMessage = DictionaryMessages.Err_CodeInvalid + "&&" + "Cliente " + "&&" + comprador.TerceroID.Value;
                                result.Result = ResultValue.NOK;
                                results.Add(result);
                                resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                                return resultTuple;
                            }

                            headerFact.EmpresaID.Value = this.Empresa.ID.Value;
                            headerFact.NumeroDoc.Value = 0;
                            headerFact.AsesorID.Value = asesor;
                            headerFact.FacturaTipoID.Value = tipoFactura;
                            headerFact.DocumentoREL.Value = 0;
                            headerFact.FacturaREL.Value = 0;
                            headerFact.MonedaPago.Value = ctrlFact.MonedaID.Value;
                            headerFact.ClienteID.Value = cliente.ID.Value;
                            headerFact.ListaPrecioID.Value = cliente.ListaPrecioID.Value;
                            headerFact.ZonaID.Value = cliente.ZonaID.Value;
                            headerFact.TasaPago.Value = 1;
                            headerFact.FechaVto.Value = ctrlFact.FechaDoc.Value;
                            headerFact.FormaPago.Value = "n/a";
                            headerFact.Valor.Value = ventaCartera.VentaDeta.Sum(x => x.VlrVenta.Value);
                            headerFact.Iva.Value = 0;
                            headerFact.Bruto.Value = headerFact.Valor.Value;
                            headerFact.Porcentaje1.Value = 0;
                            headerFact.Porcentaje2.Value = 0;
                            headerFact.PorcPtoPago.Value = 0;
                            headerFact.FechaPtoPago.Value = ctrlFact.FechaDoc.Value;
                            headerFact.ValorPtoPago.Value = 0;
                            headerFact.Retencion1.Value = 0;
                            headerFact.Retencion2.Value = 0;
                            headerFact.Retencion3.Value = 0;
                            headerFact.FacturaFijaInd.Value = false;
                            headerFact.RteGarantiaIvaInd.Value = false;
                            #endregion
                            #region Asigna glMovimientoDeta
                            DTO_faFacturacionFooter footerFact = new DTO_faFacturacionFooter();
                            footerFact.Index = 0;
                            footerFact.Movimiento.NroItem.Value = 1;
                            footerFact.Movimiento.ImprimeInd.Value = true;
                            footerFact.Movimiento.EmpresaID.Value = this.Empresa.ID.Value;
                            footerFact.Movimiento.ServicioID.Value = servicioFact;
                            footerFact.Movimiento.CentroCostoID.Value = ctrlNew.CentroCostoID.Value;
                            footerFact.Movimiento.TerceroID.Value = comprador.TerceroID.Value;
                            footerFact.Movimiento.ProyectoID.Value = ctrlNew.ProyectoID.Value;
                            footerFact.Movimiento.BodegaID.Value = string.Empty;
                            footerFact.Movimiento.PlaquetaID.Value = string.Empty;
                            footerFact.Movimiento.inReferenciaID.Value = string.Empty;
                            footerFact.Movimiento.EstadoInv.Value = (int)EstadoInv.Activo;
                            footerFact.Movimiento.Parametro1.Value = string.Empty;
                            footerFact.Movimiento.Parametro2.Value = string.Empty;
                            footerFact.Movimiento.IdentificadorTr.Value = 0;
                            footerFact.Movimiento.SerialID.Value = string.Empty;
                            footerFact.Movimiento.EmpaqueInvID.Value = string.Empty;
                            footerFact.Movimiento.CantidadEMP.Value = 1;
                            footerFact.Movimiento.CantidadUNI.Value = 1;
                            footerFact.Movimiento.ValorUNI.Value = ventaCartera.VentaDocu.VlrVenta.Value;
                            footerFact.ValorBruto = footerFact.Movimiento.ValorUNI.Value.Value;
                            footerFact.ValorIVA = 0;
                            footerFact.ValorTotal = footerFact.Movimiento.ValorUNI.Value.Value;
                            footerFact.Movimiento.DescripTExt.Value = servicio.Descriptivo.Value + " Oferta Nro. " + ventaCartera.VentaDocu.Oferta.Value;
                            footerFact.ValorNeto = footerFact.Movimiento.ValorUNI.Value.Value;
                            footerFact.Movimiento.DocSoporte.Value = 0;
                            listItemsFact.Add(footerFact);
                            #endregion
                            #region Guarda la factura
                            DTO_SerializedObject resulFact = this._moduloFacturacion.FacturaVenta_Guardar(AppDocuments.FacturaVenta, ctrlFact, headerFact, listItemsFact, false, out numeroDocFact, batchProgress, true, false);
                            if (resulFact.GetType() == typeof(DTO_TxResult))
                            {
                                isValid = false;
                                results.Clear();
                                result = (DTO_TxResult)resulFact;
                                results.Add(result);
                                resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                                return resultTuple;
                            }
                            else
                            {
                                #region Asigna una respuesta con la alarma
                                try
                                {
                                    DTO_Alarma alarma = (DTO_Alarma)resulFact;
                                    ctrlFact.NumeroDoc.Value = Convert.ToInt32(alarma.NumeroDoc);
                                    results.Add(alarma);
                                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                                    #region Actualiza la info a ccVentaDocu de Nuevo
                                    ventaCartera.VentaDocu.DocFactura.Value = Convert.ToInt32(alarma.NumeroDoc);
                                    this._dal_ccVentaDocu.DAL_ccVentaDocu_Update(ventaCartera.VentaDocu);
                                    #endregion
                                    return resultTuple;
                                }
                                catch (Exception ex)
                                {
                                    result.Result = ResultValue.NOK;
                                    result.ResultMessage = DictionaryMessages.Err_ReportCreate;
                                }
                                #endregion
                            }
                            #endregion
                        }

                        #endregion 
                    }
                    else
                        return resultTuple = new Tuple<int, List<DTO_SerializedObject>>(numDoc, results);
                }
                else
                    resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);

                return resultTuple;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "VentaCartera_Add");
                results.Add(result);
                resultTuple = new Tuple<int, List<DTO_SerializedObject>>(0, results);
                return resultTuple;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrlNew.ComprobanteIDNro.Value = this.GenerarComprobanteNro(comp, ctrlNew.PrefijoID.Value, ctrlNew.PeriodoDoc.Value.Value, ctrlNew.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlNew, false, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlNew.NumeroDoc.Value.Value, ctrlNew.ComprobanteIDNro.Value.Value, false);

                        //Asigna doc nro de la factura
                        if (ctrlFact != null)
                        {
                            ctrlFact.DocumentoNro.Value = ctrlNew.ComprobanteIDNro.Value;
                            ctrlFact.ComprobanteIDNro.Value = ctrlNew.ComprobanteIDNro.Value;
                            this._moduloGlobal.ActualizaConsecutivos(ctrlFact,true, true, false);
                            this._moduloContabilidad.ActualizaComprobanteNro(ctrlFact.NumeroDoc.Value.Value, ctrlFact.ComprobanteIDNro.Value.Value, false);
                        }
                        
                        #endregion
                    }
                    else
                        throw new Exception("VentaCartera_Add - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Revierte una venta de cartera
        /// </summary>
        /// <param name="documentID">Documento que genera la reversión</param>
        /// <param name="numeroDoc">Numero doc del pago a revertir</param>
        /// <param name="consecutivoPos">Posicion del los documentos en la lista. Lleva el control de los consecutivos (Null si es el primero)</param>
        /// <param name="ctrls">Documento de reversion</param>
        /// <param name="coComps">Comprobante (maestra) de reversion (si existe)</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult VentaCartera_Revertir(int documentID, int numeroDoc, int? consecutivoPos, ref List<DTO_glDocumentoControl> ctrls,
            ref List<DTO_coComprobante> coComps, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Inicia las variables globales

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;

            if (!consecutivoPos.HasValue)
            {
                ctrls = new List<DTO_glDocumentoControl>();
                coComps = new List<DTO_coComprobante>();
            }

            #endregion
            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)this.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccVentaDeta = (DAL_ccVentaDeta)this.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)this.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)this.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                // Comprador propio
                string compradorPropio = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);
                
                // Lista de créditos vendidos
                List<DTO_ccVentaDeta> ventas = this._dal_ccVentaDeta.DAL_ccVentaDeta_GetByNumeroDoc(numeroDoc);
                Dictionary<int, DTO_ccCreditoDocu> creditos = new Dictionary<int, DTO_ccCreditoDocu>();

                #endregion
                #region Validaciones

                DTO_glDocumentoControl ctrlVenta = this._moduloGlobal.glDocumentoControl_GetByID(numeroDoc);
                foreach (DTO_ccVentaDeta venta in ventas)
                {
                    DTO_ccCreditoDocu credito = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(venta.NumDocCredito.Value.Value);
                    creditos[venta.NumDocCredito.Value.Value] = credito;

                    #region Valida que no tenga pagos
                    long sumPagos = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_CountByNumDocCredito(venta.NumDocCredito.Value.Value, ctrlVenta.FechaDoc.Value.Value);
                    if (sumPagos > 0)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_RevCrPagos + "&&" + credito.Libranza.Value.Value.ToString();
                        return result;
                    }
                    #endregion
                }

                #endregion
                #region Revierte el documento

                result = this._moduloGlobal.glDocumentoControl_Revertir(documentID, numeroDoc, consecutivoPos, ref ctrls, ref coComps, true);
                if (result.Result == ResultValue.NOK)
                    return result;

                #endregion
              
                foreach (DTO_ccVentaDeta venta in ventas)
                {
                    #region Actualiza el crédito
                    DTO_ccCreditoDocu credito = creditos[venta.NumDocCredito.Value.Value];
                    credito.TasaEfectivaVenta.Value = null;
                    credito.DocVenta.Value = null;
                    credito.CompradorCarteraID.Value = compradorPropio;
                    credito.TipoEstado.Value = (byte)TipoEstadoCartera.Propia;
                    credito.VendidaInd.Value = false;
                    credito.CompradorFinalID.Value = compradorPropio;
                    
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                    #endregion
                    #region Actualiza el plan de pagos
                    List<DTO_ccCreditoPlanPagos> planPagos = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(venta.NumDocCredito.Value.Value);
                    planPagos = planPagos.Where(p => p.VlrPagadoCuota.Value == 0).ToList();
                    
                    foreach(DTO_ccCreditoPlanPagos pp in planPagos)
                    {
                        pp.VlrSaldoCapitalCesion.Value = 0; 
                        pp.VlrUtilidadCesion.Value = 0; 
                        pp.VlrCapitalCesion.Value = 0;
                        pp.VlrDerechosCesion.Value = 0;
                        pp.DocVenta.Value = null;
                        pp.CompradorCarteraID.Value = compradorPropio;
                        pp.FechaFlujo.Value = null;

                        this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(pp);
                    }

                    #endregion
                }

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "CarteraPagos_Revertir");

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Commit y consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        for (int i = 0; i < ctrls.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlAnula = ctrls[i];
                            DTO_coComprobante coCompAnula = coComps[i];

                            //Obtiene el consecutivo del comprobante (cuando existe)
                            ctrlAnula.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlAnula.DocumentoID.Value.Value, ctrlAnula.PrefijoID.Value);
                            if (coCompAnula != null)
                                ctrlAnula.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompAnula, ctrlAnula.PrefijoID.Value, ctrlAnula.PeriodoDoc.Value.Value, ctrlAnula.DocumentoNro.Value.Value);

                            this._moduloGlobal.ActualizaConsecutivos(ctrlAnula, true, coCompAnula != null, false);
                            if (coCompAnula != null)
                                this._moduloContabilidad.ActualizaComprobanteNro(ctrlAnula.NumeroDoc.Value.Value, ctrlAnula.ComprobanteIDNro.Value.Value, false);
                        }

                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #region Fondeo Cartera

        #region Funciones Privadas

        public DTO_SerializedObject FondeoCartera_CreatePlanPagos(int plazo, int vlrVenta, int vlrCuota, decimal tasa, DateTime fechaCuotaFondeo)
        {
            DTO_TxResult result = new DTO_TxResult();
            DTO_PlanDePagos planPagos = new DTO_PlanDePagos();
            List<DTO_Cuota> cuotas = new List<DTO_Cuota>();
            try
            {
                #region Variables
                Dictionary<string, int> dict_TotalComponentesSaldo = new Dictionary<string, int>();
                string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                //Variables Plan Pagos
                int ultimoDia;
                if (fechaCuotaFondeo.Month == 2)
                    ultimoDia = 28;
                else
                    ultimoDia = 30;
                DateTime fechaCuota = new DateTime(fechaCuotaFondeo.Year, fechaCuotaFondeo.Month, ultimoDia);
                #endregion
                #region Crea el plan de pagos
                int saldoParcial = vlrVenta;
                for (int i = 1; i <= plazo; ++i)
                {
                    int saldoXCapital = 0;
                    DTO_Cuota cuota = new DTO_Cuota();
                    cuota.NumCuota = i;
                    #region Calculo del capital para la ultima cuota
                    if (i == plazo)
                    {
                        cuota.Capital = saldoParcial;
                        //capitalTotal += cuota.Capital;
                    }
                    #endregion
                    #region Calculo del valor de todas las cuotas excepto la ultima
                    if (i != plazo)
                    {
                        int temp = 0;
                        #region Asigna los valores de la cuota
                        cuota.Intereses = Convert.ToInt32(tasa * saldoParcial / 100);
                        saldoXCapital += cuota.Intereses;
                        temp = cuota.Intereses;
                        #endregion
                        #region Calculo de saldos y valores de componentes fijos y variables
                        if (i == 1)
                            dict_TotalComponentesSaldo.Add(compInteres, temp);
                        else
                            dict_TotalComponentesSaldo[compInteres] += temp;
                        #endregion
                    }
                    #endregion
                    #region Calculo el valor de los componentes para la ultima cuota
                    if (i == plazo)
                    {
                        cuota.Intereses = vlrCuota - saldoParcial;
                        dict_TotalComponentesSaldo[compInteres] += cuota.Intereses;
                    }
                    #endregion
                    #region Calculo del capital para todas las cuotas menos la primera
                    if (i != plazo)
                    {
                        cuota.Capital = vlrCuota - saldoXCapital;
                    }
                    #endregion
                    #region Asigna la fecha de la cuota
                    if (i == 1)
                        cuota.Fecha = fechaCuota;
                    else
                    {
                        //if (fechaCuota.Month == 2)
                        //{
                        //    cuota.Fecha = fechaCuota.AddMonths(i - 1);
                        //    if (cuota.Fecha.Month != 2)
                        //        cuota.Fecha = cuota.Fecha.AddDays(2);
                        //}
                        //else
                            cuota.Fecha = fechaCuota.AddMonths(i - 1);
                    }
                    #endregion
                    cuota.ValorCuota = cuota.Capital + cuota.Intereses;
                    cuotas.Add(cuota);
                    saldoParcial -= cuota.Capital;
                }
                #endregion
                planPagos.TasaTotal = tasa;
                planPagos.Cuotas = cuotas;
                planPagos.VlrCuota = vlrCuota;
                planPagos.VlrPrestamo = vlrVenta;
                planPagos.VlrGiro = vlrVenta;
                return planPagos;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "FondeoCartera_CreatePlanPagos");
                return result;
            }

        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Funcion que guarda los creditos comprados por el fondeador
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="compraDocu">DTO del documento a generar</param>
        /// <param name="migracionVenta">Lista con los detalles a guardad</param>
        /// <param name="insideAnotherTx">Indicador para establecer si se encuentra dentor de otra transaccion</param>
        /// <returns></returns>
        public List<DTO_SerializedObject> FondeoCartera_Add(int documentID, string actFlujoID, DTO_ccCompraDocu compraDocu, List<DTO_MigrarVentaCartera> migracionVenta, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Generales
            DTO_TxResultDetail detailResult;
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            DTO_glDocumentoControl ctrlFondeo = null;
            DTO_glDocumentoControl ctrlSolicitud = null;
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_MasterSimple = (DAL_MasterSimple)this.GetInstance(typeof(DAL_MasterSimple), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudPlanPagos = (DAL_ccSolicitudPlanPagos)base.GetInstance(typeof(DAL_ccSolicitudPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccSolicitudComponentes = (DAL_ccSolicitudComponentes)base.GetInstance(typeof(DAL_ccSolicitudComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            bool isValid = true;
            #endregion
            try
            {
                #region Variables
                int numDocSolicitud = 0;
                int numDocFondeo = 0;
                DTO_ccVendedorCartera vendedorCartera = (DTO_ccVendedorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccVendedorCartera, compraDocu.VendedorID.Value, true, false);

                //Variables por defecto
                string terceroXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TerceroXDefecto);
                string prefijoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string proyectoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string centroCostoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaPresupuestoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string areaFuncionalXdef = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string lineaCreditoXdef = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_LineaCredito);
                string compCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);

                //Vairables de valores y fechas
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                decimal tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, periodo);
                #endregion
                #region Validaciones
                //Valida que exista el area funcional
                if (string.IsNullOrWhiteSpace(areaFuncionalXdef))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_AreaFuncionalCartera + "&&" + string.Empty;
                    results.Add(result);
                    return results;
                }
                //Valida que exista la linea de credito
                if (string.IsNullOrWhiteSpace(lineaCreditoXdef))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_LineaCredito + "&&" + string.Empty;
                    results.Add(result);
                    return results;
                }
                //Valida que exista el componente de capital
                if (string.IsNullOrWhiteSpace(compCapital))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ComponenteCapital + "&&" + string.Empty;
                    results.Add(result);
                    return results;
                }
                //Valida que exista el componente de interes
                if (string.IsNullOrWhiteSpace(compInteres))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ComponenteInteresCorriente + "&&" + string.Empty;
                    results.Add(result);
                    return results;
                }
                #endregion
                #region Crea los registros en las maestras basicas
                #region Crea el ccPagaduriaGrupo
                DTO_MasterBasic ccPagaduriaGrupo = (DTO_MasterBasic)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccPagaduriaGrupo, "001", true, false);
                if (ccPagaduriaGrupo == null)
                {
                    ccPagaduriaGrupo = new DTO_MasterBasic();
                    ccPagaduriaGrupo.EmpresaGrupoID.Value = this.Empresa.ID.Value;
                    ccPagaduriaGrupo.ID.Value = "001";
                    ccPagaduriaGrupo.Descriptivo.Value = "Pagaduria Grupo x Defecto";
                    ccPagaduriaGrupo.ActivoInd.Value = true;
                    ccPagaduriaGrupo.CtrlVersion.Value = 1;
                    this._dal_MasterSimple.DocumentID = AppMasters.ccPagaduriaGrupo;
                    detailResult = this._dal_MasterSimple.DAL_MasterSimple_AddItem(ccPagaduriaGrupo);
                    if (detailResult.Message == ResultValue.NOK.ToString())
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.Details = new List<DTO_TxResultDetail>();
                        result.Details.Add(detailResult);
                        results.Add(result);
                        return results;
                    }
                }
                #endregion
                #region Crea el ccPagaduria
                DTO_ccPagaduria ccPagaduria = (DTO_ccPagaduria)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccPagaduria, "001", true, false);
                if (ccPagaduria == null)
                {
                    ccPagaduria = new DTO_ccPagaduria();
                    ccPagaduria.EmpresaGrupoID.Value = this.Empresa.ID.Value;
                    ccPagaduria.ID.Value = "001";
                    ccPagaduria.Descriptivo.Value = "Pagaduria x Defecto";
                    ccPagaduria.TerceroID.Value = terceroXdef;
                    //ccPagaduria.PagaduriaGrupoID.Value = ccPagaduriaGrupo.ID.Value;
                    ccPagaduria.Ciudad.Value = lgXdef;
                    ccPagaduria.PeriodoPago.Value = 1; //Mensual
                    ccPagaduria.DiaCorte.Value = 1;
                    ccPagaduria.DiaTope.Value = 31;
                    ccPagaduria.RecaudoMes.Value = false;
                    ccPagaduria.CodIncorpora.Value = "1";
                    ccPagaduria.CodIdentifica.Value = "1";
                    ccPagaduria.BloqueaVentaInd.Value = false;
                    ccPagaduria.CodEmpleadoInd.Value = false;
                    ccPagaduria.CentroPagoInd.Value = false;
                    ccPagaduria.RegistraInd.Value = false;
                    ccPagaduria.IncorporacionTipo.Value = 1;
                    ccPagaduria.ActivoInd.Value = true;
                    ccPagaduria.CtrlVersion.Value = 1;
                    this._dal_MasterSimple.DocumentID = AppMasters.ccPagaduria;
                    detailResult = this._dal_MasterSimple.DAL_MasterSimple_AddItem(ccPagaduria);
                    if (detailResult.Message == ResultValue.NOK.ToString())
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.Details = new List<DTO_TxResultDetail>();
                        result.Details.Add(detailResult);
                        results.Add(result);
                        return results;
                    }
                }
                #endregion
                #region Crea el ccCentroPago
                DTO_ccCentroPagoPAG ccCentroPago = (DTO_ccCentroPagoPAG)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCentroPagoPAG, "001", true, false);
                if (ccCentroPago == null)
                {
                    ccCentroPago = new DTO_ccCentroPagoPAG();
                    ccCentroPago.EmpresaGrupoID.Value = this.Empresa.ID.Value;
                    ccCentroPago.ID.Value = "001";
                    ccCentroPago.Descriptivo.Value = "Centro de Pago x Defecto";
                    ccCentroPago.PagaduriaID.Value = ccPagaduria.ID.Value;
                    ccCentroPago.ActivoInd.Value = true;
                    ccCentroPago.CtrlVersion.Value = 1;
                    this._dal_MasterSimple.DocumentID = AppMasters.ccCentroPagoPAG;
                    detailResult = this._dal_MasterSimple.DAL_MasterSimple_AddItem(ccCentroPago);
                    if (detailResult.Message == ResultValue.NOK.ToString())
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.Details = new List<DTO_TxResultDetail>();
                        result.Details.Add(detailResult);
                        results.Add(result);
                        return results;
                    }
                }
                #endregion
                #region Crea el ccAsesor
                DTO_ccAsesor ccAsesor = (DTO_ccAsesor)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccAsesor, "001", true, false);
                if (ccAsesor == null)
                {
                    ccAsesor = new DTO_ccAsesor();
                    ccAsesor.EmpresaGrupoID.Value = this.Empresa.ID.Value;
                    ccAsesor.ID.Value = "001";
                    ccAsesor.Descriptivo.Value = "Asesor x Defecto";
                    ccAsesor.TerceroID.Value = terceroXdef;
                    ccAsesor.FechaIngreso.Value = DateTime.Now;
                    ccAsesor.PorcComision.Value = 1;
                    ccAsesor.ActivoInd.Value = true;
                    ccAsesor.CtrlVersion.Value = 1;
                    this._dal_MasterSimple.DocumentID = AppMasters.ccAsesor;
                    detailResult = this._dal_MasterSimple.DAL_MasterSimple_AddItem(ccAsesor);
                    if (detailResult.Message == ResultValue.NOK.ToString())
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.Details = new List<DTO_TxResultDetail>();
                        result.Details.Add(detailResult);
                        results.Add(result);
                        return results;
                    }
                }
                #endregion
                #endregion
                #region Crea glDocumentoControl Fondeo Cartera
                ctrlFondeo = new DTO_glDocumentoControl();
                ctrlFondeo.DocumentoNro.Value = 0;
                ctrlFondeo.DocumentoID.Value = documentID;
                ctrlFondeo.LugarGeograficoID.Value = lgXdef;
                ctrlFondeo.NumeroDoc.Value = 0;
                ctrlFondeo.DocumentoTipo.Value = (byte)DocumentoTipo.DocInterno;
                ctrlFondeo.Fecha.Value = DateTime.Now;
                ctrlFondeo.FechaDoc.Value = compraDocu.FechaFondeo.Value.Value;
                ctrlFondeo.PeriodoDoc.Value = periodo;
                ctrlFondeo.PeriodoUltMov.Value = periodo;
                ctrlFondeo.AreaFuncionalID.Value = areaFuncionalXdef;
                ctrlFondeo.PrefijoID.Value = prefijoXdef;
                ctrlFondeo.ProyectoID.Value = proyectoXdef;
                ctrlFondeo.CentroCostoID.Value = centroCostoXdef;
                ctrlFondeo.LineaPresupuestoID.Value = lineaPresupuestoXdef;
                ctrlFondeo.TerceroID.Value = vendedorCartera.TerceroID.Value;
                ctrlFondeo.MonedaID.Value = mdaLoc;
                ctrlFondeo.TasaCambioCONT.Value = tc;
                ctrlFondeo.TasaCambioDOCU.Value = tc;
                ctrlFondeo.Valor.Value = compraDocu.Valor.Value.Value;
                ctrlFondeo.Iva.Value = 0;
                ctrlFondeo.Observacion.Value = string.Empty;
                ctrlFondeo.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrlFondeo.seUsuarioID.Value = this.UserId;
                ctrlFondeo.Descripcion.Value = "Fondeo Cartera - " + vendedorCartera.ID.Value;

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.FondeoCartera, ctrlFondeo, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    results.Add(result);
                }
                numDocFondeo = Convert.ToInt32(resultGLDC.Key);
                ctrlFondeo.NumeroDoc.Value = numDocFondeo;
                #endregion
                #region Guarda la informacion en ccCompraDocu
                compraDocu.NumeroDoc.Value = numDocSolicitud;
                this._dal_ccCompraDocu.DAL_ccCompraDocu_Add(compraDocu);
                #endregion
                #region Crea la solicitud credito
                int j = 0;
                foreach (DTO_MigrarVentaCartera venDeta in migracionVenta)
                {
                    DateTime fechaCuota1 = venDeta.FechaCuota1.Value.Value;
                    int vlrVenta = (int)venDeta.VlrVenta.Value.Value;
                    int vlrCuota = (int)venDeta.VlrCuota.Value.Value;
                    short plazo = Convert.ToInt16(venDeta.CuotasVendidas.Value.Value);
                    decimal tasaVenta = venDeta.TasaVenta.Value.Value;
                    #region Valida que la libranza no exista
                    DTO_ccSolicitudDocu soliDocu = this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByLibranza(venDeta.Libranza.Value.Value);
                    if (soliDocu != null)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_LibranzaRegistrada + "&&" + venDeta.Libranza.Value.Value; ;
                        results.Add(result);
                        break;
                    }
                    #endregion
                    #region Crea glDocumentoControl Solicitud Credito
                    ctrlSolicitud = new DTO_glDocumentoControl();
                    ctrlSolicitud.DocumentoNro.Value = 0;
                    ctrlSolicitud.DocumentoID.Value = AppDocuments.SolicitudLibranza;
                    ctrlSolicitud.LugarGeograficoID.Value = lgXdef;
                    ctrlSolicitud.NumeroDoc.Value = 0;
                    ctrlSolicitud.DocumentoTipo.Value = (byte)DocumentoTipo.DocExterno;
                    ctrlSolicitud.Fecha.Value = DateTime.Now;
                    ctrlSolicitud.FechaDoc.Value = compraDocu.FechaFondeo.Value.Value;
                    ctrlSolicitud.PeriodoDoc.Value = periodo;
                    ctrlSolicitud.PeriodoUltMov.Value = periodo;
                    ctrlSolicitud.AreaFuncionalID.Value = areaFuncionalXdef;
                    ctrlSolicitud.PrefijoID.Value = prefijoXdef;
                    ctrlSolicitud.ProyectoID.Value = proyectoXdef;
                    ctrlSolicitud.CentroCostoID.Value = centroCostoXdef;
                    ctrlSolicitud.LineaPresupuestoID.Value = lineaPresupuestoXdef;
                    ctrlSolicitud.TerceroID.Value = venDeta.ClienteID.Value;
                    ctrlSolicitud.DocumentoTercero.Value = venDeta.Libranza.Value.ToString();
                    ctrlSolicitud.MonedaID.Value = mdaLoc;
                    ctrlSolicitud.TasaCambioCONT.Value = tc;
                    ctrlSolicitud.TasaCambioDOCU.Value = tc;
                    ctrlSolicitud.Valor.Value = venDeta.VlrVenta.Value.Value;
                    ctrlSolicitud.Iva.Value = 0;
                    ctrlSolicitud.Observacion.Value = string.Empty;
                    ctrlSolicitud.Estado.Value = (byte)EstadoDocControl.Aprobado;
                    ctrlSolicitud.seUsuarioID.Value = this.UserId;
                    ctrlSolicitud.Descripcion.Value = "Fondeo Cartera - " + vendedorCartera.ID.Value + " " + vendedorCartera.Descriptivo.Value + "Libranza " + venDeta.Libranza.Value;

                    DTO_TxResultDetail resultGLDCSolicitud = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.SolicitudLibranza, ctrlSolicitud, true);
                    if (resultGLDCSolicitud.Message != ResultValue.OK.ToString())
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDCSolicitud);
                        results.Add(result);
                        break;
                    }
                    numDocSolicitud = Convert.ToInt32(resultGLDC.Key);
                    ctrlSolicitud.NumeroDoc.Value = numDocSolicitud;
                    #endregion
                    #region Crea el coTercero
                    DTO_coTercero coTercero = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, venDeta.ClienteID.Value, true, false);
                    if (coTercero == null)
                    {
                        coTercero = new DTO_coTercero();
                        coTercero.EmpresaGrupoID.Value = this.Empresa.ID.Value;
                        coTercero.ID.Value = venDeta.ClienteID.Value;
                        coTercero.Descriptivo.Value = venDeta.Nombre.Value;
                        coTercero.ApellidoPri.Value = venDeta.Apellido1.Value;
                        coTercero.ApellidoSdo.Value = venDeta.Apellido2.Value;
                        coTercero.NombrePri.Value = venDeta.Nombre1.Value;
                        coTercero.NombreSdo.Value = venDeta.Nombre2.Value;
                        coTercero.Direccion.Value = venDeta.Direccion.Value;
                        coTercero.Tel1.Value = venDeta.Telefono.Value;
                        coTercero.CECorporativo.Value = venDeta.CorreoElectronico.Value;
                        coTercero.LugarGeograficoID.Value = venDeta.Ciudad.Value;
                        coTercero.ReferenciaID.Value = venDeta.RegFiscal.Value;
                        coTercero.ActEconomicaID.Value = venDeta.ActEconomicaID.Value;
                        DTO_glLugarGeografico lugar = (DTO_glLugarGeografico)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.glLugarGeografico, venDeta.Ciudad.Value, true, false);
                        coTercero.Pais.Value = lugar.PaisID.Value;
                        coTercero.TerceroDocTipoID.Value = venDeta.TipoDocumento.Value;
                        coTercero.AutoRetRentaInd.Value = venDeta.AutoRetenedorInd.Value;
                        coTercero.AutoRetIVAInd.Value = venDeta.AutoRetenedorIVAInd.Value;
                        coTercero.DeclaraIVAInd.Value = venDeta.DeclaraIVAInd.Value;
                        coTercero.DeclaraRentaInd.Value = venDeta.DeclaraRentaInd.Value;
                        coTercero.ExcluyeCREEInd.Value = venDeta.ExcluyeCREEInd.Value;
                        coTercero.IndependienteEMPInd.Value = venDeta.IndependienteEMPInd.Value;
                        coTercero.RadicaDirectoInd.Value = false;
                        coTercero.ActivoInd.Value = true;
                        coTercero.CtrlVersion.Value = 1;
                        coTercero.ActivoInd.Value = true;
                        this._dal_MasterSimple.DocumentID = AppMasters.coTercero;
                        detailResult = this._dal_MasterSimple.DAL_MasterSimple_AddItem(coTercero);
                        if (detailResult.Message == ResultValue.NOK.ToString())
                        {
                            isValid = false;
                            result.Result = ResultValue.NOK;
                            result.Details = new List<DTO_TxResultDetail>();
                            result.Details.Add(detailResult);
                            results.Add(result);
                            break;
                        }
                    }
                    #endregion
                    #region Crea el ccCliente
                    DTO_ccCliente cli = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, venDeta.ClienteID.Value, true, false);
                    if (cli == null)
                    {
                        cli = new DTO_ccCliente();
                        cli.EmpresaGrupoID.Value = this.Empresa.ID.Value;
                        cli.ID.Value = venDeta.ClienteID.Value;
                        cli.Descriptivo.Value = venDeta.Nombre.Value;
                        cli.TerceroID.Value = venDeta.ClienteID.Value;
                        cli.FechaExpDoc.Value = venDeta.FechaExpDoc.Value;
                        cli.FechaNacimiento.Value = venDeta.FechaNacimiento.Value;
                        cli.NacimientoCiudad.Value = venDeta.NacimientoCiudad.Value;
                        cli.Sexo.Value = venDeta.Sexo.Value;
                        cli.EstadoCivil.Value = venDeta.EstadoCivil.Value;
                        cli.ResidenciaDir.Value = venDeta.ResidenciaDir.Value;
                        cli.ResidenciaTipo.Value = venDeta.ResidenciaTipo.Value;
                        cli.Telefono.Value = venDeta.Telefono.Value;
                        cli.ZonaID.Value = venDeta.ZonaID.Value;
                        cli.LaboralDireccion.Value = venDeta.LaboralDireccion.Value;
                        cli.Telefono.Value = venDeta.Telefono.Value;
                        cli.TelefonoTrabajo.Value = venDeta.Telefono.Value;
                        cli.Correo.Value = venDeta.CorreoElectronico.Value;
                        cli.Cargo.Value = venDeta.Cargo.Value;
                        cli.ProfesionID.Value = venDeta.ProfesionID.Value;
                        cli.LaboralEntidad.Value = venDeta.LaboralEntidad.Value;
                        cli.Antiguedad.Value = venDeta.Antiguedad.Value;
                        cli.ClienteTipo.Value = venDeta.ClienteTipo.Value;
                        cli.Estrato.Value = venDeta.Estrato.Value;
                        cli.EscolaridadNivel.Value = venDeta.EscolaridadNivel.Value;
                        cli.JornadaLaboral.Value = venDeta.JornadaLaboral.Value;
                        cli.Ocupacion.Value = venDeta.Ocupacion.Value;
                        cli.AsesorID.Value = ccAsesor.ID.Value;
                        cli.VlrDevengado.Value = venDeta.VlrDevengado.Value;
                        cli.VlrDeducido.Value = venDeta.VlrDeducido.Value;
                        cli.VlrActivos.Value = venDeta.VlrActivos.Value;
                        cli.VlrPasivos.Value = venDeta.VlrPasivos.Value;
                        cli.VlrMesada.Value = venDeta.VlrMesada.Value;
                        cli.VlrConsultado.Value = venDeta.VlrConsultado.Value;
                        cli.VlrOpera.Value = venDeta.VlrOpera.Value;
                        cli.FechaIngreso.Value = venDeta.FechaIngreso.Value;
                        cli.ActivoInd.Value = true;
                        cli.CtrlVersion.Value = 1;
                        this._dal_MasterSimple.DocumentID = AppMasters.ccCliente;
                        detailResult = this._dal_MasterSimple.DAL_MasterSimple_AddItem(cli);
                        if (detailResult.Message == ResultValue.NOK.ToString())
                        {
                            isValid = false;
                            result.Result = ResultValue.NOK;
                            result.Details = new List<DTO_TxResultDetail>();
                            result.Details.Add(detailResult);
                            results.Add(result);
                            break;
                        }
                    }
                    #endregion
                    #region Crea la solicitud de credito
                    soliDocu = new DTO_ccSolicitudDocu();
                    soliDocu.NumeroDoc.Value = numDocSolicitud;
                    soliDocu.EmpresaID.Value = this.Empresa.ID.Value;
                    soliDocu.ClienteRadica.Value = venDeta.ClienteID.Value;
                    soliDocu.ClienteID.Value = venDeta.ClienteID.Value;
                    soliDocu.ApellidoPri.Value = coTercero.ApellidoPri.Value;
                    soliDocu.ApellidoSdo.Value = coTercero.ApellidoSdo.Value;
                    soliDocu.NombrePri.Value = coTercero.NombrePri.Value;
                    soliDocu.NombreSdo.Value = coTercero.NombreSdo.Value;
                    //Calculo la Edad
                    int edad = DateTime.Today.Year - cli.FechaNacimiento.Value.Value.Year;
                    if (DateTime.Today < cli.FechaNacimiento.Value.Value.AddYears(edad)) edad--;
                    soliDocu.Edad.Value = edad;
                    soliDocu.Libranza.Value = venDeta.Libranza.Value;
                    soliDocu.LineaCreditoID.Value = lineaCreditoXdef;
                    soliDocu.AsesorID.Value = ccAsesor.ID.Value;
                    soliDocu.PagaduriaID.Value = ccPagaduria.ID.Value;
                    soliDocu.CentroPagoID.Value = ccCentroPago.ID.Value;
                    soliDocu.ZonaID.Value = venDeta.ZonaID.Value;
                    soliDocu.Ciudad.Value = venDeta.Ciudad.Value;
                    soliDocu.NumDocCompra.Value = numDocFondeo;
                    soliDocu.TipoCredito.Value = 2;
                    soliDocu.IncorporaMesInd.Value = false;
                    soliDocu.IncorporacionPreviaInd.Value = false;
                    soliDocu.IncorporacionTipo.Value = 1;
                    soliDocu.NumDocVerificado.Value = 0;
                    soliDocu.NumDocOpera.Value = 0;
                    soliDocu.FechaLiquida.Value = compraDocu.FechaFondeo.Value.Value;
                    soliDocu.FechaCuota1.Value = venDeta.FechaCuota1.Value.Value;
                    soliDocu.PorInteres.Value = tasaVenta;
                    soliDocu.PorSeguro.Value = 0;
                    soliDocu.PorComponente1.Value = 0;
                    soliDocu.PorComponente2.Value = 0;
                    soliDocu.PorComponente3.Value = 0;
                    soliDocu.CompraCarteraInd.Value = false;
                    soliDocu.VlrSolicitado.Value = venDeta.VlrVenta.Value;
                    soliDocu.VlrAdicional.Value = 0;
                    soliDocu.VlrPrestamo.Value = venDeta.VlrLibranza.Value;
                    soliDocu.VlrLibranza.Value = venDeta.VlrLibranza.Value;
                    soliDocu.VlrCompra.Value = 0;
                    soliDocu.VlrDescuento.Value = 0;
                    soliDocu.VlrGiro.Value = venDeta.VlrVenta.Value;
                    soliDocu.Plazo.Value = plazo;
                    soliDocu.VlrCuota.Value = venDeta.VlrCuota.Value;
                    soliDocu.VlrCupoDisponible.Value = 0;
                    soliDocu.VlrCapacidad.Value = 0;
                    soliDocu.PagoVentanillaInd.Value = false;
                    soliDocu.RechazoInd.Value = false;
                    this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_Add(soliDocu);
                    #endregion
                    #region Crea los componentes
                    decimal vlrInteres = (vlrCuota * plazo) - vlrVenta;
                    #region Crea el componente de Capital
                    DTO_ccSolicitudComponentes componenteCapital = new DTO_ccSolicitudComponentes();
                    componenteCapital.NumeroDoc.Value = numDocSolicitud;
                    componenteCapital.ComponenteCarteraID.Value = compCapital;
                    componenteCapital.TotalValor.Value = vlrVenta;
                    componenteCapital.CuotaValor.Value = vlrVenta / plazo;
                    componenteCapital.CompInvisibleInd.Value = false;
                    this._dal_ccSolicitudComponentes.DAL_ccSolicitudComponentes_Add(componenteCapital);
                    #endregion
                    #region Crea el componente de interes
                    DTO_ccSolicitudComponentes componenteInteres = new DTO_ccSolicitudComponentes();
                    componenteInteres.NumeroDoc.Value = numDocSolicitud;
                    componenteInteres.ComponenteCarteraID.Value = compCapital;
                    componenteInteres.TotalValor.Value = vlrInteres;
                    componenteInteres.CuotaValor.Value = vlrInteres / plazo;
                    componenteInteres.CompInvisibleInd.Value = false;
                    this._dal_ccSolicitudComponentes.DAL_ccSolicitudComponentes_Add(componenteInteres);
                    #endregion
                    #endregion
                    #region Creal el Plan de pagos
                    DTO_SerializedObject liquidacion = this.FondeoCartera_CreatePlanPagos(plazo, vlrVenta, vlrCuota, tasaVenta, fechaCuota1);
                    if (liquidacion.GetType() == typeof(DTO_TxResult))
                    {
                        result = (DTO_TxResult)liquidacion;
                        isValid = false;
                        results.Add(result);
                        return results;
                    }
                    DTO_PlanDePagos planPagos = (DTO_PlanDePagos)liquidacion;
                    planPagos.VlrLibranza = (int)venDeta.VlrLibranza.Value.Value;
                    this._dal_ccSolicitudPlanPagos.DAL_ccSolicitudPlanPagos_Add(planPagos, numDocSolicitud);
                    #endregion
                    #region Envia el credito para la pantalla de liquidacion
                    result = this.AsignarFlujo(documentID, numDocSolicitud, actFlujoID, false, string.Empty);
                    if (result.Result == ResultValue.NOK)
                    {
                        isValid = false;
                        results.Add(result);
                        break;
                    }
                    #endregion
                    if (result.Result == ResultValue.OK)
                    {
                        DTO_Alarma alarma = this.GetFirstMailInfo(numDocSolicitud, false);
                        results.Add(alarma);
                    }
                }
                #endregion
                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "FondeoCartera_Add");
                results.Add(result);
                return results;
            }
            finally
            {
                if (isValid && result.Result == ResultValue.OK)
                {
                    #region Genera consecutivos
                    base._mySqlConnectionTx.Commit();

                    base._mySqlConnectionTx = null;
                    this._moduloGlobal._mySqlConnectionTx = null;
                    this._moduloContabilidad._mySqlConnectionTx = null;

                    ctrlFondeo.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlFondeo.PrefijoID.Value);
                    this._moduloGlobal.ActualizaConsecutivos(ctrlFondeo, true, false, false);
                    #endregion
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #region Pago Flujos

        #region Funciones Publicas

        /// <summary>
        /// Funcion que trae los creditos para el pago de flujos
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo actual</param>       
        /// <param name="fechaPeriodo">Fecha actual del periodo</param>
        /// <returns></returns>
        public DTO_PagoFlujos PagoFlujos_GetForPago(string actFlujoID, DateTime fechaPeriodo, string oferta, int? libranza, string comprador)
        {
            try
            {
                this._dal_ccFlujoCesionDocu = (DAL_ccFlujoCesionDocu)base.GetInstance(typeof(DAL_ccFlujoCesionDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                
                DTO_PagoFlujos pagoFlujos = new DTO_PagoFlujos();
                List<DTO_ccFlujoCesionDocu> flujoCesDocu = new List<DTO_ccFlujoCesionDocu>();
                List<DTO_ccFlujoCesionDeta> flujoCesDeta = new List<DTO_ccFlujoCesionDeta>();

                DTO_ccCompradorCartera compCartera = new DTO_ccCompradorCartera();
                Dictionary<string, DTO_ccCompradorCartera> compradores = new Dictionary<string, DTO_ccCompradorCartera>();
                DTO_seUsuario seUsuario = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);
                string usuarioID = seUsuario.ID.Value;

                flujoCesDocu = this._dal_ccFlujoCesionDocu.DAL_ccFlujoCesionDocu_GetForPago(actFlujoID, usuarioID, fechaPeriodo, oferta, libranza, comprador);
                foreach (DTO_ccFlujoCesionDocu flujoDocu in flujoCesDocu)
                {
                    int i = flujoDocu.index;
                    if (flujoDocu.Inversionista.Value != flujoDocu.CompradorCarteraID.Value)
                    {
                        if(compradores.ContainsKey(flujoDocu.Inversionista.Value))
                            compCartera = compradores[flujoDocu.Inversionista.Value];
                        else
                        {
                            compCartera = (DTO_ccCompradorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCompradorCartera, flujoDocu.Inversionista.Value, true, false);
                            compradores[flujoDocu.Inversionista.Value] = compCartera;
                        }
                        
                        if (compCartera.PagoFlujosDirectoInd.Value.Value)
                        {
                            flujoDocu.NombreInversionista.Value = compCartera.Descriptivo.Value;
                            flujoDocu.PagoInversionista.Value = true;
                            flujoDocu.TerceroPago.Value = compCartera.TerceroID.Value;
                        }
                        else
                        {
                            flujoCesDocu[i - 1].Detalle.AddRange(flujoDocu.Detalle);
                            flujoDocu.index = -1;
                        }
                    }
                    else
                        flujoDocu.NombreInversionista.Value = flujoDocu.NombreCompradorCartera.Value;

                }

                flujoCesDocu.RemoveAll(x => x.index == -1);
                flujoCesDocu.ForEach(x => x.Detalle = x.Detalle.OrderBy(y => y.Libranza.Value).ToList());
                flujoCesDocu.ForEach(x => x.NumCreditos.Value = x.Detalle.Count);
                flujoCesDocu.ForEach(x => x.Valor.Value = (from c in x.Detalle select c.VlrCuota.Value.Value).Sum());
                pagoFlujos.AddData(flujoCesDeta, flujoCesDocu);

                return pagoFlujos;
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "PagoFlujos_GetForPago");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que genera un nuevo documento de pago de flujos con sus detalles
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="recompraCartera">Dto que contiene el documento y el detalle del pago de flujo</param>
        /// <param name="insideAnotherTx">Indicador para establecer si se encuentra dentor de otra transaccion</param>
        /// <returns></returns>
        public List<DTO_SerializedObject> PagoFlujos_Add(int documentID, string actFlujoID, string compradorID, DateTime fechaPago, DTO_PagoFlujos pagoFlujos, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Generales
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloCxP = (ModuloCuentasXPagar)base.GetInstance(typeof(ModuloCuentasXPagar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccFlujoCesionDocu = (DAL_ccFlujoCesionDocu)base.GetInstance(typeof(DAL_ccFlujoCesionDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccFlujoCesionDeta = (DAL_ccFlujoCesionDeta)base.GetInstance(typeof(DAL_ccFlujoCesionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            bool isValid = true;
            DTO_coComprobante coComp = null;
            DTO_glDocumentoControl ctrlCxP = new DTO_glDocumentoControl();
            #endregion
            try
            {
                int i = 0;
                #region Variables

                //Variables por defecto
                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);

                //Vairables de valores y fechas
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                decimal tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, periodo);

                //Información CxP
                string contabilizaOrdCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ContabilizacionCtasOrdCesion);
                string ctaOrdenCapitalCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenCapitalCesion);
                string ctaOrdenUtilidadCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenUtilidadCesion);
                string ctaOrdenCesionContra = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenCesionXContra);

                //Comprabante CxP
                DTO_Comprobante comprobanteCxP = new DTO_Comprobante();
                comprobanteCxP.Footer = new List<DTO_ComprobanteFooter>();
                DTO_coPlanCuenta ctaDocContable = new DTO_coPlanCuenta();
                DTO_glConceptoSaldo cSaldoDocContable = new DTO_glConceptoSaldo();

                //Otros 
                string conceptoCxp = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CXPparaPagodeFlujos);
                string docContablePagoFlujos = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocumentoContablePagoFlujos);
                DTO_ccCompradorCartera compradorDTO = (DTO_ccCompradorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCompradorCartera, compradorID, true, false);
                #endregion
                #region Validaciones
                if (!string.IsNullOrWhiteSpace(docContablePagoFlujos))
                {
                    DTO_coDocumento coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, docContablePagoFlujos, true, false);
                    if (!string.IsNullOrWhiteSpace(coDoc.CuentaLOC.Value))
                    {
                        ctaDocContable = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, coDoc.CuentaLOC.Value, true, false);
                        cSaldoDocContable = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, ctaDocContable.ConceptoSaldoID.Value, true, false);
                    }
                    else
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDoc.ID.Value;
                        results.Add(result);
                        return results;
                    }
                }
                else
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocumentoContablePagoFlujos + "&&" + string.Empty;
                    results.Add(result);
                    return results;
                }

                //Valida que el concepto de CxP exista
                if (string.IsNullOrWhiteSpace(conceptoCxp))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CXPparaPagodeFlujos + "&&" + string.Empty;
                    results.Add(result);
                    return results;
                }

                if (contabilizaOrdCesion == "1")
                {
                    #region Cuentas de orden para la cesion

                    //Valida la cuenta de orden de capital cesion
                    if (string.IsNullOrWhiteSpace(ctaOrdenCapitalCesion))
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenCapitalCesion + "&&" + string.Empty;
                        results.Add(result);
                        return results;
                    }

                    //Valida la cuenta de orden de utilidad cesion
                    if (string.IsNullOrWhiteSpace(ctaOrdenUtilidadCesion))
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenUtilidadCesion + "&&" + string.Empty;
                        results.Add(result);
                        results.Add(result);
                        return results;
                    }

                    //Valida la cuenta de contrapartida de la cesion
                    if (string.IsNullOrWhiteSpace(ctaOrdenCesionContra))
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenCesionXContra + "&&" + string.Empty;
                        results.Add(result);
                        results.Add(result);
                        return results;
                    }

                    #endregion
                }

                #endregion
                #region Carga los detalles de la CxP

                i = 0;
                foreach (DTO_ccFlujoCesionDocu flujoDocu in pagoFlujos.FlujoCesionDocu)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / pagoFlujos.FlujoCesionDeta.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    DTO_coPlanCuenta cta = null;
                    DTO_glConceptoSaldo cSaldo = null;
                    List<DTO_ccFlujoCesionDeta> detaFlujoDocu = pagoFlujos.FlujoCesionDeta.Where(x => x.Inversionista.Value == flujoDocu.Inversionista.Value && x.Oferta.Value == flujoDocu.Oferta.Value).ToList();

                    foreach (DTO_ccFlujoCesionDeta flujoDeta in detaFlujoDocu)
                    {
                        #region Cancela flujo libranza

                        DTO_glDocumentoControl ctrlOld = this._moduloGlobal.glDocumentoControl_GetByID(flujoDeta.VentaDocNum.Value.Value);
                        ctrlOld.DocumentoTercero.Value = flujoDeta.Libranza.Value;
                        decimal totalMLtemp = flujoDeta.Valor.Value.Value;
                        decimal totalMEtemp = tc !=0 ? Math.Round(totalMLtemp / tc, 2) : 0;

                        DTO_ComprobanteFooter compFooterTemp = this.CrearComprobanteFooter(ctrlOld, ctaDocContable, cSaldoDocContable, 0, concCargoXdef, lgXdef, lineaXdef, totalMLtemp, totalMEtemp, false);
                        compFooterTemp.Descriptivo.Value = "Cancela Flujo Libranza ";
                        comprobanteCxP.Footer.Add(compFooterTemp);

                        #endregion
                        if (contabilizaOrdCesion == "1")
                        {
                            #region Contabiliza capital e intereses de la cesion

                            DTO_ccCreditoPlanPagos cuota = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanpagos_GetByID(flujoDeta.CreditoCuotaNum.Value.Value);
                            DTO_glDocumentoControl ctrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(flujoDeta.NumDocCedito.Value.Value);
                            ctrlCredito.TerceroID.Value = flujoDocu.TerceroPago.Value;

                            //Capital Cesion - Orden
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenCapitalCesion, true, false);
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            decimal vlrCapML = Math.Abs(cuota.VlrCapitalCesion.Value.Value) * -1;
                            decimal vlrCapME = 0;
                            if (ctrlCredito.TasaCambioDOCU.Value.Value != 0)
                                vlrCapME = Math.Round(vlrCapML / ctrlCredito.TasaCambioDOCU.Value.Value, 2);
                            DTO_ComprobanteFooter capitalDet = this.CrearComprobanteFooter(ctrlCredito, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrCapML, vlrCapME, false);
                            capitalDet.Descriptivo.Value = "FLUJO CARTERA - CAPITAL CESION";
                            comprobanteCxP.Footer.Add(capitalDet);

                            //Utilidad(Intereses) Cesion - Orden
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenUtilidadCesion, true, false);
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            decimal vlrIntML = Math.Abs(cuota.VlrUtilidadCesion.Value.Value) * -1;
                            decimal vlrIntME = 0;
                            if (ctrlCredito.TasaCambioDOCU.Value.Value != 0)
                                vlrIntME = Math.Round(vlrIntML / ctrlCredito.TasaCambioDOCU.Value.Value, 2);
                            DTO_ComprobanteFooter interesDet = this.CrearComprobanteFooter(ctrlCredito, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrIntML, vlrIntME, false);
                            interesDet.Descriptivo.Value = "FLUJO CARTERA - UTILIDAD CESION";
                            comprobanteCxP.Footer.Add(interesDet);

                            //Contrapartida cesion - Orden
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenCesionContra, true, false);
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            decimal vlrTotalCesionML = (vlrCapML + vlrIntML) * -1;
                            decimal vlrContraCesionME = 0;
                            if (ctrlCredito.TasaCambioDOCU.Value.Value != 0)
                                vlrContraCesionME = Math.Round(vlrTotalCesionML / ctrlCredito.TasaCambioDOCU.Value.Value, 2);
                            DTO_ComprobanteFooter cesionDet = this.CrearComprobanteFooter(ctrlCredito, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrTotalCesionML, vlrContraCesionME, false);
                            cesionDet.Descriptivo.Value = "FLUJO CARTERA - CONTRAP CESION";
                            comprobanteCxP.Footer.Add(cesionDet);

                            #endregion
                        }
                    }
                }
                #endregion
                #region Crea glDocumentoControl
                
                //Valores
                decimal totalML = comprobanteCxP.Footer.Sum(x => x.vlrMdaLoc.Value.Value);
                decimal totalME = 0;
                if (tc != 0)
                    totalME += Math.Round(totalML / tc, 2);

                DTO_glDocumentoControl ctrlNew = new DTO_glDocumentoControl();
                ctrlNew.DocumentoNro.Value = 0;
                ctrlNew.DocumentoID.Value = documentID;
                ctrlNew.LugarGeograficoID.Value = defLugarGeografico;
                ctrlNew.NumeroDoc.Value = 0;
                ctrlNew.DocumentoTipo.Value = (byte)DocumentoTipo.DocExterno;
                ctrlNew.Fecha.Value = DateTime.Now;
                ctrlNew.FechaDoc.Value = fechaPago;
                ctrlNew.PeriodoDoc.Value = periodo;
                ctrlNew.PeriodoUltMov.Value = periodo;
                ctrlNew.CuentaID.Value = ctaDocContable.ID.Value;
                ctrlNew.AreaFuncionalID.Value = defArealFuncional;
                ctrlNew.PrefijoID.Value = defPrefijo;
                ctrlNew.ProyectoID.Value = defProyecto;
                ctrlNew.CentroCostoID.Value = defCentroCosto;
                ctrlNew.LineaPresupuestoID.Value = defLineaPresupuesto;
                ctrlNew.TerceroID.Value = compradorDTO.TerceroID.Value;
                ctrlNew.DocumentoTercero.Value = "FL" + fechaPago.Date.ToString("yy/MM/dd");
                ctrlNew.MonedaID.Value = mdaLoc;
                ctrlNew.TasaCambioCONT.Value = tc;
                ctrlNew.TasaCambioDOCU.Value = tc;
                ctrlNew.Observacion.Value = "Pago Flujo A - " + compradorDTO.ID.Value + " - " + fechaPago.Date.ToString("yy/MM/dd");
                ctrlNew.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrlNew.seUsuarioID.Value = this.UserId;
                ctrlNew.Descripcion.Value = "Pago Flujo A - " + compradorDTO.ID.Value + " - " + fechaPago.Date.ToString("yy/MM/dd");
                ctrlNew.Valor.Value = totalML;
                ctrlNew.Iva.Value = 0;

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlNew, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    results.Add(result);
                    return results;
                }
                int numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrlNew.NumeroDoc.Value = numDocNew;

                #endregion
                #region Genera la CxP

                object obj = this._moduloCxP.CuentasXPagar_Generar(ctrlNew, conceptoCxp, totalML, comprobanteCxP.Footer, ModulesPrefix.cc, false);
                if (obj.GetType() == typeof(DTO_TxResult))
                {
                    isValid = false;
                    result = (DTO_TxResult)obj;
                    results.Add(result);
                    return results;
                }

                //Trae la CxP para actualizar los consecutivos
                ctrlCxP = (DTO_glDocumentoControl)obj;
                DTO_cpConceptoCXP concCxP = (DTO_cpConceptoCXP)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.cpConceptoCXP, conceptoCxp, true, false);
                DTO_coDocumento coDocCxP = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, concCxP.coDocumentoID.Value, true, false);
                coComp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, coDocCxP.ComprobanteID.Value, true, false);

                #endregion
                #region Agrega la info a ccFlujoCesionDocu

                DTO_ccFlujoCesionDocu flujoDocuCtrl = new DTO_ccFlujoCesionDocu();
                flujoDocuCtrl.NumeroDoc.Value = numDocNew;
                flujoDocuCtrl.CompradorCarteraID.Value = compradorID;
                flujoDocuCtrl.TerceroPago.Value = compradorDTO.TerceroID.Value;
                flujoDocuCtrl.NumeroDocCXP.Value = ctrlCxP.NumeroDoc.Value;
                flujoDocuCtrl.Valor.Value = totalML;
                this._dal_ccFlujoCesionDocu.DAL_ccFlujoCesionDocu_Add(flujoDocuCtrl);

                #endregion
                #region Guarda el detalle de los flujos
                
                i = 0;
                foreach (DTO_ccFlujoCesionDeta flujoDeta in pagoFlujos.FlujoCesionDeta)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / pagoFlujos.FlujoCesionDeta.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    #region Agrega la info en ccFlujoCesionDeta
                    
                    flujoDeta.NumeroDoc.Value = numDocNew;
                    flujoDeta.DocPago.Value = ctrlCxP.NumeroDoc.Value;
                    this._dal_ccFlujoCesionDeta.DAL_ccFlujoCesionDeta_Add(flujoDeta);

                    #endregion

                }
                #endregion

                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "PagoFlujos_Add");
                results.Add(result);
                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                    
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;
                        
                        ctrlCxP.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlCxP.PrefijoID.Value, ctrlCxP.PeriodoDoc.Value.Value, ctrlCxP.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlCxP, false, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlCxP.NumeroDoc.Value.Value, ctrlCxP.ComprobanteIDNro.Value.Value, false);

                        #endregion
                    }
                    else
                        throw new Exception("PagoFlujos_Add - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #region Reasigna Comprador Cartera

        #region Funciones Privadas

        /// <summary>
        /// Funcion que crea un registro nuevo en la tabla de ccCompradorFinalDeta
        /// <param name="actFlujoID">Actividad de flujo actual del documento</param>
        /// <param name="compFinDeta">DTO con la informacion a guardar</param>
        /// <param name="documentID">Numero del documento</param>
        /// <param name="numeroDoc">Numero doc nuevo para el nuevo registro</param>
        /// </summary>
        private DTO_TxResult ReasignaCompradorCartera_GuardarDeta(int documentID, string actFlujoID, DTO_ccCompradorFinalDeta compFinDeta, int numeroDoc, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccCompradorFinalDeta = (DAL_ccCompradorFinalDeta)base.GetInstance(typeof(DAL_ccCompradorFinalDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            DTO_TxResult result = new DTO_TxResult();

            try
            {
                #region Actualiza el credito
                DTO_ccCreditoDocu crediTemp = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(compFinDeta.NumDocCredito.Value.Value);
                crediTemp.CompradorFinalID.Value = compFinDeta.CompradorFinal.Value;
                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(crediTemp);
                #endregion
                #region Asigna el nuevo flujo y actualiza el estado del documento
                //this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, compFinDeta.NumDocCredito.Value.Value, EstadoDocControl.Aprobado, string.Empty, true);
                //result = this.AsignarFlujo(documentID, compFinDeta.NumDocCredito.Value.Value, actFlujoID, false, string.Empty);
                //if (result.Result == ResultValue.NOK)
                //    return result;
                #endregion
                #region Agrega la info en ccCompradorFinalDeta
                compFinDeta.NumeroDoc.Value = numeroDoc;
                this._dal_ccCompradorFinalDeta.DAL_ccCompradorFinalDeta_Add(compFinDeta);
                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReasignaComradorCartera_GuardarDeta");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Funcion que trae los creditos para reasignar el comprador
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="compradorCarteraID">Comprador de la venta de cartera</param>
        /// <returns></returns>
        public DTO_ReasignaCompradorFinal ReasignaCompradorCartera_Get(string actFlujoID, string compradorCarteraID)
        {
            try
            {
                this._dal_ccCompradorFinalDeta = (DAL_ccCompradorFinalDeta)base.GetInstance(typeof(DAL_ccCompradorFinalDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_ReasignaCompradorFinal reasignaCompFinal = new DTO_ReasignaCompradorFinal();
                DTO_ccCompradorFinalDocu compFinDocu = new DTO_ccCompradorFinalDocu();
                List<DTO_ccCompradorFinalDeta> compFinDeta = new List<DTO_ccCompradorFinalDeta>();
                DTO_ccCompradorCartera compCartera = (DTO_ccCompradorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCompradorCartera, compradorCarteraID, true, false);
                DTO_seUsuario seUsuario = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);
                string usuarioID = seUsuario.ID.Value;

                compFinDeta = this._dal_ccCompradorFinalDeta.DAL_ccCompradorFinalDeta_Get(actFlujoID, compradorCarteraID, usuarioID);
                compFinDocu.TerceroID.Value = compCartera.TerceroID.Value;
                reasignaCompFinal.AddData(compFinDeta, compFinDocu);
                return reasignaCompFinal;

            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "ReasignaCompradorCartera_Get");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que genera un nuevo documento de reasignacion de compradores de cartera con sus detalles
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="reasignaCompFinal">Dto que contiene el documento y el detalle del pago de flujo</param>
        /// <param name="insideAnotherTx">Indicador para establecer si se encuentra dentor de otra transaccion</param>
        /// <returns></returns>
        public List<DTO_SerializedObject> ReasignaCompradorCartera_Add(int documentID, string actFlujoID, DTO_ReasignaCompradorFinal reasignaCompFinal, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Generales
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCompradorFinalDocu = (DAL_ccCompradorFinalDocu)base.GetInstance(typeof(DAL_ccCompradorFinalDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            bool isValid = true;
            DTO_glDocumentoControl ctrlNew = null;

            #endregion
            try
            {
                int i = 0;
                #region Variables

                //Variables por defecto
                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string conceptoCxp = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CXPparaPagodeFlujos);

                //Vairables de valores y fechas
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                decimal tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, periodo);
                DateTime fecha = reasignaCompFinal.CompradorFinalDocu.FechaReasigna.Value.Value;

                #endregion
                #region Crea glDocumentoControl
                ctrlNew = new DTO_glDocumentoControl();
                ctrlNew.DocumentoNro.Value = 0;
                ctrlNew.DocumentoID.Value = AppDocuments.VentaCartera;
                ctrlNew.LugarGeograficoID.Value = defLugarGeografico;
                ctrlNew.NumeroDoc.Value = 0;
                ctrlNew.DocumentoTipo.Value = (byte)DocumentoTipo.DocInterno;
                ctrlNew.Fecha.Value = DateTime.Now;
                ctrlNew.FechaDoc.Value = fecha;
                ctrlNew.PeriodoDoc.Value = periodo;
                ctrlNew.PeriodoUltMov.Value = periodo;
                ctrlNew.AreaFuncionalID.Value = defArealFuncional;
                ctrlNew.PrefijoID.Value = defPrefijo;
                ctrlNew.ProyectoID.Value = defProyecto;
                ctrlNew.CentroCostoID.Value = defCentroCosto;
                ctrlNew.LineaPresupuestoID.Value = defLineaPresupuesto;
                ctrlNew.TerceroID.Value = reasignaCompFinal.CompradorFinalDocu.TerceroID.Value;
                ctrlNew.DocumentoTercero.Value = "RCompCartera" + fecha.ToString("yy/MM/dd");
                ctrlNew.MonedaID.Value = mdaLoc;
                ctrlNew.TasaCambioCONT.Value = tc;
                ctrlNew.TasaCambioDOCU.Value = tc;
                ctrlNew.Observacion.Value = string.Empty;
                ctrlNew.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrlNew.seUsuarioID.Value = this.UserId;
                ctrlNew.Descripcion.Value = "Reasigna Comprador Cartera - " + reasignaCompFinal.CompradorFinalDocu.CompradorCarteraID.Value;

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.RecompraCartera, ctrlNew, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    results.Add(result);
                    return results;
                }
                int numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrlNew.NumeroDoc.Value = numDocNew;
                #endregion
                #region Agrega la info a ccFlujoCesionDocu
                reasignaCompFinal.CompradorFinalDocu.NumeroDoc.Value = numDocNew;
                this._dal_ccCompradorFinalDocu.DAL_ccCompradorFinalDocu_Add(reasignaCompFinal.CompradorFinalDocu);
                #endregion
                #region Guarda los detalles
                foreach (DTO_ccCompradorFinalDeta compFinalDeta in reasignaCompFinal.CompradorFinalDeta)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / reasignaCompFinal.CompradorFinalDeta.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    if (compFinalDeta.Aprobado.Value.Value)
                    {
                        compFinalDeta.CompradorFinal.Value = reasignaCompFinal.CompradorFinalDocu.CompradorFinal.Value;
                        result = this.ReasignaCompradorCartera_GuardarDeta(documentID, actFlujoID, compFinalDeta, numDocNew, true);

                        if (result.Result == ResultValue.NOK)
                        {
                            isValid = false;
                            results.Add(result);
                        }
                        else
                        {
                            DTO_Alarma alarma = this.GetFirstMailInfo(compFinalDeta.NumDocCredito.Value.Value, false);
                            results.Add(alarma);
                        }
                    }
                }
                #endregion
                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReasignaCompradorCartera_Add");
                results.Add(result);
                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrlNew.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlNew.PrefijoID.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlNew, true, false, false);
                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #region Recompra Cartera

        #region Funciones Privadas

        /// <summary>
        /// Genera la informacion de contabilización de recompra para creditos de maduración anticipada
        /// </summary>
        private List<DTO_ComprobanteFooter> RecompraCartera_GenerarComprobanteMaduracionAnt(DTO_ccRecompraDeta recompra, DTO_glDocumentoControl ctrlNew, 
            string ctaPrepagoCart, decimal tc, string concCargoXdef, string lgXdef, string lineaXdef, string nitComprador, 
            Dictionary<string, DTO_coPlanCuenta> cacheCtas, Dictionary<string, DTO_glConceptoSaldo> cacheSaldos)
        {
            try 
            {
                List<DTO_ComprobanteFooter> results = new List<DTO_ComprobanteFooter>();
                DTO_glDocumentoControl ctrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(recompra.NumDocCredito.Value.Value);

                //Partida (DB)
                DTO_coPlanCuenta cta = cacheCtas[ctaPrepagoCart];
                DTO_glConceptoSaldo cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                decimal vlrNominalML = Math.Abs(recompra.VlrSaldosPagos.Value.Value);
                decimal vlrNominalME = 0;
                if (tc > 0)
                    vlrNominalME = vlrNominalML / tc;
                DTO_ComprobanteFooter footerNominal = this.CrearComprobanteFooter(ctrlCredito, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrNominalML, vlrNominalME, false);
                footerNominal.TerceroID.Value = nitComprador;
                footerNominal.Descriptivo.Value = "CONTAB. MADURACIÓN ANTICIPADA CARTERA"; 
                results.Add(footerNominal);

                //Contra (CR)
                DTO_ComprobanteFooter footerContra = this.CrearComprobanteFooter(ctrlNew, tc, concCargoXdef, lgXdef, lineaXdef, vlrNominalML * -1, vlrNominalME * -1, true);
                footerNominal.TerceroID.Value = nitComprador;
                footerNominal.Descriptivo.Value = "CONTAB. MADURACIÓN ANTICIPADA CARTERA";
                results.Add(footerNominal);

                return results;
            }
            catch(Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "RecompraCartera_GenerarComprobanteMaduracionAnt");
                throw ex;
            }
        }

        /// <summary>
        /// Genera la informacion de contabilización de recompra para creditos de maduración anticipada
        /// </summary>
        private List<DTO_ComprobanteFooter> RecompraCartera_GenerarComprobanteRecompra_Prepago(DTO_ccRecompraDeta recompra, string ctaPerdida, string ctaRecompra, 
            string ctaPrepagoCarteraCed, string ctaContraOrden_Propia, string ctaContraOrden_Cedida, decimal tc, string concCargoXdef, string lgXdef, 
            string lineaXdef, string nitCliente, string nitComprador, Dictionary<string, DTO_coPlanCuenta> cacheCtas, Dictionary<string, DTO_glConceptoSaldo> cacheSaldos)
        {
            try
            {
                List<DTO_ComprobanteFooter> results = new List<DTO_ComprobanteFooter>();
                DTO_glDocumentoControl ctrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(recompra.NumDocCredito.Value.Value);

                //Perdida (DB)
                DTO_coPlanCuenta cta = cacheCtas[ctaPerdida];
                DTO_glConceptoSaldo cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                decimal vlrPerdidaML = Math.Abs(recompra.VlrUtilidad.Value.Value);
                decimal vlrPerdidaME = 0;
                if (tc > 0)
                    vlrPerdidaME = vlrPerdidaML / tc;
                DTO_ComprobanteFooter footerPerdida = this.CrearComprobanteFooter(ctrlCredito, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrPerdidaML, vlrPerdidaME, false);
                footerPerdida.TerceroID.Value = nitComprador;
                footerPerdida.Descriptivo.Value = "CONTAB. RECOMPRA CARTERA"; 
                results.Add(footerPerdida);

                //Vlr Recompra (CR)
                cta = cacheCtas[ctaRecompra];
                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                decimal vlrNominalML = Math.Abs(recompra.VlrRecompra.Value.Value) * -1;
                decimal vlrNominalME = 0;
                if (tc > 0)
                    vlrNominalME = vlrNominalML / tc;
                DTO_ComprobanteFooter footerNominal = this.CrearComprobanteFooter(ctrlCredito, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrNominalML, vlrNominalME, false);
                footerNominal.TerceroID.Value = nitComprador;
                footerNominal.Descriptivo.Value = "CONTAB. RECOMPRA CARTERA"; 
                results.Add(footerNominal);

                //Diferencia (CR)
                cta = cacheCtas[ctaPrepagoCarteraCed];
                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                decimal vlrDiferenciaML = Math.Abs(recompra.VlrSaldosPagos.Value.Value);
                decimal vlrDiferenciaME = 0;
                if (tc > 0)
                    vlrDiferenciaML = vlrDiferenciaML / tc;
                DTO_ComprobanteFooter footerPrepago = this.CrearComprobanteFooter(ctrlCredito, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrDiferenciaML, vlrDiferenciaME, false);
                footerPrepago.TerceroID.Value = nitCliente;
                footerPrepago.Descriptivo.Value = "CONTAB. RECOMPRA CARTERA"; 
                results.Add(footerPrepago);

                return results;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "RecompraCartera_GenerarComprobanteRecompra");
                throw ex;
            }
        }

        /// <summary>
        /// Genera la informacion de contabilización de recompra para creditos de maduración anticipada
        /// </summary>
        private List<DTO_ComprobanteFooter> RecompraCartera_GenerarComprobanteRecompra_NoPrepago(DTO_ccRecompraDeta recompra, DTO_ccCreditoDocu credito, DateTime periodo, string libroFunc,
            string ctaPerdida, string ctaRecompra, string ctaEspecialPagosTotales, string ctaContraOrden_Propia, string ctaContraOrden_Cedida, decimal tc, string concCargoXdef, string lgXdef,
            string lineaXdef, string nitCliente, string nitComprador, Dictionary<string, DTO_coPlanCuenta> cacheCtas, Dictionary<string, DTO_glConceptoSaldo> cacheSaldos,
            Dictionary<string, DTO_ccCarteraComponente> cacheComponentes, Dictionary<string, DTO_ccLineaCredito> cacheLineas)
        {
            try
            {
                #region Variables

                List<DTO_ComprobanteFooter> results = new List<DTO_ComprobanteFooter>();
                DTO_glDocumentoControl ctrl = this._moduloGlobal.glDocumentoControl_GetByID(recompra.NumDocCredito.Value.Value);

                //Variables de operación
                DTO_coPlanCuenta cta = null;
                DTO_glConceptoSaldo cSaldo = null;
                DTO_ccLineaCredito linea = null;
                DTO_ccCarteraComponente comp = null;
                List<DTO_ccCarteraComponente> componentes = new List<DTO_ccCarteraComponente>();

                //Variables de totales
                decimal sumBalance = 0;
                decimal sumOrdenPropia = 0;
                decimal sumOrdenCedida = 0;

                #endregion
                #region Carga las variables del crédito

                //Linea de crédito
                if (cacheLineas.ContainsKey(credito.LineaCreditoID.Value))
                    linea = cacheLineas[credito.LineaCreditoID.Value];
                else
                {
                    linea = (DTO_ccLineaCredito)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccLineaCredito, credito.LineaCreditoID.Value, true, false);
                    cacheLineas[credito.LineaCreditoID.Value] = linea;
                }

                //Componentes
                List<DTO_ccCreditoComponentes> componentesAll = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(recompra.NumDocCredito.Value.Value);
                foreach (DTO_ccCreditoComponentes c in componentesAll)
                {
                    //Trae el componente
                    if (cacheComponentes.ContainsKey(c.ComponenteCarteraID.Value))
                        comp = cacheComponentes[c.ComponenteCarteraID.Value];
                    else
                    {
                        comp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, c.ComponenteCarteraID.Value, true, false);
                        cacheComponentes[c.ComponenteCarteraID.Value] = comp;
                    }

                    if (comp.TipoComponente.Value == (byte)TipoComponente.CapitalSolicitado || comp.TipoComponente.Value == (byte)TipoComponente.ComponenteCuota)
                        componentes.Add(comp);
                }

                DAL_MasterComplex dalComplex = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                dalComplex.DocumentID = AppMasters.ccComponenteCuenta;

                DTO_MasterComplex complexPropia = null;
                DTO_MasterComplex complexCedida = null;
                DTO_ccComponenteCuenta ccPropia = null;
                DTO_ccComponenteCuenta ccCedida = null;
                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("ComponenteCarteraID", "");
                pks.Add("ClaseCredito", linea.ClaseCredito.Value);

                #endregion
                #region Carga los registros por componente de cartera

                foreach (DTO_ccCarteraComponente c in componentes)
                {
                    #region Filtros para ccCarteraComponente
                    //Cartera Propia
                    pks["ComponenteCarteraID"] = c.ID.Value;
                    pks["TipoEstado"] = ((int)TipoEstadoCartera.Propia).ToString();
                    complexPropia = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);
                    ccPropia = (DTO_ccComponenteCuenta)complexPropia;

                    //Cartera Cedida
                    pks["ComponenteCarteraID"] = c.ID.Value;
                    pks["TipoEstado"] = ((int)TipoEstadoCartera.Cedida).ToString();
                    complexCedida = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);
                    ccCedida = (DTO_ccComponenteCuenta)complexCedida;

                    decimal saldoML = 0;
                    decimal saldoME = 0;
                    #endregion
                    #region CuentaID
                    if (!string.IsNullOrWhiteSpace(ccPropia.CuentaID.Value) && !string.IsNullOrWhiteSpace(ccCedida.CuentaID.Value))
                    {
                        #region Trae los saldos
                        //Cedida
                        if (!cacheCtas.ContainsKey(ccCedida.CuentaID.Value))
                        {
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ccCedida.CuentaID.Value, true, false);
                            cacheCtas.Add(cta.ID.Value, cta);
                        }
                        else
                            cta = cacheCtas[ccCedida.CuentaID.Value];

                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        {
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            cacheSaldos.Add(cta.ID.Value, cSaldo);
                        }

                        //Trae el saldo
                        List<DTO_SaldosVista> saldos = this._moduloContabilidad.Saldo_GetSaldosResumen(periodo, libroFunc, ccCedida.CuentaID.Value, string.Empty, string.Empty,
                                                         string.Empty, string.Empty, string.Empty, string.Empty, credito.NumeroDoc.Value.Value);

                        saldoML = saldos.Sum(s => s.SaldoIniML.Value.Value + s.CreditoML.Value.Value + s.DebitoML.Value.Value);
                        saldoME = saldos.Sum(s => s.SaldoIniME.Value.Value + s.CreditoME.Value.Value + s.DebitoME.Value.Value);
                        #endregion
                        if (saldoML != 0)
                        {
                            #region Abona a cartera cedida
                            DTO_ComprobanteFooter footerSaldoCedida = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, saldoML * -1, saldoME * -1, false);
                            footerSaldoCedida.TerceroID.Value = nitCliente;
                            footerSaldoCedida.Descriptivo.Value = "CONTAB. RECOMPRA CARTERA";
                            results.Add(footerSaldoCedida);

                            //Suma los valores de las cuentas de balance
                            if (cta.Tipo.Value != ((int)TipoCuenta.Orden).ToString())
                                sumBalance += saldoML * -1;
                            else
                                sumOrdenCedida += saldoML * -1;

                            #endregion
                            #region Abona a cartera propia
                            if (!cacheCtas.ContainsKey(ccPropia.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ccPropia.CuentaID.Value, true, false);
                                cacheCtas.Add(ccPropia.CuentaID.Value, cta);
                            }
                            else
                                cta = cacheCtas[ccPropia.CuentaID.Value];

                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }

                            DTO_ComprobanteFooter footerSaldoPropia = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, saldoML, saldoME, false);
                            footerSaldoPropia.TerceroID.Value = nitCliente;
                            footerSaldoPropia.Descriptivo.Value = "CONTAB. RECOMPRA CARTERA";
                            results.Add(footerSaldoPropia);

                            //Suma los valores de las cuentas de balance
                            if (cta.Tipo.Value != ((int)TipoCuenta.Orden).ToString())
                                sumBalance += saldoML;
                            else
                                sumOrdenPropia += saldoML;
                            #endregion
                        }
                    }
                    #endregion
                    #region Cuenta Recursos Cesión
                    if (saldoML != 0 && !string.IsNullOrWhiteSpace(ccCedida.CtaRecursosCesion.Value))
                    {
                        //Cedida
                        if (!cacheCtas.ContainsKey(ccCedida.CtaRecursosCesion.Value))
                        {
                            cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ccCedida.CtaRecursosCesion.Value, true, false);
                            cacheCtas.Add(ccCedida.CtaRecursosCesion.Value, cta);
                        }
                        else
                            cta = cacheCtas[ccCedida.CtaRecursosCesion.Value];

                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        {
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                            cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                        }

                        //Trae el saldo
                        DTO_ComprobanteFooter footerRecCesion = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, saldoML, saldoME, false);
                        footerRecCesion.TerceroID.Value = nitComprador;
                        footerRecCesion.Descriptivo.Value = "CONTAB. RECOMPRA CARTERA";
                        results.Add(footerRecCesion);

                        //Suma los valores de las cuentas de balance
                        if (cta.Tipo.Value != ((int)TipoCuenta.Orden).ToString())
                            sumBalance += saldoML;
                        else
                            sumOrdenCedida += saldoML;

                    }
                    #endregion
                }

                //Cuenta contra orden cartera propia
                if (sumOrdenPropia != 0)
                {
                    cta = cacheCtas[ctaContraOrden_Propia];
                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                    decimal sumOrdenPropiaME = 0;
                    if (tc > 0)
                        sumOrdenPropiaME = sumOrdenPropia / tc;
                    DTO_ComprobanteFooter footerContraPropia = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, sumOrdenPropia * -1, sumOrdenPropiaME * -1, false);
                    footerContraPropia.Descriptivo.Value = "CONTAB. RECOMPRA CARTERA";
                    results.Add(footerContraPropia);
                }

                //Cuenta contra orden cartera cedida
                if (sumOrdenCedida != 0)
                {
                    cta = cacheCtas[ctaContraOrden_Cedida];
                    cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                    decimal sumOrdenCedidaME = 0;
                    if (tc > 0)
                        sumOrdenCedidaME = sumOrdenCedida / tc;
                    DTO_ComprobanteFooter footerContraCedida = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, sumOrdenCedida * -1, sumOrdenCedidaME * -1, false);
                    footerContraCedida.Descriptivo.Value = "CONTAB. RECOMPRA CARTERA";
                    results.Add(footerContraCedida);
                }

                #endregion
                #region Registros extras

                //Perdida (DB)
                cta = cacheCtas[ctaPerdida];
                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                decimal vlrPerdidaML = Math.Abs(recompra.VlrUtilidad.Value.Value);
                decimal vlrPerdidaME = 0;
                if (tc > 0)
                    vlrPerdidaME = vlrPerdidaML / tc;
                DTO_ComprobanteFooter footerPerdida = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrPerdidaML, vlrPerdidaME, false);
                footerPerdida.TerceroID.Value = nitComprador;
                footerPerdida.Descriptivo.Value = "CONTAB. RECOMPRA CARTERA";
                results.Add(footerPerdida);

                //Vlr Recompra (CR)
                cta = cacheCtas[ctaRecompra];
                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                decimal vlrNominalML = Math.Abs(recompra.VlrRecompra.Value.Value) * -1;
                decimal vlrNominalME = 0;
                if (tc > 0)
                    vlrNominalME = vlrNominalML / tc;
                DTO_ComprobanteFooter footerNominal = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrNominalML, vlrNominalME, false);
                footerNominal.TerceroID.Value = nitComprador;
                footerNominal.Descriptivo.Value = "CONTAB. RECOMPRA CARTERA";
                results.Add(footerNominal);

                //Diferencia (CR)
                cta = cacheCtas[ctaEspecialPagosTotales];
                cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];
                decimal vlrDiferenciaML = Math.Abs(sumBalance + recompra.VlrUtilidad.Value.Value - recompra.VlrRecompra.Value.Value) * -1;
                decimal vlrDiferenciaME = 0;
                if (tc > 0)
                    vlrDiferenciaML = vlrDiferenciaML / tc;
                DTO_ComprobanteFooter footerPrepago = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrDiferenciaML, vlrDiferenciaME, false);
                footerPrepago.TerceroID.Value = nitCliente;
                footerPrepago.Descriptivo.Value = "CONTAB. RECOMPRA CARTERA";
                results.Add(footerPrepago);

                #endregion

                return results;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "RecompraCartera_GenerarComprobanteRecompra");
                throw ex;
            }
        }

        /// <summary>
        /// Genera la informacion de contabilización de recompra para creditos individual
        /// </summary>
        private object RecompraCartera_GenerarComprobante_Individual(DTO_ccRecompraDeta recompra,DTO_coDocumento coDocRecompra, DateTime fechaCorte,decimal tc, string concCargoXdef, string lgXdef,
            string lineaXdef, string nitCliente, string nitComprador, Dictionary<string, DTO_coPlanCuenta> cacheCtas, Dictionary<string, DTO_glConceptoSaldo> cacheSaldos)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            try
            {
                //Variables
                decimal vlrCapitalCesionTotal = 0;
                decimal vlrUtilidadCesionTotal = 0;

                #region Variables
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_glDocumentoControl ctrl = this._moduloGlobal.glDocumentoControl_GetByID(recompra.NumDocCredito.Value.Value);
                DTO_ccCreditoDocu credito = this.GetCreditoByNumeroDoc(recompra.NumDocCredito.Value.Value);
                DTO_ccLineaCredito lineaCred = (DTO_ccLineaCredito)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccLineaCredito, credito.LineaCreditoID.Value, true, false);
                DTO_coComprobante comp = new DTO_coComprobante();
                string compSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string compIntSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresSeguro);
                string compCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);

                string ctaUtilidadIDRecompra = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaUtilidadCesion);
                string ctaContraOrden_Propia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterPropia);
                string ctaContraOrden_Cedida = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterCedida);
                string ctaContraBalance_Cedida = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaBalanceCarteraCedida);
                string ctaOrdenCapitalCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenCapitalCesion);
                string ctaOrdenUtilidadCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenUtilidadCesion);
                string ctaOrdenCesionContra = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenCesionXContra);
                string ctaProvisionUtilidad = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaProvisionUtilidadVenta);

                //Variables del comprobante
                string codCarteraPropia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);
                string contabilizaOrdCesion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ContabilizacionCtasOrdCesion);

                //Comprador
                DTO_ccCompradorCartera comprador = (DTO_ccCompradorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCompradorCartera, recompra.CompradorCarteraID.Value, true, false);
                byte tipoRecursos = comprador.TipoControlRecursos.Value.Value;

                //Variables Temporales                
                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                List<string> ctasRecCesion = new List<string>();

                //Variables de operación
                string sectorCartera = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_SectorCartera);
                bool validateRecCesion = false;
                if (sectorCartera == ((byte)SectorCartera.Solidario).ToString())
                    validateRecCesion = true;

                //Variables de componentes
                DTO_ccCarteraComponente dtoCompSeguro = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, compSeguro, true, false);
                DTO_ccCarteraComponente dtoCompIntSeguro = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, compIntSeguro, true, false);

                Dictionary<string, DTO_coCuentaGrupo> cacheGrupos = new Dictionary<string, DTO_coCuentaGrupo>();

                //Resultado
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> footerPropia = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> footerCedida = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> fBalance = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> fOrden = new List<DTO_ComprobanteFooter>();
                decimal contraBalML = 0;
                decimal contraBalME = 0;
                #endregion
                #region Asigna al dicionario de cuentas la informacion de las contrapartidas

                #region Cuentas de contrapartida
                //Cuenta utilidad
                if (!cacheCtas.ContainsKey(ctaUtilidadIDRecompra))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaUtilidadIDRecompra, true, false);
                    cacheCtas.Add(ctaUtilidadIDRecompra, cta);
                }

                //Contrapartida cartera propia - Orden
                if (!cacheCtas.ContainsKey(ctaContraOrden_Propia))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraOrden_Propia, true, false);
                    cacheCtas.Add(ctaContraOrden_Propia, cta);
                }

                //Contrapartida cartera cedida - Orden
                if (!cacheCtas.ContainsKey(ctaContraOrden_Cedida))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraOrden_Cedida, true, false);
                    cacheCtas.Add(ctaContraOrden_Cedida, cta);
                }

                //Contrapartida cartera cedida - Balance
                if (!cacheCtas.ContainsKey(ctaContraBalance_Cedida))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraBalance_Cedida, true, false);
                    cacheCtas.Add(ctaContraBalance_Cedida, cta);
                }
                #endregion

                if (contabilizaOrdCesion == "1")
                {
                    #region Cuentas para contabilizar capital y utilidad
                    //Cuenta Capital Cesion - Orden
                    if (!cacheCtas.ContainsKey(ctaOrdenCapitalCesion))
                    {
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenCapitalCesion, true, false);
                        cacheCtas.Add(ctaOrdenCapitalCesion, cta);
                    }

                    //Cuenta Utilidad(Intereses) Cesion - Orden
                    if (!cacheCtas.ContainsKey(ctaOrdenUtilidadCesion))
                    {
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenUtilidadCesion, true, false);
                        cacheCtas.Add(ctaOrdenUtilidadCesion, cta);
                    }

                    //Contrapartida cesion - Orden
                    if (!cacheCtas.ContainsKey(ctaOrdenCesionContra))
                    {
                        cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaOrdenCesionContra, true, false);
                        cacheCtas.Add(ctaOrdenCesionContra, cta);
                    }
                    #endregion
                }

                #endregion
                #region Trae los saldos de componentes para la cartera propia
                DTO_InfoCredito saldosCredito = this.GetSaldoCredito(recompra.NumDocCredito.Value.Value,fechaCorte, false, false, false);
                if (saldosCredito.SaldosComponentes.Count == 0)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_LibranzaNoSaldo + "&&" + ctrl.DocumentoTercero.Value + "&&" + fechaCorte.ToString("yyyy/MM");
                    return result;
                }
                List<DTO_ccSaldosComponentes> componentesSaldos = new List<DTO_ccSaldosComponentes>();

                foreach (DTO_ccCreditoPlanPagos cuota in saldosCredito.PlanPagos)
                {
                    List<DTO_ccSaldosComponentes> componentesCuota = (from c in saldosCredito.SaldosComponentes where c.CuotaID.Value == cuota.CuotaID.Value select c).ToList();
                    componentesSaldos.AddRange(componentesCuota);
                    vlrCapitalCesionTotal += cuota.VlrCapitalCesion.Value.Value;
                    vlrUtilidadCesionTotal += cuota.VlrUtilidadCesion.Value.Value;
                }

                #endregion
                #region Llena los detalles del comprobante por cada cuota

                foreach (DTO_ccCreditoPlanPagos cuota in saldosCredito.PlanPagos)
                {
                    int cuotaID = cuota.CuotaID.Value.Value;
                    List<DTO_ccSaldosComponentes> componentesCuota = (from c in componentesSaldos where c.CuotaID.Value == cuotaID && 
                                                                      (c.TipoComponente.Value == (byte)TipoComponente.CapitalSolicitado || 
                                                                       c.TipoComponente.Value == (byte)TipoComponente.ComponenteCuota) select c).ToList();
                    #region Cartera Propia
                    object compPropia = this.VentaCartera_GenerarComprobanteCuota_Propia(componentesCuota, ctrl, lineaCred.ClaseCredito.Value, concCargoXdef, lgXdef,
                        lineaXdef, tc, cacheCtas, cacheSaldos);

                    //Error
                    if (compPropia.GetType() == typeof(DTO_TxResult))
                    {
                        result = (DTO_TxResult)compPropia;
                        return result;
                    }

                    //Agrega los registros
                    foreach (DTO_ComprobanteFooter det in (List<DTO_ComprobanteFooter>)compPropia)
                    {
                        // Por cada registro reviso si existe en la lista de cartera propia
                        List<DTO_ComprobanteFooter> aux =
                        (
                            from p in footerPropia
                            where
                                p.CuentaID.Value == det.CuentaID.Value &&
                                p.ConceptoSaldoID.Value == det.ConceptoSaldoID.Value &&
                                p.DocumentoCOM.Value == det.DocumentoCOM.Value &&
                                p.IdentificadorTR.Value == det.IdentificadorTR.Value
                            select p
                        ).ToList();

                        if (aux.Count > 0)
                        {
                            aux.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value;
                            aux.First().vlrMdaExt.Value += det.vlrMdaExt.Value;
                        }
                        else
                            footerPropia.Add(det);
                    }
                    #endregion
                    #region Cartera Cedida

                    object compCedida = this.VentaCartera_GenerarComprobanteCuota_Cedida(componentesCuota, ctrl, lineaCred.ClaseCredito.Value, concCargoXdef, lgXdef, lineaXdef,
                        compCapital, compInteres, tc, comprador, cacheCtas, cacheSaldos, cacheGrupos, ctasRecCesion);

                    //Error
                    if (compCedida.GetType() == typeof(DTO_TxResult))
                    {
                        result = (DTO_TxResult)compCedida;
                        return result;
                    }

                    //Agrega los registros
                    foreach (DTO_ComprobanteFooter det in (List<DTO_ComprobanteFooter>)compCedida)
                    {
                        // Por cada registro reviso si existe en la lista de cartera Cedida
                        List<DTO_ComprobanteFooter> aux =
                        (
                            from p in footerCedida
                            where
                                p.CuentaID.Value == det.CuentaID.Value &&
                                p.TerceroID.Value == det.TerceroID.Value &&
                                p.ConceptoSaldoID.Value == det.ConceptoSaldoID.Value &&
                                p.DocumentoCOM.Value == det.DocumentoCOM.Value &&
                                p.IdentificadorTR.Value == det.IdentificadorTR.Value
                            select p
                        ).ToList();

                        if (aux.Count > 0)
                        {
                            aux.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value;
                            aux.First().vlrMdaExt.Value += det.vlrMdaExt.Value;
                        }
                        else
                            footerCedida.Add(det);
                    }
                    #endregion
                    #region Actualiza el plan de pagos
                    cuota.CompradorCarteraID.Value = codCarteraPropia;
                    cuota.FechaFlujo.Value = null;
                    cuota.DocVenta.Value = null;
                    this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(cuota);
                    #endregion                    
                }
                #endregion
                #region Actualiza el creditoDocu
                credito.CompradorCarteraID.Value = codCarteraPropia;
                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);
                #endregion
                #region Organiza los registros de la cartera propia

                //Valores de cartera propia
                decimal vlrBalancePropiaML = 0;
                decimal vlrBalancePropiaME = 0;
                decimal vlrOrdenPropiaML = 0;
                decimal vlrOrdenPropiaME = 0;

                if (!comprador.ResponsabilidadInd.Value.Value)
                    footerPropia = footerPropia.FindAll(x => x.ConceptoSaldoID.Value != dtoCompSeguro.ConceptoSaldoID.Value && x.ConceptoSaldoID.Value != dtoCompIntSeguro.ConceptoSaldoID.Value).ToList();

                foreach (DTO_ComprobanteFooter det in footerPropia)
                {
                    cta = cacheCtas[det.CuentaID.Value];
                    det.vlrMdaExt.Value = tc != 0 ? Math.Round(det.vlrMdaLoc.Value.Value / tc, 2) : 0;

                    if (cta.Tipo.Value == ((int)TipoCuenta.Orden).ToString())
                    {
                        #region Ctas Orden
                        vlrOrdenPropiaML += det.vlrMdaLoc.Value.Value;
                        vlrOrdenPropiaME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> po_Temp = (from c in fOrden where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (po_Temp.Count == 0)
                        {
                            det.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO ";
                            fOrden.Add(det);
                        }
                        else
                        {
                            po_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            po_Temp.First().vlrMdaExt.Value += det.vlrMdaExt.Value.Value;
                        }
                        #endregion
                    }
                    else
                    {
                        #region Ctas Balance
                        vlrBalancePropiaML += det.vlrMdaLoc.Value.Value;
                        vlrBalancePropiaME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> pb_Temp = (from c in fBalance where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (pb_Temp.Count == 0)
                        {
                            det.Descriptivo.Value = "VENTA CARTERA. OFERTA NRO " ;
                            fBalance.Add(det);
                        }
                        else
                        {
                            pb_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            pb_Temp.First().vlrMdaExt.Value += det.vlrMdaExt.Value.Value;
                        }
                        #endregion
                    }
                }

                #endregion
                #region Organiza los registros de la cartera cedida

                decimal vlrBalanceCedidaML = 0;
                decimal vlrBalanceCedidaME = 0;
                decimal vlrOrdenCedidaML = 0;
                decimal vlrOrdenCedidaME = 0;

                if (!comprador.ResponsabilidadInd.Value.Value)
                    footerCedida = footerCedida.FindAll(x => x.ConceptoSaldoID.Value != dtoCompSeguro.ConceptoSaldoID.Value && x.ConceptoSaldoID.Value != dtoCompIntSeguro.ConceptoSaldoID.Value).ToList();

                foreach (DTO_ComprobanteFooter det in footerCedida)
                {
                    cta = cacheCtas[det.CuentaID.Value];
                    det.vlrMdaExt.Value = tc != 0 ? Math.Round(det.vlrMdaLoc.Value.Value / tc, 2) : 0;

                    if (cta.Tipo.Value == ((int)TipoCuenta.Orden).ToString())
                    {
                        #region Ctas Orden
                        vlrOrdenCedidaML += det.vlrMdaLoc.Value.Value;
                        vlrOrdenCedidaME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> po_Temp = (from c in fOrden where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (po_Temp.Count == 0)
                            fOrden.Add(det);
                        else
                        {
                            po_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            po_Temp.First().vlrMdaExt.Value += det.vlrMdaExt.Value.Value;
                        }
                        #endregion
                    }
                    else
                    {
                        //Nota: Validación que se incluyó para financieras y no se tiene claro en que pueda afectar a la cooperativas

                        bool assignCtaBal = true;
                        if (validateRecCesion)
                            assignCtaBal = ctasRecCesion.Contains(cta.ID.Value) ? true : false;

                        if (assignCtaBal)
                        {
                            #region Ctas Balance

                            vlrBalanceCedidaML += det.vlrMdaLoc.Value.Value;
                            vlrBalanceCedidaME += det.vlrMdaExt.Value.Value;

                            List<DTO_ComprobanteFooter> pb_Temp = (from c in fBalance where c.CuentaID.Value == cta.ID.Value select c).ToList();
                            if (pb_Temp.Count == 0)
                                fBalance.Add(det);
                            else
                            {
                                pb_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                                pb_Temp.First().vlrMdaExt.Value += det.vlrMdaExt.Value.Value;
                            }
                            #endregion
                        }
                    }
                }

                #endregion
                #region Agrega los registros de balance de Utilidad
                fBalance.RemoveAll(f => f.vlrMdaLoc.Value == 0);
                footer.AddRange(fBalance);
                 #region Agrega registro de Utilidad Cesion
                decimal vlrUtilidadCartCed = recompra.VlrUtilidad.Value.Value;
                decimal vlrUtilidadME = 0;
                if (tc != 0)
                    vlrUtilidadME = Math.Round(vlrUtilidadCartCed / tc, 2);

                if (vlrUtilidadCartCed != 0)
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Hierarchy, AppMasters.coPlanCuenta, ctaUtilidadIDRecompra, true, false);
                    if (cta == null)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "La cuenta de Utilidad ReCompra no existe en el control  " + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaUtilidadCesion;
                        return result;
                    }
                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                    {
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                    }
                    else
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    DTO_ComprobanteFooter utilidCartera = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrUtilidadCartCed, vlrUtilidadME, false);
                    utilidCartera.TerceroID.Value = comprador.TerceroID.Value;
                    footer.Add(utilidCartera);
                }
                vlrBalancePropiaML += vlrUtilidadCartCed;
                vlrBalancePropiaME += vlrUtilidadME;
                #endregion
                #region Cartera Propia y ctas recursos cesion

                if (vlrBalancePropiaML != 0 || vlrBalanceCedidaML != 0)
                {
                    contraBalML += vlrBalancePropiaML + vlrBalanceCedidaML;
                    contraBalME += vlrBalancePropiaME + vlrBalanceCedidaME;
                }
                #endregion
                #endregion
                #region Agrega los registros de orden

                fOrden.RemoveAll(f => f.vlrMdaLoc.Value == 0);
                if (fOrden.Count > 0)
                {
                    footer.AddRange(fOrden);
                    #region cartera Propia

                    if (vlrOrdenPropiaML != 0)
                    {
                        cta = cacheCtas[ctaContraOrden_Propia];
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter contraPropiaOrden = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrOrdenPropiaML * -1, vlrOrdenPropiaME * -1, true);
                        contraPropiaOrden.DocumentoCOM.Value = ctrl.DocumentoTercero.Value;

                        footer.Add(contraPropiaOrden);
                    }

                    #endregion
                    #region cartera Cedida

                    if (vlrOrdenCedidaML != 0)
                    {
                        cta = cacheCtas[ctaContraOrden_Cedida];
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter contraCedidaOrden = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrOrdenCedidaML * -1, vlrOrdenCedidaME * -1, true);
                        contraCedidaOrden.TerceroID.Value = comprador.TerceroID.Value;
                        contraCedidaOrden.DocumentoCOM.Value = ctrl.DocumentoTercero.Value;
                        footer.Add(contraCedidaOrden);
                    }

                    #endregion
                }
                #endregion
                #region Agrega los registros de capital, interes y la contra de la cesion(capital + interes)
                if (contabilizaOrdCesion == "1" && (vlrCapitalCesionTotal != 0 || vlrUtilidadCesionTotal != 0)) // debe ser credito
                {
                    #region Crea el registro del capital (Debito)

                    //Cuenta
                    cta = cacheCtas[ctaOrdenCapitalCesion];
                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    else
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    //Valor
                    vlrCapitalCesionTotal = Math.Abs(vlrCapitalCesionTotal);
                    decimal vlrCapitalME = 0;
                    if (tc != 0)
                        vlrCapitalME = Math.Round(vlrCapitalCesionTotal / tc, 2);

                    //Crea el registro
                    DTO_ComprobanteFooter capitalDet = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrCapitalCesionTotal, vlrCapitalME, false);
                    capitalDet.TerceroID.Value = comprador.TerceroID.Value;
                    footer.Add(capitalDet);

                    #endregion
                    #region Crea el registro de la utilidad (Debito)

                    //Cuenta
                    cta = cacheCtas[ctaOrdenUtilidadCesion];
                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    else
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    //Valor
                    vlrUtilidadCesionTotal = Math.Abs(vlrUtilidadCesionTotal);
                    vlrUtilidadME = 0;
                    if (tc != 0)
                        vlrUtilidadME = Math.Round(vlrUtilidadCesionTotal / tc, 2);

                    //Crea el registro
                    DTO_ComprobanteFooter interesDet = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrUtilidadCesionTotal, vlrUtilidadME, false);
                    interesDet.TerceroID.Value = comprador.TerceroID.Value;
                    footer.Add(interesDet);

                    #endregion
                    #region Crea el registro de la contrapartida de cesion (Capital + Utilidad) (Credito)

                    //Cuenta
                    cta = cacheCtas[ctaOrdenCesionContra];
                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                    else
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                    //Valor
                    decimal vlrTotalCesionML = (vlrCapitalCesionTotal + vlrUtilidadCesionTotal) * -1;
                    decimal vlrContraCesionME = 0;
                    if (tc != 0)
                        vlrContraCesionME = Math.Round(vlrTotalCesionML / tc, 2);

                    //Crea el registro
                    DTO_ComprobanteFooter cesionDet = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrTotalCesionML, vlrContraCesionME, false);
                    cesionDet.TerceroID.Value = comprador.TerceroID.Value;
                    footer.Add(cesionDet);

                    #endregion
                }
                #endregion

                #region Crea ContrapartidaGral
                DTO_coPlanCuenta ctaContraRecompra = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, coDocRecompra.CuentaLOC.Value, true, false);
                cSaldo = new DTO_glConceptoSaldo();
                //Carga la info del saldo
                if (!string.IsNullOrEmpty(ctaContraRecompra.ConceptoSaldoID.Value))
                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, ctaContraRecompra.ConceptoSaldoID.Value, true, false);
                DTO_ComprobanteFooter contraGral = this.CrearComprobanteFooter(ctrl, ctaContraRecompra, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, contraBalML * -1, contraBalME * -1, true);
                contraGral.TerceroID.Value = comprador.TerceroID.Value;
                footer.Add(contraGral);
                #endregion

                //Cambia el signo de todos los registros
                footer.ForEach(x => { x.vlrMdaLoc.Value = x.vlrMdaLoc.Value * -1; x.vlrMdaExt.Value = x.vlrMdaExt.Value * -1; x.Descriptivo.Value = "RECOMPRA CARTERA"; });

                return footer;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "VentaCartera_GenerarComprobante");
                return result;
            }
        }


        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Funcion que retorna la lista de recompras asignadas a ese comprado
        /// </summary>
        /// <param name="compradorCarteraID">Comprador de cartera</param>
        /// <returns>Lista con las recompras del comprador de cartera</returns>
        public List<DTO_ccRecompraDeta> RecompraCartera_GetByCompradorCartera(string compradorCarteraID)
        {
            try
            {
                this._dal_ccRecompraDeta = (DAL_ccRecompraDeta)base.GetInstance(typeof(DAL_ccRecompraDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return this._dal_ccRecompraDeta.DAL_ccRecompraDeta_GetByCompradorCartera(compradorCarteraID);

            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "RecompraCartera_GetByCompradorCartera");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que trae la lista de creditos disponibles para la compra o sustitucion
        /// </summary>
        /// <param name="actFlujoID">Actividad de Flujo</param>
        /// <param name="compradorCarteraID">Comprador de cartera ID</param>
        /// <returns>Retorna un DTO con el plan de pagos y la informacion de los creditos</returns>
        public DTO_RecompraCartera RecompraCartera_GetForCompraAndSustitucion(string compradorCarteraID, List<int> libranzasFilter, ref string msgError)
        {
            try
            {
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccRecompraDeta = (DAL_ccRecompraDeta)base.GetInstance(typeof(DAL_ccRecompraDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                DTO_RecompraCartera recompraCartera = new DTO_RecompraCartera();
                DTO_ccCompradorCartera dtoComprador = (DTO_ccCompradorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCompradorCartera, compradorCarteraID, true, false);

                //Carga la actividad de la entrega de libranzas
                List<string> actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.VentaCartera);
                if (actividades.Count == 0)
                    return new DTO_RecompraCartera();

                string actFlujoID = actividades[0];

                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));
                string ctaPagosEspeciales = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaEspecialPagosCartera);
                List<DTO_ccRecompraDeta> recomprasDeta = new List<DTO_ccRecompraDeta>();
                //Filtra las recompras  sin libranza
                if (libranzasFilter.Count == 0)
                    recomprasDeta = this._dal_ccRecompraDeta.DAL_ccRecompraDeta_GetForCompraAndSustitucion(actFlujoID, compradorCarteraID, periodo, ctaPagosEspeciales,null);
                else
                {
                    foreach (int libranza in libranzasFilter)
                    {
                        List<DTO_ccRecompraDeta>  tmp = this._dal_ccRecompraDeta.DAL_ccRecompraDeta_GetForCompraAndSustitucion(actFlujoID, compradorCarteraID, periodo, ctaPagosEspeciales, libranza);
                        if (tmp.Count > 0)
                        {
                            DTO_ccRecompraDeta first = tmp.First();
                            string compCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                            string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                            string libroFuncional = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TipoBalanceFuncional);

                            Dictionary<string, string> pks = new Dictionary<string, string>();
                            pks.Add("ComponenteCarteraID", compCapital);
                            pks.Add("TipoEstado", ((int)TipoEstadoCartera.Cedida).ToString());
                            pks.Add("ClaseCredito", first.ClaseCredito.Value);

                            DTO_ccComponenteCuenta compCuentaCap = (DTO_ccComponenteCuenta)this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);
                            pks["ComponenteCarteraID"] = compInteres;
                            DTO_ccComponenteCuenta compCuentaInt = (DTO_ccComponenteCuenta)this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);

                            if (compCuentaCap != null && compCuentaInt != null)
                            {
                                first.VlrCapitalContab.Value = this._moduloContabilidad.Saldo_GetByDocumentoCuenta(true, periodo, first.NumDocCredito.Value.Value, compCuentaCap.CuentaID.Value, libroFuncional);
                                first.VlrInteresContab.Value = this._moduloContabilidad.Saldo_GetByDocumentoCuenta(true, periodo, first.NumDocCredito.Value.Value, compCuentaInt.CuentaID.Value, libroFuncional);
                                first.VlrPrepago.Value = first.VlrCapitalContab.Value;
                                if (dtoComprador != null && !dtoComprador.ResponsabilidadInd.Value.Value)
                                {
                                    first.VlrLibranza.Value = first.VlrCapital.Value + first.VlrInteres.Value;
                                    first.CuotasRecompra.Value += first.FlujosPagados.Value;
                                }
                            }
                            else
                                msgError = DictionaryMessages.Err_Cc_ComponenteEmptyRecompra;
                            recomprasDeta.Add(first);
                        }
                    }
                }
                recompraCartera.AddData(new List<DTO_ccCreditoPlanPagos>() , recomprasDeta, new DTO_ccRecompraDocu());
                return recompraCartera;
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "RecompraCartera_GetForCompraYSust");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que genera un nuevo documento de recompra de cartera con sus detalles
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="recompraCartera">Dto que contiene el documento y el detalle de la recompra de cartera</param>
        /// <param name="insideAnotherTx">Indicador para establecer si se encuentra dentor de otra transaccion</param>
        /// <returns></returns>
        public List<DTO_SerializedObject> RecompraCartera_Add(int documentID, string actFlujoID, bool isIndividual, bool isMaduracionAnt, DTO_RecompraCartera recompraCartera, 
            bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Generales

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccRecompraDocu = (DAL_ccRecompraDocu)base.GetInstance(typeof(DAL_ccRecompraDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccRecompraDeta = (DAL_ccRecompraDeta)base.GetInstance(typeof(DAL_ccRecompraDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccVentaDeta = (DAL_ccVentaDeta)base.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            bool isValid = true;
            DTO_glDocumentoControl ctrlNew = null;
            DTO_Comprobante comprobante = null;
            DTO_coComprobante comp = null;
            #endregion
            try
            {
                int i = 0;
                #region Variables

                //Comprador
                DTO_ccCompradorCartera comprador = (DTO_ccCompradorCartera)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCompradorCartera, recompraCartera.RecompraDocu.CompradorCarteraID.Value, true, false);
                DTO_ccCliente cliente;

                //Variables por defecto
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                string libroFunc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TipoBalanceFuncional);
                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defConcCargo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);                
                string defMonedaLocal = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                decimal defTasaCambio = this._moduloGlobal.TasaDeCambio_Get(defMonedaLocal, periodo);

                //Variables contabilización
                string ctaPrepagoCart = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaPrepagosCartCed); //530
                string ctaEspecialPagosTotales = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CtaEspecialPagosTotales); //527
                string ctaCostoRecompra = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaCostoRecompraCartera); //506
                string ctaContraOrden_Propia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterPropia); //500
                string ctaContraOrden_Cedida = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterCedida); //501

                DTO_coDocumento coDoc;
                string ctaContraID;
                string coDocRecompraID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocumentoContableRecompra); //101
                string coDocMaduracionAntID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocumentoContableMaduracionAnticipada); //104

                //Diccionarios de datos
                Dictionary<string, DTO_coPlanCuenta> cacheCtas = new Dictionary<string, DTO_coPlanCuenta>();
                Dictionary<string, DTO_glConceptoSaldo> cacheSaldos = new Dictionary<string,DTO_glConceptoSaldo>();
                Dictionary<string, DTO_ccCliente> cacheClientes = new Dictionary<string, DTO_ccCliente>();
                Dictionary<string, DTO_ccCarteraComponente> cacheComponentes = new Dictionary<string, DTO_ccCarteraComponente>();
                Dictionary<string, DTO_ccLineaCredito> cacheLineas = new Dictionary<string, DTO_ccLineaCredito>();

                #endregion
                #region Validaciones

                //Valida la cuenta especial de pagos totales (527)
                if (string.IsNullOrWhiteSpace(ctaEspecialPagosTotales))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CtaEspecialPagosTotales + "&&" + string.Empty;
                    results.Add(result);

                    return results;
                }

                //Valida la cuenta costo de recompra (506)
                if (string.IsNullOrWhiteSpace(ctaCostoRecompra))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaCostoRecompraCartera + "&&" + string.Empty;
                    results.Add(result);

                    return results;
                }

                //Valida la cuenta especial de pagos  (530) 
                if (string.IsNullOrWhiteSpace(ctaPrepagoCart))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaEspecialPagosCartera + "&&" + string.Empty;
                    results.Add(result);

                    return results;
                }

                //Valida la cuenta de contra orden (propia) //500
                if (string.IsNullOrWhiteSpace(ctaContraOrden_Propia))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenContraCarterPropia + "&&" + string.Empty;
                    results.Add(result);

                    return results;
                }

                //Valida la cuenta de contra orden (cedida) //501
                if (string.IsNullOrWhiteSpace(ctaContraOrden_Cedida))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenContraCarterCedida + "&&" + string.Empty;
                    results.Add(result);

                    return results;
                }

                // Valida el coDocumento de recompra
                if(isMaduracionAnt)
                {
                    if (string.IsNullOrWhiteSpace(coDocMaduracionAntID)) // 104
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocumentoContableMaduracionAnticipada + "&&" + string.Empty;
                        results.Add(result);

                        return results;
                    }
                }
                else 
                {
                    if (string.IsNullOrWhiteSpace(coDocRecompraID)) // 101
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocumentoContableRecompra + "&&" + string.Empty;
                        results.Add(result);

                        return results;
                    }
                }
                
                coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, isMaduracionAnt ? coDocMaduracionAntID : coDocRecompraID, true, false);

                //Valida que tenga comprobante
                if (string.IsNullOrWhiteSpace(coDoc.ComprobanteID.Value))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;
                    results.Add(result);

                    return results;
                }
                else
                    comp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, coDoc.ComprobanteID.Value, true, false);

                //Valida que el documento asociado tenga cuenta local
                if (string.IsNullOrWhiteSpace(coDoc.CuentaLOC.Value))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDoc.ID.Value;
                    results.Add(result);

                    return results;
                }
                ctaContraID = coDoc.CuentaLOC.Value;

                #endregion
                #region Carga la lista de cuentas

                //Cta Especial Pagos Cartera (524)
                DTO_coPlanCuenta cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaPrepagoCart, true, false);
                DTO_glConceptoSaldo cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cta;
                cacheSaldos[cta.ConceptoSaldoID.Value] = cSaldo;

                //Cta Especial Pagos Totales (527)
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaEspecialPagosTotales, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cta;
                cacheSaldos[cta.ConceptoSaldoID.Value] = cSaldo;

                //Cta Especial Pagos Totales (506)
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaCostoRecompra, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cta;
                cacheSaldos[cta.ConceptoSaldoID.Value] = cSaldo;

                //Cta Documento (101)
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraID, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cta;
                cacheSaldos[cta.ConceptoSaldoID.Value] = cSaldo;

                //Cta contra propia (500)
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraOrden_Propia, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cta;
                cacheSaldos[cta.ConceptoSaldoID.Value] = cSaldo;

                //Cta propia cedida (501)
                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraOrden_Cedida, true, false);
                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                cacheCtas[cta.ID.Value] = cta;
                cacheSaldos[cta.ConceptoSaldoID.Value] = cSaldo;

                #endregion
                #region Crea glDocumentoControl
                ctrlNew = new DTO_glDocumentoControl();
                ctrlNew.DocumentoNro.Value = 0;
                ctrlNew.DocumentoID.Value = documentID;
                ctrlNew.LugarGeograficoID.Value = defLugarGeografico;
                ctrlNew.NumeroDoc.Value = 0;
                ctrlNew.DocumentoTipo.Value = (byte)DocumentoTipo.DocExterno;
                ctrlNew.Fecha.Value = DateTime.Now;
                ctrlNew.FechaDoc.Value = recompraCartera.RecompraDocu.FechaCorte.Value;
                ctrlNew.PeriodoDoc.Value = periodo;
                ctrlNew.PeriodoUltMov.Value = periodo;
                ctrlNew.CuentaID.Value = ctaContraID;
                ctrlNew.AreaFuncionalID.Value = defArealFuncional;
                ctrlNew.PrefijoID.Value = defPrefijo;
                ctrlNew.ProyectoID.Value = defProyecto;
                ctrlNew.CentroCostoID.Value = defCentroCosto;
                ctrlNew.LineaPresupuestoID.Value = defLineaPresupuesto;
                ctrlNew.TerceroID.Value = recompraCartera.RecompraDocu.TerceroID.Value;
                ctrlNew.DocumentoTercero.Value = recompraCartera.RecompraDocu.DocRecompra.Value;
                ctrlNew.MonedaID.Value = defMonedaLocal;
                ctrlNew.TasaCambioCONT.Value = defTasaCambio;
                ctrlNew.TasaCambioDOCU.Value = defTasaCambio;
                ctrlNew.Observacion.Value = string.Empty;
                ctrlNew.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                ctrlNew.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrlNew.Descripcion.Value = "Recompra Cartera - Comprador Cartera " + recompraCartera.RecompraDocu.DocRecompra.Value;
                ctrlNew.Iva.Value = 0;
                ctrlNew.Valor.Value = recompraCartera.RecompraDocu.ValorRecompra.Value;
                ctrlNew.seUsuarioID.Value = this.UserId;

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.RecompraCartera, ctrlNew, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    results.Add(result);
                    return results;
                }
                int numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrlNew.NumeroDoc.Value = numDocNew;
                #endregion
                #region Agrega la info a ccRecompraDocu
               
                //Asigna los valores al DTO_ccRecompraDocu
                recompraCartera.RecompraDocu.NumeroDoc.Value = numDocNew;
                this._dal_ccRecompraDocu.DAL_ccRecompraDocu_Add(recompraCartera.RecompraDocu);
               
                #endregion
                #region Carga el header del comprobante

                comprobante = new DTO_Comprobante();
                DTO_ComprobanteHeader header = new DTO_ComprobanteHeader();

                //header
                header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                header.ComprobanteNro.Value = 0;
                header.Fecha.Value = ctrlNew.FechaDoc.Value;
                header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                header.MdaTransacc.Value = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                header.NumeroDoc.Value = numDocNew;
                header.PeriodoID.Value = periodo;
                header.TasaCambioBase.Value = defTasaCambio;
                header.TasaCambioOtr.Value = defTasaCambio;

                comprobante.Header = header;
                #endregion
                #region Crea los registros del comprobante y ccRecompraDeta
               
                    List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();
                    foreach (DTO_ccRecompraDeta recompra in recompraCartera.RecompraDeta)
                    {
                        #region Variables
                        List<DTO_ComprobanteFooter> footerTmp = new List<DTO_ComprobanteFooter>();
                        //Manejo de porcentajes para la aprobacion
                        int percent = ((i + 1) * 100) / recompraCartera.RecompraDeta.Count;
                        batchProgress[tupProgress] = percent;
                        i++;

                        //Revisa si existe el cliente
                        if (cacheClientes.ContainsKey(recompra.ClienteID.Value))
                            cliente = cacheClientes[recompra.ClienteID.Value];
                        else
                        {
                            cliente = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, recompra.ClienteID.Value, true, false);
                            cacheClientes[recompra.ClienteID.Value] = cliente;
                        }
                        #endregion
                        if (!isIndividual)
                        {
                            #region Maduracion o Recompra
                            if (isMaduracionAnt)
                            {
                                footerTmp = this.RecompraCartera_GenerarComprobanteMaduracionAnt(recompra, ctrlNew, ctaPrepagoCart, defTasaCambio, defConcCargo,
                                    defLugarGeografico, defLineaPresupuesto, comprador.TerceroID.Value, cacheCtas, cacheSaldos);
                            }
                            else
                            {
                                //Actualiza el credito
                                DTO_ccCreditoDocu crediDocu = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(recompra.NumDocCredito.Value.Value);
                                crediDocu.TipoEstado.Value = (byte)TipoEstadoCartera.Propia;
                                this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(crediDocu);

                                if (recompra.PrepagoInd.Value.Value)
                                {
                                    //Carga el footer del comprobante
                                    footerTmp = this.RecompraCartera_GenerarComprobanteRecompra_Prepago(recompra, ctaCostoRecompra, ctaContraID, ctaPrepagoCart,
                                        ctaContraOrden_Propia, ctaContraOrden_Cedida, defTasaCambio, defConcCargo, defLugarGeografico, defLineaPresupuesto, cliente.TerceroID.Value,
                                        comprador.TerceroID.Value, cacheCtas, cacheSaldos);
                                }
                                else
                                {
                                    //Carga el footer del comprobante //REEMPLAZADO POR INDIVIDUAL(BORRAR CODIGO)
                                    footerTmp = this.RecompraCartera_GenerarComprobanteRecompra_NoPrepago(recompra, crediDocu, periodo, libroFunc, ctaCostoRecompra, ctaContraID,
                                        ctaEspecialPagosTotales, ctaContraOrden_Propia, ctaContraOrden_Cedida, defTasaCambio, defConcCargo, defLugarGeografico, defLineaPresupuesto,
                                        cliente.TerceroID.Value, comprador.TerceroID.Value, cacheCtas, cacheSaldos, cacheComponentes, cacheLineas);
                                }
                            }
                            footer.AddRange(footerTmp);

                            // Agrega la info en ccRecompraDeta
                            recompra.NumeroDoc.Value = numDocNew;
                            this._dal_ccRecompraDeta.DAL_ccRecompraDeta_Add(recompra);

                            //Actualiza ccVentaDeta
                            DTO_ccVentaDeta venta = this._dal_ccVentaDeta.DAL_ccVentaDeta_GetByNumDocLibranza(recompra.NumDocCredito.Value.Value);
                            venta.NumDocRecompra.Value = numDocNew;
                            this._dal_ccVentaDeta.DAL_ccVentaDeta_Update(venta);
                            #endregion
                        }
                        else
                        {
                            #region Individual
                            //Actualiza el credito
                            DTO_ccCreditoDocu crediDocu = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetByID(recompra.NumDocCredito.Value.Value);
                            crediDocu.TipoEstado.Value = (byte)TipoEstadoCartera.Propia;
                            this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(crediDocu);

                            //Carga el footer del comprobante
                             object compDet = this.RecompraCartera_GenerarComprobante_Individual(recompra,coDoc, recompraCartera.RecompraDocu.FechaCorte.Value.Value,
                                 defTasaCambio, defConcCargo, defLugarGeografico, defLineaPresupuesto,cliente.TerceroID.Value, comprador.TerceroID.Value, cacheCtas, cacheSaldos);
                            footer.AddRange(footerTmp);

                            if (compDet.GetType() == typeof(DTO_TxResult))
                                result = (DTO_TxResult)compDet;
                            else
                            {
                                List<DTO_ComprobanteFooter> footerTemp = (List<DTO_ComprobanteFooter>)compDet;
                                footer.AddRange(footerTemp);
                            }

                            if (result.Result == ResultValue.NOK)
                            {
                                isValid = false;
                                results.Add(result);
                            }

                            // Agrega la info en ccRecompraDeta
                            recompra.NumeroDoc.Value = numDocNew;
                            this._dal_ccRecompraDeta.DAL_ccRecompraDeta_Add(recompra);
                            #endregion
                        }
                    }
                #endregion
                #region Contabiliza el comprobante

                if (footer.Count == 0)
                {
                    isValid = false;
                    results.Clear();
                    result = new DTO_TxResult();
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_CompNoResults;
                    results.Add(result);
                    
                    return results;
                }

                foreach (var f in footer)
                    f.DatoAdd2.Value = comprador != null ? comprador.TerceroID.Value : string.Empty;

                comprobante.Footer = footer;
                result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobante, periodo, ModulesPrefix.cc, 0, false);
                if (result.Result == ResultValue.NOK)
                {
                    isValid = false;
                    results.Clear();
                    results.Add(result);

                    return results;
                }
                #endregion

                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "RecompraCartera_Add");
                results.Add(result);
                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrlNew.ComprobanteIDNro.Value = this.GenerarComprobanteNro(comp, ctrlNew.PrefijoID.Value, ctrlNew.PeriodoDoc.Value.Value, ctrlNew.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlNew, false, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlNew.NumeroDoc.Value.Value, ctrlNew.ComprobanteIDNro.Value.Value, false);
                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #endregion      

        #region Nota Credito

        /// <summary>
        /// Funcion que genera una nota credito de un credito
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="resumenNC">Lista de componentes</param>
        /// <param name="infoCartera">lista de cuotas</param>
        /// <param name="ctrl">documento nota credito</param>
        /// <param name="resintegroSaldo">cuenta para reintegro saldo</param>
        /// <param name="insideAnotherTx">Indicador para establecer si se encuentra dentor de otra transaccion</param>
        /// <returns></returns>
        public DTO_SerializedObject NotaCredito_Add(int documentID, List<DTO_NotaCreditoResumen> resumenNC, DTO_InfoCredito infoCartera,DTO_glDocumentoControl ctrl,string reintegroSaldo, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Generales
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            DTO_SerializedObject results = new DTO_SerializedObject();
            bool isValid = true;

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccVentaDocu = (DAL_ccVentaDocu)base.GetInstance(typeof(DAL_ccVentaDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccVentaDeta = (DAL_ccVentaDeta)base.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_glDocumentoControl ctrlNew = null;
            DTO_glDocumentoControl ctrlFact = null;
            DTO_Comprobante comprobante = null;
            DTO_coComprobante comp = null;
            #endregion
            try
            {
                #region Variables

                //Variables por defecto
                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);

                //Variables del comprobante
                DTO_coDocumento coDoc = new DTO_coDocumento();
                //variables de componentes
                string compCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string compSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                int numDocCredito = 0;
                if (resumenNC.Count > 0)
                    numDocCredito = resumenNC[0].NumDocCredito.Value.Value;
                DTO_ccCreditoDocu credito = this.GetCreditoByNumeroDoc(numDocCredito);
                List<DTO_ccSaldosComponentes> saldoCompon = new List<DTO_ccSaldosComponentes>();
                #endregion
                #region Validaciones

                #region Cuentas generales
                //Valida que el documento asociado tenga cuenta local
                if (string.IsNullOrWhiteSpace(reintegroSaldo))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.EmptyField_Col + "&&" + "Reintegro Saldo ";
                    return result;
                }
                else
                {
                    DTO_ccReintegroSaldo reintSaldo = (DTO_ccReintegroSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccReintegroSaldo, reintegroSaldo, true, false);
                    if (reintSaldo != null)
                        coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, reintSaldo.CoDocumentoID.Value, true, false);
                    else
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + reintegroSaldo;
                        return result;
                    }
                }     

                //Valida que tenga comprobante
                if (string.IsNullOrWhiteSpace(coDoc.ComprobanteID.Value))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;
                    return result;
                }
                else
                    comp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, coDoc.ComprobanteID.Value, true, false);

                //Valida que el documento asociado tenga cuenta local
                if (string.IsNullOrWhiteSpace(coDoc.CuentaLOC.Value))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDoc.ID.Value;
                    return result;
                }

                #endregion          

                #endregion
                #region Guarda el glDocumentoControl
                ctrl.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrl, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    return result;
                }
                int numDocNC = Convert.ToInt32(resultGLDC.Key);
                ctrl.NumeroDoc.Value = numDocNC;
                #endregion                                
                #region Guarda los movimientos de cartera (1 Grilla)
                resumenNC = resumenNC.FindAll(x => x.VlrNotaCredito.Value != 0);
                foreach (DTO_NotaCreditoResumen nc in resumenNC)
                {
                    DTO_ccCarteraMvto mvto = new DTO_ccCarteraMvto();
                    mvto.NumCredito.Value = credito.NumeroDoc.Value.Value;
                    mvto.NumeroDoc.Value = numDocNC;
                    mvto.ComponenteCarteraID.Value = nc.ComponenteCarteraID.Value;
                    mvto.CompradorCarteraID.Value = credito.CompradorCarteraID.Value;
                    mvto.Tasa.Value = 0;
                    mvto.VlrAbono.Value = nc.VlrNotaCredito.Value;
                    mvto.VlrComponente.Value = nc.VlrNotaCredito.Value;   
                    this.ccCarteraMvto_Add(mvto);
                }

                #endregion
                #region Agrega los pagos (2 Grilla)
                infoCartera.PlanPagos = infoCartera.PlanPagos.FindAll(x => x.VlrNotaCredito.Value != 0);
                foreach (var pp in infoCartera.PlanPagos)
                {
                    #region Actualiza el plan de pagos
                    pp.VlrPagadoCuota.Value =  pp.VlrNotaCredito.Value* -1; //PREGUNTAR
                    this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(pp);
                    #endregion
                    #region Agrega pagos
                    DTO_ccCreditoPagos pago = new DTO_ccCreditoPagos();
                    var compAdicionales = resumenNC.FindAll(x => x.ComponenteAdicionalInd.Value.Value).ToList();
                    pago.NumeroDoc.Value = numDocCredito;
                    pago.PagoDocu.Value = numDocNC;
                    pago.CreditoCuotaNum.Value = pp.Consecutivo.Value;
                    pago.ComponenteCarteraID.Value = credito.CompradorCarteraID.Value;
                    pago.Valor.Value = pp.VlrNotaCredito.Value * -1 ;
                    pago.CuotaID.Value = pp.CuotaID.Value;
                    pago.TipoPago.Value = 7;
                    pago.VlrCapital.Value = pp.DetalleComp.FindAll(x => x.ComponenteCarteraID.Value == compCapital).Sum(y => y.VlrNotaCredito.Value) * -1;
                    pago.VlrInteres.Value = pp.DetalleComp.FindAll(x => x.ComponenteCarteraID.Value == compInteres).Sum(y => y.VlrNotaCredito.Value) * -1;
                    pago.VlrSeguro.Value = pp.DetalleComp.FindAll(x => x.ComponenteCarteraID.Value == compSeguro).Sum(y => y.VlrNotaCredito.Value) * -1;
                    pago.VlrOtrosFijos.Value = 0;
                    foreach (var det in pp.DetalleComp.FindAll(x => x.ComponenteCarteraID.Value != compCapital && x.ComponenteCarteraID.Value != compInteres && x.ComponenteCarteraID.Value != compSeguro))
	                {
                        //Descarta los comp adicionales
                        if(!compAdicionales.Exists(x=>x.ComponenteCarteraID.Value == det.ComponenteCarteraID.Value))
                            pago.VlrOtrosFijos.Value += det.VlrNotaCredito.Value * -1;
	                }
                    pago.VlrOtrosComponentes.Value = 0;
                    foreach (var ad in compAdicionales)
                        pago.VlrOtrosComponentes.Value += pp.DetalleComp.Find(x => x.ComponenteCarteraID.Value == ad.ComponenteCarteraID.Value).VlrNotaCredito.Value * -1; 
                    pago.VlrOtro1.Value = 0;
                    pago.VlrOtro2.Value = 0;
                    pago.VlrOtro3.Value = 0;
                    pago.VlrMoraliquida.Value = 0;
                    pago.VlrAjusteUsura.Value = 0;
                    pago.VlrMoraPago.Value = 0;
                    pago.VlrAjusteUsura.Value = 0;
                    pago.VlrPrejuridicoPago.Value = 0;
                    pago.VlrCapitalCesion.Value = 0;
                    pago.VlrUtilidadCesion.Value = 0;
                    pago.VlrDerechosCesion.Value = 0;
                    pago.DiasMora.Value = 0;                   
                    this._dal_ccCreditoPagos.DAL_ccCreditoPagos_Add(pago);
                    saldoCompon.AddRange(pp.DetalleComp.FindAll(x=>x.VlrNotaCredito.Value != 0).ToList());
                    #endregion
                } 
                #endregion                      
                
                #region Genera la info detalle del comprobante 
                DTO_glDocumentoControl ctrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(credito.NumeroDoc.Value.Value);
                DTO_glDocumentoControl ctrlContraNC = ObjectCopier.Clone(ctrl);
                foreach (var sal in saldoCompon)
                {
                    sal.AbonoSaldo.Value = sal.VlrNotaCredito.Value * -1;
                    sal.AbonoValor.Value = sal.VlrNotaCredito.Value * -1;
                    //sal.CuotaInicial.Value = sal.VlrNotaCredito.Value;
                }


                decimal vlrAbonoCapital = 0;
                object compRes = this.GenerarComprobante_PagosCartera(TipoRecaudo.Normal, ctrlContraNC, ctrlCredito, credito, infoCartera.PlanPagos,null,
                                saldoCompon, coDoc, compCapital, compInteres, compSeguro, true, "NOTA CREDITO CARTERA -CRED : " + credito.Libranza.Value,
                                (int)EstadoDeuda.Normal, ref vlrAbonoCapital);

                if (compRes.GetType() == typeof(DTO_TxResult))
                {
                    isValid = false;
                    result = (DTO_TxResult)compRes;
                    result.ResultMessage = "NOK";
                    return result;
                }
                else
                {
                    DTO_Comprobante comprobanteCredito = (DTO_Comprobante)compRes;
                    if (comprobanteCredito.Footer.Count == 0)
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Co_CompNoResults;
                        return result;
                    }
                    comprobante = new DTO_Comprobante();
                    comprobante.Footer.AddRange(comprobanteCredito.Footer);
                }

                #endregion                
                #region Contabiliza el comprobante
                #region Carga el header del comprobante              
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();
                comprobante.Header.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                comprobante.Header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                comprobante.Header.ComprobanteNro.Value = 0;
                comprobante.Header.Fecha.Value = ctrl.FechaDoc.Value;
                comprobante.Header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                comprobante.Header.MdaTransacc.Value = ctrl.MonedaID.Value;
                comprobante.Header.NumeroDoc.Value = ctrl.NumeroDoc.Value;
                comprobante.Header.PeriodoID.Value = ctrl.PeriodoDoc.Value;
                comprobante.Header.TasaCambioBase.Value = ctrl.TasaCambioCONT.Value;
                comprobante.Header.TasaCambioOtr.Value = ctrl.TasaCambioCONT.Value;
                #endregion                
                result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobante, ctrl.PeriodoDoc.Value.Value, ModulesPrefix.cc, 0, false);
                if (result.Result == ResultValue.NOK)
                {
                    isValid = false;
                    return result;
                }
                #endregion

                return result;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "VentaCartera_Add");
                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrl.DocumentoNro.Value = this.GenerarDocumentoNro(ctrl.DocumentoID.Value.Value, ctrl.PrefijoID.Value,false); 
                        ctrl.ComprobanteIDNro.Value = this.GenerarComprobanteNro(comp, ctrl.PrefijoID.Value, ctrl.PeriodoDoc.Value.Value, ctrl.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrl, true, true, false);
                        //this._moduloContabilidad.ActualizaComprobanteNro(ctrl.NumeroDoc.Value.Value, ctrl.ComprobanteIDNro.Value.Value, false);

                        #endregion
                    }
                    else
                        throw new Exception("VentaCartera_Add - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Cobro Juridico

        #region Funciones Privadas

        /// <summary>
        /// Genera un comprobante de un plan de pagos
        /// </summary>
        /// <param name="ctrlRecibo">Documento control del recibo de caja</param>
        /// <param name="ctrlCredito">Documento control del credito</param>
        /// <param name="planPagos">Plan de pagos</param>
        /// <param name="componentesSaldos">Lista de los componentes de cada cuota</param>
        /// <param name="coDoc">Documento contable</param>
        /// <param name="compCapital">Componente capital</param>
        /// <param name="compInteres">Componente interes</param>
        /// <param name="compSeguro">Componente seguro</param>
        /// <param name="AddContraBalance">Indica si se deben agregar las contrapartidas</param>
        /// <param name="desc">Documento que genera el comprobante (Ej: RECAUDO MANUAL)</param>
        /// <returns>Retorna el comprobante o un resultado con errores</returns>
        private object CobroJuridico_GenerarComprobante(DTO_glDocumentoControl ctrlCredito,DTO_ccCreditoDocu creditoCJ, DTO_coDocumento coDoc, List<DTO_ccCreditoPlanPagos> planPagos,
            TipoEstadoCartera tipoEstadoCancelaCuentas, TipoEstadoCartera tipoEstadoAbonaCuentas, List<DTO_ccSaldosComponentes> componentesSaldos, decimal tc, 
            string compCapital, string compInteres, string compSeguro, string obs)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            try
            {
                #region Variables

                //Info de control
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string ctaContraOrden_Propia = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CuentaOrdenContraCarterPropia);

                //Variables de operación
                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                Dictionary<string, DTO_coPlanCuenta> cacheCtas = new Dictionary<string, DTO_coPlanCuenta>();
                Dictionary<string, DTO_glConceptoSaldo> cacheSaldos = new Dictionary<string, DTO_glConceptoSaldo>();
                List<DTO_ccCarteraComponente> componentes = new List<DTO_ccCarteraComponente>();

                //Resultado
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> footerPropia = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> footerCJ = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> fBalance = new List<DTO_ComprobanteFooter>();
                List<DTO_ComprobanteFooter> fOrden = new List<DTO_ComprobanteFooter>();

                DTO_ccCreditoDocu credito = this.GetCreditoByNumeroDoc(ctrlCredito.NumeroDoc.Value.Value);
                DTO_ccLineaCredito lineaCred = (DTO_ccLineaCredito)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccLineaCredito, credito.LineaCreditoID.Value, true, false);
              
                #endregion
                #region Validaciones

                //Valida la cuenta de contraP de orden
                if (string.IsNullOrWhiteSpace(ctaContraOrden_Propia))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CuentaOrdenContraCarterPropia + "&&" + string.Empty;

                    return result;
                }

                #endregion
                #region Asigna al dicionario de cuentas la informacion de las contrapartidas

                //Contrapartida cartera propia - Orden
                if (!cacheCtas.ContainsKey(ctaContraOrden_Propia))
                {
                    cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, ctaContraOrden_Propia, true, false);
                    cacheCtas.Add(ctaContraOrden_Propia, cta);

                    if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                    {
                        cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                    }
                }

                #endregion
                #region Carga la información de los componentes

                List<string> componentesIds = componentesSaldos.Select(c => c.ComponenteCarteraID.Value).Distinct().ToList();
                foreach (var id in componentesIds)
                {
                    DTO_ccCarteraComponente comp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, id, true, false);
                    componentes.Add(comp);
                }

                #endregion
                #region Llena los detalles del comprobante por cada cuota
                foreach (DTO_ccCreditoPlanPagos cuota in planPagos)
                {
                    int cuotaID = cuota.CuotaID.Value.Value;
                    List<DTO_ccSaldosComponentes> componentesCuota = (from c in componentesSaldos where c.CuotaID.Value == cuotaID select c).ToList();
                    #region Cartera Propia
                    object compPropia = this.CobroJuridico_GenerarComprobanteCuota_Propia(componentesCuota, ctrlCredito, lineaCred.ClaseCredito.Value, 
                        tipoEstadoCancelaCuentas, concCargoXdef, lgXdef, lineaXdef, tc, cacheCtas, cacheSaldos);

                    //Error
                    if (compPropia.GetType() == typeof(DTO_TxResult))
                    {
                        result = (DTO_TxResult)compPropia;
                        return result;
                    }

                    //Agrega los registros
                    foreach (DTO_ComprobanteFooter det in (List<DTO_ComprobanteFooter>)compPropia)
                    {
                        // Por cada registro reviso si existe en la lista de cartera propia
                        List<DTO_ComprobanteFooter> aux =
                        (
                            from p in footerPropia
                            where
                                p.CuentaID.Value == det.CuentaID.Value &&
                                p.ConceptoSaldoID.Value == det.ConceptoSaldoID.Value &&
                                p.DocumentoCOM.Value == det.DocumentoCOM.Value &&
                                p.IdentificadorTR.Value == det.IdentificadorTR.Value
                            select p
                        ).ToList();

                        if (aux.Count > 0)
                        {
                            aux.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value;
                            aux.First().vlrMdaExt.Value += det.vlrMdaExt.Value;
                        }
                        else
                            footerPropia.Add(det);
                    }
                    #endregion
                    #region Cartera CJ
                     object compCJ = null;
                     if (tipoEstadoAbonaCuentas != TipoEstadoCartera.CobroJuridico)
                     {
                         compCJ =   this.CobroJuridico_GenerarComprobanteCuota_CJ(componentesCuota, ctrlCredito, lineaCred.ClaseCredito.Value, tipoEstadoAbonaCuentas,
                                     concCargoXdef, lgXdef, lineaXdef, tc, cacheCtas, cacheSaldos);

                         //Error
                         if (compCJ.GetType() == typeof(DTO_TxResult))
                         {
                             result = (DTO_TxResult)compCJ;
                             return result;
                         }

                         //Agrega los registros
                         foreach (DTO_ComprobanteFooter det in (List<DTO_ComprobanteFooter>)compCJ)
                         {
                             // Por cada registro reviso si existe en la lista de cartera Cedida
                             List<DTO_ComprobanteFooter> aux =
                             (
                                 from p in footerCJ
                                 where
                                     p.CuentaID.Value == det.CuentaID.Value &&
                                     p.TerceroID.Value == det.TerceroID.Value &&
                                     p.ConceptoSaldoID.Value == det.ConceptoSaldoID.Value &&
                                     p.DocumentoCOM.Value == det.DocumentoCOM.Value &&
                                     p.IdentificadorTR.Value == det.IdentificadorTR.Value
                                 select p
                             ).ToList();

                             if (aux.Count > 0)
                             {
                                 aux.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value;
                                 aux.First().vlrMdaExt.Value += det.vlrMdaExt.Value;
                             }
                             else
                                 footerCJ.Add(det);
                         }                     
                     }
                    /////////////////luego vlrExtras y esos dos valores se meten con Cuenta de CapCJ y Poliza CJ positivos y quedan como contrapartida
                  
                    #endregion                
                }
                #endregion
                #region Cartera CJ 
                if (tipoEstadoAbonaCuentas == TipoEstadoCartera.CobroJuridico)
                {
                    #region Variables
                    footerCJ = new List<DTO_ComprobanteFooter>();
                    List<DTO_ccComponenteCuenta> compCtasCJ = new List<DTO_ccComponenteCuenta>();

                    #endregion
                    #region Carga la lista de cuentas
                    DAL_MasterComplex dalComplex = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                    dalComplex.DocumentID = AppMasters.ccComponenteCuenta;

                    DTO_MasterComplex complex = null;
                    Dictionary<string, string> pks = new Dictionary<string, string>();
                    pks.Add("ComponenteCarteraID", "");
                    pks.Add("TipoEstado", ((int)tipoEstadoAbonaCuentas).ToString());
                    pks.Add("ClaseCredito", lineaCred.ClaseCredito.Value);

                    pks["ComponenteCarteraID"] = compCapital;
                    complex = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);
                    if (complex == null)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + compCapital + "&&" + ((int)tipoEstadoAbonaCuentas).ToString() + "&&" + lineaCred.ClaseCredito.Value;
                        return result;
                    }

                    DTO_ccComponenteCuenta dtoCap = (DTO_ccComponenteCuenta)complex;
                    compCtasCJ.Add(dtoCap);

                    pks["ComponenteCarteraID"] = compSeguro;
                    complex = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);
                    if (complex == null)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + compSeguro +"&&" + ((int)tipoEstadoAbonaCuentas).ToString() + "&&" + lineaCred.ClaseCredito.Value;
                        return result;
                    }

                    DTO_ccComponenteCuenta dtoSeg = (DTO_ccComponenteCuenta)complex;
                    compCtasCJ.Add(dtoSeg);

                    #region Carga las cuentas y conceptoSaldo
                    foreach (var cc in compCtasCJ)
                    {
                        if (!string.IsNullOrWhiteSpace(cc.CuentaID.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaID.Value, true, false);
                                cacheCtas.Add(cc.CuentaID.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                    }
                    #endregion
                    #endregion
                    #region Carga los registro del Vlr Causado(Vlr Juzgado)
                    decimal vlrMLCausado = creditoCJ.Detalle.Sum(x => x.VlrCausado.Value.Value);
                    decimal vlrMECausado = 0;
                    if (tc != 0)
                        vlrMECausado = Math.Round(vlrMLCausado / tc, 2);

                    DTO_ccComponenteCuenta compCta = this.GetComponenteCuentaByComponenteCartera(compCtasCJ, compCapital);

                    if (vlrMLCausado > 0)
                    {
                        cta = cacheCtas[compCta.CuentaID.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter fCap = this.CrearComprobanteFooter(ctrlCredito, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrMLCausado, vlrMECausado, false);
                        footerCJ.Add(fCap);
                    }
                    #endregion
                    #region Carga los registro del Vlr No Causado(Vlr Extras)
                    decimal vlrMLNoCausado = creditoCJ.Detalle.Sum(x => x.VlrNoCausado.Value.Value);
                    decimal vlrMENoCausado = 0;
                    if (tc != 0)
                        vlrMECausado = Math.Round(vlrMLNoCausado / tc, 2);

                    if (vlrMLNoCausado > 0)
                    {
                        compCta = this.GetComponenteCuentaByComponenteCartera(compCtasCJ, compSeguro);

                        cta = cacheCtas[compCta.CuentaID.Value];
                        cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter fNoCausado = this.CrearComprobanteFooter(ctrlCredito, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrMLNoCausado, vlrMENoCausado, false);
                        footerCJ.Add(fNoCausado);
                    }
                    #endregion
                }
                #endregion

                #region Organiza los registros de la cartera propia

                //Valores de cartera propia
                decimal vlrBalancePropiaML = 0;
                decimal vlrBalancePropiaME = 0;
                decimal vlrOrdenPropiaML = 0;
                decimal vlrOrdenPropiaME = 0;
               
                footerPropia = footerPropia.Where(c => c.vlrMdaLoc.Value != 0).ToList();
                foreach (DTO_ComprobanteFooter det in footerPropia)
                {
                    cta = cacheCtas[det.CuentaID.Value];
                    det.vlrMdaExt.Value = tc != 0 ? Math.Round(det.vlrMdaLoc.Value.Value / tc, 2) : 0;

                    if (cta.Tipo.Value == ((int)TipoCuenta.Orden).ToString())
                    {
                        vlrOrdenPropiaML += det.vlrMdaLoc.Value.Value;
                        vlrOrdenPropiaME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> po_Temp = (from c in fOrden where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (po_Temp.Count == 0)
                        {
                            det.Descriptivo.Value = obs;
                            fOrden.Add(det);
                        }
                        else
                        {
                            po_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            po_Temp.First().vlrMdaLoc.Value += det.vlrMdaExt.Value.Value;
                        }
                    }
                    else
                    {
                        vlrBalancePropiaML += det.vlrMdaLoc.Value.Value;
                        vlrBalancePropiaME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> pb_Temp = (from c in fBalance where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (pb_Temp.Count == 0)
                        {
                            det.Descriptivo.Value = obs;
                            fBalance.Add(det);
                        }
                        else
                        {
                            pb_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            pb_Temp.First().vlrMdaLoc.Value += det.vlrMdaExt.Value.Value;
                        }
                    }
                }

                #endregion
                #region Organiza los registros de cobro jurídico
                //Valores de cartera propia
                decimal vlrBalanceCJ_ML = 0;
                decimal vlrBalanceCJ_ME = 0;
                decimal vlrOrdenCJ_ML = 0;
                decimal vlrOrdenCJ_ME = 0;

                footerCJ = footerCJ.Where(c => c.vlrMdaLoc.Value != 0).ToList();
                foreach (DTO_ComprobanteFooter det in footerCJ)
                {
                    cta = cacheCtas[det.CuentaID.Value];
                    det.vlrMdaExt.Value = tc != 0 ? Math.Round(det.vlrMdaLoc.Value.Value / tc, 2) : 0;

                    if (cta.Tipo.Value == ((int)TipoCuenta.Orden).ToString())
                    {
                        vlrOrdenCJ_ML += det.vlrMdaLoc.Value.Value;
                        vlrOrdenCJ_ME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> po_Temp = (from c in fOrden where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (po_Temp.Count == 0)
                        {
                            det.Descriptivo.Value = obs;
                            fOrden.Add(det);
                        }
                        else
                        {
                            po_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            po_Temp.First().vlrMdaLoc.Value += det.vlrMdaExt.Value.Value;
                        }
                    }
                    else
                    {
                        vlrBalanceCJ_ML += det.vlrMdaLoc.Value.Value;
                        vlrBalanceCJ_ME += det.vlrMdaExt.Value.Value;

                        List<DTO_ComprobanteFooter> pb_Temp = (from c in fBalance where c.CuentaID.Value == cta.ID.Value select c).ToList();
                        if (pb_Temp.Count == 0)
                        {
                            det.Descriptivo.Value = obs;
                            fBalance.Add(det);
                        }
                        else
                        {
                            pb_Temp.First().vlrMdaLoc.Value += det.vlrMdaLoc.Value.Value;
                            pb_Temp.First().vlrMdaLoc.Value += det.vlrMdaExt.Value.Value;
                        }
                    }
                }

                #endregion
                #region Agrega la información al footer
                decimal vlrTotalBalance = (from f in fBalance select f.vlrMdaLoc.Value.Value).Sum();
                //if (comprador == null || comprador.TipoLiquidacion.Value == (byte)TipoLiquidacionComprador.VPN)
                vlrTotalBalance *= -1;

                // Agrega la información de balance
                fBalance.RemoveAll(f => f.vlrMdaLoc.Value == 0);
                if (fBalance.Count > 0)
                    footer.AddRange(fBalance);

                // Agrega la contrapartida de orden
                fOrden.RemoveAll(f => f.vlrMdaLoc.Value == 0);
                if (fOrden.Count > 0)
                {
                    footer.AddRange(fOrden);
                    decimal vlrOrdenML = vlrOrdenPropiaML + vlrOrdenCJ_ML;
                    decimal vlrOrdenME = vlrOrdenPropiaME + vlrOrdenCJ_ME;

                    if (vlrOrdenPropiaML != 0)
                    {
                        cta = cacheCtas[ctaContraOrden_Propia];
                        if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                        else
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                        DTO_ComprobanteFooter contraPropiaOrden = this.CrearComprobanteFooter(ctrlCredito, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, 
                            vlrOrdenML * -1, vlrOrdenME * -1, true);

                        contraPropiaOrden.Descriptivo.Value = obs + " - Contrapartida orden";
                        contraPropiaOrden.DocumentoCOM.Value = ctrlCredito.DocumentoTercero.Value;

                        footer.Add(contraPropiaOrden);
                    }
                }
                #endregion

                return footer;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GenerarComprobante_CobroJuridico");

                return result;
            }
        }

        /// <summary>
        /// Genera la lista de detalles del comprobante para una cuota de cartera propia
        /// </summary>
        /// <param name="componentes">Lista de componentes</param>
        /// <param name="ctrl">Documento control que genero la liquidacion</param>
        /// <param name="concCargoXdef">Concepto cargo por defecto</param>
        /// <param name="lgXdef">Lugar geografico por defecto</param>
        /// <param name="lineaXdef">Linea presusuestal por defecto</param>
        /// <param name="tc">Tasa de cambio</param>
        /// <returns>Retorna los detallesde la cuota</returns>
        private object CobroJuridico_GenerarComprobanteCuota_Propia(List<DTO_ccSaldosComponentes> componentes, DTO_glDocumentoControl ctrl, string claseCredito,
            TipoEstadoCartera tipoEstadoCancelaCuentas, string concCargoXdef, string lgXdef, string lineaXdef, decimal tc, Dictionary<string, DTO_coPlanCuenta> cacheCtas,
            Dictionary<string, DTO_glConceptoSaldo> cacheSaldos)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            try
            {
                #region Variables

                //Variables de resultado
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();

                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                DTO_ccComponenteCuenta compCta;
                List<DTO_ccComponenteCuenta> compCtasPropia = new List<DTO_ccComponenteCuenta>();
                #endregion
                #region Carga la lista de cuentas

                DAL_MasterComplex dalComplex = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                dalComplex.DocumentID = AppMasters.ccComponenteCuenta;

                DTO_MasterComplex complex = null;
                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("ComponenteCarteraID", "");
                pks.Add("TipoEstado", ((int)tipoEstadoCancelaCuentas).ToString());
                pks.Add("ClaseCredito", claseCredito);

                foreach (DTO_ccSaldosComponentes c in componentes)
                {
                    if (Math.Abs(c.CuotaSaldo.Value.Value) > 0)
                    {
                        pks["ComponenteCarteraID"] = c.ComponenteCarteraID.Value;
                        complex = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);

                        if (complex == null)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + c.ComponenteCarteraID.Value +
                                "&&" + ((int)tipoEstadoCancelaCuentas).ToString() + "&&" + claseCredito;

                            return result;
                        }

                        DTO_ccComponenteCuenta cc = (DTO_ccComponenteCuenta)complex;
                        compCtasPropia.Add(cc);

                        // cuentaID
                        if (!string.IsNullOrWhiteSpace(cc.CuentaID.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaID.Value, true, false);
                                cacheCtas.Add(cc.CuentaID.Value, cta);
                            }
                            else
                                cta = cacheCtas[cc.CuentaID.Value];

                            if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                            {
                                cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                            }
                        }
                    }
                }

                #endregion
                #region Carga los registros del footer
                foreach (DTO_ccSaldosComponentes c in componentes)
                {
                    if (Math.Abs(c.CuotaSaldo.Value.Value) > 0)
                    {
                        decimal vlrML = c.CuotaSaldo.Value.Value;
                        decimal vlrME = 0;

                        if (tc != 0)
                            vlrME = Math.Round(vlrML / tc, 2);

                        #region Cartera Propia
                        compCta = this.GetComponenteCuentaByComponenteCartera(compCtasPropia, c.ComponenteCarteraID.Value);

                        //CuentaID
                        if (!string.IsNullOrWhiteSpace(compCta.CuentaID.Value) && Math.Abs(vlrML) > 0)
                        {
                            cta = cacheCtas[compCta.CuentaID.Value];
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                            DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrML * -1, vlrME * -1, false);
                            footer.Add(f);
                        }
                        #endregion
                    }
                }
                #endregion

                return footer;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "CobroJuridico_GenerarComprobanteCuota_Propia");

                return result;
            }
        }

        /// <summary>
        /// Genera la lista de detalles del comprobante para una cuota de cobro juridico
        /// </summary>
        /// <param name="componentes">Lista de componentes</param>
        /// <param name="ctrl">Documento control que genero la liquidacion</param>
        /// <param name="concCargoXdef">Concepto cargo por defecto</param>
        /// <param name="lgXdef">Lugar geografico por defecto</param>
        /// <param name="lineaXdef">Linea presusuestal por defecto</param>
        /// <param name="tc">Tasa de cambio</param>
        /// <returns>Retorna los detallesde la cuota</returns>
        private object CobroJuridico_GenerarComprobanteCuota_CJ(List<DTO_ccSaldosComponentes> componentes, DTO_glDocumentoControl ctrl, string claseCredito,
            TipoEstadoCartera tipoEstadoAbonaCuentas, string concCargoXdef, string lgXdef, string lineaXdef, decimal tc, Dictionary<string, DTO_coPlanCuenta> cacheCtas, 
            Dictionary<string, DTO_glConceptoSaldo> cacheSaldos)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            try
            {
                #region Variables

                //Variables de resultado
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();

                DTO_coPlanCuenta cta;
                DTO_glConceptoSaldo cSaldo;
                DTO_ccComponenteCuenta compCta;
                List<DTO_ccComponenteCuenta> compCtasCJ = new List<DTO_ccComponenteCuenta>();

                #endregion
                #region Carga la lista de cuentas

                DAL_MasterComplex dalComplex = new DAL_MasterComplex(this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                dalComplex.DocumentID = AppMasters.ccComponenteCuenta;

                DTO_MasterComplex complex = null;
                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("ComponenteCarteraID", "");
                pks.Add("TipoEstado", ((int)tipoEstadoAbonaCuentas).ToString());
                pks.Add("ClaseCredito", claseCredito);

                foreach (DTO_ccSaldosComponentes c in componentes)
                {
                    c.AbonoValor.Value = tipoEstadoAbonaCuentas == TipoEstadoCartera.CobroJuridico? c.AbonoValor.Value.Value : c.CuotaSaldo.Value.Value;
                    if (Math.Abs(c.AbonoValor.Value.Value) > 0)
                    {
                        pks["ComponenteCarteraID"] = c.ComponenteCarteraID.Value;
                        complex = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);

                        if (complex == null)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + c.ComponenteCarteraID.Value +
                                "&&" + ((int)tipoEstadoAbonaCuentas).ToString() + "&&" + claseCredito;

                            return result;
                        }

                        DTO_ccComponenteCuenta cc = (DTO_ccComponenteCuenta)complex;
                        compCtasCJ.Add(cc);

                        #region Carga la cuentaID (CuentaID)
                        if (!string.IsNullOrWhiteSpace(cc.CuentaID.Value))
                        {
                            if (!cacheCtas.ContainsKey(cc.CuentaID.Value))
                            {
                                cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cc.CuentaID.Value, true, false);
                                cacheCtas.Add(cc.CuentaID.Value, cta);

                                if (!cacheSaldos.ContainsKey(cta.ConceptoSaldoID.Value))
                                {
                                    cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);
                                    cacheSaldos.Add(cta.ConceptoSaldoID.Value, cSaldo);
                                }
                            }
                        }
                        #endregion
                    }
                }

                #endregion
                #region Carga los registros del footer
                foreach (DTO_ccSaldosComponentes c in componentes)
                {
                    //Valida si es abono o es saldo segun el estado nuevo
                    c.AbonoValor.Value = tipoEstadoAbonaCuentas == TipoEstadoCartera.CobroJuridico? c.AbonoValor.Value.Value : c.CuotaSaldo.Value.Value;
                    if (Math.Abs(c.AbonoValor.Value.Value) > 0)
                    {
                        decimal vlrML = c.AbonoValor.Value.Value;
                        decimal vlrME = 0;

                        if (tc != 0)
                            vlrME = Math.Round(vlrML / tc, 2);

                        compCta = this.GetComponenteCuentaByComponenteCartera(compCtasCJ, c.ComponenteCarteraID.Value);

                        //CuentaID
                        if (!string.IsNullOrWhiteSpace(compCta.CuentaID.Value))
                        {
                            cta = cacheCtas[compCta.CuentaID.Value];
                            cSaldo = cacheSaldos[cta.ConceptoSaldoID.Value];

                            DTO_ComprobanteFooter f = this.CrearComprobanteFooter(ctrl, cta, cSaldo, tc, concCargoXdef, lgXdef, lineaXdef, vlrML, vlrME, false);
                            footer.Add(f);
                        }
                    }
                }
                #endregion

                return footer;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "CobroJuridico_GenerarComprobanteCuota_CJ");

                return result;
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Trae la info de un historico
        /// </summary>
        /// <param name="numDocCredito">Numero doc del crédito</param>
        /// <returns>retorna los 2 ultimos registros del histórico de CJ</returns>
        public Tuple<DTO_ccCJHistorico, DTO_ccCJHistorico> ccCJHistorico_GetForAbono(int numDocCredito)
        {
            this._dal_ccCJHistorico = (DAL_ccCJHistorico)base.GetInstance(typeof(DAL_ccCJHistorico), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            return this._dal_ccCJHistorico.DAL_ccCJHistorico_GetForAbono(numDocCredito);
        }

        /// <summary>
        /// Trae todos los registros de DTO_ccCarteraDocu segun al cliente, y que tenga un estado de cuenta en cobro juridico
        /// </summary>
        /// <param name="clienteID">Identificador del cliente</param>
        /// <param name="proposito">Indicador del estado de cuenta en cobro juridico</param>
        /// <returns>retorna una lista de DTO_ccCarteraDocu</returns>
        public List<DTO_ccCreditoDocu> GetCobroJuridicoByCliente(string clienteID, DateTime fecha)
        {
            try
            {
                // Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCJHistorico = (DAL_ccCJHistorico)base.GetInstance(typeof(DAL_ccCJHistorico), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCJHistoricoAbonos = (DAL_ccCJHistoricoAbonos)base.GetInstance(typeof(DAL_ccCJHistoricoAbonos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccPolizaEstado = (DAL_ccPolizaEstado)base.GetInstance(typeof(DAL_ccPolizaEstado), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                string componenteCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string componenteInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string componenteSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string componenteInteresSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresSeguro);

                //Losta de créditos del cliente
                List<DTO_ccCreditoDocu> creditos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosPendientesByCliente(clienteID, string.Empty,false);

                // Obtiene valores adicionales de acuerdo al Estado
                foreach (DTO_ccCreditoDocu credito in creditos)
                {
                    decimal vlrSaldo = 0;
                    decimal vlrCompsGasto = 0;
                    List<DTO_ccCJHistoricoAbonos> abonosCJ = this._dal_ccCJHistoricoAbonos.DAL_ccCJHistoricoAbonos_GetByNumeroDoc(credito.NumeroDoc.Value.Value);

                    if (credito.EstadoDeuda.Value == (int)EstadoDeuda.Juridico
                        || credito.EstadoDeuda.Value == (int)EstadoDeuda.AcuerdoPago
                        || credito.EstadoDeuda.Value == (int)EstadoDeuda.AcuerdoPagoIncumplido)
                    {
                        #region Carga la información de comprobantes cuando hay histórico de cobros jurídicos para el cliente

                        List<DTO_ccCJHistorico> historia = this._dal_ccCJHistorico.DAL_ccCJHistorico_GetByNumDocCredito(credito.NumeroDoc.Value.Value);
                        credito.DetalleCJHistorico = historia;

                        #endregion
                        #region Carga la información de los componentes basados en los saldos

                        DTO_InfoCredito infoCredito = this.GetInfoCredito(credito.NumeroDoc.Value.Value, fecha);
                        List<string> compsID = (from c in infoCredito.SaldosComponentes select c.ComponenteCarteraID.Value).Distinct().ToList();
                        for (int i = 0; i < compsID.Count(); ++i)
                        {
                            DTO_ccCarteraComponente carteraComp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, compsID[i], true, false);

                            #region Asigna el componente del crédito
                            DTO_ccCreditoComponentes comp = new DTO_ccCreditoComponentes();
                            comp.ComponenteCarteraID.Value = carteraComp.ID.Value;
                            comp.Descripcion.Value = carteraComp.Descriptivo.Value;

                            //Info traida de la misma forma como se calcula en el estado de cuenta

                            // +Abono calculado (EC: SaldoValor)
                            //comp.TotalValor.Value = (from c in infoCredito.SaldosComponentes where c.ComponenteCarteraID.Value == compsID[i] select c.AbonoValor.Value).Sum();
                            comp.TotalValor.Value = (from c in infoCredito.SaldosComponentes where c.ComponenteCarteraID.Value == compsID[i] select c.CuotaSaldo.Value).Sum();
                            // +Total (EC: PagoValor)
                            comp.AbonoValor.Value = (from c in infoCredito.SaldosComponentes where c.ComponenteCarteraID.Value == compsID[i] select c.CuotaSaldo.Value).Sum();
                            
                            //Abono CJ
                            comp.AbonoCJValor.Value =  abonosCJ.FindAll(x => x.ComponenteCarteraID.Value == comp.ComponenteCarteraID.Value).Sum(x => x.Valor.Value);

                            //Calcula el valor de saldo y agrega el registro a los detalles del crédito
                            vlrSaldo += comp.AbonoValor.Value.Value;
                            credito.Detalle.Add(comp);
                            #endregion
                            #region Información de los componentes de gasto (EC: PagoValor)
                            if (carteraComp.TipoComponente.Value.Value == (byte)TipoComponente.ComponenteGasto)
                                vlrCompsGasto += comp.AbonoValor.Value.Value;
                            #endregion
                            #region Asigna los valores del crédito
                            if (carteraComp.ID.Value == componenteCapital)
                                credito.VlrCapital.Value = comp.TotalValor.Value;
                            if (carteraComp.ID.Value == componenteInteres)
                                credito.VlrIntCapital.Value = comp.TotalValor.Value;
                            if (carteraComp.ID.Value == componenteSeguro)
                                credito.VlrPoliza.Value = comp.TotalValor.Value;
                            if (carteraComp.ID.Value == componenteInteresSeguro)
                                credito.VlrIntPoliza.Value = comp.TotalValor.Value;
                            #endregion
                        }

                        #endregion
                        List<DTO_ccCreditoPlanPagos> planPagos = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(credito.NumeroDoc.Value.Value);
                        planPagos = planPagos.FindAll(x => x.FechaCuota.Value <= fecha).OrderBy(x => x.FechaCuota.Value).ToList();
                        credito.FechaVto.Value = planPagos.Last().FechaCuota.Value;
                    }
                    else
                    {
                        #region Carga la información basado en el estado de cuenta de CJ

                        List<DTO_ccEstadoCuentaComponentes> estadoCuentaComps = new List<DTO_ccEstadoCuentaComponentes>();
                        if (credito.DocEstadoCuenta.Value.HasValue)
                        {
                            DTO_ccEstadoCuentaHistoria historia = this.EstadoCuenta_GetHistoria(credito.DocEstadoCuenta.Value.Value);
                            estadoCuentaComps = this.EstadoCuenta_GetComponentesByNumeroDoc(credito.DocEstadoCuenta.Value.Value, false);
                            foreach (DTO_ccEstadoCuentaComponentes compEstCuenta in estadoCuentaComps)
                            {
                                #region Información de los componentes de gasto
                                DTO_ccCarteraComponente carteraComp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, compEstCuenta.ComponenteCarteraID.Value, true, false);
                                if (carteraComp.TipoComponente.Value.Value == (byte)TipoComponente.ComponenteGasto)
                                    vlrCompsGasto += compEstCuenta.PagoValor.Value.Value;
                                #endregion
                                #region Asina el componente del crédito
                                DTO_ccCreditoComponentes comp = new DTO_ccCreditoComponentes();
                                comp.ComponenteCarteraID.Value = compEstCuenta.ComponenteCarteraID.Value;
                                comp.Descripcion.Value = compEstCuenta.Descriptivo.Value;
                                comp.TotalValor.Value = compEstCuenta.SaldoValor.Value;
                                comp.AbonoValor.Value = compEstCuenta.PagoValor.Value;
                                comp.AbonoCJValor.Value = abonosCJ.FindAll(x => x.ComponenteCarteraID.Value == comp.ComponenteCarteraID.Value).Sum(x => x.Valor.Value);
                                comp.VlrNoCausado.Value = 0;
                                comp.VlrCausado.Value = compEstCuenta.PagoValor.Value;
                                if (comp.ComponenteCarteraID.Value.Equals(componenteSeguro))
                                {                                  
                                    //Busca la ultima poliza registrada
                                    DTO_ccPolizaEstado poliza = this._dal_ccPolizaEstado.DAL_ccPolizaEstado_GetLastPoliza(credito.NumeroDoc.Value.Value);
                                    if (poliza != null)
                                    {
                                        //Calcula el valor del seguro de acuerdo a la fecha de liq de la poliza
                                        if (poliza.FechaLiqSeguro.Value > historia.EC_Fecha.Value)
                                        {
                                            if (poliza.ValorFinancia.Value > comp.AbonoValor.Value)
                                            {
                                                comp.VlrNoCausado.Value = comp.AbonoValor.Value;
                                                comp.VlrCausado.Value = poliza.ValorFinancia.Value - comp.AbonoValor.Value;
                                            }
                                            else
                                            {
                                                comp.VlrNoCausado.Value = comp.AbonoValor.Value;
                                                comp.VlrCausado.Value = 0;
                                            }
                                        }
                                    }                                    
                                }

                                vlrSaldo += comp.AbonoValor.Value.Value;
                                credito.Detalle.Add(comp);
                                #endregion
                                
                            }
                            #region Asigna los valores del crédito
                            credito.VlrCapital.Value = credito.Detalle.Sum(x=>x.VlrCausado.Value);
                            credito.VlrIntCapital.Value = 0;
                            credito.VlrPoliza.Value = credito.Detalle.FindAll(x=>x.ComponenteCarteraID.Value == componenteSeguro).Sum(x=>x.VlrNoCausado.Value);
                            credito.VlrIntPoliza.Value = 0;
                            credito.VlrGastos.Value = credito.Detalle.FindAll(x => x.ComponenteCarteraID.Value != componenteSeguro).Sum(x => x.VlrNoCausado.Value);
                                #endregion
                            credito.FechaVto.Value = historia.EC_Fecha.Value;
                        }
                        #endregion                       
                    }

                    #region Carga los valores según el estado de cuenta              
                    credito.VlrSaldo.Value = vlrSaldo;
                    credito.VlrGastos.Value = vlrCompsGasto;
                    credito.Editable.Value = false;
                    #endregion
                }

                return creditos;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCobroJuridicoByCliente");
                throw ex;
            }
        }

        /// <summary>
        /// Funcion que genera un nuevo documento de cobro juridico
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="cobroJuridico">Lista de los creditos a realizar cobro juridico</param>
        /// <param name="NUevoEstadoCart">El nuevo estado en que queda el cliente</param>
        /// <returns></returns>
        public List<DTO_SerializedObject> EnvioCobroJuridico(int documentID, string actFlujoID, string clienteID, DTO_ccCreditoDocu creditoCJ,
            List<DTO_ccSaldosComponentes> saldosComponentes, DateTime fechaDoc, DateTime fechaMvto, TipoEstadoCartera nuevoEstadoCart, bool insideAnotherTx, 
            Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();
            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            #region Variables Generales

            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloTesoreria = (ModuloTesoreria)this.GetInstance(typeof(ModuloTesoreria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloCarteraFin = (ModuloCarteraFin)this.GetInstance(typeof(ModuloCarteraFin), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)base.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccEstadoCuentaCuotas = (DAL_ccEstadoCuentaCuotas)base.GetInstance(typeof(DAL_ccEstadoCuentaCuotas), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr); 
            this._dal_ccEstadoCuentaHistoria = (DAL_ccEstadoCuentaHistoria)base.GetInstance(typeof(DAL_ccEstadoCuentaHistoria), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCJHistorico = (DAL_ccCJHistorico)base.GetInstance(typeof(DAL_ccCJHistorico), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_MasterSimple = (DAL_MasterSimple)this.GetInstance(typeof(DAL_MasterSimple), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);  
            
            bool isValid = true;
            DTO_glDocumentoControl ctrlNew = null;
            DTO_Comprobante comprobante = null;
            DTO_coComprobante comp = null;
            #endregion
            try
            {
                #region Variables

                //Variables de valores y fechas
                Dictionary<string, bool> compExtras = new Dictionary<string, bool>();
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                decimal tc = 0;
                if (this.Multimoneda())
                    tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, periodo);

                //Variables del comprobante
                DTO_coDocumento coDoc = new DTO_coDocumento();

                //Variables por defecto
                string defTercero = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TerceroXDefecto);
                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);

                //Componentes
                string componenteCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string componenteInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string componenteSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string componenteInteresMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string componenteUsura = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteUsura);
                string componentePJ = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);
                string componentePolizaEC = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePolizaEC);
                
                //Otros
                string coDocumentoID = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DocuContableCobroJuridico);
                string compradorPropio = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);
                DTO_ccCliente cliente = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, clienteID, true, false);
                
                //Varibles de acuerdo al nuevo estado de cuenta (CJ por defecto)
                string obs = "Cobro Juridico - ";
                string obsComprobante = "ENVÍO A COBRO JURÍDICO";
                string docTercero = "CJ ";
                EstadoDeuda nuevoEstadoDeuda = EstadoDeuda.Juridico;
                TipoRecaudo tipoRecaudo = TipoRecaudo.CobroJuridico;
                TipoEstadoCartera tipoEstadoPagoComponentes = TipoEstadoCartera.Propia;
                TipoEstadoCartera tipoEstadoAbonoComponentes = TipoEstadoCartera.CobroJuridico;
                if(nuevoEstadoCart == TipoEstadoCartera.AcuerdoPago)
                {
                    obs = "Acuerdo de pago - ";
                    obsComprobante = "ENVÍO A ACUERDO DE PAGO";
                    docTercero = "AP ";
                    nuevoEstadoDeuda = EstadoDeuda.AcuerdoPago;
                    tipoRecaudo = TipoRecaudo.Normal;
                    tipoEstadoPagoComponentes = TipoEstadoCartera.CobroJuridico;
                    tipoEstadoAbonoComponentes = TipoEstadoCartera.AcuerdoPago;
                }
                else if (nuevoEstadoCart == TipoEstadoCartera.AcuerdoPagoIncumplido)
                {
                    obs = "Acuerdo de pago incumplido - ";
                    obsComprobante = "ENVÍO A ACUERDO DE PAGO INCUMPLIDO";
                    docTercero = "API ";
                    nuevoEstadoDeuda = EstadoDeuda.AcuerdoPagoIncumplido;
                    tipoRecaudo = TipoRecaudo.Normal;
                    tipoEstadoPagoComponentes = TipoEstadoCartera.AcuerdoPago;
                    tipoEstadoAbonoComponentes = TipoEstadoCartera.AcuerdoPagoIncumplido;
                }

                #endregion
                #region Validaciones
                //Valida el coDocumento
                if (string.IsNullOrWhiteSpace(coDocumentoID))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_DocuContableCobroJuridico + "&&" + string.Empty;
                    results.Add(result);
                    return results;
                }
                else
                    coDoc = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, coDocumentoID, true, false);

                //Valida que tenga comprobante
                if (string.IsNullOrWhiteSpace(coDoc.ComprobanteID.Value))
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;
                    results.Add(result);
                    return results;
                }
                else
                    comp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, coDoc.ComprobanteID.Value, true, false);

                #endregion
                #region Crea glDocumentoControl

                ctrlNew = new DTO_glDocumentoControl();
                ctrlNew.DocumentoNro.Value = 0;
                ctrlNew.DocumentoID.Value = documentID;
                ctrlNew.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                ctrlNew.LugarGeograficoID.Value = defLugarGeografico;
                ctrlNew.NumeroDoc.Value = 0;
                ctrlNew.DocumentoTipo.Value = (byte)DocumentoTipo.DocInterno;
                ctrlNew.Fecha.Value = DateTime.Now;
                ctrlNew.FechaDoc.Value = fechaDoc;
                ctrlNew.PeriodoDoc.Value = periodo;
                ctrlNew.PeriodoUltMov.Value = periodo;
                ctrlNew.AreaFuncionalID.Value = defArealFuncional;
                ctrlNew.PrefijoID.Value = defPrefijo;
                ctrlNew.ProyectoID.Value = defProyecto;
                ctrlNew.CentroCostoID.Value = defCentroCosto;
                ctrlNew.LineaPresupuestoID.Value = defLineaPresupuesto;
                ctrlNew.TerceroID.Value = clienteID;
                ctrlNew.DocumentoTercero.Value = docTercero + fechaDoc.ToString("yy/MM/dd");
                ctrlNew.MonedaID.Value = mdaLoc;
                ctrlNew.TasaCambioCONT.Value = tc;
                ctrlNew.TasaCambioDOCU.Value = tc;
                ctrlNew.Valor.Value =creditoCJ.VlrSaldo.Value.Value;
                ctrlNew.Iva.Value = 0;
                ctrlNew.Observacion.Value = obs + clienteID;
                ctrlNew.Estado.Value = (byte)EstadoDocControl.Aprobado;
                ctrlNew.seUsuarioID.Value = this.UserId;
                ctrlNew.Descripcion.Value = obs + clienteID;

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlNew, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    results.Add(result);
                    return results;
                }
                int numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrlNew.NumeroDoc.Value = numDocNew;

                #endregion
                #region Carga el header del comprobante

                comprobante = new DTO_Comprobante();
                DTO_ComprobanteHeader header = new DTO_ComprobanteHeader();
                List<DTO_ComprobanteFooter> footer = new List<DTO_ComprobanteFooter>();

                //header
                header.ComprobanteID.Value = coDoc.ComprobanteID.Value;
                header.ComprobanteNro.Value = 0;
                header.Fecha.Value = ctrlNew.FechaDoc.Value;
                header.MdaOrigen.Value = (int)TipoMoneda_LocExt.Local;
                header.MdaTransacc.Value = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                header.NumeroDoc.Value = numDocNew;
                header.PeriodoID.Value = periodo;
                header.TasaCambioBase.Value = tc;
                header.TasaCambioOtr.Value = tc;

                comprobante.Header = header;
                #endregion
                #region Cierra la etapa de incumplimiento del prejurídico

                if (cliente.ConsIncumplimiento.Value.HasValue)
                    this._moduloGlobal.glIncumpleCambioEstado_CierraEstado(cliente.ConsIncumplimiento.Value.Value, fechaDoc);

                #endregion
                #region Actualiza el cliente

                cliente.EstadoCartera.Value = (byte)nuevoEstadoDeuda;
                cliente.ConsIncumplimiento.Value = null;
                if (nuevoEstadoCart == TipoEstadoCartera.CobroJuridico)
                    cliente.NumDocCJ.Value = numDocNew;

                this._dal_MasterSimple.DocumentID = AppMasters.ccCliente;
                DTO_TxResult detailResult = this._dal_MasterSimple.DAL_MasterSimple_Update(cliente, true);
                if (detailResult.ResultMessage == ResultValue.NOK.ToString())
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    results.Add(result);
                    return results;
                }

                #endregion
                #region Recorre y guarda la información de los créditos en CJ
                //Manejo de porcentajes para la aprobacion
                  batchProgress[tupProgress] = 100;
                if (creditoCJ.Aprobado.Value.Value)
                {
                    #region Variables
                    // Variables de saldos
                    List<DTO_ccSaldosComponentes> saldosAll = new List<DTO_ccSaldosComponentes>();
                    DTO_ccEstadoCuentaHistoria estadoCuentaHistoria = new DTO_ccEstadoCuentaHistoria();
                    List<DTO_ccEstadoCuentaCuotas> estadoCuentaCuotas = new List<DTO_ccEstadoCuentaCuotas>();
                    List<DTO_ccCreditoPlanPagos> cuotasPendientes = new List<DTO_ccCreditoPlanPagos>();
                    List<DTO_ccSaldosComponentes> saldosComponentesCredito = saldosComponentes.Where(x => x.NumDocCredito.Value == creditoCJ.NumeroDoc.Value).ToList();

                    // Variables del crédito
                    DTO_glDocumentoControl ctrlCredito = this._moduloGlobal.glDocumentoControl_GetByID(creditoCJ.NumeroDoc.Value.Value);
                    if (nuevoEstadoCart == TipoEstadoCartera.CobroJuridico)
                    {
                        // Variables del estado de cuenta
                        estadoCuentaHistoria = this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_GetByNumeroDoc(creditoCJ.DocEstadoCuenta.Value.Value);
                        estadoCuentaCuotas = this._dal_ccEstadoCuentaCuotas.DAL_ccEstadoCuentaCuotas_GetByNumeroDoc(creditoCJ.DocEstadoCuenta.Value.Value);
                        cuotasPendientes = this.LoadCreditoInfo_Pago(tipoRecaudo, creditoCJ, estadoCuentaHistoria, saldosComponentesCredito, saldosAll);
                    }
                    else
                    {
                        DTO_InfoCredito saldos = this.GetSaldoCredito(creditoCJ.NumeroDoc.Value.Value, fechaDoc, true, true, true);
                        cuotasPendientes = saldos.PlanPagos;
                        saldosAll = saldos.SaldosComponentes.FindAll(x=>x.ComponenteCarteraID.Value == componenteCapital);
                    }
                       
                    //Variables de la póliza
                    DTO_ccPolizaEstado polizaCJ = this._moduloCarteraFin.PolizaEstado_GetLastPoliza(creditoCJ.NumeroDoc.Value.Value, creditoCJ.Libranza.Value.Value);

                    // Trae los registros del último pago realizado
                    List<DTO_ccCreditoPlanPagos> planPagos = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(creditoCJ.NumeroDoc.Value.Value);
                    byte estadoDeudaActual = creditoCJ.EstadoDeuda.Value.Value; 

                    #endregion
                    #region Asigna el flujo

                    result = this.AsignarFlujo(documentID, creditoCJ.NumeroDoc.Value.Value, actFlujoID, false, string.Empty);
                    if (result.Result == ResultValue.NOK)
                    {
                        results.Add(result);
                        return results;
                    }
                      
                    #endregion
                    #region Genera los detalles comprobante

                    object compRes = this.CobroJuridico_GenerarComprobante(ctrlCredito,creditoCJ, coDoc, cuotasPendientes, tipoEstadoPagoComponentes,
                        tipoEstadoAbonoComponentes, saldosAll, ctrlNew.TasaCambioDOCU.Value.Value, componenteCapital, componenteInteres, componenteSeguro, obsComprobante);

                    if (compRes.GetType() == typeof(DTO_TxResult))
                    {
                        isValid = false;
                        result = (DTO_TxResult)compRes;
                        results.Add(result);
                        return results;
                    }
                    else
                    {
                        List<DTO_ComprobanteFooter> footerTemp = (List<DTO_ComprobanteFooter>)compRes;
                        if (footerTemp.Count == 0)
                        {
                            isValid = false;
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Co_CompNoResults;
                            results.Add(result);
                            return results;
                        }
                        else
                        {
                            footer.AddRange(footerTemp);
                        }
                    }
                    #endregion
                    #region Actualiza el credito
                    creditoCJ.EstadoDeuda.Value = (byte)nuevoEstadoDeuda;
                    creditoCJ.TipoEstado.Value = (byte)nuevoEstadoCart;
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(creditoCJ);
                    #endregion
                    #region Guarda la info en el histórico de CJ
                    decimal vlrSaldoCapital = saldosAll.Where(s => s.ComponenteCarteraID.Value == componenteCapital).Sum(s => s.CuotaSaldo.Value.Value);
                    decimal vlrAbonoCapital = saldosAll.Where(s => s.ComponenteCarteraID.Value == componenteCapital).Sum(s => s.AbonoValor.Value.Value);
                    decimal vlrAbonoPoliza = saldosAll.Where(s => s.ComponenteCarteraID.Value == componenteSeguro).Sum(s => s.AbonoValor.Value.Value);
                    if (nuevoEstadoCart == TipoEstadoCartera.CobroJuridico)
                    {
                        List<DTO_ccCreditoPagos> ultPago = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetUltimoPago(creditoCJ.NumeroDoc.Value.Value);
                        List<int> cuotasUltPago = ultPago.Select(s => s.CuotaID.Value.Value).Distinct().ToList();

                        if (cuotasUltPago.Count() > 0)
                        {
                            int docPagoUltCuota = ultPago.First().PagoDocu.Value.Value;
                            int ultCuotaPaga = ultPago.Last().CuotaID.Value.Value;
                            string fechaUltCuotaStr = string.Empty;
                            decimal vlrSaldoUltCuota = 0;

                            foreach (int cuotaID in cuotasUltPago)
                            {
                                #region Asigna el histórico por cuotas del último pago

                                DTO_ccCreditoPlanPagos cuota = planPagos.Where(w => w.CuotaID.Value.Value == cuotaID).FirstOrDefault();
                                DateTime fechaCuota = cuota.FechaCuota.Value.Value;
                                string dateFormat = "MMMM " + fechaCuota.Day.ToString() + "/" + fechaCuota.Year.ToString();
                                string fechaCuotaStr = fechaCuota.ToString(dateFormat, CultureInfo.CreateSpecificCulture("es-CO"));

                                //Primer Grupo
                                #region Honorarios Y gastos prejurídicos

                                DTO_ccCJHistorico honGasPJ = new DTO_ccCJHistorico();
                                honGasPJ.NumeroDoc.Value = creditoCJ.NumeroDoc.Value;
                                honGasPJ.NumeroDocMvto.Value = numDocNew;
                                honGasPJ.NumDocEstadoCta.Value = numDocNew;
                                honGasPJ.PeriodoID.Value = periodo;
                                honGasPJ.ClaseDeuda.Value = (byte)ClaseDeuda.Principal;
                                honGasPJ.EstadoDeuda.Value = (byte)EstadoDeuda.CuotasPendientes;
                                honGasPJ.TipoMvto.Value = (byte)TipoMovimiento_CJHistorico.CuentasVencidas;
                                honGasPJ.FechaMvto.Value = fechaMvto;
                                honGasPJ.FechaInicial.Value = null; // Calculado
                                honGasPJ.FechaFinal.Value = fechaMvto;
                                honGasPJ.Dias.Value = null; // Calculado
                                honGasPJ.CuotaID.Value = cuotaID;
                                honGasPJ.PorInteres.Value = 0;
                                honGasPJ.Observacion.Value = "Honorarios Y gastos prejurídicos"; // Calculado
                                honGasPJ.VlrCuota.Value = (from pag in ultPago
                                                            where pag.CuotaID.Value == cuotaID
                                                            select pag.VlrPrejuridicoPago.Value.HasValue ? pag.VlrPrejuridicoPago.Value.Value : 0).Sum(); // Calculado
                                honGasPJ.VlrPagado.Value = honGasPJ.VlrCuota.Value; // Calculado
                                honGasPJ.VlrPendiente.Value = 0; // Calculado

                                this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(honGasPJ);
                                #endregion
                                #region Pólizas de seguro no financiadas

                                DTO_ccCJHistorico polizasPJ = ObjectCopier.Clone(honGasPJ);
                                polizasPJ.FechaInicial.Value = null; // Calculado
                                polizasPJ.Dias.Value = null; // Calculado
                                polizasPJ.Observacion.Value = "Pólizas de seguro no financiadas"; // Calculado
                                polizasPJ.VlrCuota.Value = null; // Calculado
                                polizasPJ.VlrPagado.Value = null; // Calculado
                                polizasPJ.VlrPendiente.Value = null; // Calculado

                                this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(polizasPJ);
                                #endregion
                                #region Interes de mora cuota
                                DTO_ccCJHistorico interesMora = ObjectCopier.Clone(honGasPJ);
                                interesMora.FechaInicial.Value = fechaCuota;
                                interesMora.Observacion.Value = "Interes de mora cuota"; // Calculado
                                interesMora.VlrCuota.Value = (from pag in ultPago where pag.CuotaID.Value == cuotaID select pag.VlrMoraPago.Value.Value).Sum(); // Calculado
                                interesMora.VlrPagado.Value = interesMora.VlrCuota.Value; // Calculado
                                interesMora.VlrPendiente.Value = 0; // Calculado

                                this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(interesMora);
                                #endregion
                                #region Cuota póliza mes X

                                decimal seguroPagado = (from pag in ultPago where pag.CuotaID.Value == cuotaID select pag.VlrSeguro.Value.Value).Sum();
                                decimal interesSeguroPagado = (from pag in ultPago where pag.CuotaID.Value == cuotaID select pag.VlrOtro1.Value.Value).Sum();

                                DTO_ccCJHistorico cuotaPol = ObjectCopier.Clone(honGasPJ);
                                cuotaPol.FechaInicial.Value = fechaCuota; // Calculado
                                cuotaPol.Dias.Value = (interesMora.FechaFinal.Value.Value - interesMora.FechaInicial.Value.Value).Days; // Calculado
                                cuotaPol.Observacion.Value = "Cuota póliza (" + cuotaID.ToString() + ")" + fechaCuotaStr; // Calculado
                                cuotaPol.VlrCuota.Value = cuota.VlrSeguro.Value.Value + cuota.VlrOtro1.Value.Value; // Calculado
                                cuotaPol.VlrPagado.Value = seguroPagado + interesSeguroPagado; // Calculado
                                cuotaPol.VlrPendiente.Value = estadoCuentaCuotas.Where(w => w.CuotaID.Value == cuotaID)
                                    .Select(s => (s.VlrSeguroSDO.Value.HasValue ? s.VlrSeguroSDO.Value.Value : 0) +
                                                    (s.VlrOtro1SDO.Value.HasValue ? s.VlrOtro1SDO.Value.Value : 0)
                                            )
                                    .Sum(); ; // Calculado

                                this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(cuotaPol);

                                #endregion
                                #region Cuota mes X

                                decimal capitalPagado = (from pag in ultPago where pag.CuotaID.Value == cuotaID select pag.VlrCapital.Value.Value).Sum();
                                decimal interesPagado = (from pag in ultPago where pag.CuotaID.Value == cuotaID select pag.VlrInteres.Value.Value).Sum();

                                DTO_ccCJHistorico cuotaMes = ObjectCopier.Clone(honGasPJ);
                                cuotaMes.FechaInicial.Value = fechaCuota; // Calculado
                                cuotaMes.Dias.Value = (interesMora.FechaFinal.Value.Value - interesMora.FechaInicial.Value.Value).Days; // Calculado
                                cuotaMes.Observacion.Value = "Cuota mes (" + cuotaID.ToString() + ")" + fechaCuotaStr; // Calculado
                                cuotaMes.VlrCuota.Value = cuota.VlrCapital.Value.Value + cuota.VlrInteres.Value.Value; // Calculado
                                cuotaMes.VlrPagado.Value = capitalPagado + interesPagado; // Calculado
                                cuotaMes.VlrPendiente.Value = cuotaPol.VlrPendiente.Value = estadoCuentaCuotas.Where(w => w.CuotaID.Value == cuotaID)
                                    .Select(s => (s.VlrCapitalSDO.Value.HasValue ? s.VlrCapitalSDO.Value.Value : 0) +
                                                    (s.VlrInteresSDO.Value.HasValue ? s.VlrInteresSDO.Value.Value : 0)
                                            )
                                    .Sum(); // Calculado

                                this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(cuotaMes);
                                #endregion

                                //Saca la información de la última cuota paga
                                if (cuotaID == ultCuotaPaga)
                                {
                                    fechaUltCuotaStr = fechaCuotaStr;
                                    vlrSaldoUltCuota = cuotaMes.VlrPendiente.Value.Value;
                                }
                                #endregion
                            }

                            //Totales para el segundo grupo
                            #region Saldo a la última cuota pagada

                            DTO_ccCJHistorico saldoUltCuota = new DTO_ccCJHistorico();
                            saldoUltCuota.NumeroDoc.Value = creditoCJ.NumeroDoc.Value;
                            saldoUltCuota.NumeroDocMvto.Value = numDocNew;
                            saldoUltCuota.NumDocEstadoCta.Value = numDocNew;
                            saldoUltCuota.PeriodoID.Value = periodo;
                            saldoUltCuota.ClaseDeuda.Value = (byte)ClaseDeuda.Principal;
                            saldoUltCuota.EstadoDeuda.Value = (byte)EstadoDeuda.CuotasPendientes;
                            saldoUltCuota.TipoMvto.Value = (byte)TipoMovimiento_CJHistorico.Saldos;
                            saldoUltCuota.FechaMvto.Value = fechaMvto;
                            saldoUltCuota.DocPagoUltimaCuota.Value = docPagoUltCuota;
                            saldoUltCuota.PorInteres.Value = 0;
                            saldoUltCuota.Observacion.Value = "Saldo cuota No. (" + ultCuotaPaga.ToString() + ")" + fechaUltCuotaStr; // Calculado
                            saldoUltCuota.VlrPendiente.Value = vlrSaldoUltCuota; // Calculado

                            this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(saldoUltCuota);
                            #endregion
                            #region Saldo Capital

                            DTO_ccCJHistorico saldoCap = ObjectCopier.Clone(saldoUltCuota);
                            saldoCap.Observacion.Value = "Saldo capital hoja de liquidación pagada la cuota No. (" + cuotasUltPago.Last().ToString() + ")"; // Calculado
                            saldoCap.VlrPendiente.Value = estadoCuentaCuotas.Where(w => w.CuotaID.Value > ultCuotaPaga).Select(s => s.VlrCapitalSDO.Value.Value).Sum(); // Calculado

                            this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(saldoCap);
                            #endregion
                            #region Saldo Póliza

                            DTO_ccCJHistorico saldoPol = ObjectCopier.Clone(saldoUltCuota);
                            saldoPol.Observacion.Value = "Saldo póliza financiada " + fechaDoc.Year.ToString(); // Calculado
                            saldoPol.VlrPendiente.Value = vlrAbonoCapital - vlrSaldoCapital; // Calculado

                            this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(saldoPol);
                            #endregion
                            #region Saldo al corte

                            string dateSaldoFormat = "MMMM " + fechaDoc.Day.ToString() + "/" + fechaDoc.Year.ToString();
                            string fechaStr = fechaDoc.ToString(dateSaldoFormat, CultureInfo.CreateSpecificCulture("es-CO"));

                            DTO_ccCJHistorico saldoTot = ObjectCopier.Clone(saldoUltCuota);
                            saldoTot.Observacion.Value = "Total obligación al corte " + fechaStr; // Calculado
                            saldoTot.VlrPendiente.Value = saldoUltCuota.VlrPendiente.Value.Value + saldoCap.VlrPendiente.Value.Value + saldoPol.VlrPendiente.Value.Value; // Calculado

                            this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(saldoTot);
                            #endregion
                        }

                        #region Ingreso a CJ deuda - Póliza

                        DTO_ccCJHistorico ingresoCJPoliza = new DTO_ccCJHistorico();
                        ingresoCJPoliza.NumeroDoc.Value = creditoCJ.NumeroDoc.Value;
                        ingresoCJPoliza.NumeroDocMvto.Value = numDocNew;
                        ingresoCJPoliza.NumDocEstadoCta.Value = estadoCuentaHistoria.NumeroDoc.Value;
                        ingresoCJPoliza.PeriodoID.Value = periodo;
                        ingresoCJPoliza.ClaseDeuda.Value = (byte)ClaseDeuda.Adicional;
                        ingresoCJPoliza.EstadoDeuda.Value = (byte)nuevoEstadoDeuda;
                        ingresoCJPoliza.TipoMvto.Value = (byte)TipoMovimiento_CJHistorico.Poliza;
                        ingresoCJPoliza.FechaMvto.Value = fechaMvto;
                        ingresoCJPoliza.FechaInicial.Value = fechaMvto;
                        ingresoCJPoliza.FechaFinal.Value = fechaMvto;
                        ingresoCJPoliza.PorInteres.Value = 0;
                        ingresoCJPoliza.Observacion.Value = "Envío a " + docTercero;
                        ingresoCJPoliza.SaldoCapital.Value = vlrAbonoPoliza;
                        ingresoCJPoliza.MvtoCapital.Value = vlrAbonoPoliza;

                        if (vlrAbonoPoliza > 0)
                            this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(ingresoCJPoliza);

                        #endregion
                    }

                    //Ingreso a CJ
                    #region Ingreso a CJ deuda - Capital

                    DTO_ccCJHistorico ingresoCJDeuda = new DTO_ccCJHistorico();
                    ingresoCJDeuda.NumeroDoc.Value = creditoCJ.NumeroDoc.Value;
                    ingresoCJDeuda.NumeroDocMvto.Value = numDocNew;
                    ingresoCJDeuda.NumDocEstadoCta.Value = estadoCuentaHistoria.NumeroDoc.Value;
                    ingresoCJDeuda.PeriodoID.Value = periodo;
                    ingresoCJDeuda.ClaseDeuda.Value = (byte)ClaseDeuda.Principal;
                    ingresoCJDeuda.EstadoDeuda.Value = (byte)nuevoEstadoDeuda;
                    ingresoCJDeuda.TipoMvto.Value = (byte)TipoMovimiento_CJHistorico.CambiaEstado;
                    ingresoCJDeuda.FechaMvto.Value = fechaMvto;
                    ingresoCJDeuda.FechaInicial.Value = fechaMvto;
                    ingresoCJDeuda.FechaFinal.Value = fechaMvto;
                    ingresoCJDeuda.PorInteres.Value = 0;
                    ingresoCJDeuda.Observacion.Value = "Envío a " + docTercero;
                    ingresoCJDeuda.SaldoCapital.Value = vlrAbonoCapital;
                    ingresoCJDeuda.MvtoCapital.Value = vlrAbonoCapital;

                    this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(ingresoCJDeuda);
                    #endregion

                    #endregion

                    if (nuevoEstadoDeuda == EstadoDeuda.Juridico)
                    {
                        #region Actualiza el centro de costo del documento relacionado

                        if (!string.IsNullOrWhiteSpace(creditoCJ.ConcesionarioID.Value))
                        {
                            DTO_ccConcesionario concesionario = (DTO_ccConcesionario)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccConcesionario, creditoCJ.ConcesionarioID.Value, true, false);
                            if (!string.IsNullOrWhiteSpace(concesionario.CtoCostoJuridico.Value))
                            {
                                ctrlCredito.CentroCostoID.Value = concesionario.CtoCostoJuridico.Value;
                                this._moduloGlobal.glDocumentoControl_Update(ctrlCredito, true, true);
                            }
                        }

                        #endregion
                        #region Actualiza estado cuenta historia
                        estadoCuentaHistoria.NumDocProceso.Value = numDocNew;
                        //estadoCuentaHistoria.EC_Fecha.Value = fechaDoc;
                        estadoCuentaHistoria.EC_EstadoDeuda.Value = estadoDeudaActual;
                        this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_Update(estadoCuentaHistoria);
                        #endregion
                        #region Actualiza los pagos

                        result = this.UpdateInfoCredito_Pagos(TipoRecaudo.CobroJuridico, numDocNew, creditoCJ, periodo, fechaDoc, cuotasPendientes, saldosAll, compradorPropio,
                            componenteCapital, componenteInteres, componenteSeguro, componenteInteresMora, componenteUsura, componentePJ, componentePolizaEC);

                        if (result.Result == ResultValue.NOK)
                        {
                            isValid = false;

                            results.Add(result);
                            return results;
                        }

                        #endregion
                        #region Crea la nueva cuota del cobro juridico en el plan de pagos

                        DTO_ccCreditoPlanPagos cuotaCobroJuridico = new DTO_ccCreditoPlanPagos();
                        cuotaCobroJuridico.NumeroDoc.Value = creditoCJ.NumeroDoc.Value.Value;
                        cuotaCobroJuridico.CuotaID.Value = cuotasPendientes.Last().CuotaID.Value.Value + 1;
                        cuotaCobroJuridico.FechaCuota.Value = estadoCuentaHistoria.EC_Fecha.Value;

                        decimal vlrCapital = (from c in creditoCJ.Detalle where c.ComponenteCarteraID.Value == componenteCapital select c.AbonoValor.Value.Value).Sum();
                        decimal vlrPolizaCausado = (from c in creditoCJ.Detalle where c.ComponenteCarteraID.Value == componenteSeguro select c.VlrCausado.Value.Value).Sum();
                        decimal vlrPolizaNoCausado = (from c in creditoCJ.Detalle where c.ComponenteCarteraID.Value == componenteSeguro select c.VlrNoCausado.Value.Value).Sum();
                        cuotaCobroJuridico.TipoPago.Value = 1;
                        cuotaCobroJuridico.VlrCuota.Value = vlrCapital + vlrPolizaCausado + vlrPolizaNoCausado; // El valor total del documento 
                        cuotaCobroJuridico.VlrCapital.Value = vlrCapital + vlrPolizaCausado; // Total capital
                        cuotaCobroJuridico.VlrSaldoCapital.Value = vlrCapital + vlrPolizaCausado; // Total capital
                        cuotaCobroJuridico.VlrInteres.Value = 0;
                        cuotaCobroJuridico.VlrSeguro.Value = vlrPolizaNoCausado; // Capital de la póliza
                        cuotaCobroJuridico.VlrOtro1.Value = 0;
                        cuotaCobroJuridico.VlrOtro2.Value = 0;
                        cuotaCobroJuridico.VlrOtro3.Value = 0;
                        cuotaCobroJuridico.VlrOtrosFijos.Value = 0;
                        cuotaCobroJuridico.VlrPagadoCuota.Value = 0;
                        cuotaCobroJuridico.VlrPagadoExtras.Value = 0;
                        cuotaCobroJuridico.FechaLiquidaMora.Value = fechaDoc;
                        cuotaCobroJuridico.VlrMoraLiquida.Value = 0;
                        cuotaCobroJuridico.VlrMoraPago.Value = 0;
                        cuotaCobroJuridico.CompradorCarteraID.Value = compradorPropio;

                        this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_AddCuota(cuotaCobroJuridico);

                        #endregion
                    }
                }
                #region Contabiliza el comprobante
                    comprobante.Footer = footer;
                    result = this._moduloContabilidad.ContabilizarComprobante(documentID, comprobante, periodo, ModulesPrefix.cc, 0, false);
                    if (result.Result == ResultValue.NOK)
                    {
                        isValid = false;
                        results.Add(result);
                    }
                    #endregion
                #endregion
               
                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "CobroJuridico_Add");
                results.Add(result);
                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrlNew.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlNew.PrefijoID.Value);
                        ctrlNew.ComprobanteIDNro.Value = this.GenerarComprobanteNro(comp, ctrlNew.PrefijoID.Value, ctrlNew.PeriodoDoc.Value.Value, ctrlNew.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlNew, true, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlNew.NumeroDoc.Value.Value, ctrlNew.ComprobanteIDNro.Value.Value, false);
                     
                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                {
                    this._mySqlConnectionTx.Rollback();
                }
            }
        }

        /// <summary>
        /// Trae todos los registros del coAuxiliar que tengan cobro juridico y no existan en ccCJHistorico
        /// </summary>
        /// <returns>retorna una lista de DTO_ccCarteraDocu</returns>
        public List<DTO_CobroJuridicoAuxiliar> GetCobroJuridicoFromAuxiliar()
        {
            try
            {
                #region Variables
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)base.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCJHistoricoAbonos = (DAL_ccCJHistoricoAbonos)base.GetInstance(typeof(DAL_ccCJHistoricoAbonos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                string componenteCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string componenteSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string componenteInteresMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string componenteIntSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CompIntMoraPolizaCJ);

                List<DTO_CobroJuridicoAuxiliar> creditosFinal = new List<DTO_CobroJuridicoAuxiliar>();

                #endregion

                List<DTO_CobroJuridicoAuxiliar> creditoCJAll = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetAuxiliarCobroJur();

                #region Obtiene valores adicionales de acuerdo al Estado
                if (creditoCJAll.Count == 0)
                    return new List<DTO_CobroJuridicoAuxiliar>();
                else
                {
                    List<string> distinctClient = (from c in creditoCJAll select c.ClienteID.Value).Distinct().ToList();
                    foreach (string cliente in distinctClient)
                    {
                        List<DTO_CobroJuridicoAuxiliar> creditosCJClientes = creditoCJAll.Where(x => x.ClienteID.Value == cliente).ToList();
                        List<string> distinctComprobante = (from c in creditosCJClientes select c.Comprobante.Value).Distinct().ToList();
                        foreach (var comprob in distinctComprobante)
                        {
                            List<DTO_CobroJuridicoAuxiliar> creditosCJComprobante = creditoCJAll.Where(x => x.Comprobante.Value == comprob).ToList();
                            DTO_CobroJuridicoAuxiliar cj = new DTO_CobroJuridicoAuxiliar();
                            List<int> distinctLibranza = (from c in creditosCJComprobante select c.Libranza.Value.Value).Distinct().ToList();
                            foreach (int libranza in distinctLibranza)
                            {
                                List<DTO_CobroJuridicoAuxiliar> creditosCJLibranza = creditosCJComprobante.Where(x => x.Libranza.Value == libranza).ToList();
                                cj = creditosCJLibranza.First();
                                cj.Detalle = creditosCJLibranza;
                                cj.VlrCapital.Value = cj.Detalle.FindAll(x => x.Componente.Value == componenteCapital).Sum(x => x.VlrCuota.Value);
                                cj.VlrIntCapital.Value = cj.Detalle.FindAll(x => x.Componente.Value == componenteInteresMora).Sum(x => x.VlrCuota.Value);
                                cj.VlrPoliza.Value = cj.Detalle.FindAll(x => x.Componente.Value == componenteSeguro).Sum(x => x.VlrCuota.Value);
                                cj.VlrIntPoliza.Value = cj.Detalle.FindAll(x => x.Componente.Value == componenteIntSeguro).Sum(x => x.VlrCuota.Value);
                                cj.VlrGastos.Value = cj.Detalle.FindAll(x => x.Componente.Value != componenteCapital &&
                                                                             x.Componente.Value != componenteInteresMora &&
                                                                             x.Componente.Value != componenteSeguro &&
                                                                             x.Componente.Value != componenteIntSeguro).Sum(x => x.VlrCuota.Value);
                            }
                            creditosFinal.Add(creditosCJComprobante.First());
                        }
                    }
                }
                #endregion

                return creditosFinal;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "GetCobroJuridicoByCliente");
                throw ex;
            }
        }

        /// <summary>
        /// Funcion que agrega info a ccCJHistorico
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="cobroJuridicos">resumen de los cobrosJuridicos a guardar</param>
        /// <returns></returns>
        public List<DTO_TxResult> ccCJHistorico_Add(int documentID, List<DTO_CobroJuridicoAuxiliar> cobroJuridicos, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_TxResult> results = new List<DTO_TxResult>();
            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;
            bool isValid = true;

            try
            {
                #region Variables
                this._dal_ccCJHistorico = (DAL_ccCJHistorico)base.GetInstance(typeof(DAL_ccCJHistorico), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_Comprobante = (DAL_Comprobante)base.GetInstance(typeof(DAL_Comprobante), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                string componenteCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string componenteSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string componenteInteresMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string componenteIntSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CompIntMoraPolizaCJ);
                int i = 0;
                #endregion
                foreach (var cobro in cobroJuridicos)
                {
                    //Manejo de porcentajes 
                    int percent = ((i + 1) * 100) / cobroJuridicos.Count(x => x.Seleccionar.Value.Value);
                    batchProgress[tupProgress] = percent;
                    i++;

                    if (cobro.Seleccionar.Value.Value)
                    {
                        var detPrincipal = cobro.Detalle.FindAll(x => x.Componente.Value == componenteCapital || x.Componente.Value == componenteInteresMora);
                        var detSecundario = cobro.Detalle.FindAll(x => x.Componente.Value != componenteCapital && x.Componente.Value != componenteInteresMora);

                        if (detPrincipal.Count > 0)
                        {
                            #region Guarda en ccCJHistorico
                            DTO_ccCJHistorico hist = new DTO_ccCJHistorico();
                            hist.NumeroDoc.Value = cobro.NumeroDoc.Value;
                            hist.ClaseDeuda.Value = 1;
                            hist.EstadoDeuda.Value = cobro.EstadoDeuda.Value;//el mismo?
                            hist.TipoMvto.Value = 1; //Cambia estado? cual se pone
                            hist.FechaMvto.Value = cobro.FechaDoc.Value;
                            hist.FechaInicial.Value = cobro.FechaDoc.Value;
                            hist.SaldoCapital.Value = 0;//Igual que mvto?
                            hist.SaldoInteres.Value = 0; //Igual que mvto?
                            hist.SaldoGastos.Value = 0; //Igual que mvto?
                            hist.MvtoCapital.Value = detPrincipal.FindAll(x => x.Componente.Value == componenteCapital).Sum(x => x.VlrCuota.Value.Value);
                            hist.MvtoInteres.Value = detPrincipal.FindAll(x => x.Componente.Value == componenteInteresMora).Sum(x => x.VlrCuota.Value.Value);
                            hist.MvtoGastos.Value = 0;
                            int consHistCJ = this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(hist);
                            #endregion
                            #region Actualiza coAuxiliar
                            foreach (var det in detPrincipal)
                            {
                                DTO_ComprobanteFooter footer = new DTO_ComprobanteFooter();
                                footer.DatoAdd8.Value = consHistCJ.ToString();
                                this._dal_Comprobante.DAL_Comprobante_Update(det.ConsAux.Value.Value, footer, false);
                            }
                            #endregion
                        }
                        if (detSecundario.Count > 0)
                        {
                            #region Guara en ccCJHistorico
                            DTO_ccCJHistorico hist = new DTO_ccCJHistorico();
                            hist.NumeroDoc.Value = cobro.NumeroDoc.Value;
                            hist.ClaseDeuda.Value = 2;
                            hist.EstadoDeuda.Value = cobro.EstadoDeuda.Value;//el mismo?
                            hist.TipoMvto.Value = 1; //Cambia estado? cual se pone
                            hist.FechaMvto.Value = cobro.FechaDoc.Value;
                            hist.FechaInicial.Value = cobro.FechaDoc.Value;
                            hist.SaldoCapital.Value = 0;//Igual que mvto?
                            hist.SaldoInteres.Value = 0; //Igual que mvto?
                            hist.SaldoGastos.Value = 0; //Igual que mvto?
                            hist.MvtoCapital.Value = detSecundario.FindAll(x => x.Componente.Value == componenteSeguro).Sum(x => x.VlrCuota.Value.Value);
                            hist.MvtoInteres.Value = detSecundario.FindAll(x => x.Componente.Value == componenteIntSeguro).Sum(x => x.VlrCuota.Value.Value);
                            hist.MvtoGastos.Value = detSecundario.FindAll(x => x.Componente.Value != componenteSeguro &&
                                                                               x.Componente.Value != componenteIntSeguro).Sum(x => x.VlrCuota.Value.Value);
                            int consHistCJ = this._dal_ccCJHistorico.DAL_ccCJHistorico_Add(hist);
                            #endregion
                            #region Actualiza coAuxiliar
                            foreach (var det in detSecundario)
                            {
                                DTO_ComprobanteFooter footer = new DTO_ComprobanteFooter();
                                footer.DatoAdd8.Value = consHistCJ.ToString();
                                this._dal_Comprobante.DAL_Comprobante_Update(det.ConsAux.Value.Value, footer, false);
                            }
                            #endregion
                        }
                    }
                }
                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "CobroJuridico_Add");
                results.Add(result);
                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }

        }

        /// <summary>
        /// Revierte un envío a CJ
        /// </summary>
        /// <param name="documentID">Documento que genera la reversión</param>
        /// <param name="numeroDoc">Numero doc del pago a revertir</param>
        /// <param name="consecutivoPos">Posicion del los documentos en la lista. Lleva el control de los consecutivos (Null si es el primero)</param>
        /// <param name="ctrls">Documento de reversion</param>
        /// <param name="coComps">Comprobante (maestra) de reversion (si existe)</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult EnvioCJ_Revertir(int documentID, int numeroDoc, int? consecutivoPos, ref List<DTO_glDocumentoControl> ctrls,
            ref List<DTO_coComprobante> coComps, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Inicia las variables globales

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;

            if (!consecutivoPos.HasValue)
            {
                ctrls = new List<DTO_glDocumentoControl>();
                coComps = new List<DTO_coComprobante>();
            }

            #endregion
            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloContabilidad = (ModuloContabilidad)this.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr); 
                this._dal_ccCreditoPagos = (DAL_ccCreditoPagos)this.GetInstance(typeof(DAL_ccCreditoPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)this.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCJHistorico = (DAL_ccCJHistorico)base.GetInstance(typeof(DAL_ccCJHistorico), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_MasterSimple = (DAL_MasterSimple)this.GetInstance(typeof(DAL_MasterSimple), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);  

                string periodoStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo);
                DateTime periodo = Convert.ToDateTime(periodoStr);

                //Estado
                EstadoDeuda estado = EstadoDeuda.Juridico;
                EstadoDeuda ultimoEstado = EstadoDeuda.Juridico;
                if(documentID == AppDocuments.AcuerdoPago)
                {
                    estado = EstadoDeuda.AcuerdoPago;
                    ultimoEstado = EstadoDeuda.Juridico;
                }
                else if(documentID == AppDocuments.AcuerdoPagoIncumplido)
                {
                    estado = EstadoDeuda.AcuerdoPagoIncumplido;
                    ultimoEstado = EstadoDeuda.AcuerdoPago;
                }

                //Variables del credito
                DTO_glDocumentoControl ctrlEnvioCJ = this._moduloGlobal.glDocumentoControl_GetByID(numeroDoc);
                DTO_ccCliente cliente = (DTO_ccCliente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCliente, ctrlEnvioCJ.TerceroID.Value, true, false);
                List<DTO_ccCreditoDocu> creditos = this._dal_ccCreditoDocu.DAL_ccCreditoDocu_GetCreditosByClienteAndEstado(cliente.ID.Value, (byte)estado);
              
                #endregion
                #region Validaciones generales

                //Valida que el cliente no haya cambiado de estado
                if (cliente.EstadoCartera.Value != (byte)estado)
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_RevEnvioCJClienteCambio;
                    return result;
                }

                #endregion
                #region Revierte el documento

                result = this._moduloGlobal.glDocumentoControl_Revertir(documentID, numeroDoc, consecutivoPos, ref ctrls, ref coComps, true);
                if (result.Result == ResultValue.NOK)
                    return result;

                int numDocAnula = ctrls[consecutivoPos.Value].NumeroDoc.Value.Value;
                if (!consecutivoPos.HasValue)
                    consecutivoPos = 0;

                #endregion
                #region Elimina la información de histórico de CJ

                this._dal_ccCJHistorico.DAL_ccCJHistorico_DeleteFromNumeroDocMvto(ctrlEnvioCJ.NumeroDoc.Value.Value);

                #endregion
                #region Recorre cada uno de los créditos

                foreach(DTO_ccCreditoDocu credito in creditos)
                {
                    #region Variables por crédito

                    // Variables del estado de cuenta
                    DTO_ccEstadoCuentaHistoria estadoCuentaHistoria = this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_GetByNumeroDoc(credito.DocEstadoCuenta.Value.Value);

                    // Trae los registros del último pago realizado
                    List<DTO_ccCreditoPlanPagos> planPagos = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(credito.NumeroDoc.Value.Value);

                    #endregion
                    #region Validaciones

                    // Valida no se hayan pagado cuotas despues de la cuota a revertir
                    long countPagosPost = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetByPagosForReversion(numeroDoc, credito.NumeroDoc.Value.Value);
                    if (countPagosPost > 0)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_RevEnvioCJPagos + "&&" + credito.Libranza.Value.ToString();
                        return result;
                    }

                    // Valida que el crédito no haya cambiado de estado
                    if (credito.EstadoDeuda.Value != (byte)estado)
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_RevEnvioCJCreditoCambio + "&&" + credito.Libranza.Value.ToString();
                        return result;
                    }

                    #endregion

                    //Cuando se envió a CJ
                    if (documentID == AppDocuments.CobroJuridico)
                    {
                        ultimoEstado = (EstadoDeuda)Enum.Parse(typeof(EstadoDeuda), estadoCuentaHistoria.EC_EstadoDeuda.Value.Value.ToString());

                        #region Actualiza estado cuenta historia 
                        estadoCuentaHistoria.NumDocProceso.Value = null;
                        estadoCuentaHistoria.EC_Fecha.Value = null;
                        this._dal_ccEstadoCuentaHistoria.DAL_ccEstadoCuentaHistoria_Update(estadoCuentaHistoria);
                        #endregion
                        #region Elimina la última cuota del plan de pagos

                        DTO_ccCreditoPlanPagos cuotaExtra = planPagos.Last();
                        this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Delete(cuotaExtra.Consecutivo.Value.Value);

                        #endregion

                        List<DTO_ccCreditoPagos> pagos = this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetByPagoID(numeroDoc);
                        foreach (DTO_ccCreditoPagos pagoCuota in pagos)
                        {
                            #region Actualiza el plan de pagos

                            DTO_ccCreditoPlanPagos planPago = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanpagos_GetByID(pagoCuota.CreditoCuotaNum.Value.Value);

                            //Trae los valores antiguos
                            decimal vlrCuota = pagoCuota.VlrCapital.Value.Value + pagoCuota.VlrInteres.Value.Value + pagoCuota.VlrSeguro.Value.Value + pagoCuota.VlrOtro1.Value.Value +
                                pagoCuota.VlrOtro2.Value.Value + pagoCuota.VlrOtro3.Value.Value + pagoCuota.VlrOtrosFijos.Value.Value;

                            decimal vlrExtras = pagoCuota.VlrMoraPago.Value.Value + pagoCuota.VlrAjusteUsura.Value.Value + pagoCuota.VlrOtrosComponentes.Value.Value;
                            if (pagoCuota.VlrPrejuridicoPago.Value != null)
                                vlrExtras += pagoCuota.VlrPrejuridicoPago.Value.Value;

                            planPago.VlrPagadoCuota.Value = vlrCuota * -1;
                            planPago.VlrMoraPago.Value = pagoCuota.VlrMoraPago.Value.Value * -1;
                            planPago.VlrPagadoExtras.Value = vlrExtras * -1;

                            //Calcula la información previa de la mora
                            decimal vlrMoraLiquida = 0;
                            decimal vlrMoraPago = 0;
                            DateTime? fechaMoraLiquida = null;

                            this._dal_ccCreditoPagos.DAL_ccCreditoPagos_GetInfoPagoAnterior(pagoCuota.NumeroDoc.Value.Value, pagoCuota.PagoDocu.Value.Value,
                                pagoCuota.CreditoCuotaNum.Value.Value, ref vlrMoraLiquida, ref vlrMoraPago, ref fechaMoraLiquida);

                            planPago.VlrMoraLiquida.Value = pagoCuota.VlrMoraLiquidaANT.Value.HasValue ? pagoCuota.VlrMoraLiquidaANT.Value : 0;// vlrMoraLiquida * -1;
                            if (vlrMoraLiquida > 0)
                                planPago.FechaLiquidaMora.Value = pagoCuota.FechaLiquidaMoraANT.Value.HasValue ? pagoCuota.FechaLiquidaMoraANT.Value : planPago.FechaCuota.Value;// fechaMoraLiquida.Value;
                            else
                                planPago.FechaLiquidaMora.Value = planPago.FechaCuota.Value;

                            this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_Update(planPago);

                            #endregion
                            #region Crea la reversión del pago

                            //Actiualiza el documento de anulación
                            this._dal_ccCreditoPagos.DAL_ccCreditoPagos_UpdateDocAnula(pagoCuota.Consecutivo.Value.Value, numDocAnula);

                            DTO_ccCreditoPagos pago = ObjectCopier.Clone(pagoCuota);
                            pago.PagoDocu.Value = numDocAnula;
                            pago.Valor.Value *= -1;
                            pago.VlrOtro1.Value *= -1;
                            pago.VlrOtro2.Value *= -1;
                            pago.VlrOtro3.Value *= -1;
                            pago.VlrOtrosFijos.Value *= -1;
                            pago.VlrMoraliquida.Value *= -1;
                            pago.VlrAjusteUsura.Value *= -1;
                            pago.VlrOtrosComponentes.Value *= -1;
                            pago.VlrMoraPago.Value *= -1;
                            pago.VlrCapital.Value *= -1;
                            pago.VlrInteres.Value *= -1;
                            pago.VlrSeguro.Value *= -1;
                            pago.VlrAjusteUsura.Value *= -1;
                            pago.VlrPrejuridicoPago.Value *= -1;

                            this._dal_ccCreditoPagos.DAL_ccCreditoPagos_Add(pago);

                            #endregion
                        }
                    }

                    #region Actualiza la info del credito

                    credito.EstadoDeuda.Value = (byte)ultimoEstado;
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(credito);

                    #endregion
                }

                #endregion
                #region Actualiza la información del cliente (Pendiente el cambio de estado)

                if(documentID == AppDocuments.CobroJuridico)
                    cliente.NumDocCJ.Value = null;
                cliente.EstadoCartera.Value = (byte)ultimoEstado;

                this._dal_MasterSimple.DocumentID = AppMasters.ccCliente;
                DTO_TxResult detailResult = this._dal_MasterSimple.DAL_MasterSimple_Update(cliente, true);
                if (detailResult.ResultMessage == ResultValue.NOK.ToString())
                {
                    result.Result = ResultValue.NOK;
                    return result;
                }

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "CarteraPagos_Revertir");

                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Commit y consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        for (int i = 0; i < ctrls.Count; ++i)
                        {
                            DTO_glDocumentoControl ctrlAnula = ctrls[i];
                            DTO_coComprobante coCompAnula = coComps[i];

                            //Obtiene el consecutivo del comprobante (cuando existe)
                            ctrlAnula.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlAnula.DocumentoID.Value.Value, ctrlAnula.PrefijoID.Value);
                            if (coCompAnula != null)
                                ctrlAnula.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coCompAnula, ctrlAnula.PrefijoID.Value, ctrlAnula.PeriodoDoc.Value.Value, ctrlAnula.DocumentoNro.Value.Value);

                            this._moduloGlobal.ActualizaConsecutivos(ctrlAnula, true, coCompAnula != null, false);
                            if (coCompAnula != null)
                                this._moduloContabilidad.ActualizaComprobanteNro(ctrlAnula.NumeroDoc.Value.Value, ctrlAnula.ComprobanteIDNro.Value.Value, false);
                        }

                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #region Reintegros

        #region Pagos Especiales

        #region Funciones Privadas

        /// <summary>
        /// Funcion que crea un registro nuevo en la tabla de ccCompradorFinalDeta
        /// <param name="actFlujoID">Actividad de flujo actual del documento</param>
        /// <param name="reintegroCliente">DTO con la informacion para realizar el reintegro</param>
        /// <param name="documentID">Numero del documento</param>
        /// </summary>
        private DTO_TxResult PagosEspeciales_GuardarAprobacion(int documentID, string actFlujoID, DTO_ccReintegroClienteDeta reintegroCliente,
            DTO_glDocumentoControl ctrlReintegro, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccReintegroClienteDeta = (DAL_ccReintegroClienteDeta)base.GetInstance(typeof(DAL_ccReintegroClienteDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)base.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloCxP = (ModuloCuentasXPagar)base.GetInstance(typeof(ModuloCuentasXPagar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();
            DTO_glDocumentoControl ctrlCxP = null;
            DTO_coComprobante coComp = null;
            DTO_Comprobante comprobante = new DTO_Comprobante();
            DTO_coPlanCuenta coPlanCta = new DTO_coPlanCuenta();
            DTO_glConceptoSaldo conSaldo = new DTO_glConceptoSaldo();
            try
            {
                #region Variables

                //Variables por defecto
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);

                //Otros componentes
                string conceptoCxp = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CxPPagosAnticiposySaldoFavor);
                string componenteSaldoAFavor = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSaldosAFavor);

                //Variables de valores y fechas
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                decimal totalML = reintegroCliente.Valor.Value.Value;
                decimal totalME = 0;
                DateTime fecha = reintegroCliente.FechaAprobacionReintegro.Value.Value;

                #endregion
                #region Validaciones
                if (string.IsNullOrWhiteSpace(conceptoCxp))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CxPPagosAnticiposySaldoFavor + "&&" + string.Empty;
                    return result;
                }
                #endregion
                #region Carga la información para generar la CxP
                ctrlReintegro.TerceroID.Value = reintegroCliente.ClienteID.Value;
                ctrlReintegro.CuentaID.Value = coPlanCta.ID.Value;
                ctrlReintegro.FechaDoc.Value = fecha;
                if (reintegroCliente.Detalle.Count > 0)
                {
                    foreach (DTO_ccReintegroClienteDeta item in reintegroCliente.Detalle)
                    {
                        //Credito
                        DTO_ccCreditoDocu credito = this.GetCreditoByNumeroDoc(item.NumDocCredito.Value.Value);
                        DTO_ccLineaCredito lineaCred = (DTO_ccLineaCredito)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccLineaCredito, credito.LineaCreditoID.Value, true, false);
                        #region Trae la Cuenta del componente
                        Dictionary<string, string> dic = new Dictionary<string, string>();
                        dic.Add("ComponenteCarteraID", reintegroCliente.ComponenteCarteraID.Value);
                        dic.Add("TipoEstado", ((int)TipoEstadoCartera.Propia).ToString());
                        dic.Add("ClaseCredito", lineaCred.ClaseCredito.Value);

                        DTO_ccComponenteCuenta compCuenta = (DTO_ccComponenteCuenta)this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, dic, true);
                        if (compCuenta != null)
                        {
                            if (!String.IsNullOrWhiteSpace(compCuenta.CtaRecursosTerceros.Value))
                            {
                                string cuenta = compCuenta.CtaRecursosTerceros.Value;
                                coPlanCta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, cuenta, true, false);
                                conSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, coPlanCta.ConceptoSaldoID.Value, true, false);
                            }
                            else
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + compCuenta.ComponenteCarteraDesc.Value +
                                        "&&" + ((int)TipoEstadoCartera.Propia).ToString() + "&&" + lineaCred.ClaseCredito.Value;
                                return result;
                            }
                        }
                        else
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_Co_CuentaInvalid + "&&" + compCuenta.CtaRecursosCesion.Value;
                            return result;
                        }
                        #endregion
                        #region Crea el registro del comprobante footer
                        ctrlReintegro.DocumentoNro.Value = item.NumDocCredito.Value;
                        DTO_ComprobanteFooter compFooterTemp = this.CrearComprobanteFooter(ctrlReintegro, coPlanCta, conSaldo, 0, concCargoXdef, lgXdef, lineaXdef, item.Valor.Value.Value, totalME, false);
                        compFooterTemp.Descriptivo.Value = "Cancela " + compCuenta.ComponenteCarteraID.Value + " " + compCuenta.ComponenteCarteraDesc.Value + " - " + item.Libranza.Value;
                        comprobante.Footer.Add(compFooterTemp);
                        #endregion
                        #region Actualiza el estado del documento y Asigna el nuevo Flujo
                        this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, item.NumeroDoc.Value.Value, EstadoDocControl.Aprobado, string.Empty, true);
                        result = this.AsignarFlujo(documentID, item.NumeroDoc.Value.Value, actFlujoID, false, string.Empty);
                        if (result.Result == ResultValue.NOK)
                            return result;
                        #endregion
                        //Actualiza la info del reintegro
                        this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_Update(item);
                    }
                }
                else
                {
                    #region Crea el registro del comprobante footer

                    ctrlReintegro.DocumentoNro.Value = reintegroCliente.NumDocCredito.Value;
                    DTO_ComprobanteFooter compFooterTemp = this.CrearComprobanteFooter(ctrlReintegro, coPlanCta, conSaldo, 0, concCargoXdef, lgXdef, lineaXdef, totalML, totalME, false);
                    //compFooterTemp.Descriptivo.Value = "Cancela " + compCuenta.ComponenteCarteraID.Value + " " + compCuenta.ComponenteCarteraDesc.Value + " - " + reintegroCliente.Libranza.Value;
                    comprobante.Footer.Add(compFooterTemp);
                   
                    #endregion
                    //Actualiza la infor del reintegro
                    this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_Update(reintegroCliente);
                    #region Actualiza el estado del documento y Asigna el nuevo Flujo
                    this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, reintegroCliente.NumeroDoc.Value.Value, EstadoDocControl.Aprobado, string.Empty, true);
                    result = this.AsignarFlujo(documentID, reintegroCliente.NumeroDoc.Value.Value, actFlujoID, false, string.Empty);
                    if (result.Result == ResultValue.NOK)
                        return result;
                    #endregion
                }
                #endregion
                #region Crea la CxP

                ctrlReintegro.DocumentoNro.Value = 0;
                object obj = this._moduloCxP.CuentasXPagar_Generar(ctrlReintegro, conceptoCxp, totalML, comprobante.Footer, ModulesPrefix.cc, false);
                if (obj.GetType() == typeof(DTO_TxResult))
                {
                    result = (DTO_TxResult)obj;
                    return result;
                }
                ctrlCxP = (DTO_glDocumentoControl)obj;
                if (coComp == null)
                    coComp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, ctrlCxP.ComprobanteID.Value, true, false);

                #endregion
                #region Actualiza los componentes
                if (reintegroCliente.Detalle.Count > 0)
                {
                    foreach (DTO_ccReintegroClienteDeta item in reintegroCliente.Detalle)
                    {
                        #region Actualiza la info de creditoComponentes

                        DTO_ccCreditoComponentes crediComponente = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByComponenteCartera(item.NumDocCredito.Value.Value, item.ComponenteCarteraID.Value);
                        crediComponente.DocPago.Value = ctrlCxP.NumeroDoc.Value;
                        this._dal_ccCreditoComponentes.DAL_ccCarteraComponentes_Update(crediComponente);

                        #endregion
                        #region Guarda los movimientos de cartera

                        if (crediComponente.ComponenteCarteraID.Value == componenteSaldoAFavor)
                        {
                            DTO_ccCarteraMvto mvto = new DTO_ccCarteraMvto();
                            mvto.NumCredito.Value = reintegroCliente.NumDocCredito.Value.Value;
                            mvto.NumeroDoc.Value = ctrlCxP.NumeroDoc.Value;
                            mvto.ComponenteCarteraID.Value = crediComponente.ComponenteCarteraID.Value;
                            mvto.Tasa.Value = 0;
                            mvto.VlrAbono.Value = totalML;
                            mvto.VlrComponente.Value = 0;

                            this.ccCarteraMvto_Add(mvto);
                        }

                        #endregion
                    }
                }
                else
                {
                    #region Actualiza la info de creditoComponentes

                    DTO_ccCreditoComponentes crediComponente = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByComponenteCartera(reintegroCliente.NumDocCredito.Value.Value, reintegroCliente.ComponenteCarteraID.Value);
                    crediComponente.DocPago.Value = ctrlCxP.NumeroDoc.Value;
                    this._dal_ccCreditoComponentes.DAL_ccCarteraComponentes_Update(crediComponente);

                    #endregion
                    #region Guarda los movimientos de cartera

                    if (crediComponente.ComponenteCarteraID.Value == componenteSaldoAFavor)
                    {
                        DTO_ccCarteraMvto mvto = new DTO_ccCarteraMvto();
                        mvto.NumCredito.Value = reintegroCliente.NumDocCredito.Value.Value;
                        mvto.NumeroDoc.Value = ctrlCxP.NumeroDoc.Value;
                        mvto.ComponenteCarteraID.Value = crediComponente.ComponenteCarteraID.Value;
                        mvto.Tasa.Value = 0;
                        mvto.VlrAbono.Value = totalML;
                        mvto.VlrComponente.Value = 0;

                        this.ccCarteraMvto_Add(mvto);
                    }

                    #endregion
                }
                #endregion
                #region Asigna el flujo y Actualiza el estado del documento

                //Actualiza el estado del documento
                this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, reintegroCliente.NumeroDoc.Value.Value, EstadoDocControl.Aprobado, string.Empty, true);

                //Asigna el flujo del reitegro
                result = this.AsignarFlujo(documentID, reintegroCliente.NumeroDoc.Value.Value, actFlujoID, false, string.Empty);
                if (result.Result == ResultValue.NOK)
                    return result;
                #endregion
                reintegroCliente.NumDocCxP.Value = ctrlCxP.NumeroDoc.Value.Value;
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReintegroClientes_GuardarAprobacion");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        coComp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, ctrlCxP.ComprobanteID.Value, true, false);
                        ctrlCxP.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlCxP.PrefijoID.Value, ctrlCxP.PeriodoDoc.Value.Value, ctrlCxP.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlCxP, false, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlCxP.NumeroDoc.Value.Value, ctrlCxP.ComprobanteIDNro.Value.Value, false);
                        #endregion
                    }
                    else
                        throw new Exception("ReintegroClientes_GuardarAprobacion - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Funciones públicas

        /// <summary>
        /// Funcion que trae los creditos para el reintegro a los clientes
        /// </summary>
        /// <param name="componenteCarteraID">Componente que se esta consultando</param>
        /// <returns>Retorna una lista con los creditos que poseen saldo en el componente especificado</returns>
        public DTO_SerializedObject PagosEspeciales_GetByComponente(string actFlujoID, string componenteCarteraID)
        {
            try
            {
                this._dal_MasterComplex = (DAL_MasterComplex)base.GetInstance(typeof(DAL_MasterComplex), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccReintegroClienteDeta = (DAL_ccReintegroClienteDeta)base.GetInstance(typeof(DAL_ccReintegroClienteDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DTO_TxResult result = new DTO_TxResult();
                DTO_ccAsesor ccAsesor = new DTO_ccAsesor();
                DTO_ReintegrosCartera reintegroCartera = new DTO_ReintegrosCartera();
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));
                DTO_ccCarteraComponente carteraCompo = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, componenteCarteraID, true, false);
                int terceroTipo = carteraCompo.TerceroTipo.Value.Value;
                string masterAsesorName = this.GetResource(LanguageTypes.Forms, AppMasters.ccAsesor.ToString());

                #region Trae la informacion de ccComponenteCuenta

                DTO_glConsulta filtro = new DTO_glConsulta();

                //Componente
                DTO_glConsultaFiltro filtroComponente = new DTO_glConsultaFiltro()
                {
                    CampoFisico = "ComponenteCarteraID",
                    OperadorFiltro = OperadorFiltro.Igual,
                    ValorFiltro = componenteCarteraID,
                    OperadorSentencia = OperadorSentencia.And
                };
                filtro.Filtros.Add(filtroComponente);

                //Estado
                DTO_glConsultaFiltro filtroEstado = new DTO_glConsultaFiltro()
                {
                    CampoFisico = "TipoEstado",
                    OperadorFiltro = OperadorFiltro.Igual,
                    ValorFiltro = ((int)TipoEstadoCartera.Propia).ToString(),
                    OperadorSentencia = OperadorSentencia.And
                };
                filtro.Filtros.Add(filtroEstado);

                this._dal_MasterComplex.DocumentID = AppMasters.ccComponenteCuenta;
                long count = this._dal_MasterComplex.DAL_MasterComplex_Count(filtro, true);
                List<DTO_MasterComplex> cuentasComps = this._dal_MasterComplex.DAL_MasterComplex_GetPaged(count, 1, filtro, true).ToList();
                DTO_ccComponenteCuenta compCuenta = null;
                if (cuentasComps.Count > 0)
                    compCuenta = (DTO_ccComponenteCuenta)cuentasComps.First();

                if (compCuenta != null)
                {
                    if (String.IsNullOrWhiteSpace(compCuenta.CtaRecursosTerceros.Value))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtaRecursosTerceros + "&&" + compCuenta.ComponenteCarteraDesc.Value +
                                "&&" + compCuenta.TipoEstado.Value.Value.ToString() + "&&" + compCuenta.ClaseCredito.Value;
                        return result;
                    }
                }
                else
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + componenteCarteraID +  "&&" + ((int)TipoEstadoCartera.Propia).ToString() + "&&" + "-";
                    return result;
                }
                #endregion
                #region Trae los componentes a reintegrar con sus valores
                if (String.IsNullOrWhiteSpace(compCuenta.TerceroID.Value) && terceroTipo == 3)
                {
                    reintegroCartera = this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_GetByCompCartera(actFlujoID, componenteCarteraID, periodo);
                    #region Crea el Reintegro Agrupado por cliente id
                    foreach (DTO_ccReintegroClienteDeta item in reintegroCartera.DetalleReintegros)
                    {
                        if (ccAsesor.ID.Value != item.AsesorID.Value)
                        {
                            ccAsesor = (DTO_ccAsesor)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccAsesor, item.AsesorID.Value, true, false);
                            if (ccAsesor == null)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = DictionaryMessages.Err_MasterItemUnActive + "&&" + item.AsesorID.Value + "&&" + masterAsesorName;
                                return result;
                            }
                            else
                            {
                                DTO_ccReintegroClienteDeta reintegro = new DTO_ccReintegroClienteDeta();
                                reintegro.HasDetalle.Value = true;
                                reintegro.NumDocCredito.Value = 0;
                                reintegro.ComponenteCarteraID.Value = componenteCarteraID;
                                reintegro.Aprobado.Value = true;
                                reintegro.ClienteID.Value = ccAsesor.ID.Value;
                                reintegro.Nombre.Value = ccAsesor.Descriptivo.Value;
                                reintegro.Valor.Value = (from c in reintegroCartera.DetalleReintegros where c.AsesorID.Value == ccAsesor.ID.Value select c.Valor.Value.Value).Sum();
                                reintegro.Detalle.AddRange((from c in reintegroCartera.DetalleReintegros where c.AsesorID.Value == ccAsesor.ID.Value select c));
                                reintegroCartera.Reintegros.Add(reintegro);
                            }
                        }
                    }
                    #endregion
                }
                else if (String.IsNullOrWhiteSpace(compCuenta.TerceroID.Value))
                {
                    reintegroCartera = this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_GetByCompCartera(actFlujoID, componenteCarteraID, periodo);
                    reintegroCartera.Reintegros = null;
                }
                else
                {
                    DTO_coTercero coTercero = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, compCuenta.TerceroID.Value, true, false);
                    reintegroCartera = this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_GetByCompCartera(actFlujoID, componenteCarteraID, periodo);
                    #region Crea el Reintegro
                    DTO_ccReintegroClienteDeta reintegro = new DTO_ccReintegroClienteDeta();
                    reintegro.HasDetalle.Value = reintegroCartera.DetalleReintegros.Count > 0 ? true : false;
                    reintegro.NumDocCredito.Value = 0;
                    reintegro.ComponenteCarteraID.Value = componenteCarteraID;
                    reintegro.Aprobado.Value = true;
                    reintegro.ClienteID.Value = compCuenta.TerceroID.Value;
                    reintegro.Nombre.Value = coTercero.Descriptivo.Value;
                    reintegro.Valor.Value = (from c in reintegroCartera.DetalleReintegros select c.Valor.Value.Value).Sum();
                    reintegro.Detalle.AddRange(reintegroCartera.DetalleReintegros);
                    reintegroCartera.Reintegros.Add(reintegro);
                    #endregion
                }
                #endregion

                return reintegroCartera;
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "ReintegroClientes_GetByComponente");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que trae los creditos para la aprobacion del reintegro a los clientes
        /// </summary>
        /// <param name="componenteCarteraID">Componente que se esta consultando</param>
        /// <param name="actFlujoID">Actividad de flujo del documento</param>
        /// <returns>Retorna una lista con los creditos que poseen saldo en el componente especificado</returns>
        public DTO_SerializedObject PagosEspeciales_GetAprobByComponente(string actFlujoID, string componenteCarteraID)
        {
            try
            {
                this._dal_MasterComplex = (DAL_MasterComplex)base.GetInstance(typeof(DAL_MasterComplex), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccReintegroClienteDeta = (DAL_ccReintegroClienteDeta)base.GetInstance(typeof(DAL_ccReintegroClienteDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DTO_TxResult result = new DTO_TxResult();
                DTO_ReintegrosCartera reintegroCartera = new DTO_ReintegrosCartera();
                DTO_ccAsesor ccAsesor = new DTO_ccAsesor();
                DTO_ccCarteraComponente carteraCompo = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, componenteCarteraID, true, false);
                int terceroTipo = carteraCompo.TerceroTipo.Value.Value;

                #region Trae la informacion de ccComponenteCuenta

                DTO_glConsulta filtro = new DTO_glConsulta();

                //Componente
                DTO_glConsultaFiltro filtroComponente = new DTO_glConsultaFiltro()
                {
                    CampoFisico = "ComponenteCarteraID",
                    OperadorFiltro = OperadorFiltro.Igual,
                    ValorFiltro = componenteCarteraID,
                    OperadorSentencia = OperadorSentencia.And
                };
                filtro.Filtros.Add(filtroComponente);

                //Estado
                DTO_glConsultaFiltro filtroEstado = new DTO_glConsultaFiltro()
                {
                    CampoFisico = "TipoEstado",
                    OperadorFiltro = OperadorFiltro.Igual,
                    ValorFiltro = ((int)TipoEstadoCartera.Propia).ToString(),
                    OperadorSentencia = OperadorSentencia.And
                };
                filtro.Filtros.Add(filtroEstado);

                this._dal_MasterComplex.DocumentID = AppMasters.ccComponenteCuenta;
                long count = this._dal_MasterComplex.DAL_MasterComplex_Count(filtro, true);
                List<DTO_MasterComplex> cuentasComps = this._dal_MasterComplex.DAL_MasterComplex_GetPaged(count, 1, filtro, true).ToList();
                DTO_ccComponenteCuenta compCuenta = null;
                if (cuentasComps.Count > 0)
                    compCuenta = (DTO_ccComponenteCuenta)cuentasComps.First();

                if (compCuenta != null)
                {
                    if (String.IsNullOrWhiteSpace(compCuenta.CtaRecursosTerceros.Value))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtaRecursosTerceros + "&&" + compCuenta.ComponenteCarteraDesc.Value +
                                "&&" + compCuenta.TipoEstado.Value.Value.ToString() + "&&" + compCuenta.ClaseCredito.Value;
                        return result;
                    }
                }
                else
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_InvalidCtasComp + "&&" + componenteCarteraID +
                                "&&" + ((int)TipoEstadoCartera.Propia).ToString() + "&&" + "-";
                    return result;
                }
                #endregion
                #region Trae los componentes a reintegrar con sus valores
                if (String.IsNullOrWhiteSpace(compCuenta.TerceroID.Value) && terceroTipo == 3)
                {
                    reintegroCartera = this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_GetByCompCarteraForAprob(actFlujoID, componenteCarteraID);
                    #region Crea el Reintegro Agrupado por cliente id
                    foreach (DTO_ccReintegroClienteDeta item in reintegroCartera.DetalleReintegros)
                    {
                        if (ccAsesor.ID.Value != item.AsesorID.Value)
                        {
                            ccAsesor = (DTO_ccAsesor)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccAsesor, item.AsesorID.Value, true, false);
                            if (ccAsesor == null)
                            {
                                result.Result = ResultValue.NOK;
                                result.ResultMessage = DictionaryMessages.Err_MasterItemUnActive + "&&" + item.AsesorID.Value + "&&" + "Asesor";
                                return result;
                            }
                            else
                            {
                                DTO_ccReintegroClienteDeta reintegro = new DTO_ccReintegroClienteDeta();
                                reintegro.Aprobado.Value = true;
                                reintegro.Rechazado.Value = false;
                                reintegro.HasDetalle.Value = true;
                                reintegro.NumeroDoc.Value = item.NumeroDoc.Value;
                                reintegro.NumDocCredito.Value = 0;
                                reintegro.ComponenteCarteraID.Value = componenteCarteraID;
                                reintegro.ClienteID.Value = ccAsesor.ID.Value;
                                reintegro.Nombre.Value = ccAsesor.Descriptivo.Value;
                                reintegro.Valor.Value = (from c in reintegroCartera.DetalleReintegros where c.AsesorID.Value == ccAsesor.ID.Value select c.Valor.Value.Value).Sum();
                                reintegro.Detalle.AddRange((from c in reintegroCartera.DetalleReintegros where c.AsesorID.Value == ccAsesor.ID.Value select c));
                                reintegroCartera.Reintegros.Add(reintegro);
                            }
                        }
                    }
                    #endregion
                }
                else if (String.IsNullOrWhiteSpace(compCuenta.TerceroID.Value))
                {
                    reintegroCartera = this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_GetByCompCarteraForAprob(actFlujoID, componenteCarteraID);
                    //reintegroCartera.DetalleReintegros = reintegroCartera.DetalleReintegros.OrderBy(x => x.Libranza.Value.Value).ToList();
                    reintegroCartera.Reintegros = null;
                }
                else
                {
                    DTO_coTercero coTercero = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, compCuenta.TerceroID.Value, true, false);
                    reintegroCartera = this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_GetByCompCarteraForAprob(actFlujoID, componenteCarteraID);
                    //reintegroCartera.DetalleReintegros = reintegroCartera.DetalleReintegros.OrderBy(x => x.Libranza.Value.Value).ToList();
                    #region Crea el Reintegro
                    DTO_ccReintegroClienteDeta reintegro = new DTO_ccReintegroClienteDeta();
                    reintegro.HasDetalle.Value = reintegroCartera.DetalleReintegros.Count > 0 ? true : false;
                    reintegro.NumDocCredito.Value = 0;
                    reintegro.NumeroDoc.Value = reintegroCartera.DetalleReintegros.Count > 0 ? reintegroCartera.DetalleReintegros.First().NumeroDoc.Value.Value : 0;
                    reintegro.ComponenteCarteraID.Value = componenteCarteraID;
                    reintegro.Aprobado.Value = true;
                    reintegro.Rechazado.Value = false;
                    reintegro.ClienteID.Value = compCuenta.TerceroID.Value;
                    reintegro.Nombre.Value = coTercero.Descriptivo.Value;
                    reintegro.Valor.Value = (from c in reintegroCartera.DetalleReintegros select c.Valor.Value.Value).Sum();
                    reintegro.Detalle.AddRange(reintegroCartera.DetalleReintegros);
                    reintegroCartera.Reintegros.Add(reintegro);
                    #endregion
                }
                #endregion

                return reintegroCartera;

            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "ReintegroClientes_GetAprobByComponente");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que genera un nuevo documento de reintegro a clientes con su detalle
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="reintegrosClientes">Lista de los reintegros a realizar</param>
        /// <returns></returns>
        public List<DTO_SerializedObject> PagosEspeciales_Aprobar(int documentID, string actFlujoID, string headerRsx,
            List<DTO_ccReintegroClienteDeta> reintegrosClientes, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            #region Variables Generales
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            DTO_glDocumentoControl ctrlReintegro = null;
            List<DTO_MigrarFacturaVenta> facturasCartera = new List<DTO_MigrarFacturaVenta>();

            string fileName;
            string path = this.GetCvsName(ExportType.Csv, out fileName);

            #endregion
            try
            {
                string facturaTipo = this.GetControlValueByCompany(ModulesPrefix.fa, AppControl.fa_TipoFacturaxDefecto);
                int i = 0;
                int k = 1;
                foreach (DTO_ccReintegroClienteDeta reintegroCliente in reintegrosClientes)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / reintegrosClientes.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    if (reintegroCliente.Aprobado.Value.Value)
                    {
                        #region Aprobar
                        if (ctrlReintegro == null)
                            ctrlReintegro = this._moduloGlobal.glDocumentoControl_GetByID(reintegroCliente.NumeroDoc.Value.Value);

                            result = this.PagosEspeciales_GuardarAprobacion(documentID, actFlujoID, reintegroCliente, ctrlReintegro, false);

                        if (result.Result == ResultValue.NOK)
                            results.Add(result);
                        else
                        {
                            #region Carga el DTO a exportar
                            foreach (DTO_ccReintegroClienteDeta detalle in reintegroCliente.Detalle)
                            {
                                DTO_coTercero coTercero = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, detalle.ClienteID.Value, true, false);
                                DTO_ccCarteraComponente compCartera = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, detalle.ComponenteCarteraID.Value, true, false);
                                DTO_MigrarFacturaVenta facturaCartera = new DTO_MigrarFacturaVenta();
                                //facturaCartera.FacturaTipoID.Value = facturaTipo;
                                facturaCartera.PrefijoID.Value = ctrlReintegro.PrefijoID.Value;
                                facturaCartera.FacturaItem.Value = k;
                                facturaCartera.Fecha.Value = detalle.FechaAprobacionReintegro.Value;
                                facturaCartera.ClienteID.Value = detalle.ClienteID.Value;
                                facturaCartera.ProyectoID.Value = ctrlReintegro.ProyectoID.Value;
                                facturaCartera.CentroCostoID.Value = ctrlReintegro.CentroCostoID.Value;
                                facturaCartera.Moneda.Value = ctrlReintegro.MonedaID.Value;
                                //facturaCartera.AsesorID.Value = compCartera
                                facturaCartera.ServicioID.Value = compCartera.ServicioID.Value;
                                facturaCartera.Descripcion.Value = compCartera.Descriptivo.Value;
                                facturaCartera.Cantidad.Value = 1;
                                facturaCartera.Valor.Value = detalle.Valor.Value;
                                facturaCartera.Iva.Value = 0;
                                facturaCartera.TerceroID.Value = coTercero.ID.Value;
                                facturaCartera.Apellido1.Value = coTercero.ApellidoPri.Value;
                                facturaCartera.Apellido2.Value = coTercero.ApellidoSdo.Value;
                                facturaCartera.Nombre1.Value = coTercero.NombrePri.Value;
                                facturaCartera.Nombre2.Value = coTercero.NombreSdo.Value;
                                facturaCartera.Ciudad.Value = coTercero.LugarGeograficoID.Value;
                                facturaCartera.RegFiscal.Value = coTercero.ReferenciaID.Value;
                                facturaCartera.ActEconomicaID.Value = coTercero.ActEconomicaID.Value;
                                facturaCartera.TipoDocumento.Value = coTercero.TerceroDocTipoID.Value;
                                facturaCartera.Direccion.Value = coTercero.Direccion.Value;
                                facturaCartera.Telefono.Value = coTercero.Tel1.Value;
                                facturaCartera.CorreoElectronico.Value = coTercero.CECorporativo.Value;
                                facturaCartera.AutoRetenedorInd.Value = coTercero.AutoRetRentaInd.Value;
                                facturaCartera.AutoRetenedorIVAInd.Value = coTercero.AutoRetIVAInd.Value;
                                facturaCartera.DeclaraIVAInd.Value = coTercero.DeclaraIVAInd.Value;
                                facturaCartera.DeclaraRentaInd.Value = coTercero.DeclaraRentaInd.Value;
                                facturaCartera.IndependienteEMPInd.Value = coTercero.IndependienteEMPInd.Value;
                                facturaCartera.ExcluyeCREEInd.Value = coTercero.ExcluyeCREEInd.Value;

                                facturasCartera.Add(facturaCartera);
                            }
                            #endregion

                            if (string.IsNullOrWhiteSpace(reintegroCliente.CuentaID.Value))
                            {
                                DTO_Alarma alarma = this.GetFirstMailInfo(ctrlReintegro.NumeroDoc.Value.Value, false);
                                alarma.NumeroDoc = reintegroCliente.NumDocCxP.Value.ToString();
                                alarma.FileName = fileName;
                                results.Add(alarma);
                            }
                            else
                            {
                                results.Add(result);
                            }
                        }
                        #endregion
                    }

                    k++;
                }

                if (result.Result == ResultValue.OK)
                {
                    List<string> excludeCols = new List<string>();
                    excludeCols.Add("FacturaTipoID");

                    CsvExport<DTO_MigrarFacturaVenta> csv = new CsvExport<DTO_MigrarFacturaVenta>(facturasCartera);
                    csv.ExportToFile(path, ExportType.Csv, false, headerRsx, excludeCols);
                }
                return results;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "PagosEspeciales_Aprobar");
                results.Add(result);
                return results;
            }
        }

        #endregion

        #endregion

        #region Reintegros

        #region Funciones Privadas

        /// <summary>
        /// Funcion que crea un registro nuevo en la tabla de ccCompradorFinalDeta
        /// <param name="actFlujoID">Actividad de flujo actual del documento</param>
        /// <param name="reintegroCliente">DTO con la informacion para realizar el reintegro</param>
        /// <param name="documentID">Numero del documento</param>
        /// </summary>
        private DTO_TxResult ReintegroClientes_GuardarAprobacionGiro(int documentID, string actFlujoID, DTO_ccReintegroClienteDeta reintegroCliente, 
            DTO_glDocumentoControl ctrlReintegro, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccReintegroClienteDeta = (DAL_ccReintegroClienteDeta)base.GetInstance(typeof(DAL_ccReintegroClienteDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloCxP = (ModuloCuentasXPagar)base.GetInstance(typeof(ModuloCuentasXPagar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();
            DTO_glDocumentoControl ctrlCxP = null;
            DTO_coComprobante coComp = null;
            DTO_Comprobante comprobante = new DTO_Comprobante();
            try
            {
                #region Variables
       
                //Variables por defecto
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                
                //Otros componentes
                string conceptoCxp = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CxPPagosAnticiposySaldoFavor);
                
                //Variables de valores y fechas
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                decimal totalML = reintegroCliente.Valor.Value.Value;
                decimal totalME = 0;
                DateTime fecha = reintegroCliente.FechaAprobacionReintegro.Value.Value;

                #endregion
                #region Validaciones
                if (string.IsNullOrWhiteSpace(conceptoCxp))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_CxPPagosAnticiposySaldoFavor + "&&" + string.Empty;
                    return result;
                }
                #endregion
                #region Actualiza el regintegro, el documento control y asigna el flujo

                //Actualiza la infor del reintegro
                reintegroCliente.FechaAprobacionReintegro.Value = fecha;
                this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_Update(reintegroCliente);

                // Actualiza el estado del documento y Asigna el nuevo Flujo
                List<DTO_ccReintegroClienteDeta> pendientes = this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_GetByCuentaForAprob(actFlujoID, reintegroCliente.CuentaID.Value);
                int pendientesCount = string.IsNullOrWhiteSpace(reintegroCliente.CuentaReintegroID.Value) ?
                    pendientes.Count(x => string.IsNullOrWhiteSpace(x.CuentaReintegroID.Value)) :
                    pendientes.Count(x => !string.IsNullOrWhiteSpace(x.CuentaReintegroID.Value));

                if (pendientesCount == 0)
                {
                    this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, reintegroCliente.NumeroDoc.Value.Value, EstadoDocControl.Aprobado, string.Empty, true);
                    result = this.AsignarFlujo(documentID, reintegroCliente.NumeroDoc.Value.Value, actFlujoID, false, string.Empty);
                    if (result.Result == ResultValue.NOK)
                        return result;
                }

                #endregion
                #region Carga la información para generar la CxP

                ctrlReintegro.FechaDoc.Value = fecha;
                ctrlReintegro.DocumentoNro.Value = reintegroCliente.NumeroDoc.Value;
                ctrlReintegro.TerceroID.Value = reintegroCliente.TerceroID.Value;
                ctrlReintegro.Valor.Value = reintegroCliente.Valor.Value.Value * -1;
                ctrlReintegro.CuentaID.Value = reintegroCliente.CuentaID.Value;

                DTO_ComprobanteFooter compFooterTemp = this.CrearComprobanteFooter(ctrlReintegro, 0, concCargoXdef, lgXdef, lineaXdef, totalML, totalME, false);
                compFooterTemp.Descriptivo.Value = "Cancela Tercero (" + reintegroCliente.TerceroID.Value.Trim() + ") Cuenta (" + reintegroCliente.CuentaID.Value.Trim() + ")";
                comprobante.Footer.Add(compFooterTemp);

                #endregion
                #region Crea la CxP

                ctrlReintegro.DocumentoNro.Value = 0;
                object obj = this._moduloCxP.CuentasXPagar_Generar(ctrlReintegro, conceptoCxp, totalML, comprobante.Footer, ModulesPrefix.cc, false);
                if (obj.GetType() == typeof(DTO_TxResult))
                {
                    result = (DTO_TxResult)obj;
                    return result;
                }
                ctrlCxP = (DTO_glDocumentoControl)obj;
                coComp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, ctrlCxP.ComprobanteID.Value, true, false);

                #endregion
                #region Actualiza el reintegro
                reintegroCliente.NumDocCxP.Value = ctrlCxP.NumeroDoc.Value.Value;
                this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_Update(reintegroCliente);
                #endregion
                #region Asigna el flujo y Actualiza el estado del documento
              
                //Actualiza el estado del documento
                this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, reintegroCliente.NumeroDoc.Value.Value, EstadoDocControl.Aprobado, string.Empty, true);
               
                //Asigna el flujo del reintegro
                result = this.AsignarFlujo(documentID, reintegroCliente.NumeroDoc.Value.Value, actFlujoID, false, string.Empty);
                if (result.Result == ResultValue.NOK)
                    return result;

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReintegroClientes_GuardarAprobacion");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrlCxP.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlCxP.PrefijoID.Value, ctrlCxP.PeriodoDoc.Value.Value, ctrlCxP.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlCxP, false, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlCxP.NumeroDoc.Value.Value, ctrlCxP.ComprobanteIDNro.Value.Value, false);
                        
                        #endregion
                    }
                    else
                        throw new Exception("ReintegroClientes_GuardarAprobacion - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Funcion que trae los terceros para el reintegro a los clientes
        /// </summary>
        /// <param name="cuentaID">Cuenta que se esta consultando</param>
        /// <returns>Retorna una lista con los terceros que poseen saldo en la especificada</returns>
        public List<DTO_ccReintegroClienteDeta> ReintegroClientes_GetByCuenta(string cuentaID)
        {
            try
            {
                this._dal_ccReintegroClienteDeta = (DAL_ccReintegroClienteDeta)base.GetInstance(typeof(DAL_ccReintegroClienteDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));
                string libroFunc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TipoBalanceFuncional);

                List<DTO_ccReintegroClienteDeta> results = this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_GetByCuenta(periodo, libroFunc, cuentaID);
                return results;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReintegroClientes_GetByCuenta");
                throw ex;
            }
        }

        /// <summary>
        /// Funcion que genera un nuevo documento de reintegro a clientes con su detalle
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="fechaReintegro">Fecha en la que se realiza el reintegro</param>
        /// <param name="reintegrosClientes">Lista de los reintegros a realizar</param>
        /// <param name="vlrTotalReintegro">Valor total del reintegro</param>
        /// <returns></returns>
        public List<DTO_SerializedObject> ReintegroClientes_Add(int documentID, string actFlujoID, List<DTO_ccReintegroClienteDeta> reintegrosClientes, 
            DateTime fechaReintegro, decimal vlrTotalReintegro, bool isGiroAsociado, string reintegroSaldo, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Generales
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();
            string terceroPorDefecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TerceroXDefecto);

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccReintegroClienteDeta = (DAL_ccReintegroClienteDeta)base.GetInstance(typeof(DAL_ccReintegroClienteDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            bool isValid = true;
            DTO_glDocumentoControl ctrlNew = null;
            #endregion
            try
            {
                int i = 0;
                #region Variables

                //Variables por defecto
                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);

                //Vairables de valores y fechas
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                decimal tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, periodo);
                DateTime fecha = fechaReintegro;

                string cuentaReintegro = string.Empty;
                string comprobanteId = string.Empty;

                #endregion
                #region Validaciones
                if (!isGiroAsociado)
                {
                    DTO_ccReintegroSaldo rSaldo = (DTO_ccReintegroSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccReintegroSaldo, reintegroSaldo, true, false);
                    if(string.IsNullOrWhiteSpace(rSaldo.CoDocumentoID.Value))
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Cc_ReintegroNoDoc + "&&" + reintegroSaldo.Trim();
                        results.Add(result);
                        return results;
                    }

                    DTO_coDocumento coDocReintegro = (DTO_coDocumento)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coDocumento, rSaldo.CoDocumentoID.Value, true, false);
                    if(string.IsNullOrWhiteSpace(coDocReintegro.CuentaLOC.Value))
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Co_DocNoCta + "&&" + coDocReintegro.ID.Value.Trim();
                        results.Add(result);
                        return results;   
                    }

                    if (string.IsNullOrWhiteSpace(coDocReintegro.ComprobanteID.Value))
                    {
                        isValid = false;
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_InvalidCompDoc;
                        results.Add(result);
                        return results;
                    }

                    cuentaReintegro = coDocReintegro.CuentaLOC.Value;
                    comprobanteId = coDocReintegro.ComprobanteID.Value;
                }
                #endregion
                #region Borra la informacion de la tabla para agregarla nuevamente

                // La lista de detalles esta disponible para la opción de pagos especiales 
                List<int> docsAnula = new List<int>();
                List<DTO_ccReintegroClienteDeta> reintegroTemp = reintegrosClientes.Where(x => x.Detalle.Count > 0).ToList();
                if (reintegroTemp.Count > 0)
                {
                    #region Pagos Especiales
                    foreach (DTO_ccReintegroClienteDeta item in reintegroTemp)
                    {
                        DTO_ccReintegroClienteDeta temp = item.Detalle.Find(x => x.NumeroDoc.Value.Value != 0);
                        if (temp != null)
                        {
                            int numDocOld = temp.NumeroDoc.Value.Value;
                            docsAnula.Add(numDocOld);

                            // Borra la info previa
                            this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_Delete(temp.NumeroDoc.Value.Value);
                            break;
                        }
                    }
                    #endregion
                }
                else
                {
                    #region Reintegros y ajustes

                    // Borra la info previa
                    var item = reintegrosClientes.FirstOrDefault(r => r.NumeroDoc != null && r.NumeroDoc.Value.HasValue && r.NumeroDoc.Value.Value != 0);
                    if (item != null)
                    {
                        docsAnula.Add(item.NumeroDoc.Value.Value);
                        this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_Delete(item.NumeroDoc.Value.Value);
                    }

                    #endregion
                }

                //Anula  los documentos previos
                if(docsAnula.Count > 0)
                    this._moduloGlobal.glDocumentoControl_Anular(documentID, docsAnula, new Dictionary<Tuple<int, int>, int>(), true);

                #endregion
                #region Crea glDocumentoControl
                ctrlNew = new DTO_glDocumentoControl();
                ctrlNew.DocumentoNro.Value = 0;
                ctrlNew.DocumentoID.Value = documentID;
                ctrlNew.LugarGeograficoID.Value = defLugarGeografico;
                ctrlNew.NumeroDoc.Value = 0;
                ctrlNew.DocumentoTipo.Value = (byte)DocumentoTipo.DocInterno;
                ctrlNew.Fecha.Value = DateTime.Now;
                ctrlNew.FechaDoc.Value = fecha;
                ctrlNew.PeriodoDoc.Value = periodo;
                ctrlNew.PeriodoUltMov.Value = periodo;
                ctrlNew.AreaFuncionalID.Value = defArealFuncional;
                ctrlNew.PrefijoID.Value = defPrefijo;
                ctrlNew.ProyectoID.Value = defProyecto;
                ctrlNew.CentroCostoID.Value = defCentroCosto;
                ctrlNew.LineaPresupuestoID.Value = defLineaPresupuesto;
                ctrlNew.TerceroID.Value = terceroPorDefecto;
                ctrlNew.DocumentoTercero.Value = "RC" + fecha.ToString("yy/MM/dd");
                ctrlNew.MonedaID.Value = mdaLoc;
                ctrlNew.TasaCambioCONT.Value = tc;
                ctrlNew.TasaCambioDOCU.Value = tc;
                ctrlNew.Valor.Value = vlrTotalReintegro;
                ctrlNew.Iva.Value = 0;
                ctrlNew.Observacion.Value = "Reintegro a clientes, componente - " + reintegrosClientes[0].ComponenteCarteraID.Value;
                ctrlNew.Estado.Value = (byte)EstadoDocControl.ParaAprobacion;
                ctrlNew.seUsuarioID.Value = this.UserId;
                ctrlNew.Descripcion.Value = "Reintegro a clientes, componente - " + reintegrosClientes[0].ComponenteCarteraID.Value;

                if(!isGiroAsociado)
                {
                    ctrlNew.CuentaID.Value = cuentaReintegro;
                    ctrlNew.ComprobanteID.Value = comprobanteId;
                }

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.RecompraCartera, ctrlNew, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    results.Add(result);
                    return results;
                }
                int numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrlNew.NumeroDoc.Value = numDocNew;
                #endregion
                #region Guarda el detalle de los reintegros
                foreach (DTO_ccReintegroClienteDeta reintegroCliente in reintegrosClientes)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / reintegrosClientes.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    if (reintegroCliente.Aprobado.Value.Value)
                    {
                        #region Asigna el nuevo flujo y actualiza el estado del documento

                        result = this.AsignarFlujo(documentID, numDocNew, actFlujoID, false, string.Empty);
                        if (result.Result == ResultValue.NOK)
                        {
                            isValid = false;
                            results.Add(result);
                            return results;
                        }

                        #endregion
                        #region Agrega la info en ccReintegroClienteDeta
                        if (reintegroCliente.Detalle.Count > 0)
                        {
                            foreach (DTO_ccReintegroClienteDeta item in reintegroCliente.Detalle)
                            {
                                item.NumeroDoc.Value = numDocNew;

                                item.FechaReintegro.Value = fecha;
                                this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_Add(item);
                            }
                        }
                        else
                        {
                            reintegroCliente.NumeroDoc.Value = numDocNew;
                            reintegroCliente.FechaReintegro.Value = fecha;
                            reintegroCliente.FechaAprobacionReintegro.Value = null;
                            this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_Add(reintegroCliente);
                        }
                        #endregion
                        #region Carga los resultados
                        if (result.Result == ResultValue.NOK)
                        {
                            isValid = false;
                            results.Add(result);
                        }
                        else
                        {
                            DTO_Alarma alarma = new DTO_Alarma();
                            if (reintegroCliente.NumDocCredito.Value.HasValue)
                            {
                                alarma = this.GetFirstMailInfo(reintegroCliente.NumDocCredito.Value.Value, false);
                                alarma.NumeroDoc = numDocNew.ToString();
                            }
                            results.Add(alarma);
                        }
                        #endregion
                    }
                }
                #endregion
                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReintegroClientes_Add");
                results.Add(result);
                return results;
            }
            finally
            {
                if (isValid)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrlNew.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlNew.PrefijoID.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlNew, true, false, false);
                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Funcion que trae los creditos para la aprobacion del reintegro a los clientes
        /// </summary>
        /// <param name="componenteCarteraID">Componente que se esta consultando</param>
        /// <param name="actFlujoID">Actividad de flujo del documento</param>
        /// <returns>Retorna una lista con los creditos que poseen saldo en el componente especificado</returns>
        public List<DTO_ccReintegroClienteDeta> ReintegroClientes_GetAprobByCuenta(string actFlujoID, string cuentaID)
        {
            try
            {
                this._dal_ccReintegroClienteDeta = (DAL_ccReintegroClienteDeta)base.GetInstance(typeof(DAL_ccReintegroClienteDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_ccReintegroClienteDeta> reintegrosCartera = this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_GetByCuentaForAprob(actFlujoID, cuentaID);

                return reintegrosCartera;

            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "ReintegroClientes_GetAprobByCuenta");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que genera un nuevo documento de reintegro a clientes con su detalle
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="reintegrosClientes">Lista de los reintegros a realizar</param>
        /// <returns></returns>
        public List<DTO_SerializedObject> ReintegroClientes_AprobarGiro(int documentID, string actFlujoID, string headerRsx,
            List<DTO_ccReintegroClienteDeta> reintegrosClientes, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            #region Variables Generales
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            DTO_glDocumentoControl ctrlReintegro = null;
            //List<DTO_FacturaCartera> facturasCartera = new List<DTO_FacturaCartera>();
            List<DTO_MigrarFacturaVenta> facturasCartera = new List<DTO_MigrarFacturaVenta>();

            string fileName;
            string path = this.GetCvsName(ExportType.Csv, out fileName);

            #endregion
            try
            {
                string facturaTipo = this.GetControlValueByCompany(ModulesPrefix.fa, AppControl.fa_TipoFacturaxDefecto);
                int i = 0;
                foreach (DTO_ccReintegroClienteDeta reintegroCliente in reintegrosClientes)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / reintegrosClientes.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    if (reintegroCliente.Aprobado.Value.Value)
                    {
                        #region Aprobar

                        if (ctrlReintegro == null)
                            ctrlReintegro = this._moduloGlobal.glDocumentoControl_GetByID(reintegroCliente.NumeroDoc.Value.Value);
                        
                        result = this.ReintegroClientes_GuardarAprobacionGiro(documentID, actFlujoID, reintegroCliente, ctrlReintegro, false);
                        if (result.Result == ResultValue.NOK)
                            results.Add(result);
                        else
                        {
                            #region Carga el DTO a exportar
                            DTO_coTercero coTercero = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, reintegroCliente.TerceroID.Value, true, false);
                            DTO_ccCarteraComponente compCartera = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, reintegroCliente.ComponenteCarteraID.Value, true, false);
                            DTO_MigrarFacturaVenta facturaCartera = new DTO_MigrarFacturaVenta();
                            //facturaCartera.FacturaTipoID.Value = facturaTipo;
                            facturaCartera.PrefijoID.Value = ctrlReintegro.PrefijoID.Value;
                            facturaCartera.FacturaItem.Value = i;
                            facturaCartera.Fecha.Value = reintegroCliente.FechaAprobacionReintegro.Value;
                            facturaCartera.ClienteID.Value = reintegroCliente.ClienteID.Value;
                            facturaCartera.ProyectoID.Value = ctrlReintegro.ProyectoID.Value;
                            facturaCartera.CentroCostoID.Value = ctrlReintegro.CentroCostoID.Value;
                            facturaCartera.Moneda.Value = ctrlReintegro.MonedaID.Value;
                            //facturaCartera.AsesorID.Value = compCartera
                            facturaCartera.ServicioID.Value = compCartera != null ? compCartera.ServicioID.Value : null;
                            facturaCartera.Descripcion.Value = compCartera != null ? compCartera.Descriptivo.Value : null;
                            facturaCartera.Cantidad.Value = 1;
                            facturaCartera.Valor.Value = reintegroCliente.Valor.Value;
                            facturaCartera.Iva.Value = 0;
                            facturaCartera.TerceroID.Value = coTercero.ID.Value;
                            facturaCartera.Apellido1.Value = coTercero.ApellidoPri.Value;
                            facturaCartera.Apellido2.Value = coTercero.ApellidoSdo.Value;
                            facturaCartera.Nombre1.Value = coTercero.NombrePri.Value;
                            facturaCartera.Nombre2.Value = coTercero.NombreSdo.Value;
                            facturaCartera.Ciudad.Value = coTercero.LugarGeograficoID.Value;
                            facturaCartera.RegFiscal.Value = coTercero.ReferenciaID.Value;
                            facturaCartera.ActEconomicaID.Value = coTercero.ActEconomicaID.Value;
                            facturaCartera.TipoDocumento.Value = coTercero.TerceroDocTipoID.Value;
                            facturaCartera.Direccion.Value = coTercero.Direccion.Value;
                            facturaCartera.Telefono.Value = coTercero.Tel1.Value;
                            facturaCartera.CorreoElectronico.Value = coTercero.CECorporativo.Value;
                            facturaCartera.AutoRetenedorInd.Value = coTercero.AutoRetRentaInd.Value;
                            facturaCartera.AutoRetenedorIVAInd.Value = coTercero.AutoRetIVAInd.Value;
                            facturaCartera.DeclaraIVAInd.Value = coTercero.DeclaraIVAInd.Value;
                            facturaCartera.DeclaraRentaInd.Value = coTercero.DeclaraRentaInd.Value;
                            facturaCartera.IndependienteEMPInd.Value = coTercero.IndependienteEMPInd.Value;
                            facturaCartera.ExcluyeCREEInd.Value = coTercero.ExcluyeCREEInd.Value;

                            facturasCartera.Add(facturaCartera);
                            #endregion

                            if (string.IsNullOrWhiteSpace(reintegroCliente.CuentaID.Value))
                            {
                                DTO_Alarma alarma = this.GetFirstMailInfo(ctrlReintegro.NumeroDoc.Value.Value, false);
                                alarma.NumeroDoc = reintegroCliente.NumDocCxP.Value.ToString();
                                alarma.FileName = fileName;
                                results.Add(alarma);
                            }
                            else 
                            { 
                                results.Add(result); 
                            }
                        }
                        #endregion
                    }
                }

                if (result.Result == ResultValue.OK)
                {
                    List<string> excludeCols = new List<string>();
                    excludeCols.Add("FacturaTipoID");

                    CsvExport<DTO_MigrarFacturaVenta> csv = new CsvExport<DTO_MigrarFacturaVenta>(facturasCartera);
                    csv.ExportToFile(path, ExportType.Csv, false, headerRsx, excludeCols);
                }
                return results;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReintegroClientes_Aprobacion");
                results.Add(result);
                return results;
            }
        }

        /// <summary>
        /// Funcion que genera un nuevo documento de reintegro a clientes con su detalle
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="reintegrosClientes">Lista de los reintegros a realizar</param>
        /// <returns></returns>
        public List<DTO_SerializedObject> ReintegroClientes_AprobarAjuste(int documentID, string actFlujoID, string headerRsx,
            List<DTO_ccReintegroClienteDeta> reintegrosClientes, Dictionary<Tuple<int, int>, int> batchProgress, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            #region Variables Generales
            this._dal_ccReintegroClienteDeta = (DAL_ccReintegroClienteDeta)base.GetInstance(typeof(DAL_ccReintegroClienteDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            DTO_glDocumentoControl ctrlReintegro = null;
            DTO_coComprobante coComp = null;
            DTO_Comprobante comprobante = new DTO_Comprobante();
            #endregion
            try
            {
                #region Variables

                //Variables por defecto
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);

                //Variables de valores y fechas
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                DateTime fecha = reintegrosClientes.First().FechaAprobacionReintegro.Value.Value;

                string fileName;
                string path = this.GetCvsName(ExportType.Csv, out fileName);
                List<DTO_MigrarFacturaVenta> facturasCartera = new List<DTO_MigrarFacturaVenta>();

                string facturaTipo = this.GetControlValueByCompany(ModulesPrefix.fa, AppControl.fa_TipoFacturaxDefecto);

                int i = 0;

                #endregion                
                #region carga y actualiza el estado del documento
               
                //Actualiza el estado y el flujo
                int numeroDoc = reintegrosClientes.First().NumeroDoc.Value.Value;
                this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, numeroDoc, EstadoDocControl.Aprobado, string.Empty, true);
                result = this.AsignarFlujo(documentID, numeroDoc, actFlujoID, false, string.Empty);
                if (result.Result == ResultValue.NOK)
                {
                    results.Add(result);
                    return results;
                }

                //Actualiza el documento
                ctrlReintegro = this._moduloGlobal.glDocumentoControl_GetByID(numeroDoc);
                ctrlReintegro.FechaDoc.Value = fecha;
                ctrlReintegro.DocumentoNro.Value = numeroDoc;
                
                //Comprobante
                coComp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, ctrlReintegro.ComprobanteID.Value, true, false);
                comprobante.Footer = new List<DTO_ComprobanteFooter>();

                #endregion
                #region Carga el cabezote del comprobante

                DTO_ComprobanteHeader compHeader = new DTO_ComprobanteHeader();
                compHeader.ComprobanteID.Value = coComp.ID.Value;
                compHeader.ComprobanteNro.Value = 0;
                compHeader.EmpresaID.Value = this.Empresa.ID.Value;
                compHeader.Fecha.Value = fecha;
                compHeader.NumeroDoc.Value = ctrlReintegro.NumeroDoc.Value;
                compHeader.MdaOrigen.Value = (byte)TipoMoneda_LocExt.Local;
                compHeader.MdaTransacc.Value = ctrlReintegro.MonedaID.Value;
                compHeader.PeriodoID.Value = periodo;
                compHeader.TasaCambioBase.Value = 0;
                compHeader.TasaCambioOtr.Value = 0;

                comprobante.Header = compHeader;

                #endregion
                #region Actualiza los reintegros y agrega los detalles al footer
                foreach (DTO_ccReintegroClienteDeta reintegroCliente in reintegrosClientes)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / reintegrosClientes.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    #region Actualiza el reintegro, el documento control y asigna el flujo

                    //Actualiza la infor del reintegro
                    reintegroCliente.FechaAprobacionReintegro.Value = fecha;
                    this._dal_ccReintegroClienteDeta.DAL_ccReintegroClienteDeta_Update(reintegroCliente);

                    #endregion
                    #region Carga el footer del comprobante
                    ctrlReintegro.TerceroID.Value = reintegroCliente.TerceroID.Value;
                    ctrlReintegro.Valor.Value = Math.Abs(reintegroCliente.Valor.Value.Value);

                    DTO_coPlanCuenta cta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, reintegroCliente.CuentaID.Value, true, false);
                    DTO_glConceptoSaldo cSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, cta.ConceptoSaldoID.Value, true, false);

                    DTO_ComprobanteFooter partida = this.CrearComprobanteFooter(ctrlReintegro, cta, cSaldo, 0, concCargoXdef, lgXdef, lineaXdef, Math.Abs(ctrlReintegro.Valor.Value.Value), 0, false);
                    partida.Descriptivo.Value = "Cancela Tercero (" + reintegroCliente.TerceroID.Value.Trim() + ") Cuenta (" + reintegroCliente.CuentaID.Value.Trim() + ")";
                    comprobante.Footer.Add(partida);

                    DTO_ComprobanteFooter contra = this.CrearComprobanteFooter(ctrlReintegro, 0, concCargoXdef, lgXdef, lineaXdef, partida.vlrMdaLoc.Value.Value * -1, partida.vlrMdaExt.Value.Value * -1, false);
                    contra.Descriptivo.Value = "Cancela Tercero (" + reintegroCliente.TerceroID.Value.Trim() + ") Cuenta (" + reintegroCliente.CuentaID.Value.Trim() + ")";
                    comprobante.Footer.Add(contra);

                    #endregion
                    #region Carga la lista de facturas
                    DTO_coTercero coTercero = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, reintegroCliente.TerceroID.Value, true, false);
                    DTO_ccCarteraComponente compCartera = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, reintegroCliente.ComponenteCarteraID.Value, true, false);
                    DTO_MigrarFacturaVenta facturaCartera = new DTO_MigrarFacturaVenta();
                    //facturaCartera.FacturaTipoID.Value = facturaTipo;
                    facturaCartera.PrefijoID.Value = ctrlReintegro.PrefijoID.Value;
                    facturaCartera.FacturaItem.Value = i;
                    facturaCartera.Fecha.Value = reintegroCliente.FechaAprobacionReintegro.Value;
                    facturaCartera.ClienteID.Value = reintegroCliente.ClienteID.Value;
                    facturaCartera.ProyectoID.Value = ctrlReintegro.ProyectoID.Value;
                    facturaCartera.CentroCostoID.Value = ctrlReintegro.CentroCostoID.Value;
                    facturaCartera.Moneda.Value = ctrlReintegro.MonedaID.Value;
                    //facturaCartera.AsesorID.Value = compCartera
                    facturaCartera.ServicioID.Value = compCartera != null ? compCartera.ServicioID.Value : null;
                    facturaCartera.Descripcion.Value = compCartera != null ? compCartera.Descriptivo.Value : null;
                    facturaCartera.Cantidad.Value = 1;
                    facturaCartera.Valor.Value = reintegroCliente.Valor.Value;
                    facturaCartera.Iva.Value = 0;
                    facturaCartera.TerceroID.Value = coTercero.ID.Value;
                    facturaCartera.Apellido1.Value = coTercero.ApellidoPri.Value;
                    facturaCartera.Apellido2.Value = coTercero.ApellidoSdo.Value;
                    facturaCartera.Nombre1.Value = coTercero.NombrePri.Value;
                    facturaCartera.Nombre2.Value = coTercero.NombreSdo.Value;
                    facturaCartera.Ciudad.Value = coTercero.LugarGeograficoID.Value;
                    facturaCartera.RegFiscal.Value = coTercero.ReferenciaID.Value;
                    facturaCartera.ActEconomicaID.Value = coTercero.ActEconomicaID.Value;
                    facturaCartera.TipoDocumento.Value = coTercero.TerceroDocTipoID.Value;
                    facturaCartera.Direccion.Value = coTercero.Direccion.Value;
                    facturaCartera.Telefono.Value = coTercero.Tel1.Value;
                    facturaCartera.CorreoElectronico.Value = coTercero.CECorporativo.Value;
                    facturaCartera.AutoRetenedorInd.Value = coTercero.AutoRetRentaInd.Value;
                    facturaCartera.AutoRetenedorIVAInd.Value = coTercero.AutoRetIVAInd.Value;
                    facturaCartera.DeclaraIVAInd.Value = coTercero.DeclaraIVAInd.Value;
                    facturaCartera.DeclaraRentaInd.Value = coTercero.DeclaraRentaInd.Value;
                    facturaCartera.IndependienteEMPInd.Value = coTercero.IndependienteEMPInd.Value;
                    facturaCartera.ExcluyeCREEInd.Value = coTercero.ExcluyeCREEInd.Value;

                    facturasCartera.Add(facturaCartera);
                    #endregion
                }
                #endregion
                #region Contabiliza el comprobante

                result = this._moduloContabilidad.ContabilizarComprobante(ctrlReintegro.DocumentoID.Value.Value, comprobante, periodo, ModulesPrefix.cc, 0, false);
                if (result.Result == ResultValue.NOK)
                {
                    results.Add(result);
                    return results;
                }

                #endregion
                #region Asigna el flujo y Actualiza el estado del documento

                //Actualiza el estado del documento
                this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, numeroDoc, EstadoDocControl.Aprobado, string.Empty, true);

                //Asigna el flujo del reintegro
                result = this.AsignarFlujo(documentID, numeroDoc, actFlujoID, false, string.Empty);
                if (result.Result == ResultValue.NOK)
                {
                    results.Add(result);
                    return results;
                }

                #endregion
                #region Carga la alarma
                if (result.Result == ResultValue.NOK)
                    results.Add(result);
                else
                {
                    if (string.IsNullOrWhiteSpace(ctrlReintegro.CuentaID.Value))
                    {
                        DTO_Alarma alarma = this.GetFirstMailInfo(ctrlReintegro.NumeroDoc.Value.Value, false);
                        alarma.NumeroDoc = numeroDoc.ToString();
                        alarma.FileName = fileName;
                        results.Add(alarma);
                    }
                    else
                    {
                        results.Add(result);
                    }
                }
                #endregion

                if (result.Result == ResultValue.OK)
                {
                    List<string> excludeCols = new List<string>();
                    excludeCols.Add("FacturaTipoID");

                    CsvExport<DTO_MigrarFacturaVenta> csv = new CsvExport<DTO_MigrarFacturaVenta>(facturasCartera);
                    csv.ExportToFile(path, ExportType.Csv, false, headerRsx, excludeCols);
                }
                return results;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReintegroClientes_Aprobacion");
                results.Add(result);
                return results;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrlReintegro.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlReintegro.PrefijoID.Value, ctrlReintegro.PeriodoDoc.Value.Value, ctrlReintegro.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlReintegro, false, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlReintegro.NumeroDoc.Value.Value, ctrlReintegro.ComprobanteIDNro.Value.Value, false);

                        #endregion
                    }
                    else
                        throw new Exception("ReintegroClientes_AprobarAjuste - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }

        }

        #endregion

        #endregion

        #endregion

        #region Sustituciones

        #region Funciones Privadas

        private DTO_ccCreditoDocu SustitucionCreditos_GetCreditoOrigen(int numeroDoc, string compradorPropio)
        {
            try 
            {
                DTO_ccCreditoDocu credito = this.GetCreditoByNumeroDoc(numeroDoc);
                if (!string.IsNullOrWhiteSpace(credito.CompradorCarteraID.Value) && credito.CompradorCarteraID.Value != compradorPropio)
                    return credito;

                if (!credito.DocSustituye.Value.HasValue)
                    return null;

                return this.SustitucionCreditos_GetCreditoOrigen(credito.DocSustituye.Value.Value, compradorPropio);
            }
            catch(Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SustitucionCreditos_GetCreditoOrigen");
                return null;
            }
        }

        #endregion

        #region Funciones públicas

        /// <summary>
        /// Valida que la información basica de la sustitución de créditos
        /// </summary>
        /// <param name="documentID">Documento que ejecuta el proceso</param>
        /// <param name="data">Información a migrar</param>
        /// <returns></returns>
        public DTO_TxResult SustitucionCreditos_Validar(int documentID, DateTime fecha, ref List<DTO_ccSustitucionCreditos> data, Dictionary<Tuple<int, int>, int> batchProgress)
        {            
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;
            try
            {
                #region Variables
   
                this._dal_ccRecompraDeta = (DAL_ccRecompraDeta)base.GetInstance(typeof(DAL_ccRecompraDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccFlujoCesionDeta = (DAL_ccFlujoCesionDeta)base.GetInstance(typeof(DAL_ccFlujoCesionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccVentaDeta = (DAL_ccVentaDeta)base.GetInstance(typeof(DAL_ccVentaDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                // Variables de control
                string compradorPropio = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoCarteraPropia);
                string componenteMora = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);

                //Diccionarios de créditos a sustituir
                Dictionary<int, int> posicionesCreditos = new Dictionary<int, int>(); 
                Dictionary<int, string> errores = new Dictionary<int, string>(); 
                Dictionary<int, int> cuotasFlujosPagados = new Dictionary<int, int>();
                Dictionary<int, int> cuotasFlujosPendientes = new Dictionary<int, int>();
                Dictionary<int, decimal> saldoFlujos = new Dictionary<int, decimal>();
                Dictionary<int, decimal> abonoFlujos = new Dictionary<int, decimal>();
                //Diccionarios de créditos que sustituyen
                Dictionary<int, decimal> saldoPendienteSustituye = new Dictionary<int, decimal>();
                Dictionary<int, int> cuotasPendientesSustituye = new Dictionary<int, int>();

                //Manejo de porcentajes para la aprobacion
                int percent = 0;
                DTO_TxResultDetail rd = new DTO_TxResultDetail();

                #endregion
                #region Valida los creditos a sustituir
                for (int i = 0; i < data.Count; ++i)
                {
                    #region Barra de progreso
                    //Manejo de porcentajes para la aprobacion
                    percent = (i * 100) / data.Count;
                    batchProgress[tupProgress] = percent;

                    rd = new DTO_TxResultDetail();
                    rd.DetailsFields = new List<DTO_TxResultDetailFields>();
                    rd.line = i + 1;
                    #endregion

                    int libranza = data[i].Libranza.Value.Value;
                    if(!posicionesCreditos.ContainsKey(libranza))
                    {
                        #region Inicia los diccionarios
                        posicionesCreditos[libranza] = i;
                        errores[libranza] = string.Empty;
                        cuotasFlujosPendientes[libranza] = 0;
                        cuotasFlujosPagados[libranza] = 0;
                        saldoFlujos[libranza] = 0;
                        abonoFlujos[libranza] = 0;
                        #endregion
                        #region Valida que exista el crédito
                        DTO_ccCreditoDocu credito = this.GetCreditoByLibranza(libranza);
                        if (credito == null)
                            rd.Message = DictionaryMessages.Err_Cc_InvalidLibranza + "&&" + libranza.ToString();
                        else
                            data[i].Credito = credito;
                        #endregion
                        #region Valida que tenga doc prepago (En comentarios)
                        if (string.IsNullOrWhiteSpace(rd.Message) && !credito.DocPrepago.Value.HasValue)
                        {
                            //rd.Message = DictionaryMessages.Err_Cc_SustitucionNoPrepagado;
                        }
                        #endregion
                        #region Valida que no haya sido sustituido o que no haya sido recomprado (La recompra esta en comentarios)
                        if (string.IsNullOrWhiteSpace(rd.Message) && credito.SustituidoInd.Value != null && credito.SustituidoInd.Value.HasValue && credito.SustituidoInd.Value.Value)
                        {
                            //bool recomprado = this._dal_ccRecompraDeta.DAL_ccRecompraDeta_IsRecomprado(credito.NumeroDoc.Value.Value);
                            //if (recomprado)
                            //{
                            rd.Message = DictionaryMessages.Err_Cc_SustitucionSustituido;// Err_Cc_SustitucionSustYRecomprado;
                            //}
                        }
                        #endregion
                        #region Valida que el crédito se encuentre vendido o si es propio que este sustituyendo a otros
                        DTO_ccCreditoDocu creditoOrigen = credito;
                        if (string.IsNullOrWhiteSpace(rd.Message))
                        {
                            if (string.IsNullOrWhiteSpace(credito.CompradorCarteraID.Value) || credito.CompradorCarteraID.Value == compradorPropio)
                            {
                                if (!credito.DocSustituye.Value.HasValue)
                                {
                                    DTO_glDocumentoControl ctrlSustituye = this._moduloGlobal.glDocumentoControl_GetByID(credito.DocSustituye.Value.Value);
                                    if (ctrlSustituye.Estado.Value == (byte)EstadoDocControl.Anulado)
                                        rd.Message = DictionaryMessages.Err_Cc_SustitucionVendido;
                                    else
                                        creditoOrigen = this.SustitucionCreditos_GetCreditoOrigen(credito.DocSustituye.Value.Value, compradorPropio);
                                }
                            }
                        }
                        #endregion
                        #region Valida que tenga flujos pendientes

                        if (string.IsNullOrWhiteSpace(rd.Message))
                        {

                            //El credito origen corresponde al primer crédito vendido
                            if (creditoOrigen == null)
                                rd.Message = DictionaryMessages.Err_Cc_SustitucionNoFlujo;
                            else
                            {
                                //Trae los flujos pagados
                                int flujosPagados = 0;
                                decimal saldo = this._dal_ccFlujoCesionDeta.DAL_ccFlujoCesionDeta_GetSaldo(creditoOrigen.NumeroDoc.Value.Value, out flujosPagados);
                                saldoFlujos[libranza] = saldo;
                                cuotasFlujosPagados[libranza] = flujosPagados;
                                
                                if (saldo <= 0)
                                    rd.Message = DictionaryMessages.Err_Cc_SustitucionNoFlujo;

                                //Trae los flujos pendientes
                                DTO_ccVentaDeta venta = this._dal_ccVentaDeta.DAL_ccVentaDeta_GetByNumDocLibranza(credito.NumeroDoc.Value.Value);
                                cuotasFlujosPendientes[libranza] = venta.CuotasVend.Value.Value - flujosPagados;
                            }
                        }

                        #endregion

                        errores[libranza] = rd.Message;
                    }
                    else if(!string.IsNullOrWhiteSpace(errores[libranza]))
                    {
                        rd.Message = errores[libranza];
                    }

                    //Carga los errores
                    if (!string.IsNullOrWhiteSpace(rd.Message))
                    {
                        result.Details.Add(rd);
                        result.Result = ResultValue.NOK;
                    }
                }

                if (result.Result == ResultValue.NOK)
                    return result;

                #endregion
                #region Valida los creditos que estan sustituyendo

                for (int i = 0; i < data.Count; ++i)
                {
                    int libranzaSustituye = data[i].LibranzaSustituye.Value.Value;
                    #region Barra de progreso
                    //Manejo de porcentajes para la aprobacion
                    percent = (i * 100) / data.Count;
                    batchProgress[tupProgress] = percent;

                    rd = new DTO_TxResultDetail();
                    rd.DetailsFields = new List<DTO_TxResultDetailFields>();
                    rd.line = i + 1;
                    #endregion
                    #region Valida que exista el crédito
                    DTO_ccCreditoDocu creditoSustituye = this.GetCreditoByLibranza(libranzaSustituye);
                    if (creditoSustituye == null)
                        rd.Message = DictionaryMessages.Err_Cc_SustitucionInvalidLibranza + "&&" + libranzaSustituye.ToString();
                    else
                        data[i].CreditoSustituye = creditoSustituye;
                    #endregion
                    #region Valida que el crédito sea propio

                    if (string.IsNullOrWhiteSpace(rd.Message) && !string.IsNullOrWhiteSpace(creditoSustituye.CompradorCarteraID.Value) && creditoSustituye.CompradorCarteraID.Value != compradorPropio)
                    {
                        if (creditoSustituye.DocSustituye.Value != null)
                            rd.Message = DictionaryMessages.Err_Cc_SustitucionPropio;
                    }

                    #endregion
                    #region Valida el saldo y que no se encuentre en mora

                    if (string.IsNullOrWhiteSpace(rd.Message))
                    {
                        DTO_InfoCredito infoSustituye = this.GetSaldoCredito(creditoSustituye.NumeroDoc.Value.Value, fecha, true, false, false);

                        //Valida que no este en mora
                        int countMora = infoSustituye.SaldosComponentes.Count(s => s.ComponenteCarteraID.Value == componenteMora);
                        if (countMora > 0)
                            rd.Message = DictionaryMessages.Err_Cc_SustitucionMora;
                        else
                        {
                            saldoPendienteSustituye[libranzaSustituye] = infoSustituye.SaldosComponentes.Sum(s => s.CuotaSaldo.Value.Value);
                            cuotasPendientesSustituye[libranzaSustituye] = infoSustituye.SaldosComponentes.Select(sel => sel.CuotaID.Value.Value).Distinct().Count();
                        }
                    }

                    #endregion

                    //Carga los errores
                    if (!string.IsNullOrWhiteSpace(rd.Message))
                    {
                        result.Details.Add(rd);
                        result.Result = ResultValue.NOK;
                    }
                }

                if (result.Result == ResultValue.NOK)
                    return result;

                #endregion
                #region Valida las relaciones entre los créditos a sustitur y los que sustituyen

                int index = 0;
                foreach (KeyValuePair<int, int> credito in posicionesCreditos)
                {
                    #region Barra de progreso
                    //Manejo de porcentajes para la aprobacion
                    percent = (index * 100) / posicionesCreditos.Count;
                    batchProgress[tupProgress] = percent;

                    rd = new DTO_TxResultDetail();
                    rd.DetailsFields = new List<DTO_TxResultDetailFields>();
                    rd.line = credito.Value + 1;

                    index++;
                    #endregion
                    #region Trae los créditos que sustituyen
                    List<DTO_ccSustitucionCreditos> sustituyen = data.Where(c => c.Libranza.Value == credito.Key).ToList();
                    decimal cuotasPendientesTotal = 0;
                    decimal saldoPendienteTotal = 0;
                    foreach(DTO_ccSustitucionCreditos sust in sustituyen)
                    {
                        cuotasPendientesTotal += cuotasPendientesSustituye[sust.LibranzaSustituye.Value.Value];
                        saldoPendienteTotal += saldoPendienteSustituye[sust.LibranzaSustituye.Value.Value];
                    }
                    #endregion
                    #region Valida que el número de cuotas de los créditos que sustituyen sea mayor o igual que el credito a sustituir
                    if (cuotasPendientesTotal < cuotasFlujosPendientes[credito.Key])
                    {
                        rd.Message = DictionaryMessages.Err_Cc_SustitucionCuotasPendientes + "&&" + credito.Key.ToString();
                    }
                    #endregion
                    #region Valida que el saldo de los créditos que sustituyen sea mayor o igual que el credito a sustituir
                    if (string.IsNullOrWhiteSpace(rd.Message) && saldoPendienteTotal < saldoFlujos[credito.Key])
                    {
                        rd.Message = DictionaryMessages.Err_Cc_SustitucionSaldoPendiente + "&&" + credito.Key.ToString();
                    }
                    #endregion

                    //Carga los errores
                    if (!string.IsNullOrWhiteSpace(rd.Message))
                    {
                        result.Details.Add(rd);
                        result.Result = ResultValue.NOK;
                    }
                }

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SustitucionCreditos_Validar");
                return result;
            }
        }

        /// <summary>
        /// Procesa la sustitución de créditos
        /// </summary>
        /// <param name="documentID">Documento que ejecuta el proceso</param>
        /// <param name="data">Información a migrar</param>
        /// <returns></returns>
        public DTO_TxResult SustitucionCreditos_Procesar(int documentID, DateTime fecha, List<DTO_ccSustitucionCreditos> data, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;
            DTO_glDocumentoControl ctrlNew = null;
            try
            {
                #region Variables

                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                //Manejo de porcentajes para la aprobacion
                int percent = 0;
                DTO_TxResultDetail rd = new DTO_TxResultDetail();

                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string defLineaPresupuesto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                string defLugarGeografico = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string concCargoXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ConceptoCargoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);

                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                decimal tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, fecha);

                int numDocNew = 0;
                #endregion
                #region Crea glDocumentoControl
                ctrlNew = new DTO_glDocumentoControl();
                ctrlNew.DocumentoNro.Value = 0;
                ctrlNew.DocumentoID.Value = documentID;
                ctrlNew.LugarGeograficoID.Value = defLugarGeografico;
                ctrlNew.NumeroDoc.Value = 0;
                ctrlNew.DocumentoTipo.Value = (byte)DocumentoTipo.DocInterno;
                ctrlNew.Fecha.Value = DateTime.Now;
                ctrlNew.FechaDoc.Value = fecha;
                ctrlNew.PeriodoDoc.Value = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));
                ctrlNew.PeriodoUltMov.Value = ctrlNew.PeriodoDoc.Value;
                ctrlNew.AreaFuncionalID.Value = defArealFuncional;
                ctrlNew.PrefijoID.Value = defPrefijo;
                ctrlNew.ProyectoID.Value = defProyecto;
                ctrlNew.CentroCostoID.Value = defCentroCosto;
                ctrlNew.LineaPresupuestoID.Value = defLineaPresupuesto;
                ctrlNew.TerceroID.Value = string.Empty;
                ctrlNew.DocumentoTercero.Value = string.Empty;
                ctrlNew.MonedaID.Value = mdaLoc;
                ctrlNew.TasaCambioCONT.Value = tc;
                ctrlNew.TasaCambioDOCU.Value = tc;
                ctrlNew.Observacion.Value = string.Empty;
                ctrlNew.Estado.Value = (byte)EstadoDocControl.ParaAprobacion;
                ctrlNew.seUsuarioID.Value = this.UserId;
                ctrlNew.Descripcion.Value = "Sustitución de créditos cedidos";
                ctrlNew.Valor.Value = 0;
                ctrlNew.Iva.Value = 0;

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(AppDocuments.Preventa, ctrlNew, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);

                    return result;
                }

                numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrlNew.NumeroDoc.Value = numDocNew;
                #endregion
                #region Actualiza los documentos
                for (int i = 0; i < data.Count; ++i)
                {
                    #region Barra de progreso
                   
                    //Manejo de porcentajes para la aprobacion
                    percent = (i * 100) / data.Count;
                    batchProgress[tupProgress] = percent;

                    rd = new DTO_TxResultDetail();
                    rd.DetailsFields = new List<DTO_TxResultDetailFields>();
                    rd.line = i + 1;
                    #endregion
                    #region Actualiza el crédito a sustituir

                    data[i].Credito.SustituidoInd.Value = true;
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(data[i].Credito);

                    #endregion
                    #region Actualiza el crédito que sustituye

                    data[i].CreditoSustituye.DocSustituye.Value = data[i].Credito.NumeroDoc.Value;
                    this._dal_ccCreditoDocu.DAL_ccCreditoDocu_Update(data[i].CreditoSustituye);

                    #endregion
                }

                #endregion

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "SustitucionCreditos_Validar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera consecutivos
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;

                        ctrlNew.DocumentoNro.Value = this.GenerarDocumentoNro(ctrlNew.DocumentoID.Value.Value, ctrlNew.PrefijoID.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlNew, true, false, false);
                        #endregion
                    }
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #endregion

        #region Liquidacion Comisiones

        #region Funciones Privadas


        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="documentID"></param>
        /// <param name="sol"></param>
        /// <param name="docCtrl"></param>
        private DTO_TxResult LiquidacionComisiones_Aprobar(int documentID, string actFlujoID, DTO_ccComisionDeta comiDeta, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            DTO_TxResult result = new DTO_TxResult();
            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloCxP = (ModuloCuentasXPagar)base.GetInstance(typeof(ModuloCuentasXPagar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccComisionDeta = (DAL_ccComisionDeta)base.GetInstance(typeof(DAL_ccComisionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_glDocumentoControl ctrlCxP = null;
            DTO_coComprobante coComp = null;
            DTO_Comprobante comprobante = new DTO_Comprobante();
            DTO_coPlanCuenta coPlanCta = new DTO_coPlanCuenta();
            DTO_glConceptoSaldo glConSaldo = new DTO_glConceptoSaldo();
            DTO_coCargoCosto coCargoCosto = new DTO_coCargoCosto();
            try
            {
                //Carga el glDocControl
                DTO_glDocumentoControl ctrlOld = this._moduloGlobal.glDocumentoControl_GetByID(comiDeta.NumeroDoc.Value.Value);
                #region Variables
                string lugarGeografico = ctrlOld.LugarGeograficoID.Value;
                string lineaPresupuesto = ctrlOld.LineaPresupuestoID.Value;
                string proyecto = ctrlOld.ProyectoID.Value;
                string centroCosto = ctrlOld.CentroCostoID.Value;
                string conceptoCxP = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ConceptoCXPCargoPagoComisiones);
                string concCargoComisiones = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.cc_ConceptoCargoComisiones);
                string operacion = string.Empty;
                decimal totalML = comiDeta.VlrComision.Value.Value;
                #endregion
                #region Validaciones
                //Valida que el concepto de CxP exista
                if (string.IsNullOrWhiteSpace(conceptoCxP))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ConceptoCXPCargoPagoComisiones + "&&" + string.Empty;
                    return result;
                }
                //Valida que el concepto cargo exista
                if (string.IsNullOrWhiteSpace(concCargoComisiones))
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.cc).ToString() + AppControl.cc_ConceptoCargoComisiones + "&&" + string.Empty;
                    return result;
                }
                else
                {
                    Dictionary<string, string> keys = new Dictionary<string, string>();
                    #region Trae la operacion
                    DTO_coProyecto coProyecto = (DTO_coProyecto)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coProyecto, proyecto, true, false);
                    if (coProyecto != null)
                        operacion = coProyecto.OperacionID.Value;
                    else
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.co).ToString() + AppControl.co_ProyectoXDefecto + "&&" + string.Empty;
                        return result;
                    }
                    if (String.IsNullOrWhiteSpace(operacion))
                    {
                        DTO_coCentroCosto coCentroCosto = (DTO_coCentroCosto)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coCentroCosto, centroCosto, true, false);
                        if (coCentroCosto != null)
                            operacion = coCentroCosto.OperacionID.Value;
                        else
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = DictionaryMessages.Err_ControlNoData + "&&" + ((int)ModulesPrefix.co).ToString() + AppControl.co_CentroCostoXDefecto + "&&" + string.Empty;
                            return result;
                        }
                    }
                    if (String.IsNullOrWhiteSpace(operacion))
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = DictionaryMessages.Err_Co_NoOper + "&&" + proyecto + "&&" + centroCosto;
                        return result;
                    }
                    #endregion
                    keys.Add("OperacionID", operacion);
                    keys.Add("ConceptoCargoID", concCargoComisiones);
                    keys.Add("LineapresupuestoID", lineaPresupuesto);
                    coCargoCosto = (DTO_coCargoCosto)this.GetMasterComplexDTO(AppMasters.coCargoCosto, keys, true);
                    coPlanCta = (DTO_coPlanCuenta)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coPlanCuenta, coCargoCosto.CuentaID.Value, true, false);
                    glConSaldo = (DTO_glConceptoSaldo)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.glConceptoSaldo, coPlanCta.ConceptoSaldoID.Value, true, false);

                }
                #endregion
                #region Asigna el nuevo flujo y actualiza el estado del documento
                this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, comiDeta.NumeroDoc.Value.Value, EstadoDocControl.Aprobado, string.Empty, true);
                result = this.AsignarFlujo(documentID, comiDeta.NumDocCredito.Value.Value, actFlujoID, false, string.Empty);
                if (result.Result == ResultValue.NOK)
                    return result;
                #endregion
                #region Calcula los impuestos de las comisiones
                DTO_ccAsesor asesor = (DTO_ccAsesor)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccAsesor, comiDeta.AsesorID.Value, true, false);
                DTO_coTercero coTercero = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, asesor.TerceroID.Value, true, false);
                List<DTO_SerializedObject> resultImpuestos = this._moduloContabilidad.LiquidarImpuestos(ModulesPrefix.cc, coTercero, coCargoCosto.CuentaID.Value, concCargoComisiones, operacion, lugarGeografico, lineaPresupuesto, comiDeta.VlrComision.Value.Value);
                #endregion
                #region Crea la CxP
                ctrlOld.TerceroID.Value = comiDeta.AsesorID.Value;
                ctrlOld.FechaDoc.Value = comiDeta.FechaAprobacion.Value.Value;
                #region Carga los datos del Footer
                DTO_ComprobanteFooter compFooterTemp = this.CrearComprobanteFooter(ctrlOld, coPlanCta, glConSaldo, 0, concCargoComisiones, lugarGeografico, lineaPresupuesto, totalML, 0, false);
                compFooterTemp.Descriptivo.Value = "Cancela Liquidacion Comision " + comiDeta.AsesorID.Value;
                comprobante.Footer.Add(compFooterTemp);
                #endregion
                object obj = this._moduloCxP.CuentasXPagar_Generar(ctrlOld, conceptoCxP, totalML, comprobante.Footer, ModulesPrefix.cc, false);
                if (obj.GetType() == typeof(DTO_TxResult))
                {
                    result = (DTO_TxResult)obj;
                    return result;
                }
                //Trae la CxP para actualizar los consecutivos
                ctrlCxP = (DTO_glDocumentoControl)obj;
                coComp = (DTO_coComprobante)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coComprobante, ctrlCxP.ComprobanteID.Value, true, false);
                #endregion
                #region Actualiza la solicitud o el credito
                comiDeta.NumDocCxP.Value = ctrlCxP.NumeroDoc.Value.Value;
                this._dal_ccComisionDeta.DAL_ccComisionDeta_Update(comiDeta);
                #endregion
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "LiquidacionComisiones_Aprobar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                    {
                        #region Genera el consecutivo
                        base._mySqlConnectionTx.Commit();

                        base._mySqlConnectionTx = null;
                        this._moduloGlobal._mySqlConnectionTx = null;
                        this._moduloContabilidad._mySqlConnectionTx = null;

                        ctrlCxP.ComprobanteIDNro.Value = this.GenerarComprobanteNro(coComp, ctrlCxP.PrefijoID.Value, ctrlCxP.PeriodoDoc.Value.Value, ctrlCxP.DocumentoNro.Value.Value);
                        this._moduloGlobal.ActualizaConsecutivos(ctrlCxP, false, true, false);
                        this._moduloContabilidad.ActualizaComprobanteNro(ctrlCxP.NumeroDoc.Value.Value, ctrlCxP.ComprobanteIDNro.Value.Value, false);
                        #endregion
                    }
                    else
                        throw new Exception("LiquidacionComisiones_Aprobar - Los consecutivos deben ser generados por la transaccion padre");
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Si el campo observacion en el cabezote tiene texto agrega en glDocumentoControl la nueva
        ///observacion guardando el historial de la misma.
        /// </summary>
        /// <param name="documentID"></param>
        /// <param name="sol"></param>
        /// <param name="docCtrl"></param>
        private DTO_TxResult LiquidacionComisiones_Rechazar(int documentID, string actFlujoID, DTO_ccComisionDeta comiDeta, bool insideAnotherTx)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)base.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();

            try
            {
                #region Variables
                int numDoc = comiDeta.NumeroDoc.Value.Value;
                string observacion = string.Empty;
                #endregion
                #region Cambia el estado del documento
                this._moduloGlobal.glDocumentoControl_ChangeDocumentStatus(documentID, numDoc, EstadoDocControl.Cerrado, observacion, true);
                #endregion
                #region Asigna el nuevo flujo (cancela las alarmas)
                result = this.AsignarFlujo(documentID, numDoc, actFlujoID, true, observacion);
                #endregion
                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "LiquidacionComisiones_Rechazar");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!insideAnotherTx)
                        this._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region Funciones Publicas

        /// <summary>
        /// Funcion que trae la lista con las liquidaciones de los asesores
        /// </summary>
        /// <returns>Retorna una lista con los asesores para liquidar las comisiones </returns>
        public List<DTO_ccComisionDeta> LiquidacionComisioneCarteras_GetForLiquidacion()
        {
            try
            {
                this._dal_ccComisionDeta = (DAL_ccComisionDeta)this.GetInstance(typeof(DAL_ccComisionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_ccComisionDeta> comisionDeta = new List<DTO_ccComisionDeta>();
                string periodoControl = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo);

                string diaIniStr = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_DiaUltimoCierre);
                int diaCierre = string.IsNullOrWhiteSpace(diaIniStr) ? 1 : Convert.ToInt16(diaIniStr);
                if (diaCierre == 0)
                    return comisionDeta;
               
                DateTime periodo = Convert.ToDateTime(periodoControl);
                periodo = new DateTime(periodo.Year, periodo.Month, diaCierre);
                comisionDeta = this._dal_ccComisionDeta.DAL_ccComisionDeta_GetForLiquidacion(periodo);
                return comisionDeta;
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "LiquidacionComisiones_GetForLiquidacion");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que trae la lista con las liquidaciones de los asesores
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo del documento</param>
        /// <returns>Retorna una lista con las liquidaciones de comision para aprobacion </returns>
        public List<DTO_ccComisionDeta> LiquidacionComisionesCartera_GetForAprobacion(string actFlujoID)
        {
            try
            {
                this._dal_ccComisionDeta = (DAL_ccComisionDeta)this.GetInstance(typeof(DAL_ccComisionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_ccComisionDeta> comicionesDeta = new List<DTO_ccComisionDeta>();
                comicionesDeta = this._dal_ccComisionDeta.DAL_ccComisionDeta_GetForAprobacion(actFlujoID);

                return comicionesDeta;
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "LiquidacionComisiones_GetForAprobacion");
                throw exception;
            }
        }

        /// <summary>
        /// Funcion que genera un nuevo documento de venta de cartera
        /// </summary>
        /// <param name="documentID">Id del documento</param>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="liquidaComisiones">DTO con la informacion de las liquidaciones a procesar</param>
        /// <param name="insideAnotherTx">Indicador para establecer si se encuentra dentor de otra transaccion</param>
        /// <returns></returns>
        public List<DTO_SerializedObject> LiquidacionComisionesCartera_Add(int documentID, string actFlujoID, DTO_LiquidacionComisiones liquidaComisiones, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            #region Variables Generales
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloContabilidad = (ModuloContabilidad)base.GetInstance(typeof(ModuloContabilidad), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloCxP = (ModuloCuentasXPagar)base.GetInstance(typeof(ModuloCuentasXPagar), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccComisionDocu = (DAL_ccComisionDocu)base.GetInstance(typeof(DAL_ccComisionDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccComisionDeta = (DAL_ccComisionDeta)base.GetInstance(typeof(DAL_ccComisionDeta), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            bool isValid = true;
            DTO_glDocumentoControl ctrlNew = null;
            #endregion
            try
            {
                int i = 0;
                #region Variables
                //Variables por defecto
                string defTercero = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TerceroXDefecto);
                string defArealFuncional = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_AreaFuncionalCartera);
                string defPrefijo = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_PrefijoXDefecto);
                string defProyecto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_ProyectoXDefecto);
                string defCentroCosto = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CentroCostoXDefecto);
                string lgXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LugarGeoXDefecto);
                string lineaXdef = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_LineaPresupXDefecto);
                //Vairables de valores y fechas
                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.co_Periodo));
                DateTime fecha = liquidaComisiones.ComisionDocu.FechaInicial.Value.Value;
                string mdaLoc = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_MonedaLocal);
                decimal tc = this._moduloGlobal.TasaDeCambio_Get(mdaLoc, periodo);

                int numDocNew = 0;
                #endregion
                #region Crea glDocumentoControl
                ctrlNew = new DTO_glDocumentoControl();
                ctrlNew.DocumentoNro.Value = 0;
                ctrlNew.DocumentoID.Value = documentID;
                ctrlNew.LugarGeograficoID.Value = lgXdef;
                ctrlNew.NumeroDoc.Value = 0;
                ctrlNew.DocumentoTipo.Value = (byte)DocumentoTipo.DocInterno;
                ctrlNew.Fecha.Value = DateTime.Now;
                ctrlNew.FechaDoc.Value = liquidaComisiones.ComisionDocu.FechaInicial.Value;
                ctrlNew.PeriodoDoc.Value = periodo;
                ctrlNew.PeriodoUltMov.Value = periodo;
                ctrlNew.AreaFuncionalID.Value = defArealFuncional;
                ctrlNew.PrefijoID.Value = defPrefijo;
                ctrlNew.ProyectoID.Value = defProyecto;
                ctrlNew.CentroCostoID.Value = defCentroCosto;
                ctrlNew.LineaPresupuestoID.Value = lineaXdef;
                ctrlNew.TerceroID.Value = defTercero;
                ctrlNew.MonedaID.Value = mdaLoc;
                ctrlNew.TasaCambioCONT.Value = tc;
                ctrlNew.TasaCambioDOCU.Value = tc;
                ctrlNew.Observacion.Value = string.Empty;
                ctrlNew.Estado.Value = (byte)EstadoDocControl.ParaAprobacion;
                ctrlNew.seUsuarioID.Value = this.UserId;
                ctrlNew.Descripcion.Value = "Liquidacion Comisiones";
                ctrlNew.Valor.Value = liquidaComisiones.ComisionDocu.Valor.Value;
                ctrlNew.Iva.Value = 0;

                DTO_TxResultDetail resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentID, ctrlNew, true);
                if (resultGLDC.Message != ResultValue.OK.ToString())
                {
                    isValid = false;
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = "NOK";
                    result.Details.Add(resultGLDC);
                    results.Add(result);
                    return results;
                }
                numDocNew = Convert.ToInt32(resultGLDC.Key);
                ctrlNew.NumeroDoc.Value = numDocNew;
                #endregion
                #region Agrega la info a ccComisionDocu
                liquidaComisiones.ComisionDocu.NumeroDoc.Value = numDocNew;
                this._dal_ccComisionDocu.DAL_ccComisionDocu_Add(liquidaComisiones.ComisionDocu);
                #endregion
                #region Guarda el detalle de las comisiones
                foreach (DTO_ccComisionDeta comiDeta in liquidaComisiones.ComisionDeta)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / liquidaComisiones.ComisionDeta.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    if (comiDeta.Aprobado.Value.Value)
                    {
                        #region Agrega la info en ccComisionDeta
                        comiDeta.NumeroDoc.Value = numDocNew;
                        for (int j = 0; j < comiDeta.Detalle.Count; ++j)
                        {
                            comiDeta.NumDocCredito.Value = comiDeta.Detalle[j].NumeroDoc.Value.Value;
                            comiDeta.VlrBase.Value = comiDeta.Detalle[j].VlrGiro.Value.Value;
                            comiDeta.VlrComision.Value = comiDeta.Detalle[j].VlrComision.Value.Value;
                         
                            this._dal_ccComisionDeta.DAL_ccComisionDeta_Add(comiDeta);
                            #region Asigna el nuevo flujo
                            result = this.AsignarFlujo(documentID, comiDeta.NumeroDoc.Value.Value, actFlujoID, false, string.Empty);
                            #endregion
                        }
                        #endregion
                        if (result.Result == ResultValue.NOK)
                        {
                            isValid = false;
                            results.Add(result);
                            return results;
                        }
                        else
                        {
                            DTO_Alarma alarma = this.GetFirstMailInfo(comiDeta.NumeroDoc.Value.Value, false);
                            results.Add(alarma);
                        }
                    }
                }
                #endregion
                return results;
            }
            catch (Exception ex)
            {
                isValid = false;
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "LiquidacionComisiones_Add");
                results.Add(result);
                return results;
            }
            finally
            {
                if (isValid)
                {
                    #region Genera consecutivos
                    base._mySqlConnectionTx.Commit();

                    base._mySqlConnectionTx = null;
                    this._moduloGlobal._mySqlConnectionTx = null;
                    this._moduloContabilidad._mySqlConnectionTx = null;

                    ctrlNew.DocumentoNro.Value = this.GenerarDocumentoNro(documentID, ctrlNew.PrefijoID.Value);
                    this._moduloGlobal.ActualizaConsecutivos(ctrlNew, true, true, false);
                    #endregion
                }
                else if (base._mySqlConnectionTx != null && !insideAnotherTx)
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        /// Realiza la aprobacion de la liquidacion de las comisiones
        /// </summary>
        /// <param name="actFlujoID">Actividad de flujo actual</param>
        /// <param name="documentID">Documento que ejecuta la transaccion</param>
        /// <param name="comisionesDeta">Lista de las comisiones</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public List<DTO_SerializedObject> LiquidacionComisionesCartera_AprobarRechazar(int documentID, string actFlujoID, List<DTO_ccComisionDeta> comisionesDeta, bool insideAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            if (!insideAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();
            List<DTO_SerializedObject> results = new List<DTO_SerializedObject>();

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentID);
            batchProgress[tupProgress] = 1;

            this._moduloGlobal = (ModuloGlobal)this.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            try
            {
                int i = 0;
                #region Aprueba o Rechaza las liquidaciones de comision
                foreach (DTO_ccComisionDeta comiDeta in comisionesDeta)
                {
                    //Manejo de porcentajes para la aprobacion
                    int percent = ((i + 1) * 100) / comisionesDeta.Count;
                    batchProgress[tupProgress] = percent;
                    i++;

                    result.Result = ResultValue.NOK;

                    if (comiDeta.Aprobado.Value.Value)
                    {
                        try
                        {
                            result = this.LiquidacionComisiones_Aprobar(documentID, actFlujoID, comiDeta, insideAnotherTx);
                        }
                        catch (Exception exAprob)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exAprob, this.UserId.ToString(), "LiquidacionComisiones_AprobarRechazar (Aprobar)");
                        }
                    }
                    else if (comiDeta.Rechazado.Value.Value)
                    {
                        try
                        {
                            result = this.LiquidacionComisiones_Rechazar(documentID, actFlujoID, comiDeta, insideAnotherTx);
                        }
                        catch (Exception exRech)
                        {
                            result.Result = ResultValue.NOK;
                            result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, exRech, this.UserId.ToString(), "LiquidacionComisiones_AprobarRechazar (Rechazar)");
                        }
                    }
                    else
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = string.Empty;
                    }


                    if (result.Result == ResultValue.NOK)
                        results.Add(result);
                    else
                    {
                        DTO_Alarma alarma = this.GetFirstMailInfo(comiDeta.NumDocCredito.Value.Value, false);
                        results.Add(alarma);
                    }
                }
                #endregion
                return results;
            }
            catch (Exception ex)
            {
                results.Clear();
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "LiquidacionComisiones_AprobarRechazar");
                results.Add(result);
                return results;
            }
        }

        #endregion

        #endregion

        #region Gestion Datacredito

        /// <summary>
        /// Agrega informacion a las tablas de Datacredito
        /// </summary>
        /// <param name="documentoID">Documento que ejecuta la transaccione</param>
        /// <param name="data">Datos que se debe agregar</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        /// oscar
        public DTO_TxResult DatacreditoGestion_Add(int documentoID, List<DTO_ccSolicitudDataCreditoDatos> datos, List<DTO_ccSolicitudDataCreditoScore> score, List<DTO_ccSolicitudDataCreditoUbica> ubica,
                                                    List<DTO_ccSolicitudDataCreditoQuanto> quanto, bool isNewVersion, bool isAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccDatacreditoDatos = (DAL_ccSolicitudDataCreditoDatos)base.GetInstance(typeof(DAL_ccSolicitudDataCreditoDatos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccDatacreditoScore = (DAL_ccSolicitudDataCreditoScore)base.GetInstance(typeof(DAL_ccSolicitudDataCreditoScore), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccDatacreditoUbica = (DAL_ccSolicitudDataCreditoUbica)base.GetInstance(typeof(DAL_ccSolicitudDataCreditoUbica), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccDatacreditoQuanto = (DAL_ccSolicitudDataCreditoQuanto)base.GetInstance(typeof(DAL_ccSolicitudDataCreditoQuanto), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_drSolicitudDatosPerson = (DAL_drSolicitudDatosPersonales)base.GetInstance(typeof(DAL_drSolicitudDatosPersonales), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloDecisor = (ModuloDecisorRiesgo)base.GetInstance(typeof(ModuloDecisorRiesgo), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_seUsuario seUsuario = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId);

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentoID);
            batchProgress[tupProgress] = 1;
            int countTotal = datos.Count + score.Count + ubica.Count + quanto.Count;
            countTotal = countTotal == 0 ? 1 : countTotal;
            try
            {
                if (!isNewVersion)
                {
                    bool exist = false;
                    int numDoc = 0;
                    #region Guarda o actualiza ccSolicitudDataCreditoDatos
                    foreach (DTO_ccSolicitudDataCreditoDatos d in datos)
                    {
                        //Valida si  existe
                        exist = this._dal_ccDatacreditoDatos.DAL_ccSolicitudDataCreditoDatos_Exist(d.Consecutivo.Value);
                        if (exist)
                        {
                            #region Actualiza 
                            d.NumeroDoc.Value = numDoc;
                            this._dal_ccDatacreditoDatos.DAL_ccSolicitudDataCreditoDatos_Update(d);
                            #endregion
                        }
                        else
                        {
                            #region Agrega nuevo
                            d.NumeroDoc.Value = numDoc;
                            d.Version.Value = 1;
                            d.Consecutivo.Value = this._dal_ccDatacreditoDatos.DAL_ccSolicitudDataCreditoDatos_Add(d);
                            #endregion
                        }                      
                    }
                    #endregion
                    #region Guarda o actualiza ccSolicitudDataCreditoScore
                    foreach (DTO_ccSolicitudDataCreditoScore d in score)
                    {
                        //Valida si  existe
                        exist = this._dal_ccDatacreditoScore.DAL_ccSolicitudDataCreditoScore_Exist(d.Consecutivo.Value);
                        if (exist)
                        {
                            #region Actualiza 
                            d.NumeroDoc.Value = numDoc;
                            this._dal_ccDatacreditoScore.DAL_ccSolicitudDataCreditoScore_Update(d);
                            #endregion
                        }
                        else
                        {
                            #region Agrega nuevo
                            d.NumeroDoc.Value = numDoc;
                            d.Version.Value = 1;
                            d.Consecutivo.Value = this._dal_ccDatacreditoScore.DAL_ccSolicitudDataCreditoScore_Add(d);
                            #endregion
                        }
                    }
                    #endregion
                    #region Guarda o actualiza ccSolicitudDataCreditoUbica
                    foreach (DTO_ccSolicitudDataCreditoUbica d in ubica)
                    {
                        //Valida si  existe
                        exist = this._dal_ccDatacreditoUbica.DAL_ccSolicitudDataCreditoUbica_Exist(d.Consecutivo.Value);
                        if (exist)
                        {
                            #region Actualiza 
                            d.NumeroDoc.Value = numDoc;
                            this._dal_ccDatacreditoUbica.DAL_ccSolicitudDataCreditoUbica_Update(d);
                            #endregion
                        }
                        else
                        {
                            #region Agrega nuevo
                            d.NumeroDoc.Value = numDoc;
                            d.Version.Value = 1;
                            d.Consecutivo.Value = this._dal_ccDatacreditoUbica.DAL_ccSolicitudDataCreditoUbica_Add(d);
                            #endregion
                        }
                    }
                    #endregion
                    #region Guarda o actualiza ccSolicitudDataCreditoQuanto
                    foreach (DTO_ccSolicitudDataCreditoQuanto d in quanto)
                    {
                        //Valida si  existe
                        exist = this._dal_ccDatacreditoQuanto.DAL_ccSolicitudDataCreditoQuanto_Exist(d.Consecutivo.Value);
                        if (exist)
                        {
                            #region Actualiza 
                            d.NumeroDoc.Value = numDoc;
                            this._dal_ccDatacreditoQuanto.DAL_ccSolicitudDataCreditoQuanto_Update(d);
                            #endregion
                        }
                        else
                        {
                            #region Agrega nuevo
                            d.NumeroDoc.Value = numDoc;
                            d.Version.Value = 1;
                            d.Consecutivo.Value = this._dal_ccDatacreditoQuanto.DAL_ccSolicitudDataCreditoQuanto_Add(d);
                            #endregion
                        }
                    }
                    #endregion
                }
                else
                {
                    Dictionary<string, DTO_ccSolicitudDocu> terceros = new Dictionary<string, DTO_ccSolicitudDocu>();
                    DataTable solicitudes = this._moduloDecisor.drSolicitudDatosPersonales_GetForDatacredito();
                    int i = 0;
                    foreach (DataRow row in solicitudes.Rows)
                    {
                        DTO_ccSolicitudDocu docu = this._dal_ccSolicitudDocu.DAL_ccSolicitudDocu_GetByNumeroDoc(Convert.ToInt32(row["NumeroDoc"]));
                        if (!string.IsNullOrEmpty(row["TerceroID"].ToString()) && !terceros.ContainsKey(row["TerceroID"].ToString().TrimEnd()))
                            terceros.Add(row["TerceroID"].ToString().TrimEnd(), docu);
                    }

                    #region Guarda ccSolicitudDataCreditoDatos
                    foreach (DTO_ccSolicitudDataCreditoDatos d in datos)
                    {
                        //Manejo de porcentajes 
                        int percent = (i * 100) / countTotal;
                        batchProgress[tupProgress] = percent;
                        string cedula = Convert.ToInt32(d.NumeroId.Value).ToString();

                        if (terceros.ContainsKey(cedula))
                        {
                            d.NumeroDoc.Value = terceros[cedula].NumeroDoc.Value;
                            d.Version.Value = terceros[cedula].VersionNro.Value;
                            if (cedula== terceros[cedula].ClienteRadica.Value)
                                d.TipoId.Value = "1";
                            else if (cedula == terceros[cedula].Codeudor1.Value)
                                d.TipoId.Value = "2";
                            else if (cedula == terceros[cedula].Codeudor2.Value)
                                d.TipoId.Value = "3";
                            else if (cedula == terceros[cedula].Codeudor3.Value)
                                d.TipoId.Value = "4";
                            else if (cedula == terceros[cedula].Codeudor4.Value)
                                d.TipoId.Value = "5";
                            d.Consecutivo.Value = this._dal_ccDatacreditoDatos.DAL_ccSolicitudDataCreditoDatos_Add(d);
                            
                            //Actualiza datos personales para recibir datacredito
                            List<DTO_drSolicitudDatosPersonales> datosPersonales = this._dal_drSolicitudDatosPerson.DAL_drSolicitudDatosPersonales_GetByNumeroDoc(d.NumeroDoc.Value.Value, d.Version.Value.HasValue? d.Version.Value.Value : 1);
                            if (datosPersonales.Any(x=>x.TerceroID.Value.Equals(cedula.ToString())))
                                this._dal_drSolicitudDatosPerson.DAL_drSolicitudDatosPersonales_UpdateDatacredito(datosPersonales.Find(x => x.TerceroID.Value.Equals(cedula.ToString())).Consecutivo.Value.Value, true,DateTime.Now.Date, seUsuario.ID.Value);
                        }
                        i++;
                    }
                    #endregion
                    #region Guarda o actualiza ccSolicitudDataCreditoScore
                    foreach (DTO_ccSolicitudDataCreditoScore d in score)
                    {
                        //Manejo de porcentajes 
                        int percent = (i * 100) / countTotal;
                        batchProgress[tupProgress] = percent;

                        string cedula = Convert.ToInt32(d.NumeroId.Value).ToString();

                        if (terceros.ContainsKey(cedula))
                        {
                            d.NumeroDoc.Value = terceros[cedula].NumeroDoc.Value;
                            d.Version.Value = terceros[cedula].VersionNro.Value;
                            if (cedula== terceros[cedula].ClienteRadica.Value)
                                    d.TipoId.Value = "1";
                            else if (cedula == terceros[cedula].Codeudor1.Value)
                                d.TipoId.Value = "2";
                            else if (cedula == terceros[cedula].Codeudor2.Value)
                                d.TipoId.Value = "3";
                            else if (cedula == terceros[cedula].Codeudor3.Value)
                                d.TipoId.Value = "4";
                            else if (cedula == terceros[cedula].Codeudor4.Value)
                                d.TipoId.Value = "5";
                            d.Consecutivo.Value = this._dal_ccDatacreditoScore.DAL_ccSolicitudDataCreditoScore_Add(d);
                        }
                        i++;
                    }
                    #endregion
                    #region Guarda o actualiza ccSolicitudDataCreditoUbica
                    foreach (DTO_ccSolicitudDataCreditoUbica d in ubica)
                    {
                        //Manejo de porcentajes 
                        int percent = (i * 100) / countTotal;
                        batchProgress[tupProgress] = percent;

                        string cedula = Convert.ToInt32(d.NumeroId.Value).ToString();

                        if (terceros.ContainsKey(cedula))
                        {
                            d.NumeroDoc.Value = terceros[cedula].NumeroDoc.Value;
                            d.Version.Value = terceros[cedula].VersionNro.Value;
                            if (cedula == terceros[cedula].ClienteRadica.Value)
                                d.TipoId.Value = "1";
                            else if (cedula == terceros[cedula].Codeudor1.Value)
                                d.TipoId.Value = "2";
                            else if (cedula == terceros[cedula].Codeudor2.Value)
                                d.TipoId.Value = "3";
                            else if (cedula == terceros[cedula].Codeudor3.Value)
                                d.TipoId.Value = "4";
                            else if (cedula == terceros[cedula].Codeudor4.Value)
                                d.TipoId.Value = "5";

                            d.Consecutivo.Value = this._dal_ccDatacreditoUbica.DAL_ccSolicitudDataCreditoUbica_Add(d);
                        }
                        i++;
                    }
                    #endregion
                    #region Guarda o actualiza ccSolicitudDataCreditoQuanto
                    foreach (DTO_ccSolicitudDataCreditoQuanto d in quanto)
                    {
                        //Manejo de porcentajes 
                        int percent = (i * 100) / countTotal;
                        batchProgress[tupProgress] = percent;
                        string cedula = Convert.ToInt32(d.NumeroId.Value).ToString();

                        if (terceros.ContainsKey(cedula))
                        {
                            d.NumeroDoc.Value = terceros[cedula].NumeroDoc.Value;
                            d.Version.Value = terceros[cedula].VersionNro.Value;
                            if (cedula == terceros[cedula].ClienteRadica.Value)
                                d.TipoId.Value = "1";
                            else if (cedula == terceros[cedula].Codeudor1.Value)
                                d.TipoId.Value = "2";
                            else if (cedula == terceros[cedula].Codeudor2.Value)
                                d.TipoId.Value = "3";
                            else if (cedula == terceros[cedula].Codeudor3.Value)
                                d.TipoId.Value = "4";
                            else if (cedula == terceros[cedula].Codeudor4.Value)
                                d.TipoId.Value = "5";
                            d.Consecutivo.Value = this._dal_ccDatacreditoQuanto.DAL_ccSolicitudDataCreditoQuanto_Add(d);
                        }
                        i++;
                    }
                    #endregion             
                }
                if (result.Result == ResultValue.OK)
                    result.ResultMessage = string.Empty;

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "DatacreditoGestion_Add");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        ///  Agrega informacion de la Garantia
        /// </summary>
        /// <param name="documentoID">doc </param>
        /// <param name="actFlujoId">flujo actual</param>
        /// <param name="data">datos</param>
        /// <param name="isNewVersion">si es nueva version</param>
        /// <param name="isAnotherTx"></param>
        /// <param name="batchProgress"></param>
        /// <returns></returns>
        public DTO_TxResultDetail Garantia_Add(int documentoID,  DTO_glDocumentoControl Garantia)
        {
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            DTO_TxResultDetail resultGLDC = new  DTO_TxResultDetail();
            DTO_TxResult result = new  DTO_TxResult();
            DTO_glDocumentoControl ctrl = Garantia;

            try
            {
                if (ctrl.NumeroDoc.Value.HasValue && ctrl.NumeroDoc.Value.Value != 0)
                {
                    #region Actualiza la info

                    resultGLDC = this._moduloGlobal.glDocumentoControl_Update(ctrl, true, true);
                    if (resultGLDC.Message == "NOK")
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);
                        return resultGLDC;
                    }
                    #endregion
                }
                else
                {
                    #region Agrega la info
                    ctrl.DocumentoNro.Value = 0;
                    resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentoID, ctrl, false,true);
                    if (resultGLDC.Message != ResultValue.OK.ToString())
                    {
                        result.Result = ResultValue.NOK;
                        result.ResultMessage = "NOK";
                        result.Details.Add(resultGLDC);
                        return resultGLDC;
                    }


                    //resultGLDC = this._moduloGlobal.glDocumentoControl_Add(documentoID, ctrl, true,true);
                    //if (resultGLDC.Message != ResultValue.OK.ToString())
                    //{
                    //    result.Result = ResultValue.NOK;
                    //    result.ResultMessage = "NOK";
                    //    result.Details.Add(resultGLDC);
                    //    return resultGLDC;
                    //}
                    ctrl.NumeroDoc.Value = Convert.ToInt32(resultGLDC.Key);
                    #endregion
                }
                result.ExtraField= ctrl.NumeroDoc.Value.ToString();
                return resultGLDC;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Garantia_Add");
                return resultGLDC;
            }
            finally
            {
               //base._mySqlConnectionTx.Rollback();

                if (result.Result == ResultValue.OK)
                {
                        #region Asigna consecutivos

                        //base._mySqlConnectionTx.Commit();
                        //base._mySqlConnectionTx = null;
                        //this._moduloGlobal._mySqlConnectionTx = null;
                        //this._moduloContabilidad._mySqlConnectionTx = null;

                        // 6.1 - Consecutivos para crédito de consumo
                        if (Garantia.NumeroDoc.Value != null && Garantia.NumeroDoc.Value != 0)
                        {
                            Garantia.DocumentoNro.Value = this.GenerarDocumentoNro(Garantia.DocumentoID.Value.Value, Garantia.PrefijoID.Value);
                            this._moduloGlobal.ActualizaConsecutivos(Garantia, true, false, false);
                        }
                            resultGLDC.Key = Garantia.DocumentoNro.Value.ToString();
                    
                        //return resultGLDC;

                        #endregion
                }
                else if (base._mySqlConnectionTx != null )
                    this._mySqlConnectionTx.Rollback();
            }
        }

        /// <summary>
        ///  Agrega informacion de la revision 1
        /// </summary>
        /// <param name="documentoID">doc </param>
        /// <param name="actFlujoId">flujo actual</param>
        /// <param name="data">datos</param>
        /// <param name="isNewVersion">si es nueva version</param>
        /// <param name="isAnotherTx"></param>
        /// <param name="batchProgress"></param>
        /// <returns></returns>
        public DTO_TxResult GestionSolicitud_Add(int documentoID, string actFlujoId, DTO_DigitaSolicitudDecisor data, List<DTO_glDocumentoChequeoLista> chequeos, bool isNewVersion, bool isAnotherTx, Dictionary<Tuple<int, int>, int> batchProgress)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            result.Details = new List<DTO_TxResultDetail>();

            if (!isAnotherTx)
                base._mySqlConnectionTx = base._mySqlConnection.BeginTransaction();

            this._dalsolDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_SolicitaDatosPersonales = (DAL_drSolicitudDatosPersonales)base.GetInstance(typeof(DAL_drSolicitudDatosPersonales), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_SolicitaDatosVehiculo = (DAL_drSolicitudDatosVehiculo)base.GetInstance(typeof(DAL_drSolicitudDatosVehiculo), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_SolicitaDatosOtros = (DAL_drSolicitudDatosOtros)base.GetInstance(typeof(DAL_drSolicitudDatosOtros), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            this._dal_ccSolicitudDocu = (DAL_ccSolicitudDocu)base.GetInstance(typeof(DAL_ccSolicitudDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccDatacreditoDatos = (DAL_ccSolicitudDataCreditoDatos)base.GetInstance(typeof(DAL_ccSolicitudDataCreditoDatos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccDatacreditoScore = (DAL_ccSolicitudDataCreditoScore)base.GetInstance(typeof(DAL_ccSolicitudDataCreditoScore), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccDatacreditoUbica = (DAL_ccSolicitudDataCreditoUbica)base.GetInstance(typeof(DAL_ccSolicitudDataCreditoUbica), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccDatacreditoQuanto = (DAL_ccSolicitudDataCreditoQuanto)base.GetInstance(typeof(DAL_ccSolicitudDataCreditoQuanto), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._moduloDecisor = (ModuloDecisorRiesgo)base.GetInstance(typeof(ModuloDecisorRiesgo), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_glDocChequeoLista = (DAL_glDocumentoChequeoLista)base.GetInstance(typeof(DAL_glDocumentoChequeoLista), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_DatosChequeados = (DAL_drSolicitudDatosChequeados)base.GetInstance(typeof(DAL_drSolicitudDatosChequeados), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            Tuple<int, int> tupProgress = new Tuple<int, int>(this.UserId, documentoID);
            batchProgress[tupProgress] = 1;
            try
            {
                if (!isNewVersion)
                {
                    //if (documentoID == AppDocuments.Revision1)
                    {
                        //#region Actualiza ccSolicitudDataCreditoDatos
                        //foreach (DTO_ccSolicitudDataCreditoUbica d in data.DataCreditoUbica)
                        //{
                        //    #region Actualiza 
                        //    this._dal_ccDatacreditoUbica.DAL_ccSolicitudDataCreditoUbica_Update(d);
                        //    #endregion
                        //}
                        //#endregion
                        if (!isNewVersion)
                        {
                            bool exist = false;
                            int numDoc = 0;
                            #region Guarda o actualiza Datos personales
                            foreach (DTO_drSolicitudDatosPersonales d in data.DatosPersonales)
                            {
                                //Valida si  existe
                                exist = this._dal_SolicitaDatosPersonales.DAL_drSolicitudDatosPersonales_Exist(d.Consecutivo.Value);
                                if (exist)
                                {
                                    #region Actualiza
                                    d.NumeroDoc.Value = data.DocCtrl.NumeroDoc.Value;
                                    d.UsuarioDigita.Value = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId).ID.Value;
                                    #region Valida si activa la solicitud de datacredito

                                    #endregion
                                    this._dal_SolicitaDatosPersonales.DAL_drSolicitudDatosPersonales_Update(d);
                                    #endregion
                                }
                                else
                                {
                                    #region Agrega nuevo
                                    d.NumeroDoc.Value = data.DocCtrl.NumeroDoc.Value;
                                    d.Version.Value = d.Version.Value ?? 1;
                                    d.UsuarioDigita.Value = this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId).ID.Value;
                                    d.Consecutivo.Value = this._dal_SolicitaDatosPersonales.DAL_drSolicitudDatosPersonales_Add(d);
                                    #endregion
                                }
                                #region Valida si es codeudor para la solicitud
                                DTO_coTercero terExist = (DTO_coTercero)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, d.TerceroID.Value, true, false);
                                if (d.TipoPersona.Value == 2)// && terExist != null)
                                    data.SolicituDocu.Codeudor1.Value = d.TerceroID.Value;
                                else if (d.TipoPersona.Value == 3)// && terExist != null)
                                    data.SolicituDocu.Codeudor2.Value = d.TerceroID.Value;
                                else if (d.TipoPersona.Value == 4)// && terExist != null)
                                    data.SolicituDocu.Codeudor3.Value = d.TerceroID.Value;
                                else if (d.TipoPersona.Value == 5)// && terExist != null)
                                    data.SolicituDocu.Codeudor4.Value = d.TerceroID.Value;
                                else if (d.TipoPersona.Value == 6)// && terExist != null)
                                    data.SolicituDocu.Codeudor5.Value = d.TerceroID.Value;
                                #endregion
                            }
                            #endregion
                            #region Guarda datos Vehiculo
                            //Valida si existe
                            exist = this._dal_SolicitaDatosVehiculo.DAL_drSolicitudDatosVehiculo_Exist(data.DatosVehiculo.Consecutivo.Value);
                            if (exist)
                            {
                                #region Actualiza
                                data.DatosVehiculo.NumeroDoc.Value = data.DocCtrl.NumeroDoc.Value;
                                this._dal_SolicitaDatosVehiculo.DAL_drSolicitudDatosVehiculo_Update(data.DatosVehiculo);
                                #endregion
                            }
                            else
                            {
                                if (data.DatosVehiculo.Modelo.Value.HasValue)
                                {
                                    #region Agrega nuevo
                                    data.DatosVehiculo.NumeroDoc.Value = data.DocCtrl.NumeroDoc.Value;
                                    data.DatosVehiculo.Version.Value = data.DatosVehiculo.Version.Value ?? 1;
                                    data.DatosVehiculo.Consecutivo.Value = this._dal_SolicitaDatosVehiculo.DAL_drSolicitudDatosVehiculo_Add(data.DatosVehiculo);
                                    #endregion
                                }
                            }
                            #endregion
                            #region Guarda Otros datos
                            //Valida si existe
                            exist = this._dal_SolicitaDatosOtros.DAL_drSolicitudDatosOtros_Exist(data.OtrosDatos.Consecutivo.Value);
                            if (exist)
                            {
                                #region Actualiza
                                data.OtrosDatos.NumeroDoc.Value = data.DocCtrl.NumeroDoc.Value;
                                this._dal_SolicitaDatosOtros.DAL_drSolicitudDatosOtros_Update(data.OtrosDatos);
                                #endregion
                            }
                            else
                            {
                                if (data.OtrosDatos.NumeroDoc.Value.HasValue)
                                {
                                    #region Agrega nuevo
                                    data.OtrosDatos.NumeroDoc.Value = data.DocCtrl.NumeroDoc.Value;
                                    data.OtrosDatos.Version.Value = data.OtrosDatos.Version.Value ?? 1;
                                    data.OtrosDatos.Consecutivo.Value = this._dal_SolicitaDatosOtros.DAL_drSolicitudDatosOtros_Add(data.OtrosDatos);

                                    #endregion
                                }
                            }
                            #endregion

                            #region Guarda o actualiza ccSolicitudDataCreditoDatos
                            foreach (DTO_ccSolicitudDataCreditoDatos d in data.DataCreditoDatos)
                            {
                                //Valida si  existe
                                exist = this._dal_ccDatacreditoDatos.DAL_ccSolicitudDataCreditoDatos_Exist(d.Consecutivo.Value);
                                if (exist)
                                {
                                    #region Actualiza
                                    d.NumeroDoc.Value = numDoc;
                                    this._dal_ccDatacreditoDatos.DAL_ccSolicitudDataCreditoDatos_Update(d);
                                    #endregion
                                }
                                else
                                {
                                    #region Agrega nuevo
                                    d.NumeroDoc.Value = numDoc;
                                    d.Version.Value = 1;
                                    d.Consecutivo.Value = this._dal_ccDatacreditoDatos.DAL_ccSolicitudDataCreditoDatos_Add(d);
                                    #endregion
                                }
                            }
                            #endregion
                            #region Guarda o actualiza ccSolicitudDataCreditoScore
                            foreach (DTO_ccSolicitudDataCreditoScore d in data.DataCreditoScore)
                            {
                                //Valida si  existe
                                exist = this._dal_ccDatacreditoScore.DAL_ccSolicitudDataCreditoScore_Exist(d.Consecutivo.Value);
                                if (exist)
                                {
                                    #region Actualiza
                                    d.NumeroDoc.Value = numDoc;
                                    this._dal_ccDatacreditoScore.DAL_ccSolicitudDataCreditoScore_Update(d);
                                    #endregion
                                }
                                else
                                {
                                    #region Agrega nuevo
                                    d.NumeroDoc.Value = numDoc;
                                    d.Version.Value = 1;
                                    d.Consecutivo.Value = this._dal_ccDatacreditoScore.DAL_ccSolicitudDataCreditoScore_Add(d);
                                    #endregion
                                }
                            }
                            #endregion
                            #region Guarda o actualiza ccSolicitudDataCreditoUbica
                            foreach (DTO_ccSolicitudDataCreditoUbica d in data.DataCreditoUbica)
                            {
                                //Valida si  existe
                                exist = this._dal_ccDatacreditoUbica.DAL_ccSolicitudDataCreditoUbica_Exist(d.Consecutivo.Value);
                                if (exist)
                                {
                                    #region Actualiza
                                    d.NumeroDoc.Value = numDoc;
                                    this._dal_ccDatacreditoUbica.DAL_ccSolicitudDataCreditoUbica_Update(d);
                                    #endregion
                                }
                                else
                                {
                                    #region Agrega nuevo
                                    d.NumeroDoc.Value = numDoc;
                                    d.Version.Value = 1;
                                    d.Consecutivo.Value = this._dal_ccDatacreditoUbica.DAL_ccSolicitudDataCreditoUbica_Add(d);
                                    #endregion
                                }
                            }
                            #endregion
                            #region Guarda o actualiza ccSolicitudDataCreditoQuanto
                            foreach (DTO_ccSolicitudDataCreditoQuanto d in data.DataCreditoQuanto)
                            {
                                //Valida si  existe
                                exist = this._dal_ccDatacreditoQuanto.DAL_ccSolicitudDataCreditoQuanto_Exist(d.Consecutivo.Value);
                                if (exist)
                                {
                                    #region Actualiza
                                    d.NumeroDoc.Value = numDoc;
                                    this._dal_ccDatacreditoQuanto.DAL_ccSolicitudDataCreditoQuanto_Update(d);
                                    #endregion
                                }
                                else
                                {
                                    #region Agrega nuevo
                                    d.NumeroDoc.Value = numDoc;
                                    d.Version.Value = 1;
                                    d.Consecutivo.Value = this._dal_ccDatacreditoQuanto.DAL_ccSolicitudDataCreditoQuanto_Add(d);
                                    #endregion
                                }
                            }
                            #endregion
                        }


                        #region Actualiza glDocumentoChequeoLista

                        foreach (DTO_glDocumentoChequeoLista d in chequeos)
                        {
                            if (d.IncluidoDeudor.Value.Value)
                            {
                                DTO_drSolicitudDatosChequeados actChequeoBase = new DTO_drSolicitudDatosChequeados();
                                actChequeoBase.NumeroDoc.Value = data.SolicituDocu.NumeroDoc.Value;
                                actChequeoBase.Version.Value = data.SolicituDocu.VersionNro.Value;
                                actChequeoBase.TipoPersona.Value = 1;
                                actChequeoBase.ChequeadoInd.Value = d.IncluidoInd.Value;
                                actChequeoBase.NroRegistro.Value = d.Consecutivo.Value;

                                bool exist = this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Exist(data.SolicituDocu.NumeroDoc.Value.Value, data.SolicituDocu.VersionNro.Value.Value, 1, d.Consecutivo.Value.Value);
                                if (exist)
                                {
                                    this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Update(actChequeoBase);
                                }
                                else
                                {
                                    actChequeoBase.Consecutivo.Value = this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Add(actChequeoBase);
                                }
                            }
                            if (d.IncluidoConyuge.Value.Value)
                            {
                                DTO_drSolicitudDatosChequeados actChequeoBase = new DTO_drSolicitudDatosChequeados();
                                actChequeoBase.NumeroDoc.Value = data.SolicituDocu.NumeroDoc.Value;
                                actChequeoBase.Version.Value = data.SolicituDocu.VersionNro.Value;
                                actChequeoBase.TipoPersona.Value = 2;
                                actChequeoBase.ChequeadoInd.Value = d.IncluidoConyugeInd.Value;
                                actChequeoBase.NroRegistro.Value = d.Consecutivo.Value;

                                bool exist = this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Exist(data.SolicituDocu.NumeroDoc.Value.Value, data.SolicituDocu.VersionNro.Value.Value, 2, d.Consecutivo.Value.Value);
                                if (exist)
                                {
                                    this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Update(actChequeoBase);
                                }
                                else
                                {
                                    actChequeoBase.Consecutivo.Value = this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Add(actChequeoBase);
                                }
                            }
                            if (d.IncluidoCodeudor1.Value.Value)
                            {
                                DTO_drSolicitudDatosChequeados actChequeoBase = new DTO_drSolicitudDatosChequeados();
                                actChequeoBase.NumeroDoc.Value = data.SolicituDocu.NumeroDoc.Value;
                                actChequeoBase.Version.Value = data.SolicituDocu.VersionNro.Value;
                                actChequeoBase.TipoPersona.Value = 3;
                                actChequeoBase.ChequeadoInd.Value = d.IncluidoCodeudor1Ind.Value;
                                actChequeoBase.NroRegistro.Value = d.Consecutivo.Value;

                                bool exist = this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Exist(data.SolicituDocu.NumeroDoc.Value.Value, data.SolicituDocu.VersionNro.Value.Value, 3, d.Consecutivo.Value.Value);
                                if (exist)
                                {
                                    this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Update(actChequeoBase);
                                }
                                else
                                {
                                    actChequeoBase.Consecutivo.Value = this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Add(actChequeoBase);
                                }
                            }
                            if (d.IncluidoCodeudor2.Value.Value)
                            {
                                DTO_drSolicitudDatosChequeados actChequeoBase = new DTO_drSolicitudDatosChequeados();
                                actChequeoBase.NumeroDoc.Value = data.SolicituDocu.NumeroDoc.Value;
                                actChequeoBase.Version.Value = data.SolicituDocu.VersionNro.Value;
                                actChequeoBase.TipoPersona.Value = 4;
                                actChequeoBase.ChequeadoInd.Value = d.IncluidoCodeudor2Ind.Value;
                                actChequeoBase.NroRegistro.Value = d.Consecutivo.Value;

                                bool exist = this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Exist(data.SolicituDocu.NumeroDoc.Value.Value, data.SolicituDocu.VersionNro.Value.Value, 4, d.Consecutivo.Value.Value);
                                if (exist)
                                {
                                    this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Update(actChequeoBase);
                                }
                                else
                                {
                                    actChequeoBase.Consecutivo.Value = this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Add(actChequeoBase);
                                }
                            }
                            if (d.IncluidoCodeudor3.Value.Value)
                            {
                                DTO_drSolicitudDatosChequeados actChequeoBase = new DTO_drSolicitudDatosChequeados();
                                actChequeoBase.NumeroDoc.Value = data.SolicituDocu.NumeroDoc.Value;
                                actChequeoBase.Version.Value = data.SolicituDocu.VersionNro.Value;
                                actChequeoBase.TipoPersona.Value = 5;
                                actChequeoBase.ChequeadoInd.Value = d.IncluidoCodeudor3Ind.Value;
                                actChequeoBase.NroRegistro.Value = d.Consecutivo.Value;

                                bool exist = this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Exist(data.SolicituDocu.NumeroDoc.Value.Value, data.SolicituDocu.VersionNro.Value.Value, 5, d.Consecutivo.Value.Value);
                                if (exist)
                                {
                                    this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Update(actChequeoBase);
                                }
                                else
                                {
                                    actChequeoBase.Consecutivo.Value = this._dal_DatosChequeados.DAL_drSolicitudDatosChequeados_Add(actChequeoBase);
                                }
                            }



                        }
                        #endregion
                    }
                }
                else
                {
                    #region Asignar nuevo flujo

                    string ActFlujoDestimiento = this.GetControlValueByCompany(ModulesPrefix.dr, AppControl.dr_Desestimiento);
                    string ActFlujoNegGestionar = this.GetControlValueByCompany(ModulesPrefix.dr, AppControl.dr_NegGestionar);
                    string ActFlujoEvaluacion = this.GetControlValueByCompany(ModulesPrefix.dr, AppControl.dr_Evaluacion);
                    string ActFlujoRVC = this.GetControlValueByCompany(ModulesPrefix.dr, AppControl.dr_RVC);
                    string ActFlujoEvaluacionF2 = this.GetControlValueByCompany(ModulesPrefix.dr, AppControl.dr_Firma2);
                    string ActFlujoEvaluacionF3 = this.GetControlValueByCompany(ModulesPrefix.dr, AppControl.dr_Firma3);

                    if (string.IsNullOrWhiteSpace(data.SolicituDocu.ActividadFlujoNegociosGestionarID.Value) && data.SolicituDocu.DesestimientoInd.Value == false && data.SolicituDocu.NegociosGestionarInd.Value == false)
                    {
                        result = this.AsignarFlujo(documentoID, data.DocCtrl.NumeroDoc.Value.Value, actFlujoId, false, string.Empty);
                        data.SolicituDocu.DesestimientoInd.Value = false;
                        data.SolicituDocu.NegociosGestionarInd.Value = false;
                        data.SolicituDocu.ActividadFlujoNegociosGestionarID.Value = null;
                    }
                    else

                        if (data.SolicituDocu.NegociosGestionarInd.Value == true)
                        {
                            string Observa = data.SolicituDocu.Observacion.Value;

                            result = this.AsignarFlujo(documentoID, data.DocCtrl.NumeroDoc.Value.Value, actFlujoId, false, Observa, ActFlujoNegGestionar);
                            if (actFlujoId == ActFlujoEvaluacion || actFlujoId == ActFlujoEvaluacionF2 || actFlujoId == ActFlujoEvaluacionF3)
                                data.SolicituDocu.ActividadFlujoNegociosGestionarID.Value = ActFlujoRVC;
                            else
                                data.SolicituDocu.ActividadFlujoNegociosGestionarID.Value = actFlujoId;
                        }
                        else if (data.SolicituDocu.DesestimientoInd.Value == true)
                        {
                            //                    actFlujoId = ActFlujoDestimiento;
                            result = this.AsignarFlujo(documentoID, data.DocCtrl.NumeroDoc.Value.Value, actFlujoId, false, string.Empty, ActFlujoDestimiento);
                            data.SolicituDocu.ActividadFlujoNegociosGestionarID.Value = null;
                        }
                        // else if (data.SolicituDocu.NegociosGestionarInd.Value == false)
                        else if (!string.IsNullOrWhiteSpace(data.SolicituDocu.ActividadFlujoNegociosGestionarID.Value))
                        {
                            result = this.AsignarFlujo(documentoID, data.DocCtrl.NumeroDoc.Value.Value, actFlujoId, false, string.Empty, data.SolicituDocu.ActividadFlujoNegociosGestionarID.Value);
                            data.SolicituDocu.ActividadFlujoNegociosGestionarID.Value = null;

                        }
                    #endregion
                }



                #region Actualiza Solicitud
                this._dalsolDocu.DAL_ccSolicitudDocu_Update(data.SolicituDocu);
                #endregion
                batchProgress[tupProgress] = 100;
                if (result.Result == ResultValue.OK)
                    result.ResultMessage = string.Empty;

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ModuloCartera");
                return result;
            }
            finally
            {
                if (result.Result == ResultValue.OK)
                {
                    if (!isAnotherTx)
                        base._mySqlConnectionTx.Commit();
                }
                else if (base._mySqlConnectionTx != null && !isAnotherTx)
                    base._mySqlConnectionTx.Rollback();
            }
        }

        #endregion

        #region perfil
        /// <summary>
        /// Proceso para hacer la particion del Billing
        /// </summary>
        /// <param name="documentID">Documento que ejecuta el proceso</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult Genera_Perfil(DateTime periodoID, int NumeroDoc, bool isML)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();
            this._dal_Perfil = (DAL_Perfil)base.GetInstance(typeof(DAL_Perfil), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            List<DTO_ComprobanteFooter> compsML = new List<DTO_ComprobanteFooter>();
            object dataML = this._dal_Perfil.DAL_Perfil_GetPerfil(periodoID, NumeroDoc, isML);
            
            if (dataML.GetType() == typeof(DTO_TxResult))
            {
                result = (DTO_TxResult)dataML;
                return result;
            }

            if (result.Result == ResultValue.NOK)
            {
                result.ResultMessage = " No se pudo generar el Perfil ";// +NumeroDoc.ToString();
                return result;
            }
            else
                return result;

        }

        /// <summary>
        /// Proceso para hacer ObligacionesGarantias
        /// </summary>
        /// <param name="documentID">Documento que ejecuta el proceso</param>
        /// <returns>Retorna el resultado de la operacion</returns>
        public DTO_TxResult Genera_ObligacionesGarantias( int? NumeroDoc,string ClienteID, bool isML)
        {
            DTO_TxResult result = new DTO_TxResult();
            result.Details = new List<DTO_TxResultDetail>();
            this._dal_Perfil = (DAL_Perfil)base.GetInstance(typeof(DAL_Perfil), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            List<DTO_ComprobanteFooter> compsML = new List<DTO_ComprobanteFooter>();
            object dataML = this._dal_Perfil.DAL_Genera_ObligacionesGarantias(NumeroDoc,ClienteID, isML);

            if (dataML.GetType() == typeof(DTO_TxResult))
            {
                result = (DTO_TxResult)dataML;
                return result;
            }

            if (result.Result == ResultValue.NOK)
            {
                result.ResultMessage = " No se pudo generar ObligacionesGarantias";// +NumeroDoc.ToString();
                return result;
            }
            else
                return result;

        }

        #endregion
        #region Reportes

        /// <summary>
        /// Funcion que arma el dto para enviar a la funcion de generar archivo del ModuloBase
        /// </summary>
        /// <param name="creditoPlanPagos">Lista de Dto con info del plan de pagos</param>
        /// <param name="solicicitud">Informacion del Credito en la solicitud</param>
        /// <returns>objeto</returns>
        public DTO_SerializedObject Dto_LiquidacionReport(List<DTO_ccCreditoPlanPagos> creditoPlanPagos, List<DTO_ccCreditoComponentes> creditoComponentes, DTO_ccSolicitudDocu solicicitud)
        {
            try
            {
                #region Variables
                DTO_ReportLiquidacionCredito2 reportLiquidacion = new DTO_ReportLiquidacionCredito2();
                string compSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string compAportes = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentedeAportes);
                string compAfiliacion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CompAfiliacion);
                #endregion

                string nombreCliente = solicicitud.ApellidoPri.Value + " " + solicicitud.NombrePri.Value;

                reportLiquidacion.Header.Cliente = solicicitud.ClienteID.Value + " - " + nombreCliente;
                reportLiquidacion.Header.Fecha = DateTime.Now;
                reportLiquidacion.Header.Libranza = solicicitud.Libranza.Value.Value;
                reportLiquidacion.Header.Interes = solicicitud.PorInteres.Value.Value;
                reportLiquidacion.Header.Libranza = solicicitud.Libranza.Value.Value;
                reportLiquidacion.Header.NumeroCuotas = solicicitud.Plazo.Value.Value;
                reportLiquidacion.Header.Pagaduria = solicicitud.PagaduriaID.Value;
                reportLiquidacion.Header.xInteres = solicicitud.PorInteres.Value.Value;
                reportLiquidacion.Header.xSeguro = solicicitud.PorSeguro.Value.Value;
                //reportLiquidacion.Header.VrAfiliacionMes = creditoPlanPagos[i].
                reportLiquidacion.Header.VrLibranza = solicicitud.VlrLibranza.Value;
                reportLiquidacion.Header.VrAdicional = solicicitud.VlrAdicional.Value;
                reportLiquidacion.Header.VrCompra = solicicitud.VlrCompra.Value;
                reportLiquidacion.Header.VrSolicitado = solicicitud.VlrSolicitado.Value;
                reportLiquidacion.Header.VrCredito = solicicitud.VlrPrestamo.Value;
                reportLiquidacion.Header.VrCuota = solicicitud.VlrCuota.Value.Value;
                reportLiquidacion.Header.VrGiro = solicicitud.VlrGiro.Value.Value;

                foreach (DTO_ccCreditoComponentes comp in creditoComponentes)
                {
                    if (comp.ComponenteCarteraID.Value == compSeguro)
                        reportLiquidacion.Header.VrSeguro = comp.TotalValor.Value.Value;
                    else if (comp.ComponenteCarteraID.Value == compAportes)
                    {
                        reportLiquidacion.Header.AportesMes = comp.CuotaValor.Value.Value;
                        reportLiquidacion.Header.Aportes = comp.TotalValor.Value.Value;
                    }
                    else if (comp.ComponenteCarteraID.Value == compAfiliacion)
                    {
                        reportLiquidacion.Header.AportesMes = comp.CuotaValor.Value.Value;
                        reportLiquidacion.Header.Aportes = comp.TotalValor.Value.Value;
                    }
                }
                reportLiquidacion.Header.TotalOtrosMes = reportLiquidacion.Header.AportesMes;
                reportLiquidacion.Header.TotalOtros = reportLiquidacion.Header.Aportes;

                for (int i = 0; i < creditoPlanPagos.Count; i++)
                {
                    DTO_LiquidacionDetail detalle = new DTO_LiquidacionDetail();

                    detalle.CuotaID = creditoPlanPagos[i].CuotaID.Value.Value + " - " + solicicitud.Plazo.Value;
                    detalle.Venc_Cta = creditoPlanPagos[i].FechaCuota.Value.Value;
                    detalle.Capital = creditoPlanPagos[i].VlrCapital.Value.Value;
                    detalle.Seguro = creditoPlanPagos[i].VlrSeguro.Value.Value;
                    detalle.ComponentesSuma = creditoPlanPagos[i].VlrSeguro.Value.Value + creditoPlanPagos[i].VlrCapital.Value.Value;
                    detalle.SaldoCapital = creditoPlanPagos[i].VlrSaldoCapital.Value.Value;
                    detalle.VlrCuota = creditoPlanPagos[i].VlrCuota.Value.Value;
                    detalle.VlrOtros = creditoPlanPagos[i].VlrOtrosFijos.Value.Value;
                    detalle.Otros1 = creditoPlanPagos[i].VlrOtro1.Value.Value;
                    detalle.Interes = creditoPlanPagos[i].VlrInteres.Value.Value;
                    reportLiquidacion.Detail.Add(detalle);

                }

                return reportLiquidacion;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Dto_LiquidacionReport");
                throw ex;
                throw;
            }
        }

        /// <summary>
        /// Funcion que arma el dto correspondiente para el estado de cuenta
        /// </summary>
        /// <param name="creditoPlanPagos">Plan de pagos</param>
        /// <param name="credito">Credito</param>
        /// <returns>Objeto</returns>
        private DTO_SerializedObject Dto_EstadoCuentaReport(List<DTO_ccEstadoCuentaComponentes> saldosComponentes, List<DTO_ccCreditoPlanPagos> creditoPlanPagos, DTO_ccCreditoDocu credito)
        {
            try
            {
                #region Variables
                DTO_ReportEstadoCuenta reportLiquidacion = new DTO_ReportEstadoCuenta();

                #endregion

                string nombreCliente = credito.Nombre.Value;

                #region Header
                reportLiquidacion.Header.Cliente = credito.ClienteID.Value + " - " + nombreCliente;
                reportLiquidacion.Header.Fecha = DateTime.Now;
                reportLiquidacion.Header.Libranza = credito.Libranza.Value.Value;
                reportLiquidacion.Header.Interes = credito.PorInteres.Value.Value;
                reportLiquidacion.Header.Libranza = credito.Libranza.Value.Value;
                reportLiquidacion.Header.NumeroCuotas = credito.Plazo.Value.Value;
                reportLiquidacion.Header.Pagaduria = credito.PagaduriaID.Value;
                //reportLiquidacion.Header.VrAfiliacionMes = creditoPlanPagos[i].
                reportLiquidacion.Header.VrLibranza = credito.VlrLibranza.Value;
                reportLiquidacion.Header.VrAdicional = credito.VlrAdicional.Value;
                reportLiquidacion.Header.VrCompra = credito.VlrCompra.Value;
                reportLiquidacion.Header.VrSolicitado = credito.VlrSolicitado.Value;
                reportLiquidacion.Header.VrCredito = credito.VlrPrestamo.Value;
                reportLiquidacion.Header.VrOtrosMes1 = 0;//(decimal)(creditoPlanPagos.FirstOrDefault().VlrOtro1.Value.Value / credito.Plazo.Value.Value);
                reportLiquidacion.Header.VrOtrosMes2 = 0;//(decimal)(creditoPlanPagos.FirstOrDefault().VlrOtro2.Value.Value / credito.Plazo.Value.Value);
                reportLiquidacion.Header.VrOtrosMes3 = 0;//(decimal)(creditoPlanPagos.FirstOrDefault().VlrOtro3.Value.Value / credito.Plazo.Value.Value);
                reportLiquidacion.Header.VrOtros1 = 0;//(decimal)(creditoPlanPagos.FirstOrDefault().VlrOtro1.Value.Value);
                reportLiquidacion.Header.VrOtros2 = 0;//(decimal)(creditoPlanPagos.FirstOrDefault().VlrOtro2.Value.Value);
                reportLiquidacion.Header.VrOtros3 = 0;//(decimal)(creditoPlanPagos.FirstOrDefault().VlrOtro3.Value.Value);

                reportLiquidacion.Header.TotalOtrosMes = 0;//reportLiquidacion.Header.VrOtrosMes1 + reportLiquidacion.Header.VrOtrosMes2 + reportLiquidacion.Header.VrOtrosMes3;
                reportLiquidacion.Header.TotalOtros = 0;//reportLiquidacion.Header.VrOtros1 + reportLiquidacion.Header.VrOtros2 + reportLiquidacion.Header.VrOtros3;

                #endregion
                for (int i = 0; i < creditoPlanPagos.Count; i++)
                {
                    DTO_ReportEstadoCuentaDetail detalle = new DTO_ReportEstadoCuentaDetail();
                    DTO_ReportEstadoCuentaFooter footer = new DTO_ReportEstadoCuentaFooter();

                    detalle.CuotaID = creditoPlanPagos[i].CuotaID.Value.Value + " - " + credito.Plazo.Value;
                    detalle.Venc_Cta = creditoPlanPagos[i].FechaCuota.Value.Value;
                    detalle.Capital = 0;//creditoPlanPagos[i].VlrCapital.Value.Value;
                    detalle.Seguro = 0;//creditoPlanPagos[i].VlrSeguro.Value.Value;

                    //detalle.SaldoCapital = creditoPlanPagos[i]. .Value.Value;
                    detalle.VlrCuota = 0;//creditoPlanPagos[i].VlrCuota.Value.Value;
                    detalle.VlrOtros = 0;//creditoPlanPagos[i].VlrOtrosFijos.Value.Value;
                    detalle.Otros1 = 0;//creditoPlanPagos[i].VlrOtro1.Value.Value;


                    reportLiquidacion.Detail.Add(detalle);
                }

                return reportLiquidacion;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Dto_EstadoCuentaReport");
                throw ex;
                throw;
            }
        }

        /// <summary>
        /// Función que carga 
        /// </summary>
        /// <param name="mes">Mes de Consulta</param>
        /// <param name="fechaIni">Fecha Inicial del reporte</param>
        /// <param name="fechaFin">Fecha final del reporte </param>
        /// <param name="filter">Filtro </param>
        /// <returns>Lista de </returns>
        public List<DTO_ccAportesTotales> Report_Cc_Aportes(DateTime mes, DateTime fechaIni, DateTime fechaFin, string filter)
        {
            #region Variables
            List<DTO_ccAportesTotales> totalesReturn = new List<DTO_ccAportesTotales>();
            DTO_ccAportesTotales total = new DTO_ccAportesTotales();
            total.Detalles = new List<DTO_ccAportes>();
            //DTO_ccCarteraComponente componente = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, solComponente.ComponenteCarteraID.Value, true, false);
            string compAfiliacion = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CompAfiliacion);
            string compAportes = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentedeAportes);
            this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            #endregion

            try
            {
                //Trae los datos
                total.Detalles = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_Aportes(mes, filter, compAfiliacion, compAportes);
                //Cargo las pagadurias que son diferentes
                List<string> distinct = (from c in total.Detalles select c.Pagaduria.Value).Distinct().ToList();
                foreach (string item in distinct)
                {
                    DTO_ccAportesTotales totalesFondoID = new DTO_ccAportesTotales();
                    totalesFondoID.Detalles = new List<DTO_ccAportes>();

                    totalesFondoID.Detalles = total.Detalles.Where(x => x.Pagaduria.Value == item).ToList();
                    totalesReturn.Add(totalesFondoID);
                }
                if (total.Detalles.Count != 0)
                {
                    totalesReturn.FirstOrDefault().FechaIni = fechaIni;
                    totalesReturn.FirstOrDefault().FechaFin = fechaFin;
                }

                return totalesReturn;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_Aportes");
                throw ex;
            }
        }

        /// <summary>
        /// Funcion que consulta la info para llenar el dto_ccAseguradora
        /// </summary>
        /// <param name="fechaIni">Fecha Inicial del Reporte</param>
        /// <param name="fechaFin">Fecha Final del Reporte</param>
        /// <param name="orderName">Es par aordenar por nombre</param>
        /// <param name="filter">Filtro</param>
        /// <returns>Lista de DTOccAseguradora</returns>
        public List<DTO_ccAseguradoraReport> Report_Cc_Aseguradora(DateTime fechaIni, DateTime fechaFin, bool orderName, string filter)
        {
            #region Variables

            this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            #endregion

            try
            {
                List<DTO_ccAseguradoraReport> detalles = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_Aseguradora(fechaIni, fechaFin, orderName, filter);
                if (detalles.Count != 0)
                {
                    detalles.FirstOrDefault().FechaIni = fechaIni;
                    detalles.FirstOrDefault().FechaFin = fechaFin;
                }
                return detalles;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_Aseguradora");
                throw ex;
            }

        }

        /// <summary>
        /// Funcion que cargl una lista de aportes con sus respectivos saldos y Clientes
        /// </summary>
        /// <param name="periodo">Periodod de la consulta</param>
        /// <param name="clienteFiltro">Cliente ?</param>
        /// <returns>Lista de Detalles</returns>
        public List<DTO_ccAportesCliente> Report_Cc_AportesCliente(DateTime periodo, string clienteFiltro)
        {
            #region Variables
            //Instancia del dal de carteraReports
            try
            {
                string componenteAportes = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentedeAportes);
                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("ComponenteCarteraID", componenteAportes);
                pks.Add("TipoEstado", ((int)TipoEstadoCartera.Propia).ToString());
                //pks.Add("ClaseCredito", claseCredito);

                DTO_ccComponenteCuenta dto_Cta = (DTO_ccComponenteCuenta)this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);

                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_ccAportesCliente> detalles = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_AportesCliente(periodo, clienteFiltro, dto_Cta.CtaRecursosTerceros.Value, componenteAportes);

                return detalles;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_AportesCliente");
                throw ex;
            }

            #endregion
        }

        /// <summary>
        /// Función que llena una lista de detalles por empleado
        /// </summary>
        /// <param name="fechaIni">Fecha inicial de la consulta</param>
        /// <param name="fechaFin">Fecha final de la consulta</param>
        /// <param name="clienteFiltro">Filtro del cliente = ClienteID</param>
        /// <returns>Lista de Detalles organizados por cliente</returns>
        public List<DTO_ccEstadoDeCuentaTotales> Report_Cc_EstadoDeCuenta(DateTime fechaIni, DateTime fechaFin,string _tercero, string clienteFiltro)
        {
            #region Variables
            List<DTO_ccEstadoDeCuentaTotales> totalesReturn = new List<DTO_ccEstadoDeCuentaTotales>();
            DTO_ccEstadoDeCuentaTotales total = new DTO_ccEstadoDeCuentaTotales();
            total.Detalles = new List<DTO_ccEstadoDeCuenta>();

            this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            #endregion

            try
            {
                string componenteAportes = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentedeAportes);
                Dictionary<string, string> pks = new Dictionary<string, string>();
                pks.Add("ComponenteCarteraID", componenteAportes);
                pks.Add("TipoEstado", ((int)TipoEstadoCartera.Propia).ToString());
                //pks.Add("ClaseCredito", claseCredito);

                DTO_MasterComplex complex = this.GetMasterComplexDTO(AppMasters.ccComponenteCuenta, pks, true);
                DTO_ccComponenteCuenta dto_Cta = (DTO_ccComponenteCuenta)complex;
              
                //Trae los datos
                total.Detalles = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_EstadoCuenta(fechaIni, fechaFin,_tercero, dto_Cta.CtaRecursosTerceros.Value, clienteFiltro);
              
                //Cargo las pagadurias que son diferentes
                List<string> distinct = (from c in total.Detalles select c.ClienteId.Value).Distinct().ToList();

                foreach (string item in distinct)
                {
                    DTO_ccEstadoDeCuentaTotales totalesFondoID = new DTO_ccEstadoDeCuentaTotales();
                    totalesFondoID.Detalles = new List<DTO_ccEstadoDeCuenta>();
                    totalesFondoID.Detalles = total.Detalles.Where(x => x.ClienteId.Value == item).ToList();

                    foreach (var c in totalesFondoID.Detalles)
                    {
                        if (c.SaldoIni.Value == null)
                            c.SaldoIni.Value = 0;
                        c.Recaudo = totalesFondoID.Detalles.Where(x => x.Movimiento.Value == "RECAUDO").Select(x => x.VlrMdaLoc.Value.Value).Sum();
                        c.Retiro = totalesFondoID.Detalles.Where(x => x.Movimiento.Value == "RETIRO").Select(x => x.VlrMdaLoc.Value.Value).Sum();
                        c.SaldoFinDeta = (decimal)((c.Recaudo + c.Retiro) - c.SaldoIni.Value);

                    }
                    totalesReturn.Add(totalesFondoID);
                }

                if (total.Detalles.Count != 0)
                {
                    totalesReturn.FirstOrDefault().FechaIni = fechaIni;
                    totalesReturn.FirstOrDefault().FechaFin = fechaFin;
                }
                return totalesReturn;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_EstadoDeCuenta");
                throw ex;
            }
        }

        /// <summary>
        /// Funcion que obtiene la info correspondiente del cerdtificado de deuda por el numero de libranza y el mes 
        /// </summary>
        /// <param name="fechaCorte">Mes que se va a consultar</param>
        /// <param name="libranza">Numero de libranza</param>
        /// <returns>Info del certificado de deuda, ccCreditoDocu</returns>
        public DTO_ccCertificadoDeuda Report_Cc_CertificadoDeuda(DateTime fechaCorte, int libranza)
        {
            #region Varibles
            this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            this._dal_ccCreditoPlanPagos = (DAL_ccCreditoPlanPagos)this.GetInstance(typeof(DAL_ccCreditoPlanPagos), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
            List<DTO_ccCreditoPlanPagos> planPagosList = new List<DTO_ccCreditoPlanPagos>();

            #endregion

            DTO_ccCertificadoDeuda certInfo = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_CertificadoDeuda(fechaCorte, libranza);
            if (certInfo != null)
            {
                if (certInfo.EC_SaldoPend.Value == null)
                    certInfo.mensaje = DictionaryMessages.Cc_Cartera_NoEstadoCuenta;
                else
                {
                    planPagosList = this._dal_ccCreditoPlanPagos.DAL_ccCreditoPlanPagos_GetByNumDoc(certInfo.NumeroDoc.Value.Value);
                    List<DTO_ccCreditoPlanPagos> pagos = new List<DTO_ccCreditoPlanPagos>();
                    pagos = (from c in planPagosList
                             where c.FechaCuota.Value.Value < fechaCorte && c.VlrCuota.Value.Value != c.VlrPagadoCuota.Value.Value
                             select c).ToList();

                    if (pagos.Count > 0)
                        certInfo.isPazYSalvo.Value = false;
                    else
                        certInfo.isPazYSalvo.Value = true;
                } 
            }            
            return certInfo;
        }

        /// <summary>
        /// Obtiene datatable para Excel
        /// </summary>
        /// <param name="tipoReporte">Tipo de Reporte a Generar</param>
        /// <param name="fechaIni">Fecha Inicial</param>
        /// <param name="fechaFin">Fecha Final</param>
        /// <param name="cliente">Cliente</param>
        /// <param name="libranza">Libranza</param>
        /// <param name="zonaID">Zona</param>
        /// <param name="ciudad">Ciudad</param>
        /// <param name="ConcesionarioID">Concecionario</param>
        /// <param name="asesor">Asesor</param>
        /// <param name="lineaCredi">LineaCredito</param>
        /// <param name="compCartera">CompradorCartera</param>
        /// <param name="pagaduria">Pagaduria</param>
        /// <param name="centroPago">CentroPago</param>
        /// <param name="agrup">Agrup</param>
        /// <param name="romp">Romp</param>
        /// <returns></returns>
        public DataTable Report_Cc_CarteraToExcel(int documentoID, byte? tipoReporte, DateTime? fechaIni, DateTime fechaFin, string cliente, int? libranza, string zona,
            string ciudad, string concesionario, string asesor, string lineaCred, string compCart, string pagaduria, string centroPago, byte? agrup, byte? romp, object filter)
        {
            try
            {
                DataTable result;
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                result = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_CarteraToExcel(documentoID, tipoReporte, fechaIni, fechaFin, cliente, libranza, zona, ciudad, concesionario, asesor, lineaCred, compCart, pagaduria, centroPago, agrup, romp,filter);

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_CarteraToExcel");
                throw ex;
            }
        }

        /// <summary>
        /// Reporte Datacrédito
        /// </summary>
        /// <param name="periodo">Periodo</param>
        /// <returns></returns>
        public DataTable Report_Cc_DataCredito(DateTime periodo, byte tipo)
        {
            try
            {
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                
                //Ruta documentos especiales
                string pathBasic = this.GetControlValue(AppControl.RutaDocumentosEspeciales);
                //Nombre del archivo
                string fileName = "\\" + this._moduloGlobal.seUsuario_GetUserByReplicaID(this.UserId).ID.Value + "_Datacredito.txt";
                string path = pathBasic + fileName;
               
                //Obtiene la info de datacredito
                DataTable results = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_DataCredito(periodo,tipo);
                #region Crea el archivo plano con los resultados en la ubicacion obtenida
                using (StreamWriter sw = File.CreateText(path))
                {
                    foreach (DataRow row in results.Rows)
                    {
                        if (!string.IsNullOrEmpty(row["Dato"].ToString()))
                            sw.WriteLine(row["Dato"].ToString().TrimEnd());
                    }
                } 
                #endregion

                return results;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_DataCredito");
                throw ex;
            }
        }

        #region Cartas de Venta y Preventa Cartera
        /// <summary>
        /// Funcion que llena el DTO de CesionCartea
        /// </summary>
        /// <param name="numeroDoc">Numero Doc de los datos a traer</param>
        /// <returns>List</returns>
        public List<DTO_ccCartas> Report_Cc_Cesion(int numeroDoc)
        {
            try
            {
                string docAutoriza, nombreAutoriza, terceroID;
                DTO_coTercero nombreTercero;
                List<DTO_ccCartas> cesion = new List<DTO_ccCartas>();
                DTO_ccCartas DatosCesion = new DTO_ccCartas();
                Dictionary<int, string> detalles = new Dictionary<int, string>();
                Dictionary<int, string> autoriza = new Dictionary<int, string>();
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                docAutoriza = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CedulaRepresentanteLegal);
                nombreAutoriza = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_NombreRepresentanteLegal);
                terceroID = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_TerceroXDefecto);
                nombreTercero = (DTO_coTercero)GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.coTercero, terceroID, true, false);
                autoriza.Add(1, docAutoriza);
                autoriza.Add(2, nombreAutoriza);
                autoriza.Add(3, terceroID);
                autoriza.Add(4, nombreTercero.Descriptivo.Value);

                DatosCesion.DetallesCesionCartera = this._dal_ReportesCartera.DAL_ReportesCartera_cc_Cesion(numeroDoc, true, autoriza);

                foreach (var item in DatosCesion.DetallesCesionCartera)
                {
                    if (!detalles.Contains(new KeyValuePair<int, string>(Convert.ToInt16(item.Libranza.Value), item.CedulaDeudor.Value)))
                        detalles.Add(Convert.ToInt16(item.Libranza.Value), item.CedulaDeudor.Value);
                }

                foreach (var item in detalles)
                {
                    DTO_ccCartas cartasTotal = new DTO_ccCartas();
                    cartasTotal.DetallesCesionCartera = new List<DTO_ccCesionCartera>();

                    int libranz;
                    string IDDeudor;

                    libranz = item.Key;
                    IDDeudor = item.Value;
                    cartasTotal.DetallesCesionCartera = DatosCesion.DetallesCesionCartera.Where(x => x.Libranza.Value == libranz && Convert.ToString(x.CedulaDeudor) == IDDeudor).ToList();

                    cesion.Add(cartasTotal);
                }

                return cesion;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_Cesion");
                throw ex;
            }
        }

        /// <summary>
        /// Carga el DTO con la informacion de la oferta
        /// </summary>
        /// <param name="numeroDoc">Consulta los creditos que estan siendo ofertados</param>
        /// <returns></returns>
        public List<DTO_ccCartas> Report_Cc_Oferta(int numeroDoc)
        {
            try
            {
                string docAutoriza, nombreAutoriza;
                List<DTO_ccCartas> Oferta = new List<DTO_ccCartas>();
                DTO_ccCartas ofertados = new DTO_ccCartas();
                Dictionary<int, string> autoriza = new Dictionary<int, string>();
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                docAutoriza = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_CedulaRepresentanteLegal);
                nombreAutoriza = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_NombreRepresentanteLegal);
                autoriza.Add(1, docAutoriza);
                autoriza.Add(2, nombreAutoriza);
                ofertados.DetallesCesionCartera = new List<DTO_ccCesionCartera>();
                ofertados.DetallesCesionCartera = this._dal_ReportesCartera.DAL_ReportesCartera_cc_Cesion(numeroDoc, false, autoriza);
                Oferta.Add(ofertados);

                return Oferta;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_Oferta");
                throw ex;
            }
        }

        /// <summary>
        /// Genera archivo plano para la pagaduria que tiene el centro de pago
        /// </summary>
        /// <param name="pagaduria">Filtra la pagaduria que se desea ver</param>
        /// <returns>Archivo plano de la pagaduria</returns>
        public DTO_TxResult ReportesCartera_Cc_ArchivosPlanos(string pagaduria)
        {
            //Varibales
            string str1 = this.GetCvsName(ExportType.Csv);
            string str2 = this.GetCvsName(ExportType.Txt);

            DTO_TxResult result = new DTO_TxResult();
            result.Result = ResultValue.OK;
            this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            try
            {
                List<DTO_ccArchivoPlanoXPagaduria> listaArchivos = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_ArchivosPlanos(pagaduria);
                CsvExport<DTO_ccArchivoPlanoXPagaduria> csv = new CsvExport<DTO_ccArchivoPlanoXPagaduria>(listaArchivos);

                if (csv != null)
                {
                    csv.Separator = ",";
                    csv.ExportToFile(str1, ExportType.Csv, true, string.Empty);
                    csv.ExportToFile(str2, ExportType.Txt, false, string.Empty);
                }
                else
                {
                    result.Result = ResultValue.NOK;
                    result.ResultMessage = DictionaryMessages.Err_Cc_GeneraArchivoPlano;
                }

                return result;
            }
            catch (Exception ex)
            {
                result.Result = ResultValue.NOK;
                result.ResultMessage = Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReportesCartera_Cc_ArchivosPlanos");
                return result;
            }
        }
        #endregion

        #region Incorporacion

        /// <summary>
        /// Funcion que consulta para llenar el DTO de Incoporacion
        /// </summary>
        /// <param name="numeroDoc">Numero doc que usa para buscar los datos</param>
        /// <param name="isLiquidacion">Revisa si esmliquidado por credito o  solicitud</param>
        /// <returns>Lista de DTO_ccIncorporaciones</returns>
        public List<DTO_ccCartas> Report_Cc_Incorporacion(int numeroDoc, bool isLiquidacion)
        {
            this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

            List<DTO_ccCartas> creditoIncorpora = new List<DTO_ccCartas>();
            DTO_ccCartas creditoIncorporados = new DTO_ccCartas();
            string representanteLegal = this.GetControlValueByCompany(ModulesPrefix.co, AppControl.co_NombreRepresentanteLegal);

            creditoIncorporados.DetallesIncorporaciones = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_Incorporacion(numeroDoc, isLiquidacion, representanteLegal);
            creditoIncorpora.Add(creditoIncorporados);

            return creditoIncorpora;
        }

        /// <summary>
        /// Funcion que se encarga de cargar el DTO
        /// </summary>
        /// <param name="FechaInicial">Filtro de Fecha Inicial desde que fecha se desean ver las Incoporaciones</param>
        /// <param name="FechaFinal">Filtro de Fecha Final hasta que fecha se desean ver las Incoporaciones</param>
        /// <param name="pagaduriaID">Pagaduria que se desea filtrar</param>
        /// <returns>Listado de DTO</returns>
        public List<DTO_CarteraTotales> ReportesCartera_Cc_PagaduriaIncorporacion(DateTime FechaInicial, DateTime FechaFinal, string pagaduriaID)
        {
            try
            {
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_CarteraTotales> result = new List<DTO_CarteraTotales>();
                DTO_CarteraTotales pagaIncopora = new DTO_CarteraTotales();
                pagaIncopora.DetallePagaduriaIncorporacion = new List<DTO_ccPagaduriaIncoporacion>();
                string pagaduriaCtrl = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoIncorporcionCREMILEJERC);

                pagaIncopora.DetallePagaduriaIncorporacion = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_PagaduriaIncorporacion(FechaInicial, FechaFinal, pagaduriaID, pagaduriaCtrl);
                List<string> distinct = (from c in pagaIncopora.DetallePagaduriaIncorporacion select c.CodigoPagaduria.Value).Distinct().ToList();

                if (distinct.Count == 0)
                {
                    DTO_CarteraTotales pag = new DTO_CarteraTotales();
                    DTO_ccPagaduriaIncoporacion deta = new DTO_ccPagaduriaIncoporacion();
                    deta.FechaInicio.Value = FechaInicial;
                    deta.FechaTerminacion.Value = FechaFinal;

                    if (!string.IsNullOrWhiteSpace(pagaduriaID))
                    {
                        DTO_ccPagaduria pagaduriaDTO = (DTO_ccPagaduria)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccPagaduria, pagaduriaID, true, false);
                        deta.CodigoPagaduria.Value = pagaduriaID;
                        deta.Pagaduria.Value = pagaduriaDTO.Descriptivo.Value;
                    }
                    else
                    {
                        deta.CodigoPagaduria.Value = string.Empty;
                        deta.Pagaduria.Value = string.Empty;
                    }

                    pag.DetallePagaduriaIncorporacion = new List<DTO_ccPagaduriaIncoporacion>();
                    pag.DetallePagaduriaIncorporacion.Add(deta);
                    result.Add(pag);
                }
                else
                {
                    foreach (var item in distinct)
                    {
                        DTO_CarteraTotales pag = new DTO_CarteraTotales();
                        pag.DetallePagaduriaIncorporacion = pagaIncopora.DetallePagaduriaIncorporacion.Where(x => x.CodigoPagaduria.Value == item).ToList();
                        result.Add(pag);
                    }
                }

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReportesCartera_Cc_PagaduriaIncorporacion");
                throw ex;
            }
        }

        /// <summary>
        /// Funcion que retorna el reporte de Pagaduria incorporaciones en Plantilla de exel
        /// </summary>
        /// <param name="FechaInicial">Filtro de Fecha Inicial desde que fecha se desean ver las Incoporaciones</param>
        /// <param name="FechaFinal">Filtro de Fecha Final hasta que fecha se desean ver las Incoporaciones</param>
        /// <param name="Pagaduria">Pagaduria que se desea filtrar</param>
        /// <returns></returns>
        public string ReportesCartera_Cc_PagaduriaIncorporacionPlantilla(DateTime FechaInicial, DateTime FechaFinal, string Pagaduria)
        {
            try
            {
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_ccPagaduriaIncoporacion> plantillaExcel = new List<DTO_ccPagaduriaIncoporacion>();
                string fileName;
                string str = this.GetCvsName(ExportType.Csv, out fileName);
                string pagaduriaCtrl = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_CodigoIncorporcionCREMILEJERC);

                plantillaExcel = new List<DTO_ccPagaduriaIncoporacion>();
                plantillaExcel = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_PagaduriaIncorporacion(FechaInicial, FechaFinal, Pagaduria, pagaduriaCtrl);

                if (plantillaExcel.Count > 0)
                {
                    CsvExport<DTO_ccPagaduriaIncoporacion> csv = new CsvExport<DTO_ccPagaduriaIncoporacion>(plantillaExcel);
                    csv.ExportToFile(str, ExportType.Csv, true, string.Empty);
                }
                else
                    fileName = string.Empty;

                return fileName;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReportesCartera_Cc_PagaduriaIncorporacionPlantilla");
                throw ex;
            }

        }

        #endregion

        #region Informe SIGCOOP

        /// <summary>
        /// Funcion que retorna listado de DTO para el formato F19
        /// </summary>
        /// <param name="Periodo">Periodo de consulta</param>
        /// <param name="Formato">Tipo de Formato que desea Exportar</param>
        /// <returns></returns>
        public DataTable ReportesCartera_Cc_InformeSIGCOOP(DateTime Periodo, string Formato)
        {
            try
            {
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return this._dal_ReportesCartera.DAL_ReportesCartera_Cc_InformeSIGCOOP(Periodo, Formato);
            }
            catch (Exception ex)
            {
                var exception = new Exception(DictionaryMessages.Err_GettingData, ex);
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, exception, this.UserId.ToString(), "ReportesCartera_Cc_InformeSIGCOOP");
                throw exception;
            }
        }

        #endregion

        #region Liquidacion Credito

        /// <summary>
        /// Funcion que carga la lista de los creditos liquidados
        /// </summary>
        /// <param name="libraza">Libranza a Liquidar</param>
        /// <returns></returns>
        public List<DTO_CarteraTotales> ReportesCartera_Cc_LiquidacionCredito(int libraza)
        {
            try
            {
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoComponentes = (DAL_ccCreditoComponentes)this.GetInstance(typeof(DAL_ccCreditoComponentes), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_CarteraTotales> liquida = new List<DTO_CarteraTotales>();
                DTO_CarteraTotales liquidaCredito = new DTO_CarteraTotales();
                liquidaCredito.DetalleLiquidaCredito = new List<DTO_ReportLiquidacionCredito>();
                List<DTO_ccCreditoComponentes> componentes = new List<DTO_ccCreditoComponentes>();
                int numDoc = 0;

                liquidaCredito.DetalleLiquidaCredito = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_LiquidacionCredito(libraza);
                numDoc = liquidaCredito.DetalleLiquidaCredito[0].NumeroDoc.Value.Value;

                if (numDoc != 0)
                {
                    //Suma el valor del interes del seguro
                    foreach (DTO_ReportLiquidacionCredito pp in  liquidaCredito.DetalleLiquidaCredito)
                        pp.VlrSeguro.Value += pp.VlrOtro1.Value;

                    componentes = this._dal_ccCreditoComponentes.DAL_ccCreditoComponentes_GetByNumeroDoc(numDoc).OrderBy(x=>x.ComponenteCarteraID.Value).ToList();
                    DTO_ReportLiquidacionCredito credi = new DTO_ReportLiquidacionCredito();
                    for (int i = 0; i < componentes.Count; i++)
                    {
                        DTO_ccCarteraComponente dtoComp = (DTO_ccCarteraComponente)this.GetMasterDTO(AppMasters.MasterType.Simple, AppMasters.ccCarteraComponente, componentes[i].ComponenteCarteraID.Value, true, true);
                        if (dtoComp != null && (dtoComp.TipoComponente.Value == (byte)TipoComponente.CapitalSolicitado || dtoComp.TipoComponente.Value == (byte)TipoComponente.ComponenteCuota))
                        {
                            if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponete1.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponete1.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo1.Value = componentes[i].Descripcion.Value;
                            }
                            else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente2.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente2.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo2.Value = componentes[i].Descripcion.Value;
                            }
                            else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente3.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente3.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo3.Value = componentes[i].Descripcion.Value;
                            }
                           else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente4.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente4.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo4.Value = componentes[i].Descripcion.Value;
                            }
                            else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente5.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente5.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo5.Value = componentes[i].Descripcion.Value;
                            } 
                        }
                        else 
                        {
                            #region Componentes Extras
                            if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponent6.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponent6.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo6.Value = componentes[i].Descripcion.Value;
                            }
                            else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente7.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente7.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo7.Value = componentes[i].Descripcion.Value;
                            }
                            else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente8.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente8.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo8.Value = componentes[i].Descripcion.Value;
                            }
                            else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente9.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente9.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo9.Value = componentes[i].Descripcion.Value;
                            }
                            else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente10.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente10.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo10.Value = componentes[i].Descripcion.Value;
                            }
                            else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente11.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente11.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo11.Value = componentes[i].Descripcion.Value;
                            }
                            else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente12.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente12.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo12.Value = componentes[i].Descripcion.Value;
                            }
                            else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente13.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente13.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo13.Value = componentes[i].Descripcion.Value;
                            }
                            else if (!liquidaCredito.DetalleLiquidaCredito[0].vlrComponente14.Value.HasValue)
                            {
                                liquidaCredito.DetalleLiquidaCredito[0].vlrComponente14.Value = componentes[i].TotalValor.Value.Value;
                                liquidaCredito.DetalleLiquidaCredito[0].nombreCompo14.Value = componentes[i].Descripcion.Value;
                            } 
                            #endregion
                        }    
                    }
                    liquida.Add(liquidaCredito);
                }

                return liquida;

            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReportesCartera_Cc_LiquidacionCredito");
                throw ex;
            }


        }

        #endregion

        #region Libranzas

        /// <summary>
        /// Carga el DTO con la informacion de las libranzas
        /// </summary>
        /// <param name="numeroDoc">Consulta los creditos que estan siendo ofertados</param>
        /// <returns></returns>
        public List<DTO_CarteraTotales> Report_Cc_Libranzas(DateTime Periodo, DateTime PeriodoFin, string Cliente, string Libranza, string Asesor, string Pagaduria)
        {
            List<DTO_CarteraTotales> ListaDeError = new List<DTO_CarteraTotales>();
            try
            {
                List<DTO_CarteraTotales> Libranzas = new List<DTO_CarteraTotales>();
                DTO_CarteraTotales libranzas = new DTO_CarteraTotales();
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);


                libranzas.DetalleLibranzas = new List<DTO_ReportLibranzas>();
                libranzas.DetalleLibranzas = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_Libranzas(Periodo, PeriodoFin, Cliente, Libranza, Asesor, Pagaduria);

                Libranzas.Add(libranzas);

                return Libranzas;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_Oferta");
                return ListaDeError;
            }
        }

        /// <summary>
        /// Carga el DTO para generar el excel con los comprobante
        /// </summary>
        /// <param name="año">Año que se desea ver los comprobantes</param>
        /// <param name="mes">Mes Q se desea ver</param>
        /// <param name="comprobanteID">Filtra los comprobantes q se desean ver</param>
        /// <param name="libro">Libro con el cual se va filtrar</param>
        /// <param name="comprobanteInicial">Numero comprobante Inicial (Si solo si se va a filtrar por un comprobante en especifico)</param>
        /// <param name="comprobanteFinal">Numero comprobante Final (Si solo si se va a filtrar por un comprobante en especifico)</param>
        /// <returns></returns>
        public DataTable ReportesCartera_PlantillaExcelLibranzas(DateTime Periodo, DateTime PeriodoFin, string Cliente, string Libranza, string Asesor, string Pagaduria)
        {
            try
            {

                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                return this._dal_ReportesCartera.DAL_ReportesCartera_Cc_LibranzasExcel(Periodo, PeriodoFin, Cliente, Libranza, Asesor, Pagaduria);

            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReportesCartera_PlantillaExcelLibranzas");
                throw ex;
            }
        }

        /// <summary>
        /// Funcion que carga una lista con información de los creditos segun filtro
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="cliente"></param>
        /// <param name="libranza"></param>
        /// <param name="zonaID"></param>
        /// <param name="ciudad"></param>
        /// <param name="pagaduria"></param>
        /// <param name="centroPagoID"></param>
        /// <param name="asesor"></param>
        /// <param name="lineaCredi"></param>
        /// <param name="compCartera"></param>
        /// <returns>Lsta de Creditos</returns>
        public DataTable Report_Cc_AnalisisPagosExcel(byte tipoReporte, DateTime? fechaIni, DateTime fechaFin, string cliente, int? libranza, string zonaID, string ciudad, string concesionario, string asesor, string lineaCredi, string compCartera)
        {
            try
            {
                List<DTO_ccAnalisisPagosReport> pagos = new List<DTO_ccAnalisisPagosReport>();
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                string compCap = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string compINT = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string compSEG = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string compINTS = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresSeguro);
                string compMOR = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteMora);
                string compPRJ = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponentePrejuridico);
                string compSFV = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSaldosAFavor);

                return this._dal_ReportesCartera.DAL_ReportesCartera_Cc_AnalisisPagosExcel(tipoReporte, cliente, libranza, compCap, compINT, compSEG, compINTS, compMOR, compPRJ, compSFV);

            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_AnalisisPagosExcel");
                throw ex;
            }
        }

        #endregion

        #region Referenciacion

        /// <summary>
        /// Carga el listado de los creditos referenciados
        /// </summary>
        /// <param name="libranza">Numero de la libranza que se desea ver</param>
        /// <param name="cliente">Cliente que se desea ver</param>
        /// <param name="FechaRef">Fecha de referenciacion de las libranzzs</param>
        /// <returns>Listado de DTO con las libranzas referenciadas</returns>
        public List<DTO_CarteraTotales> ReportesCartera_Cc_Referenciacion(string libranza, string cliente, DateTime FechaRef, bool _llamadaCodEfec)
        {
            try
            {
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._moduloGlobal = (ModuloGlobal)base.GetInstance(typeof(ModuloGlobal), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                List<DTO_CarteraTotales> result = new List<DTO_CarteraTotales>();
                DTO_CarteraTotales refe = new DTO_CarteraTotales();
                refe.DetalleRefenciacion = new List<DTO_ccReferenciacion>();

                List<string> actividades = new List<string>();
                actividades = this._moduloGlobal.glActividadFlujo_GetActividadesByDocumentID(AppDocuments.Referenciacion);
                string actRefenciacion = actividades[0];

                refe.DetalleRefenciacion = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_Referenciacion(libranza, cliente, actRefenciacion, FechaRef, _llamadaCodEfec);
                List<string> distint = (from c in refe.DetalleRefenciacion select c.ClienteID.Value).Distinct().ToList();

                foreach (var item in distint)
                {
                    DTO_CarteraTotales referenciacion = new DTO_CarteraTotales();
                    referenciacion.DetalleRefenciacion = refe.DetalleRefenciacion.Where(x => x.ClienteID.Value == item && x.PersonaConsulta.Value == x.Nombre.Value).ToList();
                    referenciacion.DetalleRefenciacion.GroupBy(x => x.TipoReferencia);
                    result.Add(referenciacion);
                }

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReportesCartera_Cc_Referenciacion");
                throw ex;
            }
        }

        #endregion

        #region Saldos

        /// <summary>
        /// Funcion que carga una lista con información de los saldos por componente, libranza y cliente
        /// </summary>
        /// <param name="documentID">Documento del filtro ej 161</param>
        /// <param name="periodo">Periodo a consultar</param>
        /// <param name="numeroDoc">NumeroDoc del glDocumentoControl</param>
        /// <param name="compsIDs">Lista de identificadores de los componentes</param>
        /// <param name="compsDesc">Lista de valores de lo componentes</param>
        /// <returns>Lista de detalles por componente</returns>
        public List<DTO_CarteraTotales> Report_Cc_Saldos(DateTime periodo, string cliente, string pagaduria, string lineaCredi, string compCartera, string asesor, string tipoCartera, bool isSaldoFavor)
        {
            try
            {
                List<DTO_CarteraTotales> saldo = new List<DTO_CarteraTotales>();
                DTO_CarteraTotales saldos = new DTO_CarteraTotales();
                saldos.DetallesSaldos = new List<DTO_ccSaldos>();
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                string compCapital = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteCapital);
                string compInteres = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteInteresCorriente);
                string compSeguro = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSeguroVida);
                string comSaldosFavor = this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_ComponenteSaldosAFavor);

                if (!isSaldoFavor)
                    saldos.DetallesSaldos = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_SaldosCartera(periodo, cliente, pagaduria, lineaCredi, compCartera,
                                            asesor, tipoCartera, compCapital, compInteres, compSeguro);
                else
                {
                    saldos.DetallesSaldos = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_SaldosFavor(periodo, cliente, pagaduria, lineaCredi, compCartera,
                                            asesor, tipoCartera, comSaldosFavor, isSaldoFavor);
                    saldos.DetallesSaldos = saldos.DetallesSaldos.FindAll(x => x.SaldoAFavor.Value > 0).ToList();                   
                }

                saldo.Add(saldos);
                return saldo;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_Saldos");
                throw ex;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="perido"></param>
        /// <param name="cliente"></param>
        /// <param name="pagaduria"></param>
        /// <param name="lineaCredi"></param>
        /// <param name="compCartera"></param>
        /// <param name="asesor"></param>
        /// <param name="plazo"></param>
        /// <returns></returns>
        public List<DTO_CarteraTotales> Report_Cc_SaldosMora(DateTime perido, string cliente, string pagaduria, string lineaCredi, string compCartera, string asesor, int plazo, string tipoCartera)
        {
            try
            {
                List<DTO_CarteraTotales> saldo = new List<DTO_CarteraTotales>();
                DTO_CarteraTotales saldos = new DTO_CarteraTotales();
                saldos.DetalleSaldoMora = new List<DTO_ccSaldosMora>();
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                this._dal_ccCreditoDocu = (DAL_ccCreditoDocu)this.GetInstance(typeof(DAL_ccCreditoDocu), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                saldos.DetalleSaldoMora = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_SaldosMora(perido, cliente, pagaduria, lineaCredi, compCartera, asesor, plazo, tipoCartera);
                saldos.DetalleSaldoMora = saldos.DetalleSaldoMora.FindAll(x => x.SaldoMoraTotal.Value > 0).ToList();
                saldo.Add(saldos);

                return saldo;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_SaldosMora");
                throw ex;
            }
        }

        /// <summary>
        /// CARTERA EN MORA
        /// </summary>
        /// <param name="perido"></param>
        /// <param name="cliente"></param>
        /// <param name="pagaduria"></param>
        /// <param name="lineaCredi"></param>
        /// <param name="compCartera"></param>
        /// <param name="asesor"></param>
        /// <param name="plazo"></param>
        /// <returns></returns>
        public List<DTO_CarteraTotales> Report_Cc_CarteraMora(DateTime periodo, DateTime fechaIni, DateTime fechaFin, string comprador, string oferta, string libranza, bool isResumida, string orden)
        {
            try
            {
                List<DTO_CarteraTotales> result = new List<DTO_CarteraTotales>();
                List<DTO_CarteraTotales> resumen = new List<DTO_CarteraTotales>();
                DTO_CarteraTotales resumenTotal = new DTO_CarteraTotales();
                resumenTotal.DetalleVentaCartera = new List<DTO_ccVentaCartera>();
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));

                resumenTotal.DetalleVentaCartera = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_VentaCartera(periodo, fechaIni, fechaFin, comprador, oferta, libranza, isResumida);

                foreach (var item in resumenTotal.DetalleVentaCartera)
                {
                    item.Detalle = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_VentaCarteraVista(item.NumeroDoc.Value.Value);
                }
                resumen.Add(resumenTotal);

                List<List<string>> allDistinct = new List<List<string>>();
                List<string> distinc = new List<string>();
                List<string> finalDistinct = new List<string>();
                for (int i = 0; i < resumenTotal.DetalleVentaCartera.Count; i++)
                {
                    for (int j = 0; j < resumenTotal.DetalleVentaCartera[i].Detalle.Count; j++)
                    {
                        distinc = new List<string>();
                        distinc = (from c in resumenTotal.DetalleVentaCartera select c.Detalle[j].Categoria.Value).Distinct().ToList();
                        allDistinct.Add(distinc);

                    }
                    finalDistinct = (from c in allDistinct select c[i]).Distinct().ToList();
                }
                //allDistinct = new List<List<string>>();
                //allDistinct.Add(new List<string>() {"A","B","C","D","E","E1"});
                //List<string> distinc = (from c in resumenTotal.DetalleVentaCartera select c.Detalle[0].Categoria.Value).Distinct().ToList();

                int countClase = 0;

                foreach (var item in finalDistinct)
                {
                    DTO_CarteraTotales carteraMora = new DTO_CarteraTotales();
                    carteraMora.DetalleVentaCartera = new List<DTO_ccVentaCartera>();
                    carteraMora.DetalleVentaCartera.Add(new DTO_ccVentaCartera());
                    foreach (var jItem in resumenTotal.DetalleVentaCartera)
                    {
                        if (orden.Equals("Saldo"))
                        {
                            carteraMora.DetalleVentaCartera[0].Detalle = jItem.Detalle.Where(x => x.Categoria.Value == item).OrderByDescending(
                            x => x.SdoMora.Value).ToList();
                        }
                        if (orden.Equals("Libranza"))
                        {
                            carteraMora.DetalleVentaCartera[0].Detalle = jItem.Detalle.Where(x => x.Categoria.Value == item).OrderBy(
                            x => x.Libranza.Value).ToList();
                        }
                        if (orden.Equals("Cedula"))
                        {
                            carteraMora.DetalleVentaCartera[0].Detalle = jItem.Detalle.Where(x => x.Categoria.Value == item).OrderBy(
                            x => x.ClienteID.Value).ToList();
                        }
                        if (orden.Equals("Nombre"))
                        {
                            carteraMora.DetalleVentaCartera[0].Detalle = jItem.Detalle.Where(x => x.Categoria.Value == item).OrderBy(
                            x => x.Descriptivo.Value).ToList();
                        }
                    }
                    //carteraMora.DetalleVentaCartera = resumenTotal.DetalleVentaCartera.Where(x => x.Detalle.Where(y => y.Categoria.Value == item[0]).ToString()==item[0]).ToList();
                    countClase++;
                    result.Add(carteraMora);
                }

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReportesCartera_VentaCartera");
                throw ex;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Lista"></param>
        /// <param name="Orden"></param>
        /// <returns></returns>
        private List<DTO_ccVentaCarteraVista> SortBY(List<DTO_ccVentaCarteraVista> Lista, string Orden)
        {
            List<DTO_ccVentaCarteraVista> endList = new List<DTO_ccVentaCarteraVista>();
            if (Orden.Equals("Saldo"))
            {

            }
            if (Orden.Equals("Libranza"))
            {
                endList = (List<DTO_ccVentaCarteraVista>)Lista.OrderBy(x => x.Libranza).ToList();
            }
            if (Orden.Equals("Cedula"))
            {
                endList = (List<DTO_ccVentaCarteraVista>)Lista.OrderBy(x => x.ClienteID).ToList();
            }
            if (Orden.Equals("Nombre"))
            {
                endList = (List<DTO_ccVentaCarteraVista>)Lista.OrderBy(x => x.Descriptivo).ToList();
            }
            return endList;
        }

        /// <summary>
        /// Funcion que carga una lista con información de los saldos por componente, libranza y cliente
        /// </summary>
        /// <param name="documentID">Documento del filtro ej 161</param>
        /// <param name="periodo">Periodo a consultar</param>
        /// <param name="numeroDoc">NumeroDoc del glDocumentoControl</param>
        /// <param name="compsIDs">Lista de identificadores de los componentes</param>
        /// <param name="compsDesc">Lista de valores de lo componentes</param>
        /// <returns>Lista de detalles por componente</returns>
        public object Report_Cc_SaldosNuevo(byte tipoReporte, DateTime? fechaIni, DateTime fechaFin, string cliente, int? libranza, string zonaID, string ciudad, string concesionario, string asesor, string lineaCredi, string compCartera, byte agrupamiento, byte romp,ExportFormatType formatType)
        {
            try
            {
                object result;
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                if(formatType == ExportFormatType.pdf)
                    result = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_SaldosNuevo(tipoReporte, fechaIni, fechaFin, cliente, libranza, zonaID, ciudad, concesionario, asesor, lineaCredi, compCartera, agrupamiento, romp);
                else
                    result = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_SaldosNuevoExcel(tipoReporte, fechaIni, fechaFin, cliente, libranza, zonaID, ciudad, concesionario, asesor, lineaCredi, compCartera, agrupamiento, romp);

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Report_Cc_SaldosNuevo");
                throw ex;
            }
        }

        #endregion

        #region Crédito
        public DataTable Reports_cc_CreditoXLS(string Credito)
        {
            DataTable result = new DataTable();
            try
            {
                // Seleccionar el archivo a Exportar
                switch (Credito)
                {
                    case "22":
                        this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                        result = this._dal_ReportesCartera.DAL_Reports_cc_CreditoXLS(Credito);
                        break;
                    case "11":
                        this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                        result = this._dal_ReportesCartera.DAL_Reports_cc_DescripcionComponentesXLS(Credito);
                        break;
                }
                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "Reports_cc_CreditoXLS");
                throw ex;
            }
        } 
        #endregion

        #region Solicitudes

        /// <summary>
        /// Funcion q carga el Detalle de las solicitudes
        /// </summary>
        /// <param name="fechaIncial">Fecha en que inicia la consulta</param>
        /// <param name="fechaFinal">Fecha en que termina la consulta</param>
        /// <param name="cliente">Cliente que se desea ver</param>
        /// <param name="libranza">Número de la libranza a Consultar</param>
        /// <param name="asesor">Asesor que se desea ver</param>
        /// <returns>Lista de Solicitudes</returns>
        public List<DTO_CarteraTotales> ReportesCartera_Cc_Solicitudes(DateTime fechaIncial, DateTime fechaFinal, string cliente, string libranza, string asesor, string estado)
        {
            try
            {
                List<DTO_CarteraTotales> solicitud = new List<DTO_CarteraTotales>();
                DTO_CarteraTotales solicitudes = new DTO_CarteraTotales();
                solicitudes.DetalleSolicitudes = new List<DTO_ccSolicitudes>();
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                solicitudes.DetalleSolicitudes = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_Solicitudes(fechaIncial, fechaFinal, cliente, libranza, asesor, estado);

                solicitudes.PeriodoFinal = fechaFinal;
                solicitudes.PeriodoIncial = fechaIncial;
                solicitud.Add(solicitudes);

                return solicitud;

            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReportesCartera_Solicitudes");
                throw ex;
            }
        }

        #endregion

        #region Otras Consulta

        #endregion

        #region Venta Cartera

        /// <summary>
        /// Carga la info para los repotes de la venta de Cartera Detallada y resumida
        /// </summary>
        /// <param name="fechaIni">Mes inicial el cual va a mostrar los datos</param>
        /// <param name="fechaFin">Mes final en que se va a mostrar los datos</param>
        /// <param name="comprador">Tipo de comprador por el cual se desea filtrar</param>
        /// <param name="oferta">Tipo de oferta por el cual se desea filtrar</param>
        /// <param name="libranza">Numero de la libranza por el cual se desea Filtrar</param>
        /// <param name="isResumida">Filtra el reportes (True) para Resumido (False) para Detallado</param>
        /// <returns>Lista de datos para reporte</returns>
        public List<DTO_CarteraTotales> ReportesCartera_VentaCartera(DateTime fechaIni, DateTime fechaFin, string comprador, string oferta, string libranza, bool isResumida)
        {
            try
            {
                List<DTO_CarteraTotales> resumen = new List<DTO_CarteraTotales>();
                DTO_CarteraTotales resumenTotal = new DTO_CarteraTotales();
                resumenTotal.DetalleVentaCartera = new List<DTO_ccVentaCartera>();
                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);

                DateTime periodo = Convert.ToDateTime(this.GetControlValueByCompany(ModulesPrefix.cc, AppControl.cc_Periodo));

                resumenTotal.DetalleVentaCartera = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_VentaCartera(periodo, fechaIni, fechaFin, comprador, oferta, libranza, isResumida);

                foreach (var item in resumenTotal.DetalleVentaCartera)
                {
                    item.Detalle = this._dal_ReportesCartera.DAL_ReportesCartera_Cc_VentaCarteraVista(item.NumeroDoc.Value.Value);
                }
                resumen.Add(resumenTotal);

                return resumen;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ReportesCartera_VentaCartera");
                throw ex;
            }
        }

        #endregion

        #region Preventa
        public DataTable ExportExcel_cc_GetVistaCesionesByPreventa(List<int> numeroDocs)
        {
            try
            {
                DataTable result = new  DataTable();

                this._dal_ReportesCartera = (DAL_ReportesCartera)this.GetInstance(typeof(DAL_ReportesCartera), this._mySqlConnection, this._mySqlConnectionTx, this.Empresa, this.UserId, this.loggerConnectionStr);
                result = this._dal_ReportesCartera.DAL_ExportExcel_cc_GetVistaCesionesByPreventa(numeroDocs);

                return result;
            }
            catch (Exception ex)
            {
                Mentor_Exception.LogException_Local(this.loggerConnectionStr, ex, this.UserId.ToString(), "ExportExcel_cc_GetVistaCesionesByPreventa");
                throw ex;
            }
        }
        #endregion

        #endregion

    }//clase moduloCartera
}//NameSpace

